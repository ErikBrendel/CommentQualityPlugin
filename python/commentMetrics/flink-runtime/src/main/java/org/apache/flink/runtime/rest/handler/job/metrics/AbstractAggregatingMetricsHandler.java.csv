# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractAggregatingMetricsHandler -> private static Collection<String> getAvailableMetrics(Collection<? extends MetricStore.ComponentMetricStore> stores);1523906274;Returns a JSON string containing a list of all available metrics in the given stores. Effectively this method maps_the union of all key-sets to JSON.__@param stores metrics_@return JSON string containing a list of all available metrics;private static Collection<String> getAvailableMetrics(Collection<? extends MetricStore.ComponentMetricStore> stores) {_		Set<String> uniqueMetrics = new HashSet<>(32)__		for (MetricStore.ComponentMetricStore store : stores) {_			uniqueMetrics.addAll(store.metrics.keySet())__		}_		return uniqueMetrics__	};returns,a,json,string,containing,a,list,of,all,available,metrics,in,the,given,stores,effectively,this,method,maps,the,union,of,all,key,sets,to,json,param,stores,metrics,return,json,string,containing,a,list,of,all,available,metrics;private,static,collection,string,get,available,metrics,collection,extends,metric,store,component,metric,store,stores,set,string,unique,metrics,new,hash,set,32,for,metric,store,component,metric,store,store,stores,unique,metrics,add,all,store,metrics,key,set,return,unique,metrics
AbstractAggregatingMetricsHandler -> private static Collection<String> getAvailableMetrics(Collection<? extends MetricStore.ComponentMetricStore> stores);1545326469;Returns a JSON string containing a list of all available metrics in the given stores. Effectively this method maps_the union of all key-sets to JSON.__@param stores metrics_@return JSON string containing a list of all available metrics;private static Collection<String> getAvailableMetrics(Collection<? extends MetricStore.ComponentMetricStore> stores) {_		Set<String> uniqueMetrics = new HashSet<>(32)__		for (MetricStore.ComponentMetricStore store : stores) {_			uniqueMetrics.addAll(store.metrics.keySet())__		}_		return uniqueMetrics__	};returns,a,json,string,containing,a,list,of,all,available,metrics,in,the,given,stores,effectively,this,method,maps,the,union,of,all,key,sets,to,json,param,stores,metrics,return,json,string,containing,a,list,of,all,available,metrics;private,static,collection,string,get,available,metrics,collection,extends,metric,store,component,metric,store,stores,set,string,unique,metrics,new,hash,set,32,for,metric,store,component,metric,store,store,stores,unique,metrics,add,all,store,metrics,key,set,return,unique,metrics
AbstractAggregatingMetricsHandler -> private static Collection<String> getAvailableMetrics(Collection<? extends MetricStore.ComponentMetricStore> stores);1547675340;Returns a JSON string containing a list of all available metrics in the given stores. Effectively this method maps_the union of all key-sets to JSON.__@param stores metrics_@return JSON string containing a list of all available metrics;private static Collection<String> getAvailableMetrics(Collection<? extends MetricStore.ComponentMetricStore> stores) {_		Set<String> uniqueMetrics = new HashSet<>(32)__		for (MetricStore.ComponentMetricStore store : stores) {_			uniqueMetrics.addAll(store.metrics.keySet())__		}_		return uniqueMetrics__	};returns,a,json,string,containing,a,list,of,all,available,metrics,in,the,given,stores,effectively,this,method,maps,the,union,of,all,key,sets,to,json,param,stores,metrics,return,json,string,containing,a,list,of,all,available,metrics;private,static,collection,string,get,available,metrics,collection,extends,metric,store,component,metric,store,stores,set,string,unique,metrics,new,hash,set,32,for,metric,store,component,metric,store,store,stores,unique,metrics,add,all,store,metrics,key,set,return,unique,metrics
AbstractAggregatingMetricsHandler -> private AggregatedMetricsResponseBody getAggregatedMetricValues( 			Collection<? extends MetricStore.ComponentMetricStore> stores, 			List<String> requestedMetrics, 			MetricAccumulatorFactory requestedAggregationsFactories);1523906274;Extracts and aggregates all requested metrics from the given metric stores, and maps the result to a JSON string.__@param stores available metrics_@param requestedMetrics ids of requested metrics_@param requestedAggregationsFactories requested aggregations_@return JSON string containing the requested metrics;private AggregatedMetricsResponseBody getAggregatedMetricValues(_			Collection<? extends MetricStore.ComponentMetricStore> stores,_			List<String> requestedMetrics,_			MetricAccumulatorFactory requestedAggregationsFactories) {__		Collection<AggregatedMetric> aggregatedMetrics = new ArrayList<>(requestedMetrics.size())__		for (String requestedMetric : requestedMetrics) {_			final Collection<Double> values = new ArrayList<>(stores.size())__			try {_				for (MetricStore.ComponentMetricStore store : stores) {_					String stringValue = store.metrics.get(requestedMetric)__					if (stringValue != null) {_						values.add(Double.valueOf(stringValue))__					}_				}_			} catch (NumberFormatException nfe) {_				log.warn("The metric {} is not numeric and can't be aggregated.", requestedMetric, nfe)__				_				continue__			}_			if (!values.isEmpty()) {__				Iterator<Double> valuesIterator = values.iterator()__				MetricAccumulator acc = requestedAggregationsFactories.get(requestedMetric, valuesIterator.next())__				valuesIterator.forEachRemaining(acc::add)___				aggregatedMetrics.add(acc.get())__			} else {_				return new AggregatedMetricsResponseBody(Collections.emptyList())__			}_		}_		return new AggregatedMetricsResponseBody(aggregatedMetrics)__	};extracts,and,aggregates,all,requested,metrics,from,the,given,metric,stores,and,maps,the,result,to,a,json,string,param,stores,available,metrics,param,requested,metrics,ids,of,requested,metrics,param,requested,aggregations,factories,requested,aggregations,return,json,string,containing,the,requested,metrics;private,aggregated,metrics,response,body,get,aggregated,metric,values,collection,extends,metric,store,component,metric,store,stores,list,string,requested,metrics,metric,accumulator,factory,requested,aggregations,factories,collection,aggregated,metric,aggregated,metrics,new,array,list,requested,metrics,size,for,string,requested,metric,requested,metrics,final,collection,double,values,new,array,list,stores,size,try,for,metric,store,component,metric,store,store,stores,string,string,value,store,metrics,get,requested,metric,if,string,value,null,values,add,double,value,of,string,value,catch,number,format,exception,nfe,log,warn,the,metric,is,not,numeric,and,can,t,be,aggregated,requested,metric,nfe,continue,if,values,is,empty,iterator,double,values,iterator,values,iterator,metric,accumulator,acc,requested,aggregations,factories,get,requested,metric,values,iterator,next,values,iterator,for,each,remaining,acc,add,aggregated,metrics,add,acc,get,else,return,new,aggregated,metrics,response,body,collections,empty,list,return,new,aggregated,metrics,response,body,aggregated,metrics
AbstractAggregatingMetricsHandler -> private AggregatedMetricsResponseBody getAggregatedMetricValues( 			Collection<? extends MetricStore.ComponentMetricStore> stores, 			List<String> requestedMetrics, 			MetricAccumulatorFactory requestedAggregationsFactories);1545326469;Extracts and aggregates all requested metrics from the given metric stores, and maps the result to a JSON string.__@param stores available metrics_@param requestedMetrics ids of requested metrics_@param requestedAggregationsFactories requested aggregations_@return JSON string containing the requested metrics;private AggregatedMetricsResponseBody getAggregatedMetricValues(_			Collection<? extends MetricStore.ComponentMetricStore> stores,_			List<String> requestedMetrics,_			MetricAccumulatorFactory requestedAggregationsFactories) {__		Collection<AggregatedMetric> aggregatedMetrics = new ArrayList<>(requestedMetrics.size())__		for (String requestedMetric : requestedMetrics) {_			final Collection<Double> values = new ArrayList<>(stores.size())__			try {_				for (MetricStore.ComponentMetricStore store : stores) {_					String stringValue = store.metrics.get(requestedMetric)__					if (stringValue != null) {_						values.add(Double.valueOf(stringValue))__					}_				}_			} catch (NumberFormatException nfe) {_				log.warn("The metric {} is not numeric and can't be aggregated.", requestedMetric, nfe)__				_				continue__			}_			if (!values.isEmpty()) {__				Iterator<Double> valuesIterator = values.iterator()__				MetricAccumulator acc = requestedAggregationsFactories.get(requestedMetric, valuesIterator.next())__				valuesIterator.forEachRemaining(acc::add)___				aggregatedMetrics.add(acc.get())__			} else {_				return new AggregatedMetricsResponseBody(Collections.emptyList())__			}_		}_		return new AggregatedMetricsResponseBody(aggregatedMetrics)__	};extracts,and,aggregates,all,requested,metrics,from,the,given,metric,stores,and,maps,the,result,to,a,json,string,param,stores,available,metrics,param,requested,metrics,ids,of,requested,metrics,param,requested,aggregations,factories,requested,aggregations,return,json,string,containing,the,requested,metrics;private,aggregated,metrics,response,body,get,aggregated,metric,values,collection,extends,metric,store,component,metric,store,stores,list,string,requested,metrics,metric,accumulator,factory,requested,aggregations,factories,collection,aggregated,metric,aggregated,metrics,new,array,list,requested,metrics,size,for,string,requested,metric,requested,metrics,final,collection,double,values,new,array,list,stores,size,try,for,metric,store,component,metric,store,store,stores,string,string,value,store,metrics,get,requested,metric,if,string,value,null,values,add,double,value,of,string,value,catch,number,format,exception,nfe,log,warn,the,metric,is,not,numeric,and,can,t,be,aggregated,requested,metric,nfe,continue,if,values,is,empty,iterator,double,values,iterator,values,iterator,metric,accumulator,acc,requested,aggregations,factories,get,requested,metric,values,iterator,next,values,iterator,for,each,remaining,acc,add,aggregated,metrics,add,acc,get,else,return,new,aggregated,metrics,response,body,collections,empty,list,return,new,aggregated,metrics,response,body,aggregated,metrics
AbstractAggregatingMetricsHandler -> private AggregatedMetricsResponseBody getAggregatedMetricValues( 			Collection<? extends MetricStore.ComponentMetricStore> stores, 			List<String> requestedMetrics, 			MetricAccumulatorFactory requestedAggregationsFactories);1547675340;Extracts and aggregates all requested metrics from the given metric stores, and maps the result to a JSON string.__@param stores available metrics_@param requestedMetrics ids of requested metrics_@param requestedAggregationsFactories requested aggregations_@return JSON string containing the requested metrics;private AggregatedMetricsResponseBody getAggregatedMetricValues(_			Collection<? extends MetricStore.ComponentMetricStore> stores,_			List<String> requestedMetrics,_			MetricAccumulatorFactory requestedAggregationsFactories) {__		Collection<AggregatedMetric> aggregatedMetrics = new ArrayList<>(requestedMetrics.size())__		for (String requestedMetric : requestedMetrics) {_			final Collection<Double> values = new ArrayList<>(stores.size())__			try {_				for (MetricStore.ComponentMetricStore store : stores) {_					String stringValue = store.metrics.get(requestedMetric)__					if (stringValue != null) {_						values.add(Double.valueOf(stringValue))__					}_				}_			} catch (NumberFormatException nfe) {_				log.warn("The metric {} is not numeric and can't be aggregated.", requestedMetric, nfe)__				_				continue__			}_			if (!values.isEmpty()) {__				Iterator<Double> valuesIterator = values.iterator()__				MetricAccumulator acc = requestedAggregationsFactories.get(requestedMetric, valuesIterator.next())__				valuesIterator.forEachRemaining(acc::add)___				aggregatedMetrics.add(acc.get())__			} else {_				return new AggregatedMetricsResponseBody(Collections.emptyList())__			}_		}_		return new AggregatedMetricsResponseBody(aggregatedMetrics)__	};extracts,and,aggregates,all,requested,metrics,from,the,given,metric,stores,and,maps,the,result,to,a,json,string,param,stores,available,metrics,param,requested,metrics,ids,of,requested,metrics,param,requested,aggregations,factories,requested,aggregations,return,json,string,containing,the,requested,metrics;private,aggregated,metrics,response,body,get,aggregated,metric,values,collection,extends,metric,store,component,metric,store,stores,list,string,requested,metrics,metric,accumulator,factory,requested,aggregations,factories,collection,aggregated,metric,aggregated,metrics,new,array,list,requested,metrics,size,for,string,requested,metric,requested,metrics,final,collection,double,values,new,array,list,stores,size,try,for,metric,store,component,metric,store,store,stores,string,string,value,store,metrics,get,requested,metric,if,string,value,null,values,add,double,value,of,string,value,catch,number,format,exception,nfe,log,warn,the,metric,is,not,numeric,and,can,t,be,aggregated,requested,metric,nfe,continue,if,values,is,empty,iterator,double,values,iterator,values,iterator,metric,accumulator,acc,requested,aggregations,factories,get,requested,metric,values,iterator,next,values,iterator,for,each,remaining,acc,add,aggregated,metrics,add,acc,get,else,return,new,aggregated,metrics,response,body,collections,empty,list,return,new,aggregated,metrics,response,body,aggregated,metrics
