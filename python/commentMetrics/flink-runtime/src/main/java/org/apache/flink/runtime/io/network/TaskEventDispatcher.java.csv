# id;timestamp;commentText;codeText;commentWords;codeWords
TaskEventDispatcher -> public void unregisterPartition(ResultPartitionID partitionId);1504023840;Removes the given partition from listening to incoming task events, thus forbidding calls to_{@link #subscribeToEvent(ResultPartitionID, EventListener, Class)}.__@param partitionId_the partition ID;public void unregisterPartition(ResultPartitionID partitionId) {_		checkNotNull(partitionId)___		synchronized (registeredHandlers) {_			LOG.debug("unregistering {}", partitionId)__			_			_			_			registeredHandlers.remove(partitionId)__		}_	};removes,the,given,partition,from,listening,to,incoming,task,events,thus,forbidding,calls,to,link,subscribe,to,event,result,partition,id,event,listener,class,param,partition,id,the,partition,id;public,void,unregister,partition,result,partition,id,partition,id,check,not,null,partition,id,synchronized,registered,handlers,log,debug,unregistering,partition,id,registered,handlers,remove,partition,id
TaskEventDispatcher -> public void unregisterPartition(ResultPartitionID partitionId);1519997900;Removes the given partition from listening to incoming task events, thus forbidding calls to_{@link #subscribeToEvent(ResultPartitionID, EventListener, Class)}.__@param partitionId_the partition ID;public void unregisterPartition(ResultPartitionID partitionId) {_		checkNotNull(partitionId)___		synchronized (registeredHandlers) {_			LOG.debug("unregistering {}", partitionId)__			_			_			_			registeredHandlers.remove(partitionId)__		}_	};removes,the,given,partition,from,listening,to,incoming,task,events,thus,forbidding,calls,to,link,subscribe,to,event,result,partition,id,event,listener,class,param,partition,id,the,partition,id;public,void,unregister,partition,result,partition,id,partition,id,check,not,null,partition,id,synchronized,registered,handlers,log,debug,unregistering,partition,id,registered,handlers,remove,partition,id
TaskEventDispatcher -> public void registerPartition(ResultPartitionID partitionId);1504023840;Registers the given partition for incoming task events allowing calls to {@link_#subscribeToEvent(ResultPartitionID, EventListener, Class)}.__@param partitionId_the partition ID;public void registerPartition(ResultPartitionID partitionId) {_		checkNotNull(partitionId)___		synchronized (registeredHandlers) {_			LOG.debug("registering {}", partitionId)__			if (registeredHandlers.put(partitionId, new TaskEventHandler()) != null) {_				throw new IllegalStateException(_					"Partition " + partitionId + " already registered at task event dispatcher.")__			}_		}_	};registers,the,given,partition,for,incoming,task,events,allowing,calls,to,link,subscribe,to,event,result,partition,id,event,listener,class,param,partition,id,the,partition,id;public,void,register,partition,result,partition,id,partition,id,check,not,null,partition,id,synchronized,registered,handlers,log,debug,registering,partition,id,if,registered,handlers,put,partition,id,new,task,event,handler,null,throw,new,illegal,state,exception,partition,partition,id,already,registered,at,task,event,dispatcher
TaskEventDispatcher -> public void registerPartition(ResultPartitionID partitionId);1519997900;Registers the given partition for incoming task events allowing calls to {@link_#subscribeToEvent(ResultPartitionID, EventListener, Class)}.__@param partitionId_the partition ID;public void registerPartition(ResultPartitionID partitionId) {_		checkNotNull(partitionId)___		synchronized (registeredHandlers) {_			LOG.debug("registering {}", partitionId)__			if (registeredHandlers.put(partitionId, new TaskEventHandler()) != null) {_				throw new IllegalStateException(_					"Partition " + partitionId + " already registered at task event dispatcher.")__			}_		}_	};registers,the,given,partition,for,incoming,task,events,allowing,calls,to,link,subscribe,to,event,result,partition,id,event,listener,class,param,partition,id,the,partition,id;public,void,register,partition,result,partition,id,partition,id,check,not,null,partition,id,synchronized,registered,handlers,log,debug,registering,partition,id,if,registered,handlers,put,partition,id,new,task,event,handler,null,throw,new,illegal,state,exception,partition,partition,id,already,registered,at,task,event,dispatcher
TaskEventDispatcher -> public boolean publish(ResultPartitionID partitionId, TaskEvent event);1420560668;Publishes the event to the registered {@link ResultPartitionWriter} instances._<p>_This method is either called directly from a {@link LocalInputChannel} or the network I/O_thread on behalf of a {@link RemoteInputChannel}.;public boolean publish(ResultPartitionID partitionId, TaskEvent event) {_		EventListener<TaskEvent> listener = registeredWriters.get(partitionId)___		if (listener != null) {_			listener.onEvent(event)__			return true__		}__		return false__	};publishes,the,event,to,the,registered,link,result,partition,writer,instances,p,this,method,is,either,called,directly,from,a,link,local,input,channel,or,the,network,i,o,thread,on,behalf,of,a,link,remote,input,channel;public,boolean,publish,result,partition,id,partition,id,task,event,event,event,listener,task,event,listener,registered,writers,get,partition,id,if,listener,null,listener,on,event,event,return,true,return,false
TaskEventDispatcher -> public boolean publish(ResultPartitionID partitionId, TaskEvent event);1427733175;Publishes the event to the registered {@link ResultPartitionWriter} instances._<p>_This method is either called directly from a {@link LocalInputChannel} or the network I/O_thread on behalf of a {@link RemoteInputChannel}.;public boolean publish(ResultPartitionID partitionId, TaskEvent event) {_		EventListener<TaskEvent> listener = registeredWriters.get(partitionId)___		if (listener != null) {_			listener.onEvent(event)__			return true__		}__		return false__	};publishes,the,event,to,the,registered,link,result,partition,writer,instances,p,this,method,is,either,called,directly,from,a,link,local,input,channel,or,the,network,i,o,thread,on,behalf,of,a,link,remote,input,channel;public,boolean,publish,result,partition,id,partition,id,task,event,event,event,listener,task,event,listener,registered,writers,get,partition,id,if,listener,null,listener,on,event,event,return,true,return,false
TaskEventDispatcher -> public boolean publish(ResultPartitionID partitionId, TaskEvent event);1438275734;Publishes the event to the registered {@link ResultPartitionWriter} instances._<p>_This method is either called directly from a {@link LocalInputChannel} or the network I/O_thread on behalf of a {@link RemoteInputChannel}.;public boolean publish(ResultPartitionID partitionId, TaskEvent event) {_		EventListener<TaskEvent> listener = registeredWriters.get(partitionId)___		if (listener != null) {_			listener.onEvent(event)__			return true__		}__		return false__	};publishes,the,event,to,the,registered,link,result,partition,writer,instances,p,this,method,is,either,called,directly,from,a,link,local,input,channel,or,the,network,i,o,thread,on,behalf,of,a,link,remote,input,channel;public,boolean,publish,result,partition,id,partition,id,task,event,event,event,listener,task,event,listener,registered,writers,get,partition,id,if,listener,null,listener,on,event,event,return,true,return,false
TaskEventDispatcher -> public boolean publish(ResultPartitionID partitionId, TaskEvent event);1501592283;Publishes the event to the registered {@link ResultPartitionWriter} instances._<p>_This method is either called directly from a {@link LocalInputChannel} or the network I/O_thread on behalf of a {@link RemoteInputChannel}.;public boolean publish(ResultPartitionID partitionId, TaskEvent event) {_		EventListener<TaskEvent> listener = registeredWriters.get(partitionId)___		if (listener != null) {_			listener.onEvent(event)__			return true__		}__		return false__	};publishes,the,event,to,the,registered,link,result,partition,writer,instances,p,this,method,is,either,called,directly,from,a,link,local,input,channel,or,the,network,i,o,thread,on,behalf,of,a,link,remote,input,channel;public,boolean,publish,result,partition,id,partition,id,task,event,event,event,listener,task,event,listener,registered,writers,get,partition,id,if,listener,null,listener,on,event,event,return,true,return,false
TaskEventDispatcher -> public boolean publish(ResultPartitionID partitionId, TaskEvent event);1504023840;Publishes the event to the registered {@link EventListener} instances.__<p>This method is either called directly from a {@link LocalInputChannel} or the network I/O_thread on behalf of a {@link RemoteInputChannel}.__@return whether the event was published to a registered event handler (initiated via {@link_#registerPartition(ResultPartitionID)}) or not;public boolean publish(ResultPartitionID partitionId, TaskEvent event) {_		checkNotNull(partitionId)__		checkNotNull(event)___		TaskEventHandler taskEventHandler = registeredHandlers.get(partitionId)___		if (taskEventHandler != null) {_			taskEventHandler.publish(event)__			return true__		}__		return false__	};publishes,the,event,to,the,registered,link,event,listener,instances,p,this,method,is,either,called,directly,from,a,link,local,input,channel,or,the,network,i,o,thread,on,behalf,of,a,link,remote,input,channel,return,whether,the,event,was,published,to,a,registered,event,handler,initiated,via,link,register,partition,result,partition,id,or,not;public,boolean,publish,result,partition,id,partition,id,task,event,event,check,not,null,partition,id,check,not,null,event,task,event,handler,task,event,handler,registered,handlers,get,partition,id,if,task,event,handler,null,task,event,handler,publish,event,return,true,return,false
TaskEventDispatcher -> public boolean publish(ResultPartitionID partitionId, TaskEvent event);1519997900;Publishes the event to the registered {@link EventListener} instances.__<p>This method is either called directly from a {@link LocalInputChannel} or the network I/O_thread on behalf of a {@link RemoteInputChannel}.__@return whether the event was published to a registered event handler (initiated via {@link_#registerPartition(ResultPartitionID)}) or not;public boolean publish(ResultPartitionID partitionId, TaskEvent event) {_		checkNotNull(partitionId)__		checkNotNull(event)___		TaskEventHandler taskEventHandler__		synchronized (registeredHandlers) {_			taskEventHandler = registeredHandlers.get(partitionId)__		}__		if (taskEventHandler != null) {_			taskEventHandler.publish(event)__			return true__		}__		return false__	};publishes,the,event,to,the,registered,link,event,listener,instances,p,this,method,is,either,called,directly,from,a,link,local,input,channel,or,the,network,i,o,thread,on,behalf,of,a,link,remote,input,channel,return,whether,the,event,was,published,to,a,registered,event,handler,initiated,via,link,register,partition,result,partition,id,or,not;public,boolean,publish,result,partition,id,partition,id,task,event,event,check,not,null,partition,id,check,not,null,event,task,event,handler,task,event,handler,synchronized,registered,handlers,task,event,handler,registered,handlers,get,partition,id,if,task,event,handler,null,task,event,handler,publish,event,return,true,return,false
TaskEventDispatcher -> public void subscribeToEvent( 			ResultPartitionID partitionId, 			EventListener<TaskEvent> eventListener, 			Class<? extends TaskEvent> eventType);1504023840;Subscribes a listener to this dispatcher for events on a partition.__@param partitionId_ID of the partition to subscribe for (must be registered via {@link_#registerPartition(ResultPartitionID)} first!)_@param eventListener_the event listener to subscribe_@param eventType_event type to subscribe to;public void subscribeToEvent(_			ResultPartitionID partitionId,_			EventListener<TaskEvent> eventListener,_			Class<? extends TaskEvent> eventType) {_		checkNotNull(partitionId)__		checkNotNull(eventListener)__		checkNotNull(eventType)___		TaskEventHandler taskEventHandler = registeredHandlers.get(partitionId)__		if (taskEventHandler == null) {_			throw new IllegalStateException(_				"Partition " + partitionId + " not registered at task event dispatcher.")__		}_		taskEventHandler.subscribe(eventListener, eventType)__	};subscribes,a,listener,to,this,dispatcher,for,events,on,a,partition,param,partition,id,id,of,the,partition,to,subscribe,for,must,be,registered,via,link,register,partition,result,partition,id,first,param,event,listener,the,event,listener,to,subscribe,param,event,type,event,type,to,subscribe,to;public,void,subscribe,to,event,result,partition,id,partition,id,event,listener,task,event,event,listener,class,extends,task,event,event,type,check,not,null,partition,id,check,not,null,event,listener,check,not,null,event,type,task,event,handler,task,event,handler,registered,handlers,get,partition,id,if,task,event,handler,null,throw,new,illegal,state,exception,partition,partition,id,not,registered,at,task,event,dispatcher,task,event,handler,subscribe,event,listener,event,type
TaskEventDispatcher -> public void subscribeToEvent( 			ResultPartitionID partitionId, 			EventListener<TaskEvent> eventListener, 			Class<? extends TaskEvent> eventType);1519997900;Subscribes a listener to this dispatcher for events on a partition.__@param partitionId_ID of the partition to subscribe for (must be registered via {@link_#registerPartition(ResultPartitionID)} first!)_@param eventListener_the event listener to subscribe_@param eventType_event type to subscribe to;public void subscribeToEvent(_			ResultPartitionID partitionId,_			EventListener<TaskEvent> eventListener,_			Class<? extends TaskEvent> eventType) {_		checkNotNull(partitionId)__		checkNotNull(eventListener)__		checkNotNull(eventType)___		TaskEventHandler taskEventHandler__		synchronized (registeredHandlers) {_			taskEventHandler = registeredHandlers.get(partitionId)__		}_		if (taskEventHandler == null) {_			throw new IllegalStateException(_				"Partition " + partitionId + " not registered at task event dispatcher.")__		}_		taskEventHandler.subscribe(eventListener, eventType)__	};subscribes,a,listener,to,this,dispatcher,for,events,on,a,partition,param,partition,id,id,of,the,partition,to,subscribe,for,must,be,registered,via,link,register,partition,result,partition,id,first,param,event,listener,the,event,listener,to,subscribe,param,event,type,event,type,to,subscribe,to;public,void,subscribe,to,event,result,partition,id,partition,id,event,listener,task,event,event,listener,class,extends,task,event,event,type,check,not,null,partition,id,check,not,null,event,listener,check,not,null,event,type,task,event,handler,task,event,handler,synchronized,registered,handlers,task,event,handler,registered,handlers,get,partition,id,if,task,event,handler,null,throw,new,illegal,state,exception,partition,partition,id,not,registered,at,task,event,dispatcher,task,event,handler,subscribe,event,listener,event,type
TaskEventDispatcher -> public void clearAll();1504023840;Removes all registered event handlers.;public void clearAll() {_		synchronized (registeredHandlers) {_			registeredHandlers.clear()__		}_	};removes,all,registered,event,handlers;public,void,clear,all,synchronized,registered,handlers,registered,handlers,clear
TaskEventDispatcher -> public void clearAll();1519997900;Removes all registered event handlers.;public void clearAll() {_		synchronized (registeredHandlers) {_			registeredHandlers.clear()__		}_	};removes,all,registered,event,handlers;public,void,clear,all,synchronized,registered,handlers,registered,handlers,clear
TaskEventDispatcher -> int getNumberOfRegisteredWriters();1420560668;Returns the number of currently registered writers.;int getNumberOfRegisteredWriters() {_		synchronized (registeredWriters) {_			return registeredWriters.size()__		}_	};returns,the,number,of,currently,registered,writers;int,get,number,of,registered,writers,synchronized,registered,writers,return,registered,writers,size
TaskEventDispatcher -> int getNumberOfRegisteredWriters();1427733175;Returns the number of currently registered writers.;int getNumberOfRegisteredWriters() {_		synchronized (registeredWriters) {_			return registeredWriters.size()__		}_	};returns,the,number,of,currently,registered,writers;int,get,number,of,registered,writers,synchronized,registered,writers,return,registered,writers,size
TaskEventDispatcher -> int getNumberOfRegisteredWriters();1438275734;Returns the number of currently registered writers.;int getNumberOfRegisteredWriters() {_		synchronized (registeredWriters) {_			return registeredWriters.size()__		}_	};returns,the,number,of,currently,registered,writers;int,get,number,of,registered,writers,synchronized,registered,writers,return,registered,writers,size
TaskEventDispatcher -> int getNumberOfRegisteredWriters();1501592283;Returns the number of currently registered writers.;int getNumberOfRegisteredWriters() {_		synchronized (registeredWriters) {_			return registeredWriters.size()__		}_	};returns,the,number,of,currently,registered,writers;int,get,number,of,registered,writers,synchronized,registered,writers,return,registered,writers,size
