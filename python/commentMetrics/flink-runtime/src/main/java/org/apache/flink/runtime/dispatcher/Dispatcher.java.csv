# id;timestamp;commentText;codeText;commentWords;codeWords
Dispatcher -> private void clearState();1504472365;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() {_		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			jobManagerRunner.shutdown()__		}__		jobManagerRunners.clear()__	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,for,job,manager,runner,job,manager,runner,job,manager,runners,values,job,manager,runner,shutdown,job,manager,runners,clear
Dispatcher -> private void clearState();1504477043;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() {_		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			jobManagerRunner.shutdown()__		}__		jobManagerRunners.clear()__	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,for,job,manager,runner,job,manager,runner,job,manager,runners,values,job,manager,runner,shutdown,job,manager,runners,clear
Dispatcher -> private void clearState();1504507704;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() {_		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			jobManagerRunner.shutdown()__		}__		jobManagerRunners.clear()__	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,for,job,manager,runner,job,manager,runner,job,manager,runners,values,job,manager,runner,shutdown,job,manager,runners,clear
Dispatcher -> private void recoverJobs();1504472365;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		final UUID currentLeaderSessionId = leaderSessionId___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), currentLeaderSessionId, RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,final,uuid,current,leader,session,id,leader,session,id,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,current,leader,session,id,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1504477043;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		final UUID currentLeaderSessionId = leaderSessionId___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), currentLeaderSessionId, RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,final,uuid,current,leader,session,id,leader,session,id,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,current,leader,session,id,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1504507704;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1504607872;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1505860453;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1505922627;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1506034747;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1506376022;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1506553599;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1506553672;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1506967078;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1507569104;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1507825825;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1509547680;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1509547920;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1509547921;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1510063664;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1510063664;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1512061052;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1512061056;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private void recoverJobs();1512229172;Recovers all jobs persisted via the submitted job graph store.;private void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;private,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1519510749;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1519512293;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1519977155;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1520032992;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1521379500;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1521626214;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522132482;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522249271;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522249272;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522249273;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522251199;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522339662;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522339663;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1522339663;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1525116069;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1525452496;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1526334048;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1526336566;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		final List<CompletableFuture<Void>> terminationFutures = jobManagerRunners.values().stream()_			.map(JobManagerRunner::closeAsync)_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,list,completable,future,void,termination,futures,job,manager,runners,values,stream,map,job,manager,runner,close,async,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1526549506;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		final List<CompletableFuture<Void>> terminationFutures = jobsToRemove.stream()_			.map(jobId -> removeJob(jobId, false))_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,final,list,completable,future,void,termination,futures,jobs,to,remove,stream,map,job,id,remove,job,job,id,false,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1527173115;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		final List<CompletableFuture<Void>> terminationFutures = jobsToRemove.stream()_			.map(jobId -> removeJob(jobId, false))_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,final,list,completable,future,void,termination,futures,jobs,to,remove,stream,map,job,id,remove,job,job,id,false,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1528982883;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		final List<CompletableFuture<Void>> terminationFutures = jobsToRemove.stream()_			.map(jobId -> removeJob(jobId, false))_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,final,list,completable,future,void,termination,futures,jobs,to,remove,stream,map,job,id,remove,job,job,id,false,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1530292340;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		final List<CompletableFuture<Void>> terminationFutures = jobsToRemove.stream()_			.map(jobId -> removeJob(jobId, false))_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,final,list,completable,future,void,termination,futures,jobs,to,remove,stream,map,job,id,remove,job,job,id,false,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> private CompletableFuture<Void> terminateJobManagerRunners();1530292340;Terminate all currently running {@link JobManagerRunner}.__@return Future which is completed once all {@link JobManagerRunner} have terminated;private CompletableFuture<Void> terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		final List<CompletableFuture<Void>> terminationFutures = jobsToRemove.stream()_			.map(jobId -> removeJob(jobId, false))_			.collect(Collectors.toList())___		return FutureUtils.completeAll(terminationFutures)__	};terminate,all,currently,running,link,job,manager,runner,return,future,which,is,completed,once,all,link,job,manager,runner,have,terminated;private,completable,future,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,final,list,completable,future,void,termination,futures,jobs,to,remove,stream,map,job,id,remove,job,job,id,false,collect,collectors,to,list,return,future,utils,complete,all,termination,futures
Dispatcher -> @Override 	public void revokeLeadership();1504472365;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				clearState()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,log,info,dispatcher,was,revoked,leadership,get,address,clear,state
Dispatcher -> @Override 	public void revokeLeadership();1504477043;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				clearState()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,log,info,dispatcher,was,revoked,leadership,get,address,clear,state
Dispatcher -> @Override 	public void revokeLeadership();1504507704;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				clearState()___				setFencingToken(DispatcherId.generate())__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,clear,state,set,fencing,token,dispatcher,id,generate
Dispatcher -> @Override 	public void revokeLeadership();1504607872;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				setFencingToken(DispatcherId.generate())__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,dispatcher,id,generate
Dispatcher -> @Override 	public void revokeLeadership();1505860453;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				setFencingToken(DispatcherId.generate())__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,dispatcher,id,generate
Dispatcher -> @Override 	public void revokeLeadership();1505922627;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				setFencingToken(DispatcherId.generate())__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,dispatcher,id,generate
Dispatcher -> @Override 	public void revokeLeadership();1506034747;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1506376022;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1506553599;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1506553672;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1506967078;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1507569104;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1507825825;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1509547680;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1509547920;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1509547921;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1510063664;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1510063664;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1512061052;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1512061056;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1512229172;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1513171312;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1515669170;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1515855678;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1516970986;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1516970998;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1516971011;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1516971020;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1517300708;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1517915731;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1517920615;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1518508251;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1518680659;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1518712479;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1518862303;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1518945172;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1519317157;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1519406528;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())__				try {_					clearState()__				} catch (Exception e) {_					log.warn("Could not properly clear the Dispatcher state while revoking leadership.", e)__				}__				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,revoking,leadership,e,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1519510749;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1519512293;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1519977155;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1520032992;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1521379500;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1521626214;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522132482;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522249271;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522249272;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522249273;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522251199;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522339662;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522339663;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__				registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__				jobManagerRunners.clear()___				_				setFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1522339663;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1525116069;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1525452496;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1526334048;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1526336566;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1526549506;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1527173115;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1528982883;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1530292340;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1530292340;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1531351523;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1531921883;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1531921883;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1536763194;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1536930103;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1536930104;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1536930104;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1536954663;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1539582211;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1545326469;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1547736239;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1547806302;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1548350146;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1548350350;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1548846699;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1549360057;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1550005039;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> @Override 	public void revokeLeadership();1550005040;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was revoked leadership.", getAddress())___				setNewFencingToken(null)__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,dispatcher,was,revoked,leadership,get,address,set,new,fencing,token,null
Dispatcher -> private void clearState() throws Exception;1504607872;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1505860453;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1505922627;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1506034747;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1506376022;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1506553599;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1506553672;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1506967078;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1507569104;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1507825825;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1509547680;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1509547920;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1509547921;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1510063664;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1510063664;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1512061052;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1512061056;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1512229172;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1513171312;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1515669170;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1515855678;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1516970986;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1516970998;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1516971011;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1516971020;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1517300708;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1517915731;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1517920615;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1518508251;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1518680659;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1518712479;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1518862303;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1518945172;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1519317157;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> private void clearState() throws Exception;1519406528;Clears the state of the dispatcher.__<p>The state are all currently running jobs.;private void clearState() throws Exception {_		Exception exception = null___		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())__		_		for (JobManagerRunner jobManagerRunner : jobManagerRunners.values()) {_			try {_				jobManagerRunner.shutdown()__			} catch (Exception e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}_		}__		jobManagerRunners.clear()___		if (exception != null) {_			throw exception__		}_	};clears,the,state,of,the,dispatcher,p,the,state,are,all,currently,running,jobs;private,void,clear,state,throws,exception,exception,exception,null,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,for,job,manager,runner,job,manager,runner,job,manager,runners,values,try,job,manager,runner,shutdown,catch,exception,e,exception,exception,utils,first,or,suppressed,e,exception,job,manager,runners,clear,if,exception,null,throw,exception
Dispatcher -> @VisibleForTesting 	void recoverJobs();1513171312;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1515669170;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1515855678;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1516970986;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1516970998;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1516971011;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1516971020;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1517300708;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1517915731;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1517920615;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1518508251;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1518680659;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1518712479;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1518862303;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1518945172;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1519317157;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1519406528;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1519510749;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1519512293;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1519977155;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1520032992;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1521379500;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1521626214;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522132482;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522249271;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522249272;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522249273;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					log.error("Could not recover job ids from the submitted job graph store. Aborting recovery.", e)__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						log.error("Could not recover the job graph for " + jobId + '.', e)__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,log,error,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,log,error,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522251199;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					onFatalError(new FlinkException("Could not recover job ids from the submitted job graph store. Aborting recovery.", e))__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						onFatalError(new FlinkException("Could not recover the job graph for " + jobId + '.', e))__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,on,fatal,error,new,flink,exception,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,on,fatal,error,new,flink,exception,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522339662;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					onFatalError(new FlinkException("Could not recover job ids from the submitted job graph store. Aborting recovery.", e))__					return__				}__				for (JobID jobId : jobIds) {_					try {_						SubmittedJobGraph submittedJobGraph = submittedJobGraphStore.recoverJobGraph(jobId)___						runAsync(() -> submitJob(submittedJobGraph.getJobGraph(), RpcUtils.INF_TIMEOUT))__					} catch (Exception e) {_						onFatalError(new FlinkException("Could not recover the job graph for " + jobId + '.', e))__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,on,fatal,error,new,flink,exception,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,submitted,job,graph,submitted,job,graph,submitted,job,graph,store,recover,job,graph,job,id,run,async,submit,job,submitted,job,graph,get,job,graph,rpc,utils,catch,exception,e,on,fatal,error,new,flink,exception,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	void recoverJobs();1522339663;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	void recoverJobs() {_		log.info("Recovering all persisted jobs.")___		getRpcService().execute(_			() -> {_				final Collection<JobID> jobIds___				try {_					jobIds = submittedJobGraphStore.getJobIds()__				} catch (Exception e) {_					onFatalError(new FlinkException("Could not recover job ids from the submitted job graph store. Aborting recovery.", e))__					return__				}__				for (JobID jobId : jobIds) {_					try {_						recoverJob(jobId)__					} catch (Exception e) {_						onFatalError(new FlinkException("Could not recover the job graph for " + jobId + '.', e))__					}_				}_			})__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,void,recover,jobs,log,info,recovering,all,persisted,jobs,get,rpc,service,execute,final,collection,job,id,job,ids,try,job,ids,submitted,job,graph,store,get,job,ids,catch,exception,e,on,fatal,error,new,flink,exception,could,not,recover,job,ids,from,the,submitted,job,graph,store,aborting,recovery,e,return,for,job,id,job,id,job,ids,try,recover,job,job,id,catch,exception,e,on,fatal,error,new,flink,exception,could,not,recover,the,job,graph,for,job,id,e
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1522339663;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1525116069;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1525452496;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1526334048;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1526336566;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1526549506;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1527173115;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1528982883;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1530292340;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1530292340;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1531351523;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1531921883;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1531921883;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @VisibleForTesting 	CompletableFuture<Collection<JobGraph>> recoverJobs();1536763194;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	CompletableFuture<Collection<JobGraph>> recoverJobs() {_		log.info("Recovering all persisted jobs.")__		return FutureUtils.supplyAsync(_			() -> {_				final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___				final List<JobGraph> jobGraphs = new ArrayList<>(jobIds.size())___				for (JobID jobId : jobIds) {_					jobGraphs.add(recoverJob(jobId))__				}__				return jobGraphs__			},_			getRpcService().getExecutor())__	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,completable,future,collection,job,graph,recover,jobs,log,info,recovering,all,persisted,jobs,return,future,utils,supply,async,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,final,list,job,graph,job,graphs,new,array,list,job,ids,size,for,job,id,job,id,job,ids,job,graphs,add,recover,job,job,id,return,job,graphs,get,rpc,service,get,executor
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504472365;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(_			() -> {_				log.info("Dispatcher {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,log,info,dispatcher,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504477043;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(_			() -> {_				log.info("Dispatcher {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,log,info,dispatcher,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504507704;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,clear,state,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1504607872;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1505860453;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1505922627;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1506034747;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1506376022;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1506553599;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1506553672;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1506967078;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507569104;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507825825;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1509547680;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1509547920;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1509547921;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510063664;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1510063664;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1512061052;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1512061056;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1512229172;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1513171312;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1515669170;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1515855678;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1516970986;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1516970998;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1516971011;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1516971020;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517300708;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517915731;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517920615;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1518508251;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1518680659;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1518712479;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1518862303;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1518945172;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1519317157;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1519406528;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					try {_						clearState()__					} catch (Exception e) {_						log.warn("Could not properly clear the Dispatcher state while granting leadership.", e)__					}_				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,try,clear,state,catch,exception,e,log,warn,could,not,properly,clear,the,dispatcher,state,while,granting,leadership,e,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1519510749;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1519512293;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1519977155;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1520032992;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521379500;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521626214;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522132482;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522249271;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522249272;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522249273;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522251199;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522339662;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522339663;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)___				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___				_				if (getFencingToken() != null) {_					final CompletableFuture<Void> jobManagerRunnersTerminationFuture = terminateJobManagerRunners()__					registerOrphanedJobManagerTerminationFuture(jobManagerRunnersTerminationFuture)__					jobManagerRunners.clear()__				}__				setFencingToken(dispatcherId)___				_				getRpcService().execute(_					() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))___				recoverJobs()__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,if,get,fencing,token,null,final,completable,future,void,job,manager,runners,termination,future,terminate,job,manager,runners,register,orphaned,job,manager,termination,future,job,manager,runners,termination,future,job,manager,runners,clear,set,fencing,token,dispatcher,id,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id,recover,jobs
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1522339663;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1525116069;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = new DispatcherId(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,new,dispatcher,id,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1525452496;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = DispatcherId.fromUuid(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,dispatcher,id,from,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1526334048;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = DispatcherId.fromUuid(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,dispatcher,id,from,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1526336566;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = DispatcherId.fromUuid(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,dispatcher,id,from,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1526549506;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = DispatcherId.fromUuid(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,dispatcher,id,from,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1527173115;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final DispatcherId dispatcherId = DispatcherId.fromUuid(newLeaderSessionID)__		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), dispatcherId)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Void> fencingTokenFuture = recoveredJobsFuture.thenAcceptAsync(_			(Collection<JobGraph> recoveredJobs) -> {_				setNewFencingToken(dispatcherId)___				for (JobGraph recoveredJob : recoveredJobs) {_					try {_						runJob(recoveredJob)__					} catch (Exception e) {_						throw new CompletionException(_							new FlinkException(_								String.format("Failed to recover job %s.", recoveredJob.getJobID()),_								e))__					}_				}_			},_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenRunAsync(_			() -> leaderElectionService.confirmLeaderSessionID(newLeaderSessionID),_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,dispatcher,id,dispatcher,id,dispatcher,id,from,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,dispatcher,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,void,fencing,token,future,recovered,jobs,future,then,accept,async,collection,job,graph,recovered,jobs,set,new,fencing,token,dispatcher,id,for,job,graph,recovered,job,recovered,jobs,try,run,job,recovered,job,catch,exception,e,throw,new,completion,exception,new,flink,exception,string,format,failed,to,recover,job,s,recovered,job,get,job,id,e,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,run,async,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1528982883;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenApplyAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,apply,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1530292340;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenApplyAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,apply,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1530292340;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenApplyAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,apply,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1531351523;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1531921883;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1531921883;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536763194;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___		final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoverJobs()___		final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_			(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_			getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenAcceptAsync(_			(Boolean confirmLeadership) -> {_				if (confirmLeadership) {_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recover,jobs,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,accept,async,boolean,confirm,leadership,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536930103;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					(BiFunctionWithException<Boolean, Collection<JobGraph>, Void, Exception>) (Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					},_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,boolean,collection,job,graph,void,exception,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536930104;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536930104;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536954663;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1539582211;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1545326469;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1547736239;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1547806302;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1548350146;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(ExceptionUtils.stripCompletionException(throwable))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1548350350;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(_								new DispatcherException(_									String.format("Failed to take leadership with session id %s.", newLeaderSessionID),_									(ExceptionUtils.stripCompletionException(throwable))))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,new,dispatcher,exception,string,format,failed,to,take,leadership,with,session,id,s,new,leader,session,id,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1548846699;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(_								new DispatcherException(_									String.format("Failed to take leadership with session id %s.", newLeaderSessionID),_									(ExceptionUtils.stripCompletionException(throwable))))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,new,dispatcher,exception,string,format,failed,to,take,leadership,with,session,id,s,new,leader,session,id,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1549360057;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(_								new DispatcherException(_									String.format("Failed to take leadership with session id %s.", newLeaderSessionID),_									(ExceptionUtils.stripCompletionException(throwable))))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,new,dispatcher,exception,string,format,failed,to,take,leadership,with,session,id,s,new,leader,session,id,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1550005039;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(_								new DispatcherException(_									String.format("Failed to take leadership with session id %s.", newLeaderSessionID),_									(ExceptionUtils.stripCompletionException(throwable))))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,new,dispatcher,exception,string,format,failed,to,take,leadership,with,session,id,s,new,leader,session,id,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1550005040;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				log.info("Dispatcher {} was granted leadership with fencing token {}", getAddress(), newLeaderSessionID)___				final CompletableFuture<Collection<JobGraph>> recoveredJobsFuture = recoveryOperation.thenApplyAsync(_					FunctionUtils.uncheckedFunction(ignored -> recoverJobs()),_					getRpcService().getExecutor())___				final CompletableFuture<Boolean> fencingTokenFuture = recoveredJobsFuture.thenComposeAsync(_					(Collection<JobGraph> recoveredJobs) -> tryAcceptLeadershipAndRunJobs(newLeaderSessionID, recoveredJobs),_					getUnfencedMainThreadExecutor())___				final CompletableFuture<Void> confirmationFuture = fencingTokenFuture.thenCombineAsync(_					recoveredJobsFuture,_					BiFunctionWithException.unchecked((Boolean confirmLeadership, Collection<JobGraph> recoveredJobs) -> {_						if (confirmLeadership) {_							leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__						} else {_							for (JobGraph recoveredJob : recoveredJobs) {_								submittedJobGraphStore.releaseJobGraph(recoveredJob.getJobID())__							}_						}_						return null__					}),_					getRpcService().getExecutor())___				confirmationFuture.whenComplete(_					(Void ignored, Throwable throwable) -> {_						if (throwable != null) {_							onFatalError(_								new DispatcherException(_									String.format("Failed to take leadership with session id %s.", newLeaderSessionID),_									(ExceptionUtils.stripCompletionException(throwable))))__						}_					})___				recoveryOperation = confirmationFuture__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,log,info,dispatcher,was,granted,leadership,with,fencing,token,get,address,new,leader,session,id,final,completable,future,collection,job,graph,recovered,jobs,future,recovery,operation,then,apply,async,function,utils,unchecked,function,ignored,recover,jobs,get,rpc,service,get,executor,final,completable,future,boolean,fencing,token,future,recovered,jobs,future,then,compose,async,collection,job,graph,recovered,jobs,try,accept,leadership,and,run,jobs,new,leader,session,id,recovered,jobs,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,fencing,token,future,then,combine,async,recovered,jobs,future,bi,function,with,exception,unchecked,boolean,confirm,leadership,collection,job,graph,recovered,jobs,if,confirm,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,else,for,job,graph,recovered,job,recovered,jobs,submitted,job,graph,store,release,job,graph,recovered,job,get,job,id,return,null,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,new,dispatcher,exception,string,format,failed,to,take,leadership,with,session,id,s,new,leader,session,id,exception,utils,strip,completion,exception,throwable,recovery,operation,confirmation,future
Dispatcher -> @Override 	public void handleError(final Exception exception);1504472365;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1504477043;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1504507704;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1504607872;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1505860453;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1505922627;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1506034747;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1506376022;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1506553599;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1506553672;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1506967078;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1507569104;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1507825825;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1509547680;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1509547920;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1509547921;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1510063664;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1510063664;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1512061052;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1512061056;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1512229172;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1513171312;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1515669170;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1515855678;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1516970986;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1516970998;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1516971011;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1516971020;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1517300708;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1517915731;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1517920615;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1518508251;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1518680659;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1518712479;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1518862303;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1518945172;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1519317157;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1519406528;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1519510749;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1519512293;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1519977155;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1520032992;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1521379500;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1521626214;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522132482;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522249271;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522249272;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522249273;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522251199;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522339662;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522339663;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1522339663;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1525116069;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1525452496;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1526334048;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1526336566;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1526549506;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1527173115;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1528982883;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1530292340;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1530292340;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1531351523;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1531921883;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1531921883;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1536763194;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1536930103;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1536930104;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1536930104;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1536954663;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1539582211;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1545326469;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1547736239;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1547806302;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1548350146;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1548350350;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1548846699;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1549360057;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1550005039;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> @Override 	public void handleError(final Exception exception);1550005040;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new DispatcherException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,dispatcher,exception,received,an,error,from,the,leader,election,service,exception
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA);1522339663;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			try {_				submittedJobGraphStore.removeJobGraph(jobId)__			} catch (Exception e) {_				log.warn("Could not properly remove job {} from submitted job graph store.", jobId)__			}_		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,try,submitted,job,graph,store,remove,job,graph,job,id,catch,exception,e,log,warn,could,not,properly,remove,job,from,submitted,job,graph,store,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA);1522339663;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			try {_				submittedJobGraphStore.removeJobGraph(jobId)__			} catch (Exception e) {_				log.warn("Could not properly remove job {} from submitted job graph store.", jobId)__			}_		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,try,submitted,job,graph,store,remove,job,graph,job,id,catch,exception,e,log,warn,could,not,properly,remove,job,from,submitted,job,graph,store,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA);1525116069;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			try {_				submittedJobGraphStore.removeJobGraph(jobId)__			} catch (Exception e) {_				log.warn("Could not properly remove job {} from submitted job graph store.", jobId)__			}_		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,try,submitted,job,graph,store,remove,job,graph,job,id,catch,exception,e,log,warn,could,not,properly,remove,job,from,submitted,job,graph,store,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA);1525452496;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			try {_				submittedJobGraphStore.removeJobGraph(jobId)__			} catch (Exception e) {_				log.warn("Could not properly remove job {} from submitted job graph store.", jobId)__			}_		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,try,submitted,job,graph,store,remove,job,graph,job,id,catch,exception,e,log,warn,could,not,properly,remove,job,from,submitted,job,graph,store,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA);1526334048;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			try {_				submittedJobGraphStore.removeJobGraph(jobId)__			} catch (Exception e) {_				log.warn("Could not properly remove job {} from submitted job graph store.", jobId)__			}_		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,try,submitted,job,graph,store,remove,job,graph,job,id,catch,exception,e,log,warn,could,not,properly,remove,job,from,submitted,job,graph,store,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA);1526336566;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			try {_				submittedJobGraphStore.removeJobGraph(jobId)__			} catch (Exception e) {_				log.warn("Could not properly remove job {} from submitted job graph store.", jobId)__			}_		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,try,submitted,job,graph,store,remove,job,graph,job,id,catch,exception,e,log,warn,could,not,properly,remove,job,from,submitted,job,graph,store,job,id
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1526549506;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerOrphanedJobManagerTerminationFuture(cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,orphaned,job,manager,termination,future,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1527173115;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerOrphanedJobManagerTerminationFuture(cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,orphaned,job,manager,termination,future,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1528982883;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerOrphanedJobManagerTerminationFuture(cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,orphaned,job,manager,termination,future,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1530292340;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerOrphanedJobManagerTerminationFuture(cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,orphaned,job,manager,termination,future,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1530292340;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerOrphanedJobManagerTerminationFuture(cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,orphaned,job,manager,termination,future,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1531351523;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1531921883;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1531921883;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1536763194;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1536930103;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1536930104;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1536930104;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1536954663;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1539582211;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1545326469;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1547736239;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1547806302;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1548350146;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1548350350;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1548846699;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1549360057;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1550005039;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA);1550005040;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJobAndRegisterTerminationFuture(JobID jobId, boolean cleanupHA) {_		final CompletableFuture<Void> cleanupFuture = removeJob(jobId, cleanupHA)___		registerJobManagerRunnerTerminationFuture(jobId, cleanupFuture)__	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,and,register,termination,future,job,id,job,id,boolean,cleanup,ha,final,completable,future,void,cleanup,future,remove,job,job,id,cleanup,ha,register,job,manager,runner,termination,future,job,id,cleanup,future
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1536930103;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1536930104;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1536930104;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1536954663;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1539582211;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1545326469;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1547736239;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1547806302;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1548350146;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1548350350;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1548846699;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1549360057;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1550005039;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> @VisibleForTesting 	Collection<JobGraph> recoverJobs() throws Exception;1550005040;Recovers all jobs persisted via the submitted job graph store.;@VisibleForTesting_	Collection<JobGraph> recoverJobs() throws Exception {_		log.info("Recovering all persisted jobs.")__		final Collection<JobID> jobIds = submittedJobGraphStore.getJobIds()___		try {_			return recoverJobGraphs(jobIds)__		} catch (Exception e) {_			_			for (JobID jobId : jobIds) {_				try {_					submittedJobGraphStore.releaseJobGraph(jobId)__				} catch (Exception ie) {_					e.addSuppressed(ie)__				}_			}_			throw e__		}_	};recovers,all,jobs,persisted,via,the,submitted,job,graph,store;visible,for,testing,collection,job,graph,recover,jobs,throws,exception,log,info,recovering,all,persisted,jobs,final,collection,job,id,job,ids,submitted,job,graph,store,get,job,ids,try,return,recover,job,graphs,job,ids,catch,exception,e,for,job,id,job,id,job,ids,try,submitted,job,graph,store,release,job,graph,job,id,catch,exception,ie,e,add,suppressed,ie,throw,e
Dispatcher -> private void terminateJobManagerRunners();1531351523;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1531921883;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1531921883;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1536763194;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1536930103;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1536930104;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1536930104;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunners.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runners,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1536954663;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1539582211;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1545326469;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1547736239;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1547806302;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1548350146;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1548350350;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1548846699;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1549360057;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1550005039;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void terminateJobManagerRunners();1550005040;Terminate all currently running {@link JobManagerRunner}.;private void terminateJobManagerRunners() {_		log.info("Stopping all currently running jobs of dispatcher {}.", getAddress())___		final HashSet<JobID> jobsToRemove = new HashSet<>(jobManagerRunnerFutures.keySet())___		for (JobID jobId : jobsToRemove) {_			removeJobAndRegisterTerminationFuture(jobId, false)__		}_	};terminate,all,currently,running,link,job,manager,runner;private,void,terminate,job,manager,runners,log,info,stopping,all,currently,running,jobs,of,dispatcher,get,address,final,hash,set,job,id,jobs,to,remove,new,hash,set,job,manager,runner,futures,key,set,for,job,id,job,id,jobs,to,remove,remove,job,and,register,termination,future,job,id,false
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1499789965;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1501485811;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1502452184;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1503041372;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1504472365;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1504477043;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1504507704;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1504607872;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1505860453;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1505922627;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1506034747;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1506376022;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1506553599;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1506553672;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1506967078;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1507569104;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1507825825;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1509547680;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1509547920;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1509547921;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1510063664;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1510063664;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1512061052;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1512061056;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1512229172;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1513171312;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1515669170;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1515855678;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1516970986;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1516970998;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1516971011;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1516971020;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1517300708;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1517915731;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1517920615;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1518508251;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1518680659;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1518712479;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1518862303;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1518945172;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1519317157;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1519406528;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			jobManagerRunner.shutdown()__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,job,manager,runner,shutdown,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1519510749;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1519512293;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1519977155;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1520032992;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1521379500;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1521626214;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1522132482;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1522249271;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1522249272;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1522249273;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1522251199;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
Dispatcher -> private void removeJob(JobID jobId, boolean cleanupHA) throws Exception;1522339662;Cleans up the job related data from the dispatcher. If cleanupHA is true, then_the data will also be removed from HA.__@param jobId JobID identifying the job to clean up_@param cleanupHA True iff HA data shall also be cleaned up;private void removeJob(JobID jobId, boolean cleanupHA) throws Exception {_		JobManagerRunner jobManagerRunner = jobManagerRunners.remove(jobId)___		if (jobManagerRunner != null) {_			final CompletableFuture<Void> jobManagerRunnerTerminationFuture = jobManagerRunner.closeAsync()__			registerOrphanedJobManagerTerminationFuture(jobManagerRunnerTerminationFuture)__		}__		jobManagerMetricGroup.removeJob(jobId)___		if (cleanupHA) {_			submittedJobGraphStore.removeJobGraph(jobId)__		}__		_	};cleans,up,the,job,related,data,from,the,dispatcher,if,cleanup,ha,is,true,then,the,data,will,also,be,removed,from,ha,param,job,id,job,id,identifying,the,job,to,clean,up,param,cleanup,ha,true,iff,ha,data,shall,also,be,cleaned,up;private,void,remove,job,job,id,job,id,boolean,cleanup,ha,throws,exception,job,manager,runner,job,manager,runner,job,manager,runners,remove,job,id,if,job,manager,runner,null,final,completable,future,void,job,manager,runner,termination,future,job,manager,runner,close,async,register,orphaned,job,manager,termination,future,job,manager,runner,termination,future,job,manager,metric,group,remove,job,job,id,if,cleanup,ha,submitted,job,graph,store,remove,job,graph,job,id
