# id;timestamp;commentText;codeText;commentWords;codeWords
Snapshotable -> void restore(Collection<S> state) throws Exception_;1483656313;Restores state that was previously snapshotted from the provided parameters. Typically the parameters are state_handles from which the old state is read.__@param state the old state to restore.;void restore(Collection<S> state) throws Exception_;restores,state,that,was,previously,snapshotted,from,the,provided,parameters,typically,the,parameters,are,state,handles,from,which,the,old,state,is,read,param,state,the,old,state,to,restore;void,restore,collection,s,state,throws,exception
Snapshotable -> void restore(Collection<S> state) throws Exception_;1487264183;Restores state that was previously snapshotted from the provided parameters. Typically the parameters are state_handles from which the old state is read.__@param state the old state to restore.;void restore(Collection<S> state) throws Exception_;restores,state,that,was,previously,snapshotted,from,the,provided,parameters,typically,the,parameters,are,state,handles,from,which,the,old,state,is,read,param,state,the,old,state,to,restore;void,restore,collection,s,state,throws,exception
Snapshotable -> void restore(Collection<S> state) throws Exception_;1489164945;Restores state that was previously snapshotted from the provided parameters. Typically the parameters are state_handles from which the old state is read.__@param state the old state to restore.;void restore(Collection<S> state) throws Exception_;restores,state,that,was,previously,snapshotted,from,the,provided,parameters,typically,the,parameters,are,state,handles,from,which,the,old,state,is,read,param,state,the,old,state,to,restore;void,restore,collection,s,state,throws,exception
Snapshotable -> RunnableFuture<S> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory) throws Exception_;1475571578;Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and_returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if_the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed_first before obtaining the handle.__@param checkpointId  The ID of the checkpoint._@param timestamp     The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams._@return A runnable future that will yield a {@link StateObject}.;RunnableFuture<S> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory) throws Exception_;operation,that,writes,a,snapshot,into,a,stream,that,is,provided,by,the,given,link,checkpoint,stream,factory,and,returns,a,link,runnable,future,that,gives,a,state,handle,to,the,snapshot,it,is,up,to,the,implementation,if,the,operation,is,performed,synchronous,or,asynchronous,in,the,later,case,the,returned,runnable,must,be,executed,first,before,obtaining,the,handle,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,return,a,runnable,future,that,will,yield,a,link,state,object;runnable,future,s,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,throws,exception
Snapshotable -> RunnableFuture<S> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory) throws Exception_;1483656313;Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and_returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if_the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed_first before obtaining the handle.__@param checkpointId  The ID of the checkpoint._@param timestamp     The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams._@return A runnable future that will yield a {@link StateObject}.;RunnableFuture<S> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory) throws Exception_;operation,that,writes,a,snapshot,into,a,stream,that,is,provided,by,the,given,link,checkpoint,stream,factory,and,returns,a,link,runnable,future,that,gives,a,state,handle,to,the,snapshot,it,is,up,to,the,implementation,if,the,operation,is,performed,synchronous,or,asynchronous,in,the,later,case,the,returned,runnable,must,be,executed,first,before,obtaining,the,handle,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,return,a,runnable,future,that,will,yield,a,link,state,object;runnable,future,s,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,throws,exception
Snapshotable -> RunnableFuture<S> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory, 			CheckpointOptions checkpointOptions) throws Exception_;1487264183;Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and_returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if_the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed_first before obtaining the handle.__@param checkpointId  The ID of the checkpoint._@param timestamp     The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams._@param checkpointOptions Options for how to perform this checkpoint._@return A runnable future that will yield a {@link StateObject}.;RunnableFuture<S> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory,_			CheckpointOptions checkpointOptions) throws Exception_;operation,that,writes,a,snapshot,into,a,stream,that,is,provided,by,the,given,link,checkpoint,stream,factory,and,returns,a,link,runnable,future,that,gives,a,state,handle,to,the,snapshot,it,is,up,to,the,implementation,if,the,operation,is,performed,synchronous,or,asynchronous,in,the,later,case,the,returned,runnable,must,be,executed,first,before,obtaining,the,handle,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,param,checkpoint,options,options,for,how,to,perform,this,checkpoint,return,a,runnable,future,that,will,yield,a,link,state,object;runnable,future,s,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,checkpoint,options,checkpoint,options,throws,exception
Snapshotable -> RunnableFuture<S> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory, 			CheckpointOptions checkpointOptions) throws Exception_;1489164945;Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and_returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if_the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed_first before obtaining the handle.__@param checkpointId  The ID of the checkpoint._@param timestamp     The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams._@param checkpointOptions Options for how to perform this checkpoint._@return A runnable future that will yield a {@link StateObject}.;RunnableFuture<S> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory,_			CheckpointOptions checkpointOptions) throws Exception_;operation,that,writes,a,snapshot,into,a,stream,that,is,provided,by,the,given,link,checkpoint,stream,factory,and,returns,a,link,runnable,future,that,gives,a,state,handle,to,the,snapshot,it,is,up,to,the,implementation,if,the,operation,is,performed,synchronous,or,asynchronous,in,the,later,case,the,returned,runnable,must,be,executed,first,before,obtaining,the,handle,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,param,checkpoint,options,options,for,how,to,perform,this,checkpoint,return,a,runnable,future,that,will,yield,a,link,state,object;runnable,future,s,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,checkpoint,options,checkpoint,options,throws,exception
Snapshotable -> RunnableFuture<S> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory, 			CheckpointOptions checkpointOptions) throws Exception_;1517924641;Operation that writes a snapshot into a stream that is provided by the given {@link CheckpointStreamFactory} and_returns a @{@link RunnableFuture} that gives a state handle to the snapshot. It is up to the implementation if_the operation is performed synchronous or asynchronous. In the later case, the returned Runnable must be executed_first before obtaining the handle.__@param checkpointId  The ID of the checkpoint._@param timestamp     The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams._@param checkpointOptions Options for how to perform this checkpoint._@return A runnable future that will yield a {@link StateObject}.;RunnableFuture<S> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory,_			CheckpointOptions checkpointOptions) throws Exception_;operation,that,writes,a,snapshot,into,a,stream,that,is,provided,by,the,given,link,checkpoint,stream,factory,and,returns,a,link,runnable,future,that,gives,a,state,handle,to,the,snapshot,it,is,up,to,the,implementation,if,the,operation,is,performed,synchronous,or,asynchronous,in,the,later,case,the,returned,runnable,must,be,executed,first,before,obtaining,the,handle,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,param,checkpoint,options,options,for,how,to,perform,this,checkpoint,return,a,runnable,future,that,will,yield,a,link,state,object;runnable,future,s,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,checkpoint,options,checkpoint,options,throws,exception
