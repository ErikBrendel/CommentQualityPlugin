# id;timestamp;commentText;codeText;commentWords;codeWords
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1484162264;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, HadoopUtils.getHadoopConfiguration())__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf,hadoop,utils,get,hadoop,configuration
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1492763864;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, HadoopUtils.getHadoopConfiguration())__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf,hadoop,utils,get,hadoop,configuration
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1495175928;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, HadoopUtils.getHadoopConfiguration())__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf,hadoop,utils,get,hadoop,configuration
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1499164405;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, HadoopUtils.getHadoopConfiguration())__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf,hadoop,utils,get,hadoop,configuration
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1499353249;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, HadoopUtils.getHadoopConfiguration(flinkConf))__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf,hadoop,utils,get,hadoop,configuration,flink,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1502726910;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, HadoopUtils.getHadoopConfiguration(flinkConf))__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf,hadoop,utils,get,hadoop,configuration,flink,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf);1506499511;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration.;public SecurityConfiguration(Configuration flinkConf) {_			this(flinkConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration;public,security,configuration,configuration,flink,conf,this,flink,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, 				org.apache.hadoop.conf.Configuration hadoopConf, 				List<? extends Class<? extends SecurityModule>> securityModules);1484162264;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration._@param securityModules the security modules to apply.;public SecurityConfiguration(Configuration flinkConf,_				org.apache.hadoop.conf.Configuration hadoopConf,_				List<? extends Class<? extends SecurityModule>> securityModules) {_			this.hadoopConf = checkNotNull(hadoopConf)__			this.keytab = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB)__			this.principal = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL)__			this.useTicketCache = flinkConf.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE)__			this.loginContextNames = parseList(flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS))__			this.zkServiceName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__			this.zkLoginContextName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME)__			this.securityModules = Collections.unmodifiableList(securityModules)___			validate()__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration,param,security,modules,the,security,modules,to,apply;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,list,extends,class,extends,security,module,security,modules,this,hadoop,conf,check,not,null,hadoop,conf,this,keytab,flink,conf,get,string,security,options,this,principal,flink,conf,get,string,security,options,this,use,ticket,cache,flink,conf,get,boolean,security,options,this,login,context,names,parse,list,flink,conf,get,string,security,options,this,zk,service,name,flink,conf,get,string,security,options,this,zk,login,context,name,flink,conf,get,string,security,options,this,security,modules,collections,unmodifiable,list,security,modules,validate
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, 				org.apache.hadoop.conf.Configuration hadoopConf, 				List<? extends Class<? extends SecurityModule>> securityModules);1492763864;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration._@param securityModules the security modules to apply.;public SecurityConfiguration(Configuration flinkConf,_				org.apache.hadoop.conf.Configuration hadoopConf,_				List<? extends Class<? extends SecurityModule>> securityModules) {_			this.hadoopConf = checkNotNull(hadoopConf)__			this.isZkSaslDisable = flinkConf.getBoolean(SecurityOptions.ZOOKEEPER_SASL_DISABLE)__			this.keytab = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB)__			this.principal = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL)__			this.useTicketCache = flinkConf.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE)__			this.loginContextNames = parseList(flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS))__			this.zkServiceName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__			this.zkLoginContextName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME)__			this.securityModules = Collections.unmodifiableList(securityModules)___			validate()__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration,param,security,modules,the,security,modules,to,apply;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,list,extends,class,extends,security,module,security,modules,this,hadoop,conf,check,not,null,hadoop,conf,this,is,zk,sasl,disable,flink,conf,get,boolean,security,options,this,keytab,flink,conf,get,string,security,options,this,principal,flink,conf,get,string,security,options,this,use,ticket,cache,flink,conf,get,boolean,security,options,this,login,context,names,parse,list,flink,conf,get,string,security,options,this,zk,service,name,flink,conf,get,string,security,options,this,zk,login,context,name,flink,conf,get,string,security,options,this,security,modules,collections,unmodifiable,list,security,modules,validate
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, 				org.apache.hadoop.conf.Configuration hadoopConf, 				List<? extends Class<? extends SecurityModule>> securityModules);1495175928;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration._@param securityModules the security modules to apply.;public SecurityConfiguration(Configuration flinkConf,_				org.apache.hadoop.conf.Configuration hadoopConf,_				List<? extends Class<? extends SecurityModule>> securityModules) {_			this.hadoopConf = checkNotNull(hadoopConf)__			this.isZkSaslDisable = flinkConf.getBoolean(SecurityOptions.ZOOKEEPER_SASL_DISABLE)__			this.keytab = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB)__			this.principal = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL)__			this.useTicketCache = flinkConf.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE)__			this.loginContextNames = parseList(flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS))__			this.zkServiceName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__			this.zkLoginContextName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME)__			this.securityModules = Collections.unmodifiableList(securityModules)___			validate()__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration,param,security,modules,the,security,modules,to,apply;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,list,extends,class,extends,security,module,security,modules,this,hadoop,conf,check,not,null,hadoop,conf,this,is,zk,sasl,disable,flink,conf,get,boolean,security,options,this,keytab,flink,conf,get,string,security,options,this,principal,flink,conf,get,string,security,options,this,use,ticket,cache,flink,conf,get,boolean,security,options,this,login,context,names,parse,list,flink,conf,get,string,security,options,this,zk,service,name,flink,conf,get,string,security,options,this,zk,login,context,name,flink,conf,get,string,security,options,this,security,modules,collections,unmodifiable,list,security,modules,validate
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, 				org.apache.hadoop.conf.Configuration hadoopConf, 				List<? extends Class<? extends SecurityModule>> securityModules);1499164405;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration._@param securityModules the security modules to apply.;public SecurityConfiguration(Configuration flinkConf,_				org.apache.hadoop.conf.Configuration hadoopConf,_				List<? extends Class<? extends SecurityModule>> securityModules) {_			this.hadoopConf = checkNotNull(hadoopConf)__			this.isZkSaslDisable = flinkConf.getBoolean(SecurityOptions.ZOOKEEPER_SASL_DISABLE)__			this.keytab = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB)__			this.principal = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL)__			this.useTicketCache = flinkConf.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE)__			this.loginContextNames = parseList(flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS))__			this.zkServiceName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__			this.zkLoginContextName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME)__			this.securityModules = Collections.unmodifiableList(securityModules)___			validate()__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration,param,security,modules,the,security,modules,to,apply;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,list,extends,class,extends,security,module,security,modules,this,hadoop,conf,check,not,null,hadoop,conf,this,is,zk,sasl,disable,flink,conf,get,boolean,security,options,this,keytab,flink,conf,get,string,security,options,this,principal,flink,conf,get,string,security,options,this,use,ticket,cache,flink,conf,get,boolean,security,options,this,login,context,names,parse,list,flink,conf,get,string,security,options,this,zk,service,name,flink,conf,get,string,security,options,this,zk,login,context,name,flink,conf,get,string,security,options,this,security,modules,collections,unmodifiable,list,security,modules,validate
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, 				org.apache.hadoop.conf.Configuration hadoopConf, 				List<? extends Class<? extends SecurityModule>> securityModules);1499353249;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration._@param securityModules the security modules to apply.;public SecurityConfiguration(Configuration flinkConf,_				org.apache.hadoop.conf.Configuration hadoopConf,_				List<? extends Class<? extends SecurityModule>> securityModules) {_			this.hadoopConf = checkNotNull(hadoopConf)__			this.isZkSaslDisable = flinkConf.getBoolean(SecurityOptions.ZOOKEEPER_SASL_DISABLE)__			this.keytab = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB)__			this.principal = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL)__			this.useTicketCache = flinkConf.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE)__			this.loginContextNames = parseList(flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS))__			this.zkServiceName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__			this.zkLoginContextName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME)__			this.securityModules = Collections.unmodifiableList(securityModules)___			validate()__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration,param,security,modules,the,security,modules,to,apply;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,list,extends,class,extends,security,module,security,modules,this,hadoop,conf,check,not,null,hadoop,conf,this,is,zk,sasl,disable,flink,conf,get,boolean,security,options,this,keytab,flink,conf,get,string,security,options,this,principal,flink,conf,get,string,security,options,this,use,ticket,cache,flink,conf,get,boolean,security,options,this,login,context,names,parse,list,flink,conf,get,string,security,options,this,zk,service,name,flink,conf,get,string,security,options,this,zk,login,context,name,flink,conf,get,string,security,options,this,security,modules,collections,unmodifiable,list,security,modules,validate
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, 				org.apache.hadoop.conf.Configuration hadoopConf, 				List<? extends Class<? extends SecurityModule>> securityModules);1502726910;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration._@param securityModules the security modules to apply.;public SecurityConfiguration(Configuration flinkConf,_				org.apache.hadoop.conf.Configuration hadoopConf,_				List<? extends Class<? extends SecurityModule>> securityModules) {_			this.hadoopConf = checkNotNull(hadoopConf)__			this.isZkSaslDisable = flinkConf.getBoolean(SecurityOptions.ZOOKEEPER_SASL_DISABLE)__			this.keytab = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_KEYTAB)__			this.principal = flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL)__			this.useTicketCache = flinkConf.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE)__			this.loginContextNames = parseList(flinkConf.getString(SecurityOptions.KERBEROS_LOGIN_CONTEXTS))__			this.zkServiceName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__			this.zkLoginContextName = flinkConf.getString(SecurityOptions.ZOOKEEPER_SASL_LOGIN_CONTEXT_NAME)__			this.securityModules = Collections.unmodifiableList(securityModules)___			validate()__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration,param,security,modules,the,security,modules,to,apply;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,list,extends,class,extends,security,module,security,modules,this,hadoop,conf,check,not,null,hadoop,conf,this,is,zk,sasl,disable,flink,conf,get,boolean,security,options,this,keytab,flink,conf,get,string,security,options,this,principal,flink,conf,get,string,security,options,this,use,ticket,cache,flink,conf,get,boolean,security,options,this,login,context,names,parse,list,flink,conf,get,string,security,options,this,zk,service,name,flink,conf,get,string,security,options,this,zk,login,context,name,flink,conf,get,string,security,options,this,security,modules,collections,unmodifiable,list,security,modules,validate
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf);1484162264;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration.;public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf) {_			this(flinkConf, hadoopConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,this,flink,conf,hadoop,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf);1492763864;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration.;public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf) {_			this(flinkConf, hadoopConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,this,flink,conf,hadoop,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf);1495175928;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration.;public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf) {_			this(flinkConf, hadoopConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,this,flink,conf,hadoop,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf);1499164405;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration.;public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf) {_			this(flinkConf, hadoopConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,this,flink,conf,hadoop,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf);1499353249;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration.;public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf) {_			this(flinkConf, hadoopConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,this,flink,conf,hadoop,conf
SecurityUtils -> SecurityConfiguration -> public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf);1502726910;Create a security configuration from the global configuration._@param flinkConf the Flink global configuration._@param hadoopConf the Hadoop configuration.;public SecurityConfiguration(Configuration flinkConf, org.apache.hadoop.conf.Configuration hadoopConf) {_			this(flinkConf, hadoopConf, DEFAULT_MODULES)__		};create,a,security,configuration,from,the,global,configuration,param,flink,conf,the,flink,global,configuration,param,hadoop,conf,the,hadoop,configuration;public,security,configuration,configuration,flink,conf,org,apache,hadoop,conf,configuration,hadoop,conf,this,flink,conf,hadoop,conf
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1480082300;Performs a static initialization of the JAAS and Hadoop UGI security mechanism;public static void install(SecurityConfiguration config) throws Exception {__		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}__		_		JaasConfiguration jaasConfig = new JaasConfiguration(config.keytab, config.principal)__		javax.security.auth.login.Configuration.setConfiguration(jaasConfig)___		populateSystemSecurityProperties(config.flinkConf)___		_		UserGroupInformation.setConfiguration(config.hadoopConf)___		_		if (UserGroupInformation.isSecurityEnabled()) {__			final UserGroupInformation loginUser___			if (config.keytab != null && !StringUtils.isBlank(config.principal)) {_				String keytabPath = (new File(config.keytab)).getAbsolutePath()___				UserGroupInformation.loginUserFromKeytab(config.principal, keytabPath)___				loginUser = UserGroupInformation.getLoginUser()___				_				String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__				if (fileLocation != null) {_				_					try {_						Method readTokenStorageFileMethod = Credentials.class.getMethod("readTokenStorageFile",_							File.class, org.apache.hadoop.conf.Configuration.class)__						Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_							config.hadoopConf)__						Method addCredentialsMethod = UserGroupInformation.class.getMethod("addCredentials",_							Credentials.class)__						addCredentialsMethod.invoke(loginUser, cred)__					} catch (NoSuchMethodException e) {_						LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e)__					}_				}_			} else {_				_				try {_					_					_					Method loginUserFromSubjectMethod = UserGroupInformation.class.getMethod("loginUserFromSubject", Subject.class)__					Subject subject = null__					loginUserFromSubjectMethod.invoke(null, subject)__				} catch (NoSuchMethodException e) {_					LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e)__				}__				_				loginUser = UserGroupInformation.getLoginUser()__			}__			boolean delegationToken = false__			final Text HDFS_DELEGATION_KIND = new Text("HDFS_DELEGATION_TOKEN")__			Collection<Token<? extends TokenIdentifier>> usrTok = loginUser.getTokens()__			for (Token<? extends TokenIdentifier> token : usrTok) {_				final Text id = new Text(token.getIdentifier())__				LOG.debug("Found user token " + id + " with " + token)__				if (token.getKind().equals(HDFS_DELEGATION_KIND)) {_					delegationToken = true__				}_			}__			if (!loginUser.hasKerberosCredentials()) {_				_				if (!delegationToken) {_					LOG.error("Hadoop Security is enabled but current login user does not have Kerberos Credentials")__					throw new RuntimeException("Hadoop Security is enabled but current login user does not have Kerberos Credentials")__				}_			}__			installedContext = new HadoopSecurityContext(loginUser)__		}_	};performs,a,static,initialization,of,the,jaas,and,hadoop,ugi,security,mechanism;public,static,void,install,security,configuration,config,throws,exception,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,jaas,configuration,jaas,config,new,jaas,configuration,config,keytab,config,principal,javax,security,auth,login,configuration,set,configuration,jaas,config,populate,system,security,properties,config,flink,conf,user,group,information,set,configuration,config,hadoop,conf,if,user,group,information,is,security,enabled,final,user,group,information,login,user,if,config,keytab,null,string,utils,is,blank,config,principal,string,keytab,path,new,file,config,keytab,get,absolute,path,user,group,information,login,user,from,keytab,config,principal,keytab,path,login,user,user,group,information,get,login,user,string,file,location,system,getenv,user,group,information,if,file,location,null,try,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,config,hadoop,conf,method,add,credentials,method,user,group,information,class,get,method,add,credentials,credentials,class,add,credentials,method,invoke,login,user,cred,catch,no,such,method,exception,e,log,warn,could,not,find,method,implementations,in,the,shaded,jar,exception,e,else,try,method,login,user,from,subject,method,user,group,information,class,get,method,login,user,from,subject,subject,class,subject,subject,null,login,user,from,subject,method,invoke,null,subject,catch,no,such,method,exception,e,log,warn,could,not,find,method,implementations,in,the,shaded,jar,exception,e,login,user,user,group,information,get,login,user,boolean,delegation,token,false,final,text,new,text,collection,token,extends,token,identifier,usr,tok,login,user,get,tokens,for,token,extends,token,identifier,token,usr,tok,final,text,id,new,text,token,get,identifier,log,debug,found,user,token,id,with,token,if,token,get,kind,equals,delegation,token,true,if,login,user,has,kerberos,credentials,if,delegation,token,log,error,hadoop,security,is,enabled,but,current,login,user,does,not,have,kerberos,credentials,throw,new,runtime,exception,hadoop,security,is,enabled,but,current,login,user,does,not,have,kerberos,credentials,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1480980565;Performs a static initialization of the JAAS and Hadoop UGI security mechanism;public static void install(SecurityConfiguration config) throws Exception {__		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}__		_		JaasConfiguration jaasConfig = new JaasConfiguration(config.keytab, config.principal)__		javax.security.auth.login.Configuration.setConfiguration(jaasConfig)___		populateSystemSecurityProperties(config.flinkConf)___		_		UserGroupInformation.setConfiguration(config.hadoopConf)___		_		if (UserGroupInformation.isSecurityEnabled()) {__			final UserGroupInformation loginUser___			if (config.keytab != null && !StringUtils.isBlank(config.principal)) {_				String keytabPath = (new File(config.keytab)).getAbsolutePath()___				UserGroupInformation.loginUserFromKeytab(config.principal, keytabPath)___				loginUser = UserGroupInformation.getLoginUser()___				_				String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__				if (fileLocation != null) {_				_					try {_						Method readTokenStorageFileMethod = Credentials.class.getMethod("readTokenStorageFile",_							File.class, org.apache.hadoop.conf.Configuration.class)__						Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_							config.hadoopConf)__						Method addCredentialsMethod = UserGroupInformation.class.getMethod("addCredentials",_							Credentials.class)__						addCredentialsMethod.invoke(loginUser, cred)__					} catch (NoSuchMethodException e) {_						LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e)__					}_				}_			} else {_				_				try {_					_					_					Method loginUserFromSubjectMethod = UserGroupInformation.class.getMethod("loginUserFromSubject", Subject.class)__					Subject subject = null__					loginUserFromSubjectMethod.invoke(null, subject)__				} catch (NoSuchMethodException e) {_					LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e)__				}__				_				loginUser = UserGroupInformation.getLoginUser()__			}__			LOG.info("Hadoop user set to {}", loginUser.toString())___			boolean delegationToken = false__			final Text HDFS_DELEGATION_KIND = new Text("HDFS_DELEGATION_TOKEN")__			Collection<Token<? extends TokenIdentifier>> usrTok = loginUser.getTokens()__			for (Token<? extends TokenIdentifier> token : usrTok) {_				final Text id = new Text(token.getIdentifier())__				LOG.debug("Found user token " + id + " with " + token)__				if (token.getKind().equals(HDFS_DELEGATION_KIND)) {_					delegationToken = true__				}_			}__			if (!loginUser.hasKerberosCredentials()) {_				_				if (!delegationToken) {_					LOG.error("Hadoop Security is enabled but current login user does not have Kerberos Credentials")__					throw new RuntimeException("Hadoop Security is enabled but current login user does not have Kerberos Credentials")__				}_			}__			installedContext = new HadoopSecurityContext(loginUser)__		}_	};performs,a,static,initialization,of,the,jaas,and,hadoop,ugi,security,mechanism;public,static,void,install,security,configuration,config,throws,exception,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,jaas,configuration,jaas,config,new,jaas,configuration,config,keytab,config,principal,javax,security,auth,login,configuration,set,configuration,jaas,config,populate,system,security,properties,config,flink,conf,user,group,information,set,configuration,config,hadoop,conf,if,user,group,information,is,security,enabled,final,user,group,information,login,user,if,config,keytab,null,string,utils,is,blank,config,principal,string,keytab,path,new,file,config,keytab,get,absolute,path,user,group,information,login,user,from,keytab,config,principal,keytab,path,login,user,user,group,information,get,login,user,string,file,location,system,getenv,user,group,information,if,file,location,null,try,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,config,hadoop,conf,method,add,credentials,method,user,group,information,class,get,method,add,credentials,credentials,class,add,credentials,method,invoke,login,user,cred,catch,no,such,method,exception,e,log,warn,could,not,find,method,implementations,in,the,shaded,jar,exception,e,else,try,method,login,user,from,subject,method,user,group,information,class,get,method,login,user,from,subject,subject,class,subject,subject,null,login,user,from,subject,method,invoke,null,subject,catch,no,such,method,exception,e,log,warn,could,not,find,method,implementations,in,the,shaded,jar,exception,e,login,user,user,group,information,get,login,user,log,info,hadoop,user,set,to,login,user,to,string,boolean,delegation,token,false,final,text,new,text,collection,token,extends,token,identifier,usr,tok,login,user,get,tokens,for,token,extends,token,identifier,token,usr,tok,final,text,id,new,text,token,get,identifier,log,debug,found,user,token,id,with,token,if,token,get,kind,equals,delegation,token,true,if,login,user,has,kerberos,credentials,if,delegation,token,log,error,hadoop,security,is,enabled,but,current,login,user,does,not,have,kerberos,credentials,throw,new,runtime,exception,hadoop,security,is,enabled,but,current,login,user,does,not,have,kerberos,credentials,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1481907119;Performs a static initialization of the JAAS and Hadoop UGI security mechanism._It creates the in-memory JAAS configuration object which will serve appropriate_ApplicationConfigurationEntry for the connector login module implementation that_authenticates Kerberos identity using SASL/JAAS based mechanism.;public static void install(SecurityConfiguration config) throws Exception {__		if (!config.securityIsEnabled()) {_			_			return__		}__		_		JaasConfiguration jaasConfig = new JaasConfiguration(config.keytab, config.principal)__		javax.security.auth.login.Configuration.setConfiguration(jaasConfig)___		populateSystemSecurityProperties(config.flinkConf)___		_		UserGroupInformation.setConfiguration(config.hadoopConf)___		_		if (UserGroupInformation.isSecurityEnabled()) {__			final UserGroupInformation loginUser___			if (config.keytab != null && !StringUtils.isBlank(config.principal)) {_				String keytabPath = (new File(config.keytab)).getAbsolutePath()___				UserGroupInformation.loginUserFromKeytab(config.principal, keytabPath)___				loginUser = UserGroupInformation.getLoginUser()___				_				String fileLocation = System.getenv(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION)__				if (fileLocation != null) {_				_					try {_						Method readTokenStorageFileMethod = Credentials.class.getMethod("readTokenStorageFile",_							File.class, org.apache.hadoop.conf.Configuration.class)__						Credentials cred = (Credentials) readTokenStorageFileMethod.invoke(null, new File(fileLocation),_							config.hadoopConf)__						Method addCredentialsMethod = UserGroupInformation.class.getMethod("addCredentials",_							Credentials.class)__						addCredentialsMethod.invoke(loginUser, cred)__					} catch (NoSuchMethodException e) {_						LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e)__					}_				}_			} else {_				_				try {_					_					_					Method loginUserFromSubjectMethod = UserGroupInformation.class.getMethod("loginUserFromSubject", Subject.class)__					Subject subject = null__					loginUserFromSubjectMethod.invoke(null, subject)__				} catch (NoSuchMethodException e) {_					LOG.warn("Could not find method implementations in the shaded jar. Exception: {}", e)__				}__				_				loginUser = UserGroupInformation.getLoginUser()__			}__			LOG.info("Hadoop user set to {}", loginUser.toString())___			boolean delegationToken = false__			final Text HDFS_DELEGATION_KIND = new Text("HDFS_DELEGATION_TOKEN")__			Collection<Token<? extends TokenIdentifier>> usrTok = loginUser.getTokens()__			for (Token<? extends TokenIdentifier> token : usrTok) {_				final Text id = new Text(token.getIdentifier())__				LOG.debug("Found user token " + id + " with " + token)__				if (token.getKind().equals(HDFS_DELEGATION_KIND)) {_					delegationToken = true__				}_			}__			if (!loginUser.hasKerberosCredentials()) {_				_				if (!delegationToken) {_					LOG.error("Hadoop Security is enabled but current login user does not have Kerberos Credentials")__					throw new RuntimeException("Hadoop Security is enabled but current login user does not have Kerberos Credentials")__				}_			}__			if (!(installedContext instanceof NoOpSecurityContext)) {_				LOG.warn("overriding previous security context")__			}__			installedContext = new HadoopSecurityContext(loginUser)__		}_	};performs,a,static,initialization,of,the,jaas,and,hadoop,ugi,security,mechanism,it,creates,the,in,memory,jaas,configuration,object,which,will,serve,appropriate,application,configuration,entry,for,the,connector,login,module,implementation,that,authenticates,kerberos,identity,using,sasl,jaas,based,mechanism;public,static,void,install,security,configuration,config,throws,exception,if,config,security,is,enabled,return,jaas,configuration,jaas,config,new,jaas,configuration,config,keytab,config,principal,javax,security,auth,login,configuration,set,configuration,jaas,config,populate,system,security,properties,config,flink,conf,user,group,information,set,configuration,config,hadoop,conf,if,user,group,information,is,security,enabled,final,user,group,information,login,user,if,config,keytab,null,string,utils,is,blank,config,principal,string,keytab,path,new,file,config,keytab,get,absolute,path,user,group,information,login,user,from,keytab,config,principal,keytab,path,login,user,user,group,information,get,login,user,string,file,location,system,getenv,user,group,information,if,file,location,null,try,method,read,token,storage,file,method,credentials,class,get,method,read,token,storage,file,file,class,org,apache,hadoop,conf,configuration,class,credentials,cred,credentials,read,token,storage,file,method,invoke,null,new,file,file,location,config,hadoop,conf,method,add,credentials,method,user,group,information,class,get,method,add,credentials,credentials,class,add,credentials,method,invoke,login,user,cred,catch,no,such,method,exception,e,log,warn,could,not,find,method,implementations,in,the,shaded,jar,exception,e,else,try,method,login,user,from,subject,method,user,group,information,class,get,method,login,user,from,subject,subject,class,subject,subject,null,login,user,from,subject,method,invoke,null,subject,catch,no,such,method,exception,e,log,warn,could,not,find,method,implementations,in,the,shaded,jar,exception,e,login,user,user,group,information,get,login,user,log,info,hadoop,user,set,to,login,user,to,string,boolean,delegation,token,false,final,text,new,text,collection,token,extends,token,identifier,usr,tok,login,user,get,tokens,for,token,extends,token,identifier,token,usr,tok,final,text,id,new,text,token,get,identifier,log,debug,found,user,token,id,with,token,if,token,get,kind,equals,delegation,token,true,if,login,user,has,kerberos,credentials,if,delegation,token,log,error,hadoop,security,is,enabled,but,current,login,user,does,not,have,kerberos,credentials,throw,new,runtime,exception,hadoop,security,is,enabled,but,current,login,user,does,not,have,kerberos,credentials,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1484162264;Installs a process-wide security configuration.__Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (Class<? extends SecurityModule> moduleClass : config.getSecurityModules()) {_				SecurityModule module = moduleClass.newInstance()__				module.install(config)__				modules.add(module)__			}_		}_		catch(Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		_		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}_		UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__		installedContext = new HadoopSecurityContext(loginUser)__	};installs,a,process,wide,security,configuration,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,class,extends,security,module,module,class,config,get,security,modules,security,module,module,module,class,new,instance,module,install,config,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1492763864;Installs a process-wide security configuration.__Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (Class<? extends SecurityModule> moduleClass : config.getSecurityModules()) {_				SecurityModule module = moduleClass.newInstance()__				module.install(config)__				modules.add(module)__			}_		}_		catch(Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		_		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}_		UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__		installedContext = new HadoopSecurityContext(loginUser)__	};installs,a,process,wide,security,configuration,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,class,extends,security,module,module,class,config,get,security,modules,security,module,module,module,class,new,instance,module,install,config,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1495175928;Installs a process-wide security configuration.__Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (Class<? extends SecurityModule> moduleClass : config.getSecurityModules()) {_				SecurityModule module = moduleClass.newInstance()__				module.install(config)__				modules.add(module)__			}_		}_		catch(Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		_		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}_		UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__		installedContext = new HadoopSecurityContext(loginUser)__	};installs,a,process,wide,security,configuration,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,class,extends,security,module,module,class,config,get,security,modules,security,module,module,module,class,new,instance,module,install,config,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1499164405;Installs a process-wide security configuration.__<p>Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (Class<? extends SecurityModule> moduleClass : config.getSecurityModules()) {_				SecurityModule module = moduleClass.newInstance()__				module.install(config)__				modules.add(module)__			}_		}_		catch (Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		_		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}_		UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__		installedContext = new HadoopSecurityContext(loginUser)__	};installs,a,process,wide,security,configuration,p,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,class,extends,security,module,module,class,config,get,security,modules,security,module,module,module,class,new,instance,module,install,config,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1499353249;Installs a process-wide security configuration.__<p>Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (Class<? extends SecurityModule> moduleClass : config.getSecurityModules()) {_				SecurityModule module = moduleClass.newInstance()__				module.install(config)__				modules.add(module)__			}_		}_		catch (Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		_		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}_		UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__		installedContext = new HadoopSecurityContext(loginUser)__	};installs,a,process,wide,security,configuration,p,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,class,extends,security,module,module,class,config,get,security,modules,security,module,module,module,class,new,instance,module,install,config,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1502726910;Installs a process-wide security configuration.__<p>Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (Class<? extends SecurityModule> moduleClass : config.getSecurityModules()) {_				SecurityModule module = moduleClass.newInstance()__				module.install(config)__				modules.add(module)__			}_		}_		catch (Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		_		if (!(installedContext instanceof NoOpSecurityContext)) {_			LOG.warn("overriding previous security context")__		}_		UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__		installedContext = new HadoopSecurityContext(loginUser)__	};installs,a,process,wide,security,configuration,p,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,class,extends,security,module,module,class,config,get,security,modules,security,module,module,module,class,new,instance,module,install,config,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1506499511;Installs a process-wide security configuration.__<p>Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (SecurityModuleFactory moduleFactory : config.getSecurityModuleFactories()) {_				SecurityModule module = moduleFactory.createModule(config)__				_				if (module != null) {_					module.install()__					modules.add(module)__				}_			}_		}_		catch (Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		try {_			Class.forName(_				"org.apache.hadoop.security.UserGroupInformation",_				false,_				SecurityUtils.class.getClassLoader())___			_			_			if (!(installedContext instanceof NoOpSecurityContext)) {_				LOG.warn("overriding previous security context")__			}_			UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__			installedContext = new HadoopSecurityContext(loginUser)__		} catch (ClassNotFoundException e) {_			LOG.info("Cannot install HadoopSecurityContext because Hadoop cannot be found in the Classpath.")__		} catch (LinkageError e) {_			LOG.error("Cannot install HadoopSecurityContext.", e)__		}_	};installs,a,process,wide,security,configuration,p,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,security,module,factory,module,factory,config,get,security,module,factories,security,module,module,module,factory,create,module,config,if,module,null,module,install,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,try,class,for,name,org,apache,hadoop,security,user,group,information,false,security,utils,class,get,class,loader,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user,catch,class,not,found,exception,e,log,info,cannot,install,hadoop,security,context,because,hadoop,cannot,be,found,in,the,classpath,catch,linkage,error,e,log,error,cannot,install,hadoop,security,context,e
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1506499511;Installs a process-wide security configuration.__<p>Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (SecurityModuleFactory moduleFactory : config.getSecurityModuleFactories()) {_				SecurityModule module = moduleFactory.createModule(config)__				_				if (module != null) {_					module.install()__					modules.add(module)__				}_			}_		}_		catch (Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		try {_			Class.forName(_				"org.apache.hadoop.security.UserGroupInformation",_				false,_				SecurityUtils.class.getClassLoader())___			_			_			if (!(installedContext instanceof NoOpSecurityContext)) {_				LOG.warn("overriding previous security context")__			}_			UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__			installedContext = new HadoopSecurityContext(loginUser)__		} catch (ClassNotFoundException e) {_			LOG.info("Cannot install HadoopSecurityContext because Hadoop cannot be found in the Classpath.")__		} catch (LinkageError e) {_			LOG.error("Cannot install HadoopSecurityContext.", e)__		}_	};installs,a,process,wide,security,configuration,p,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,security,module,factory,module,factory,config,get,security,module,factories,security,module,module,module,factory,create,module,config,if,module,null,module,install,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,try,class,for,name,org,apache,hadoop,security,user,group,information,false,security,utils,class,get,class,loader,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user,catch,class,not,found,exception,e,log,info,cannot,install,hadoop,security,context,because,hadoop,cannot,be,found,in,the,classpath,catch,linkage,error,e,log,error,cannot,install,hadoop,security,context,e
SecurityUtils -> public static void install(SecurityConfiguration config) throws Exception;1517943539;Installs a process-wide security configuration.__<p>Applies the configuration using the available security modules (i.e. Hadoop, JAAS).;public static void install(SecurityConfiguration config) throws Exception {__		_		List<SecurityModule> modules = new ArrayList<>()__		try {_			for (SecurityModuleFactory moduleFactory : config.getSecurityModuleFactories()) {_				SecurityModule module = moduleFactory.createModule(config)__				_				if (module != null) {_					module.install()__					modules.add(module)__				}_			}_		}_		catch (Exception ex) {_			throw new Exception("unable to establish the security context", ex)__		}_		installedModules = modules___		_		try {_			Class.forName(_				"org.apache.hadoop.security.UserGroupInformation",_				false,_				SecurityUtils.class.getClassLoader())___			_			_			if (!(installedContext instanceof NoOpSecurityContext)) {_				LOG.warn("overriding previous security context")__			}_			UserGroupInformation loginUser = UserGroupInformation.getLoginUser()__			installedContext = new HadoopSecurityContext(loginUser)__		} catch (ClassNotFoundException e) {_			LOG.info("Cannot install HadoopSecurityContext because Hadoop cannot be found in the Classpath.")__		} catch (LinkageError e) {_			LOG.error("Cannot install HadoopSecurityContext.", e)__		}_	};installs,a,process,wide,security,configuration,p,applies,the,configuration,using,the,available,security,modules,i,e,hadoop,jaas;public,static,void,install,security,configuration,config,throws,exception,list,security,module,modules,new,array,list,try,for,security,module,factory,module,factory,config,get,security,module,factories,security,module,module,module,factory,create,module,config,if,module,null,module,install,modules,add,module,catch,exception,ex,throw,new,exception,unable,to,establish,the,security,context,ex,installed,modules,modules,try,class,for,name,org,apache,hadoop,security,user,group,information,false,security,utils,class,get,class,loader,if,installed,context,instanceof,no,op,security,context,log,warn,overriding,previous,security,context,user,group,information,login,user,user,group,information,get,login,user,installed,context,new,hadoop,security,context,login,user,catch,class,not,found,exception,e,log,info,cannot,install,hadoop,security,context,because,hadoop,cannot,be,found,in,the,classpath,catch,linkage,error,e,log,error,cannot,install,hadoop,security,context,e
