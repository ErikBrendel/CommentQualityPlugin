# id;timestamp;commentText;codeText;commentWords;codeWords
MetricRegistryImpl -> public boolean isShutdown();1508426573;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistryImpl -> public boolean isShutdown();1508494390;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistryImpl -> public boolean isShutdown();1510746990;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistryImpl -> public boolean isShutdown();1510748058;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return reporters == null && executor.isShutdown()__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,reporters,null,executor,is,shutdown
MetricRegistryImpl -> public boolean isShutdown();1518765124;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return isShutdown__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,is,shutdown
MetricRegistryImpl -> public boolean isShutdown();1539839273;Returns whether this registry has been shutdown.__@return true, if this registry was shutdown, otherwise false;public boolean isShutdown() {_		synchronized (lock) {_			return isShutdown__		}_	};returns,whether,this,registry,has,been,shutdown,return,true,if,this,registry,was,shutdown,otherwise,false;public,boolean,is,shutdown,synchronized,lock,return,is,shutdown
MetricRegistryImpl -> public void shutdown();1508426573;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)__				stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,stop,future,patterns,graceful,stop,query,service,stop,timeout,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistryImpl -> public void shutdown();1508494390;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)___				try {_					stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__				} catch (IllegalStateException ignored) {_					_					_					_					LOG.debug("The metric query service actor has already been stopped because the " +_						"underlying ActorSystem has already been shut down.")__				}_			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,try,stop,future,patterns,graceful,stop,query,service,stop,timeout,catch,illegal,state,exception,ignored,log,debug,the,metric,query,service,actor,has,already,been,stopped,because,the,underlying,actor,system,has,already,been,shut,down,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistryImpl -> public void shutdown();1510746990;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)___				try {_					stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__				} catch (IllegalStateException ignored) {_					_					_					_					LOG.debug("The metric query service actor has already been stopped because the " +_						"underlying ActorSystem has already been shut down.")__				}_			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,try,stop,future,patterns,graceful,stop,query,service,stop,timeout,catch,illegal,state,exception,ignored,log,debug,the,metric,query,service,actor,has,already,been,stopped,because,the,underlying,actor,system,has,already,been,shut,down,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistryImpl -> public void shutdown();1510748058;Shuts down this registry and the associated {@link MetricReporter}.;public void shutdown() {_		synchronized (lock) {_			Future<Boolean> stopFuture = null__			FiniteDuration stopTimeout = null___			if (queryService != null) {_				stopTimeout = new FiniteDuration(1L, TimeUnit.SECONDS)___				try {_					stopFuture = Patterns.gracefulStop(queryService, stopTimeout)__				} catch (IllegalStateException ignored) {_					_					_					_					LOG.debug("The metric query service actor has already been stopped because the " +_						"underlying ActorSystem has already been shut down.")__				}_			}__			if (reporters != null) {_				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						LOG.warn("Metrics reporter did not shut down cleanly", t)__					}_				}_				reporters = null__			}_			shutdownExecutor()___			if (stopFuture != null) {_				boolean stopped = false___				try {_					stopped = Await.result(stopFuture, stopTimeout)__				} catch (Exception e) {_					LOG.warn("Query actor did not properly stop.", e)__				}__				if (!stopped) {_					_					queryService.tell(Kill.getInstance(), ActorRef.noSender())__				}_			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter;public,void,shutdown,synchronized,lock,future,boolean,stop,future,null,finite,duration,stop,timeout,null,if,query,service,null,stop,timeout,new,finite,duration,1l,time,unit,seconds,try,stop,future,patterns,graceful,stop,query,service,stop,timeout,catch,illegal,state,exception,ignored,log,debug,the,metric,query,service,actor,has,already,been,stopped,because,the,underlying,actor,system,has,already,been,shut,down,if,reporters,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,log,warn,metrics,reporter,did,not,shut,down,cleanly,t,reporters,null,shutdown,executor,if,stop,future,null,boolean,stopped,false,try,stopped,await,result,stop,future,stop,timeout,catch,exception,e,log,warn,query,actor,did,not,properly,stop,e,if,stopped,query,service,tell,kill,get,instance,actor,ref,no,sender
MetricRegistryImpl -> @Override 	@Nullable 	public String getMetricQueryServicePath();1508494390;Returns the address under which the {@link MetricQueryService} is reachable.__@return address of the metric query service;@Override_	@Nullable_	public String getMetricQueryServicePath() {_		return metricQueryServicePath__	};returns,the,address,under,which,the,link,metric,query,service,is,reachable,return,address,of,the,metric,query,service;override,nullable,public,string,get,metric,query,service,path,return,metric,query,service,path
MetricRegistryImpl -> @Override 	@Nullable 	public String getMetricQueryServicePath();1510746990;Returns the address under which the {@link MetricQueryService} is reachable.__@return address of the metric query service;@Override_	@Nullable_	public String getMetricQueryServicePath() {_		return metricQueryServicePath__	};returns,the,address,under,which,the,link,metric,query,service,is,reachable,return,address,of,the,metric,query,service;override,nullable,public,string,get,metric,query,service,path,return,metric,query,service,path
MetricRegistryImpl -> @Override 	@Nullable 	public String getMetricQueryServicePath();1510748058;Returns the address under which the {@link MetricQueryService} is reachable.__@return address of the metric query service;@Override_	@Nullable_	public String getMetricQueryServicePath() {_		return metricQueryServicePath__	};returns,the,address,under,which,the,link,metric,query,service,is,reachable,return,address,of,the,metric,query,service;override,nullable,public,string,get,metric,query,service,path,return,metric,query,service,path
MetricRegistryImpl -> @Override 	@Nullable 	public String getMetricQueryServicePath();1518765124;Returns the address under which the {@link MetricQueryService} is reachable.__@return address of the metric query service;@Override_	@Nullable_	public String getMetricQueryServicePath() {_		return metricQueryServicePath__	};returns,the,address,under,which,the,link,metric,query,service,is,reachable,return,address,of,the,metric,query,service;override,nullable,public,string,get,metric,query,service,path,return,metric,query,service,path
MetricRegistryImpl -> @Override 	@Nullable 	public String getMetricQueryServicePath();1539839273;Returns the address under which the {@link MetricQueryService} is reachable.__@return address of the metric query service;@Override_	@Nullable_	public String getMetricQueryServicePath() {_		return metricQueryServicePath__	};returns,the,address,under,which,the,link,metric,query,service,is,reachable,return,address,of,the,metric,query,service;override,nullable,public,string,get,metric,query,service,path,return,metric,query,service,path
MetricRegistryImpl -> public MetricRegistryImpl(MetricRegistryConfiguration config);1508426573;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistryImpl(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,impl,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,impl,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistryImpl -> public MetricRegistryImpl(MetricRegistryConfiguration config);1508494390;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistryImpl(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,impl,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,impl,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistryImpl -> public MetricRegistryImpl(MetricRegistryConfiguration config);1510746990;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistryImpl(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", namedReporter, metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,impl,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,named,reporter,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,impl,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistryImpl -> public MetricRegistryImpl(MetricRegistryConfiguration config);1510748058;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistryImpl(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()___		_		this.reporters = new ArrayList<>()___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", reporterClass.getSimpleName(), metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,impl,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,reporters,new,array,list,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,reporter,class,get,simple,name,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,impl,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistryImpl -> public MetricRegistryImpl(MetricRegistryConfiguration config);1518765124;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistryImpl(MetricRegistryConfiguration config) {_		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()__		this.delimiters = new ArrayList<>(10)__		this.terminationFuture = new CompletableFuture<>()__		this.isShutdown = false___		_		this.reporters = new ArrayList<>(4)___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", namedReporter, metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,impl,metric,registry,configuration,config,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,delimiters,new,array,list,10,this,termination,future,new,completable,future,this,is,shutdown,false,this,reporters,new,array,list,4,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,named,reporter,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,impl,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistryImpl -> public MetricRegistryImpl(MetricRegistryConfiguration config);1539839273;Creates a new MetricRegistry and starts the configured reporter.;public MetricRegistryImpl(MetricRegistryConfiguration config) {_		this.maximumFramesize = config.getQueryServiceMessageSizeLimit()__		this.scopeFormats = config.getScopeFormats()__		this.globalDelimiter = config.getDelimiter()__		this.delimiters = new ArrayList<>(10)__		this.terminationFuture = new CompletableFuture<>()__		this.isShutdown = false___		_		this.reporters = new ArrayList<>(4)___		List<Tuple2<String, Configuration>> reporterConfigurations = config.getReporterConfigurations()___		this.executor = Executors.newSingleThreadScheduledExecutor(new ExecutorThreadFactory("Flink-MetricRegistry"))___		this.queryService = null__		this.metricQueryServicePath = null___		if (reporterConfigurations.isEmpty()) {_			_			_			LOG.info("No metrics reporter configured, no metrics will be exposed/reported.")__		} else {_			_			for (Tuple2<String, Configuration> reporterConfiguration: reporterConfigurations) {_				String namedReporter = reporterConfiguration.f0__				Configuration reporterConfig = reporterConfiguration.f1___				final String className = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, null)__				if (className == null) {_					LOG.error("No reporter class set for reporter " + namedReporter + ". Metrics might not be exposed/reported.")__					continue__				}__				try {_					String configuredPeriod = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, null)__					TimeUnit timeunit = TimeUnit.SECONDS__					long period = 10___					if (configuredPeriod != null) {_						try {_							String[] interval = configuredPeriod.split(" ")__							period = Long.parseLong(interval[0])__							timeunit = TimeUnit.valueOf(interval[1])__						}_						catch (Exception e) {_							LOG.error("Cannot parse report interval from config: " + configuredPeriod +_									" - please use values like '10 SECONDS' or '500 MILLISECONDS'. " +_									"Using default reporting interval.")__						}_					}__					Class<?> reporterClass = Class.forName(className)__					MetricReporter reporterInstance = (MetricReporter) reporterClass.newInstance()___					MetricConfig metricConfig = new MetricConfig()__					reporterConfig.addAllToProperties(metricConfig)__					LOG.info("Configuring {} with {}.", namedReporter, metricConfig)__					reporterInstance.open(metricConfig)___					if (reporterInstance instanceof Scheduled) {_						LOG.info("Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.", period, timeunit.name(), namedReporter, className)___						executor.scheduleWithFixedDelay(_								new MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit)__					} else {_						LOG.info("Reporting metrics for reporter {} of type {}.", namedReporter, className)__					}_					reporters.add(reporterInstance)___					String delimiterForReporter = reporterConfig.getString(ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf(globalDelimiter))__					if (delimiterForReporter.length() != 1) {_						LOG.warn("Failed to parse delimiter '{}' for reporter '{}', using global delimiter '{}'.", delimiterForReporter, namedReporter, globalDelimiter)__						delimiterForReporter = String.valueOf(globalDelimiter)__					}_					this.delimiters.add(delimiterForReporter.charAt(0))__				}_				catch (Throwable t) {_					LOG.error("Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.", namedReporter, t)__				}_			}_		}_	};creates,a,new,metric,registry,and,starts,the,configured,reporter;public,metric,registry,impl,metric,registry,configuration,config,this,maximum,framesize,config,get,query,service,message,size,limit,this,scope,formats,config,get,scope,formats,this,global,delimiter,config,get,delimiter,this,delimiters,new,array,list,10,this,termination,future,new,completable,future,this,is,shutdown,false,this,reporters,new,array,list,4,list,tuple2,string,configuration,reporter,configurations,config,get,reporter,configurations,this,executor,executors,new,single,thread,scheduled,executor,new,executor,thread,factory,flink,metric,registry,this,query,service,null,this,metric,query,service,path,null,if,reporter,configurations,is,empty,log,info,no,metrics,reporter,configured,no,metrics,will,be,exposed,reported,else,for,tuple2,string,configuration,reporter,configuration,reporter,configurations,string,named,reporter,reporter,configuration,f0,configuration,reporter,config,reporter,configuration,f1,final,string,class,name,reporter,config,get,string,config,constants,null,if,class,name,null,log,error,no,reporter,class,set,for,reporter,named,reporter,metrics,might,not,be,exposed,reported,continue,try,string,configured,period,reporter,config,get,string,config,constants,null,time,unit,timeunit,time,unit,seconds,long,period,10,if,configured,period,null,try,string,interval,configured,period,split,period,long,parse,long,interval,0,timeunit,time,unit,value,of,interval,1,catch,exception,e,log,error,cannot,parse,report,interval,from,config,configured,period,please,use,values,like,10,seconds,or,500,milliseconds,using,default,reporting,interval,class,reporter,class,class,for,name,class,name,metric,reporter,reporter,instance,metric,reporter,reporter,class,new,instance,metric,config,metric,config,new,metric,config,reporter,config,add,all,to,properties,metric,config,log,info,configuring,with,named,reporter,metric,config,reporter,instance,open,metric,config,if,reporter,instance,instanceof,scheduled,log,info,periodically,reporting,metrics,in,intervals,of,for,reporter,of,type,period,timeunit,name,named,reporter,class,name,executor,schedule,with,fixed,delay,new,metric,registry,impl,reporter,task,scheduled,reporter,instance,period,period,timeunit,else,log,info,reporting,metrics,for,reporter,of,type,named,reporter,class,name,reporters,add,reporter,instance,string,delimiter,for,reporter,reporter,config,get,string,config,constants,string,value,of,global,delimiter,if,delimiter,for,reporter,length,1,log,warn,failed,to,parse,delimiter,for,reporter,using,global,delimiter,delimiter,for,reporter,named,reporter,global,delimiter,delimiter,for,reporter,string,value,of,global,delimiter,this,delimiters,add,delimiter,for,reporter,char,at,0,catch,throwable,t,log,error,could,not,instantiate,metrics,reporter,metrics,might,not,be,exposed,reported,named,reporter,t
MetricRegistryImpl -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1508426573;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistryImpl -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1508494390;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistryImpl -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1510746990;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistryImpl -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1510748058;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistryImpl -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1518765124;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistryImpl -> public void startQueryService(ActorSystem actorSystem, ResourceID resourceID);1539839273;Initializes the MetricQueryService.__@param actorSystem ActorSystem to create the MetricQueryService on_@param resourceID resource ID used to disambiguate the actor name;public void startQueryService(ActorSystem actorSystem, ResourceID resourceID) {_		synchronized (lock) {_			Preconditions.checkState(!isShutdown(), "The metric registry has already been shut down.")___			try {_				queryService = MetricQueryService.startMetricQueryService(actorSystem, resourceID, maximumFramesize)__				metricQueryServicePath = AkkaUtils.getAkkaURL(actorSystem, queryService)__			} catch (Exception e) {_				LOG.warn("Could not start MetricDumpActor. No metrics will be submitted to the WebInterface.", e)__			}_		}_	};initializes,the,metric,query,service,param,actor,system,actor,system,to,create,the,metric,query,service,on,param,resource,id,resource,id,used,to,disambiguate,the,actor,name;public,void,start,query,service,actor,system,actor,system,resource,id,resource,id,synchronized,lock,preconditions,check,state,is,shutdown,the,metric,registry,has,already,been,shut,down,try,query,service,metric,query,service,start,metric,query,service,actor,system,resource,id,maximum,framesize,metric,query,service,path,akka,utils,get,akka,url,actor,system,query,service,catch,exception,e,log,warn,could,not,start,metric,dump,actor,no,metrics,will,be,submitted,to,the,web,interface,e
MetricRegistryImpl -> public CompletableFuture<Void> shutdown();1518765124;Shuts down this registry and the associated {@link MetricReporter}.__<p>NOTE: This operation is asynchronous and returns a future which is completed_once the shutdown operation has been completed.__@return Future which is completed once the {@link MetricRegistryImpl}_is shut down.;public CompletableFuture<Void> shutdown() {_		synchronized (lock) {_			if (isShutdown) {_				return terminationFuture__			} else {_				isShutdown = true__				final Collection<CompletableFuture<Void>> terminationFutures = new ArrayList<>(3)__				final Time gracePeriod = Time.seconds(1L)___				if (queryService != null) {_					final CompletableFuture<Void> queryServiceTerminationFuture = ActorUtils.nonBlockingShutDown(_						gracePeriod.toMilliseconds(),_						TimeUnit.MILLISECONDS,_						queryService)___					terminationFutures.add(queryServiceTerminationFuture)__				}__				Throwable throwable = null__				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__					}_				}_				reporters.clear()___				if (throwable != null) {_					terminationFutures.add(_						FutureUtils.completedExceptionally(_							new FlinkException("Could not shut down the metric reporters properly.", throwable)))__				}__				final CompletableFuture<Void> executorShutdownFuture = ExecutorUtils.nonBlockingShutdown(_					gracePeriod.toMilliseconds(),_					TimeUnit.MILLISECONDS,_					executor)___				terminationFutures.add(executorShutdownFuture)___				FutureUtils_					.completeAll(terminationFutures)_					.whenComplete(_						(Void ignored, Throwable error) -> {_							if (error != null) {_								terminationFuture.completeExceptionally(error)__							} else {_								terminationFuture.complete(null)__							}_						})___				return terminationFuture__			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter,p,note,this,operation,is,asynchronous,and,returns,a,future,which,is,completed,once,the,shutdown,operation,has,been,completed,return,future,which,is,completed,once,the,link,metric,registry,impl,is,shut,down;public,completable,future,void,shutdown,synchronized,lock,if,is,shutdown,return,termination,future,else,is,shutdown,true,final,collection,completable,future,void,termination,futures,new,array,list,3,final,time,grace,period,time,seconds,1l,if,query,service,null,final,completable,future,void,query,service,termination,future,actor,utils,non,blocking,shut,down,grace,period,to,milliseconds,time,unit,milliseconds,query,service,termination,futures,add,query,service,termination,future,throwable,throwable,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,reporters,clear,if,throwable,null,termination,futures,add,future,utils,completed,exceptionally,new,flink,exception,could,not,shut,down,the,metric,reporters,properly,throwable,final,completable,future,void,executor,shutdown,future,executor,utils,non,blocking,shutdown,grace,period,to,milliseconds,time,unit,milliseconds,executor,termination,futures,add,executor,shutdown,future,future,utils,complete,all,termination,futures,when,complete,void,ignored,throwable,error,if,error,null,termination,future,complete,exceptionally,error,else,termination,future,complete,null,return,termination,future
MetricRegistryImpl -> public CompletableFuture<Void> shutdown();1539839273;Shuts down this registry and the associated {@link MetricReporter}.__<p>NOTE: This operation is asynchronous and returns a future which is completed_once the shutdown operation has been completed.__@return Future which is completed once the {@link MetricRegistryImpl}_is shut down.;public CompletableFuture<Void> shutdown() {_		synchronized (lock) {_			if (isShutdown) {_				return terminationFuture__			} else {_				isShutdown = true__				final Collection<CompletableFuture<Void>> terminationFutures = new ArrayList<>(3)__				final Time gracePeriod = Time.seconds(1L)___				if (queryService != null) {_					final CompletableFuture<Void> queryServiceTerminationFuture = ActorUtils.nonBlockingShutDown(_						gracePeriod.toMilliseconds(),_						TimeUnit.MILLISECONDS,_						queryService)___					terminationFutures.add(queryServiceTerminationFuture)__				}__				Throwable throwable = null__				for (MetricReporter reporter : reporters) {_					try {_						reporter.close()__					} catch (Throwable t) {_						throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__					}_				}_				reporters.clear()___				if (throwable != null) {_					terminationFutures.add(_						FutureUtils.completedExceptionally(_							new FlinkException("Could not shut down the metric reporters properly.", throwable)))__				}__				final CompletableFuture<Void> executorShutdownFuture = ExecutorUtils.nonBlockingShutdown(_					gracePeriod.toMilliseconds(),_					TimeUnit.MILLISECONDS,_					executor)___				terminationFutures.add(executorShutdownFuture)___				FutureUtils_					.completeAll(terminationFutures)_					.whenComplete(_						(Void ignored, Throwable error) -> {_							if (error != null) {_								terminationFuture.completeExceptionally(error)__							} else {_								terminationFuture.complete(null)__							}_						})___				return terminationFuture__			}_		}_	};shuts,down,this,registry,and,the,associated,link,metric,reporter,p,note,this,operation,is,asynchronous,and,returns,a,future,which,is,completed,once,the,shutdown,operation,has,been,completed,return,future,which,is,completed,once,the,link,metric,registry,impl,is,shut,down;public,completable,future,void,shutdown,synchronized,lock,if,is,shutdown,return,termination,future,else,is,shutdown,true,final,collection,completable,future,void,termination,futures,new,array,list,3,final,time,grace,period,time,seconds,1l,if,query,service,null,final,completable,future,void,query,service,termination,future,actor,utils,non,blocking,shut,down,grace,period,to,milliseconds,time,unit,milliseconds,query,service,termination,futures,add,query,service,termination,future,throwable,throwable,null,for,metric,reporter,reporter,reporters,try,reporter,close,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,reporters,clear,if,throwable,null,termination,futures,add,future,utils,completed,exceptionally,new,flink,exception,could,not,shut,down,the,metric,reporters,properly,throwable,final,completable,future,void,executor,shutdown,future,executor,utils,non,blocking,shutdown,grace,period,to,milliseconds,time,unit,milliseconds,executor,termination,futures,add,executor,shutdown,future,future,utils,complete,all,termination,futures,when,complete,void,ignored,throwable,error,if,error,null,termination,future,complete,exceptionally,error,else,termination,future,complete,null,return,termination,future
