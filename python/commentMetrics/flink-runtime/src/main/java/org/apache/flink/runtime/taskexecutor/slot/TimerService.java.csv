# id;timestamp;commentText;codeText;commentWords;codeWords
TimerService -> public boolean isValid(K key, UUID ticket);1482522862;Check whether the timeout for the given key and ticket is still valid (not yet unregistered_and not yet overwritten).__@param key for which to check the timeout_@param ticket of the timeout_@return True if the timeout ticket is still valid_ otherwise false;public boolean isValid(K key, UUID ticket) {_		if (timeouts.containsKey(key)) {_			Timeout<K> timeout = timeouts.get(key)___			return timeout.getTicket().equals(ticket)__		} else {_			return false__		}_	};check,whether,the,timeout,for,the,given,key,and,ticket,is,still,valid,not,yet,unregistered,and,not,yet,overwritten,param,key,for,which,to,check,the,timeout,param,ticket,of,the,timeout,return,true,if,the,timeout,ticket,is,still,valid,otherwise,false;public,boolean,is,valid,k,key,uuid,ticket,if,timeouts,contains,key,key,timeout,k,timeout,timeouts,get,key,return,timeout,get,ticket,equals,ticket,else,return,false
TimerService -> public boolean isValid(K key, UUID ticket);1482522866;Check whether the timeout for the given key and ticket is still valid (not yet unregistered_and not yet overwritten).__@param key for which to check the timeout_@param ticket of the timeout_@return True if the timeout ticket is still valid_ otherwise false;public boolean isValid(K key, UUID ticket) {_		if (timeouts.containsKey(key)) {_			Timeout<K> timeout = timeouts.get(key)___			return timeout.getTicket().equals(ticket)__		} else {_			return false__		}_	};check,whether,the,timeout,for,the,given,key,and,ticket,is,still,valid,not,yet,unregistered,and,not,yet,overwritten,param,key,for,which,to,check,the,timeout,param,ticket,of,the,timeout,return,true,if,the,timeout,ticket,is,still,valid,otherwise,false;public,boolean,is,valid,k,key,uuid,ticket,if,timeouts,contains,key,key,timeout,k,timeout,timeouts,get,key,return,timeout,get,ticket,equals,ticket,else,return,false
TimerService -> public boolean isValid(K key, UUID ticket);1482522866;Check whether the timeout for the given key and ticket is still valid (not yet unregistered_and not yet overwritten).__@param key for which to check the timeout_@param ticket of the timeout_@return True if the timeout ticket is still valid_ otherwise false;public boolean isValid(K key, UUID ticket) {_		if (timeouts.containsKey(key)) {_			Timeout<K> timeout = timeouts.get(key)___			return timeout.getTicket().equals(ticket)__		} else {_			return false__		}_	};check,whether,the,timeout,for,the,given,key,and,ticket,is,still,valid,not,yet,unregistered,and,not,yet,overwritten,param,key,for,which,to,check,the,timeout,param,ticket,of,the,timeout,return,true,if,the,timeout,ticket,is,still,valid,otherwise,false;public,boolean,is,valid,k,key,uuid,ticket,if,timeouts,contains,key,key,timeout,k,timeout,timeouts,get,key,return,timeout,get,ticket,equals,ticket,else,return,false
TimerService -> public boolean isValid(K key, UUID ticket);1515588319;Check whether the timeout for the given key and ticket is still valid (not yet unregistered_and not yet overwritten).__@param key for which to check the timeout_@param ticket of the timeout_@return True if the timeout ticket is still valid_ otherwise false;public boolean isValid(K key, UUID ticket) {_		if (timeouts.containsKey(key)) {_			Timeout<K> timeout = timeouts.get(key)___			return timeout.getTicket().equals(ticket)__		} else {_			return false__		}_	};check,whether,the,timeout,for,the,given,key,and,ticket,is,still,valid,not,yet,unregistered,and,not,yet,overwritten,param,key,for,which,to,check,the,timeout,param,ticket,of,the,timeout,return,true,if,the,timeout,ticket,is,still,valid,otherwise,false;public,boolean,is,valid,k,key,uuid,ticket,if,timeouts,contains,key,key,timeout,k,timeout,timeouts,get,key,return,timeout,get,ticket,equals,ticket,else,return,false
TimerService -> public void unregisterTimeout(K key);1482522862;Unregister the timeout for the given key.__@param key for which to unregister the timeout;public void unregisterTimeout(K key) {_		Timeout<K> timeout = timeouts.remove(key)___		if (timeout != null) {_			timeout.cancel()__		}_	};unregister,the,timeout,for,the,given,key,param,key,for,which,to,unregister,the,timeout;public,void,unregister,timeout,k,key,timeout,k,timeout,timeouts,remove,key,if,timeout,null,timeout,cancel
TimerService -> public void unregisterTimeout(K key);1482522866;Unregister the timeout for the given key.__@param key for which to unregister the timeout;public void unregisterTimeout(K key) {_		Timeout<K> timeout = timeouts.remove(key)___		if (timeout != null) {_			timeout.cancel()__		}_	};unregister,the,timeout,for,the,given,key,param,key,for,which,to,unregister,the,timeout;public,void,unregister,timeout,k,key,timeout,k,timeout,timeouts,remove,key,if,timeout,null,timeout,cancel
TimerService -> public void unregisterTimeout(K key);1482522866;Unregister the timeout for the given key.__@param key for which to unregister the timeout;public void unregisterTimeout(K key) {_		Timeout<K> timeout = timeouts.remove(key)___		if (timeout != null) {_			timeout.cancel()__		}_	};unregister,the,timeout,for,the,given,key,param,key,for,which,to,unregister,the,timeout;public,void,unregister,timeout,k,key,timeout,k,timeout,timeouts,remove,key,if,timeout,null,timeout,cancel
TimerService -> public void unregisterTimeout(K key);1515588319;Unregister the timeout for the given key.__@param key for which to unregister the timeout;public void unregisterTimeout(K key) {_		Timeout<K> timeout = timeouts.remove(key)___		if (timeout != null) {_			timeout.cancel()__		}_	};unregister,the,timeout,for,the,given,key,param,key,for,which,to,unregister,the,timeout;public,void,unregister,timeout,k,key,timeout,k,timeout,timeouts,remove,key,if,timeout,null,timeout,cancel
TimerService -> public void registerTimeout(final K key, final long delay, final TimeUnit unit);1482522862;Register a timeout for the given key which shall occur in the given delay.__@param key for which to register the timeout_@param delay until the timeout_@param unit of the timeout delay;public void registerTimeout(final K key, final long delay, final TimeUnit unit) {_		Preconditions.checkState(timeoutListener != null, "The " + getClass().getSimpleName() +_			" has not been started.")___		if (timeouts.containsKey(key)) {_			unregisterTimeout(key)__		}__		timeouts.put(key, new Timeout<>(timeoutListener, key, delay, unit, scheduledExecutorService))__	};register,a,timeout,for,the,given,key,which,shall,occur,in,the,given,delay,param,key,for,which,to,register,the,timeout,param,delay,until,the,timeout,param,unit,of,the,timeout,delay;public,void,register,timeout,final,k,key,final,long,delay,final,time,unit,unit,preconditions,check,state,timeout,listener,null,the,get,class,get,simple,name,has,not,been,started,if,timeouts,contains,key,key,unregister,timeout,key,timeouts,put,key,new,timeout,timeout,listener,key,delay,unit,scheduled,executor,service
TimerService -> public void registerTimeout(final K key, final long delay, final TimeUnit unit);1482522866;Register a timeout for the given key which shall occur in the given delay.__@param key for which to register the timeout_@param delay until the timeout_@param unit of the timeout delay;public void registerTimeout(final K key, final long delay, final TimeUnit unit) {_		Preconditions.checkState(timeoutListener != null, "The " + getClass().getSimpleName() +_			" has not been started.")___		if (timeouts.containsKey(key)) {_			unregisterTimeout(key)__		}__		timeouts.put(key, new Timeout<>(timeoutListener, key, delay, unit, scheduledExecutorService))__	};register,a,timeout,for,the,given,key,which,shall,occur,in,the,given,delay,param,key,for,which,to,register,the,timeout,param,delay,until,the,timeout,param,unit,of,the,timeout,delay;public,void,register,timeout,final,k,key,final,long,delay,final,time,unit,unit,preconditions,check,state,timeout,listener,null,the,get,class,get,simple,name,has,not,been,started,if,timeouts,contains,key,key,unregister,timeout,key,timeouts,put,key,new,timeout,timeout,listener,key,delay,unit,scheduled,executor,service
TimerService -> public void registerTimeout(final K key, final long delay, final TimeUnit unit);1482522866;Register a timeout for the given key which shall occur in the given delay.__@param key for which to register the timeout_@param delay until the timeout_@param unit of the timeout delay;public void registerTimeout(final K key, final long delay, final TimeUnit unit) {_		Preconditions.checkState(timeoutListener != null, "The " + getClass().getSimpleName() +_			" has not been started.")___		if (timeouts.containsKey(key)) {_			unregisterTimeout(key)__		}__		timeouts.put(key, new Timeout<>(timeoutListener, key, delay, unit, scheduledExecutorService))__	};register,a,timeout,for,the,given,key,which,shall,occur,in,the,given,delay,param,key,for,which,to,register,the,timeout,param,delay,until,the,timeout,param,unit,of,the,timeout,delay;public,void,register,timeout,final,k,key,final,long,delay,final,time,unit,unit,preconditions,check,state,timeout,listener,null,the,get,class,get,simple,name,has,not,been,started,if,timeouts,contains,key,key,unregister,timeout,key,timeouts,put,key,new,timeout,timeout,listener,key,delay,unit,scheduled,executor,service
TimerService -> public void registerTimeout(final K key, final long delay, final TimeUnit unit);1515588319;Register a timeout for the given key which shall occur in the given delay.__@param key for which to register the timeout_@param delay until the timeout_@param unit of the timeout delay;public void registerTimeout(final K key, final long delay, final TimeUnit unit) {_		Preconditions.checkState(timeoutListener != null, "The " + getClass().getSimpleName() +_			" has not been started.")___		if (timeouts.containsKey(key)) {_			unregisterTimeout(key)__		}__		timeouts.put(key, new Timeout<>(timeoutListener, key, delay, unit, scheduledExecutorService))__	};register,a,timeout,for,the,given,key,which,shall,occur,in,the,given,delay,param,key,for,which,to,register,the,timeout,param,delay,until,the,timeout,param,unit,of,the,timeout,delay;public,void,register,timeout,final,k,key,final,long,delay,final,time,unit,unit,preconditions,check,state,timeout,listener,null,the,get,class,get,simple,name,has,not,been,started,if,timeouts,contains,key,key,unregister,timeout,key,timeouts,put,key,new,timeout,timeout,listener,key,delay,unit,scheduled,executor,service
TimerService -> protected void unregisterAllTimeouts();1482522866;Unregister all timeouts.;protected void unregisterAllTimeouts() {_		for (Timeout<K> timeout : timeouts.values()) {_			if (timeout != null) {_				timeout.cancel()__			}_		}_		timeouts.clear()__	};unregister,all,timeouts;protected,void,unregister,all,timeouts,for,timeout,k,timeout,timeouts,values,if,timeout,null,timeout,cancel,timeouts,clear
TimerService -> protected void unregisterAllTimeouts();1482522866;Unregister all timeouts.;protected void unregisterAllTimeouts() {_		for (Timeout<K> timeout : timeouts.values()) {_			timeout.cancel()__		}_		timeouts.clear()__	};unregister,all,timeouts;protected,void,unregister,all,timeouts,for,timeout,k,timeout,timeouts,values,timeout,cancel,timeouts,clear
TimerService -> protected void unregisterAllTimeouts();1515588319;Unregister all timeouts.;protected void unregisterAllTimeouts() {_		for (Timeout<K> timeout : timeouts.values()) {_			timeout.cancel()__		}_		timeouts.clear()__	};unregister,all,timeouts;protected,void,unregister,all,timeouts,for,timeout,k,timeout,timeouts,values,timeout,cancel,timeouts,clear
