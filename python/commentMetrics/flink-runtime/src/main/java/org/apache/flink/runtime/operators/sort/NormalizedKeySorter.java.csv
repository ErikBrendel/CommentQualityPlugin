# id;timestamp;commentText;codeText;commentWords;codeWords
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1405024514;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, this.currentDataBufferOffset)__		if(this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__			this.currentSortIndexOffset += this.indexEntrySize__			this.currentDataBufferOffset = this.recordCollector.getCurrentOffset()__			this.numRecords++__			return true__		} catch (EOFException eofex) {_			return false__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,this,current,sort,index,segment,put,long,this,current,sort,index,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,try,this,serializer,serialize,record,this,record,collector,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,this,record,collector,get,current,offset,this,num,records,return,true,catch,eofexception,eofex,return,false
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1405090423;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, this.currentDataBufferOffset)__		if(this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__			this.currentSortIndexOffset += this.indexEntrySize__			this.currentDataBufferOffset = this.recordCollector.getCurrentOffset()__			this.numRecords++__			return true__		} catch (EOFException eofex) {_			return false__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,this,current,sort,index,segment,put,long,this,current,sort,index,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,try,this,serializer,serialize,record,this,record,collector,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,this,record,collector,get,current,offset,this,num,records,return,true,catch,eofexception,eofex,return,false
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1411372797;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, this.currentDataBufferOffset)__		if(this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__			this.currentSortIndexOffset += this.indexEntrySize__			this.currentDataBufferOffset = this.recordCollector.getCurrentOffset()__			this.numRecords++__			return true__		} catch (EOFException eofex) {_			return false__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,this,current,sort,index,segment,put,long,this,current,sort,index,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,try,this,serializer,serialize,record,this,record,collector,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,this,record,collector,get,current,offset,this,num,records,return,true,catch,eofexception,eofex,return,false
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1411473593;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, this.currentDataBufferOffset)__		if(this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__			this.currentSortIndexOffset += this.indexEntrySize__			this.currentDataBufferOffset = this.recordCollector.getCurrentOffset()__			this.numRecords++__			return true__		} catch (EOFException eofex) {_			return false__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,this,current,sort,index,segment,put,long,this,current,sort,index,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,try,this,serializer,serialize,record,this,record,collector,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,this,record,collector,get,current,offset,this,num,records,return,true,catch,eofexception,eofex,return,false
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1417449432;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, this.currentDataBufferOffset)__		if(this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__			this.currentSortIndexOffset += this.indexEntrySize__			this.currentDataBufferOffset = this.recordCollector.getCurrentOffset()__			this.numRecords++__			return true__		} catch (EOFException eofex) {_			return false__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,this,current,sort,index,segment,put,long,this,current,sort,index,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,try,this,serializer,serialize,record,this,record,collector,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,this,record,collector,get,current,offset,this,num,records,return,true,catch,eofexception,eofex,return,false
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1420654570;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, this.currentDataBufferOffset)__		if(this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__			this.currentSortIndexOffset += this.indexEntrySize__			this.currentDataBufferOffset = this.recordCollector.getCurrentOffset()__			this.numRecords++__			return true__		} catch (EOFException eofex) {_			return false__		}_	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,this,current,sort,index,segment,put,long,this,current,sort,index,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,try,this,serializer,serialize,record,this,record,collector,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,this,record,collector,get,current,offset,this,num,records,return,true,catch,eofexception,eofex,return,false
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1421838095;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ? this.currentDataBufferOffset : -this.currentDataBufferOffset)__		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1421838096;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		if (!shortRecord && LOG.isDebugEnabled()) {_			LOG.debug("Put a large record ( >" + LARGE_RECORD_THRESHOLD + " into the sort buffer")__		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ?_				this.currentDataBufferOffset : (this.currentDataBufferOffset | LARGE_RECORD_TAG))___		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,if,short,record,log,is,debug,enabled,log,debug,put,a,large,record,into,the,sort,buffer,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1441738685;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		if (!shortRecord && LOG.isDebugEnabled()) {_			LOG.debug("Put a large record ( >" + LARGE_RECORD_THRESHOLD + " into the sort buffer")__		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ?_				this.currentDataBufferOffset : (this.currentDataBufferOffset | LARGE_RECORD_TAG))___		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,if,short,record,log,is,debug,enabled,log,debug,put,a,large,record,into,the,sort,buffer,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1442870284;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		if (!shortRecord && LOG.isDebugEnabled()) {_			LOG.debug("Put a large record ( >" + LARGE_RECORD_THRESHOLD + " into the sort buffer")__		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ?_				this.currentDataBufferOffset : (this.currentDataBufferOffset | LARGE_RECORD_TAG))___		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,if,short,record,log,is,debug,enabled,log,debug,put,a,large,record,into,the,sort,buffer,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1460472696;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		if (!shortRecord && LOG.isDebugEnabled()) {_			LOG.debug("Put a large record ( >" + LARGE_RECORD_THRESHOLD + " into the sort buffer")__		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ?_				this.currentDataBufferOffset : (this.currentDataBufferOffset | LARGE_RECORD_TAG))___		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,if,short,record,log,is,debug,enabled,log,debug,put,a,large,record,into,the,sort,buffer,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1493221488;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		if (!shortRecord && LOG.isDebugEnabled()) {_			LOG.debug("Put a large record ( >" + LARGE_RECORD_THRESHOLD + " into the sort buffer")__		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ?_				this.currentDataBufferOffset : (this.currentDataBufferOffset | LARGE_RECORD_TAG))___		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,if,short,record,log,is,debug,enabled,log,debug,put,a,large,record,into,the,sort,buffer,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public boolean write(T record) throws IOException;1530185676;Writes a given record to this sort buffer. The written record will be appended and take_the last logical position.__@param record The record to be written._@return True, if the record was successfully written, false, if the sort buffer was full._@throws IOException Thrown, if an error occurred while serializing the record into the buffers.;@Override_	public boolean write(T record) throws IOException {_		_		if (this.currentSortIndexOffset > this.lastIndexEntryOffset) {_			if (memoryAvailable()) {_				this.currentSortIndexSegment = nextMemorySegment()__				this.sortIndex.add(this.currentSortIndexSegment)__				this.currentSortIndexOffset = 0__				this.sortIndexBytes += this.segmentSize__			} else {_				return false__			}_		}_		_		_		try {_			this.serializer.serialize(record, this.recordCollector)__		}_		catch (EOFException e) {_			return false__		}_		_		final long newOffset = this.recordCollector.getCurrentOffset()__		final boolean shortRecord = newOffset - this.currentDataBufferOffset < LARGE_RECORD_THRESHOLD__		_		if (!shortRecord && LOG.isDebugEnabled()) {_			LOG.debug("Put a large record ( >" + LARGE_RECORD_THRESHOLD + " into the sort buffer")__		}_		_		_		this.currentSortIndexSegment.putLong(this.currentSortIndexOffset, shortRecord ?_				this.currentDataBufferOffset : (this.currentDataBufferOffset | LARGE_RECORD_TAG))___		if (this.numKeyBytes != 0) {_			this.comparator.putNormalizedKey(record, this.currentSortIndexSegment, this.currentSortIndexOffset + OFFSET_LEN, this.numKeyBytes)__		}_		_		this.currentSortIndexOffset += this.indexEntrySize__		this.currentDataBufferOffset = newOffset__		this.numRecords++__		return true__	};writes,a,given,record,to,this,sort,buffer,the,written,record,will,be,appended,and,take,the,last,logical,position,param,record,the,record,to,be,written,return,true,if,the,record,was,successfully,written,false,if,the,sort,buffer,was,full,throws,ioexception,thrown,if,an,error,occurred,while,serializing,the,record,into,the,buffers;override,public,boolean,write,t,record,throws,ioexception,if,this,current,sort,index,offset,this,last,index,entry,offset,if,memory,available,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,current,sort,index,offset,0,this,sort,index,bytes,this,segment,size,else,return,false,try,this,serializer,serialize,record,this,record,collector,catch,eofexception,e,return,false,final,long,new,offset,this,record,collector,get,current,offset,final,boolean,short,record,new,offset,this,current,data,buffer,offset,if,short,record,log,is,debug,enabled,log,debug,put,a,large,record,into,the,sort,buffer,this,current,sort,index,segment,put,long,this,current,sort,index,offset,short,record,this,current,data,buffer,offset,this,current,data,buffer,offset,if,this,num,key,bytes,0,this,comparator,put,normalized,key,record,this,current,sort,index,segment,this,current,sort,index,offset,this,num,key,bytes,this,current,sort,index,offset,this,index,entry,size,this,current,data,buffer,offset,new,offset,this,num,records,return,true
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1405024514;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1405090423;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1411372797;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1411473593;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1417449432;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1420654570;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1421838095;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target)_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = Math.abs(this.currentIndexSegment.getLong(this.currentOffset))__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,math,abs,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1421838096;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target) {_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset) & POINTER_MASK__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1441738685;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target) {_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset) & POINTER_MASK__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1442870284;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target) {_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset) & POINTER_MASK__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1460472696;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target) {_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset) & POINTER_MASK__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1493221488;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target) {_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset) & POINTER_MASK__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public final MutableObjectIterator<T> getIterator();1530185676;Gets an iterator over all records in this buffer in their logical order.__@return An iterator returning the records in their logical order.;@Override_	public final MutableObjectIterator<T> getIterator() {_		return new MutableObjectIterator<T>()_		{_			private final int size = size()__			private int current = 0__			_			private int currentSegment = 0__			private int currentOffset = 0__			_			private MemorySegment currentIndexSegment = sortIndex.get(0)___			@Override_			public T next(T target) {_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}_					_					long pointer = this.currentIndexSegment.getLong(this.currentOffset) & POINTER_MASK__					this.currentOffset += indexEntrySize__					_					try {_						return getRecordFromBuffer(target, pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}__			@Override_			public T next()_			{_				if (this.current < this.size) {_					this.current++__					if (this.currentOffset > lastIndexEntryOffset) {_						this.currentOffset = 0__						this.currentIndexSegment = sortIndex.get(++this.currentSegment)__					}__					long pointer = this.currentIndexSegment.getLong(this.currentOffset)__					this.currentOffset += indexEntrySize___					try {_						return getRecordFromBuffer(pointer)__					}_					catch (IOException ioe) {_						throw new RuntimeException(ioe)__					}_				}_				else {_					return null__				}_			}_		}__	};gets,an,iterator,over,all,records,in,this,buffer,in,their,logical,order,return,an,iterator,returning,the,records,in,their,logical,order;override,public,final,mutable,object,iterator,t,get,iterator,return,new,mutable,object,iterator,t,private,final,int,size,size,private,int,current,0,private,int,current,segment,0,private,int,current,offset,0,private,memory,segment,current,index,segment,sort,index,get,0,override,public,t,next,t,target,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,target,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null,override,public,t,next,if,this,current,this,size,this,current,if,this,current,offset,last,index,entry,offset,this,current,offset,0,this,current,index,segment,sort,index,get,this,current,segment,long,pointer,this,current,index,segment,get,long,this,current,offset,this,current,offset,index,entry,size,try,return,get,record,from,buffer,pointer,catch,ioexception,ioe,throw,new,runtime,exception,ioe,else,return,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1421838095;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1421838096;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1441738685;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1442870284;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1460472696;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1493221488;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(ChannelWriterOutputView output) throws IOException;1530185676;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(ChannelWriterOutputView output) throws IOException {_		writeToOutput(output, null)__	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,channel,writer,output,view,output,throws,ioexception,write,to,output,output,null
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1405024514;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		while (recordsLeft > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			int offset = 0__			_			if (recordsLeft >= this.indexEntriesPerSegment) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__					_				}_				recordsLeft -= this.indexEntriesPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,int,offset,0,if,records,left,this,index,entries,per,segment,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,records,left,this,index,entries,per,segment,else,for,records,left,0,records,left,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1405090423;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		while (recordsLeft > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			int offset = 0__			_			if (recordsLeft >= this.indexEntriesPerSegment) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__					_				}_				recordsLeft -= this.indexEntriesPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,int,offset,0,if,records,left,this,index,entries,per,segment,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,records,left,this,index,entries,per,segment,else,for,records,left,0,records,left,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1411372797;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		while (recordsLeft > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			int offset = 0__			_			if (recordsLeft >= this.indexEntriesPerSegment) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__					_				}_				recordsLeft -= this.indexEntriesPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,int,offset,0,if,records,left,this,index,entries,per,segment,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,records,left,this,index,entries,per,segment,else,for,records,left,0,records,left,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1411473593;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		while (recordsLeft > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			int offset = 0__			_			if (recordsLeft >= this.indexEntriesPerSegment) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__					_				}_				recordsLeft -= this.indexEntriesPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,int,offset,0,if,records,left,this,index,entries,per,segment,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,records,left,this,index,entries,per,segment,else,for,records,left,0,records,left,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1417449432;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		while (recordsLeft > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			int offset = 0__			_			if (recordsLeft >= this.indexEntriesPerSegment) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__					_				}_				recordsLeft -= this.indexEntriesPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,int,offset,0,if,records,left,this,index,entries,per,segment,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,records,left,this,index,entries,per,segment,else,for,records,left,0,records,left,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output) throws IOException;1420654570;Writes the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output) throws IOException {_		int recordsLeft = this.numRecords__		int currentMemSeg = 0__		while (recordsLeft > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			int offset = 0__			_			if (recordsLeft >= this.indexEntriesPerSegment) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__					_				}_				recordsLeft -= this.indexEntriesPerSegment__			} else {_				_				for (_ recordsLeft > 0_ recordsLeft--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_		}_	};writes,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,throws,ioexception,int,records,left,this,num,records,int,current,mem,seg,0,while,records,left,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,int,offset,0,if,records,left,this,index,entries,per,segment,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,records,left,this,index,entries,per,segment,else,for,records,left,0,records,left,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1405024514;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1405090423;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1411372797;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1411473593;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1417449432;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1420654570;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset)__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1421838095;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = Math.abs(currentIndexSegment.getLong(offset))__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = Math.abs(currentIndexSegment.getLong(offset))__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,math,abs,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,math,abs,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1421838096;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1441738685;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1442870284;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1460472696;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1493221488;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException;1530185676;Writes a subset of the records in this buffer in their logical order to the given output.__@param output The output view to write the records to._@param start The logical start position of the subset._@param num The number of elements to write._@throws IOException Thrown, if an I/O exception occurred writing to the output view.;@Override_	public void writeToOutput(final ChannelWriterOutputView output, final int start, int num) throws IOException {_		int currentMemSeg = start / this.indexEntriesPerSegment__		int offset = (start % this.indexEntriesPerSegment) * this.indexEntrySize__		_		while (num > 0)_		{_			final MemorySegment currentIndexSegment = this.sortIndex.get(currentMemSeg++)__			_			if (num >= this.indexEntriesPerSegment && offset == 0) {_				_				for (_offset <= this.lastIndexEntryOffset_ offset += this.indexEntrySize) {_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_				num -= this.indexEntriesPerSegment__			} else {_				_				for (_ num > 0 && offset <= this.lastIndexEntryOffset_ num--, offset += this.indexEntrySize)_				{_					final long pointer = currentIndexSegment.getLong(offset) & POINTER_MASK__					this.recordBuffer.setReadPosition(pointer)__					this.serializer.copy(this.recordBuffer, output)__				}_			}_			offset = 0__		}_	};writes,a,subset,of,the,records,in,this,buffer,in,their,logical,order,to,the,given,output,param,output,the,output,view,to,write,the,records,to,param,start,the,logical,start,position,of,the,subset,param,num,the,number,of,elements,to,write,throws,ioexception,thrown,if,an,i,o,exception,occurred,writing,to,the,output,view;override,public,void,write,to,output,final,channel,writer,output,view,output,final,int,start,int,num,throws,ioexception,int,current,mem,seg,start,this,index,entries,per,segment,int,offset,start,this,index,entries,per,segment,this,index,entry,size,while,num,0,final,memory,segment,current,index,segment,this,sort,index,get,current,mem,seg,if,num,this,index,entries,per,segment,offset,0,for,offset,this,last,index,entry,offset,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,num,this,index,entries,per,segment,else,for,num,0,offset,this,last,index,entry,offset,num,offset,this,index,entry,size,final,long,pointer,current,index,segment,get,long,offset,this,record,buffer,set,read,position,pointer,this,serializer,copy,this,record,buffer,output,offset,0
NormalizedKeySorter -> @Override 	public void reset();1405024514;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1405090423;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1411372797;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1411473593;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1417449432;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1420654570;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1421838095;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1421838096;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1441738685;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1442870284;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1460472696;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1493221488;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public void reset();1530185676;Resets the sort buffer back to the state where it is empty. All contained data is discarded.;@Override_	public void reset() {_		_		this.numRecords = 0__		this.currentSortIndexOffset = 0__		this.currentDataBufferOffset = 0__		this.sortIndexBytes = 0__		_		_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		this.sortIndex.clear()__		this.recordBufferSegments.clear()__		_		_		this.currentSortIndexSegment = nextMemorySegment()__		this.sortIndex.add(this.currentSortIndexSegment)__		this.recordCollector.reset()__	};resets,the,sort,buffer,back,to,the,state,where,it,is,empty,all,contained,data,is,discarded;override,public,void,reset,this,num,records,0,this,current,sort,index,offset,0,this,current,data,buffer,offset,0,this,sort,index,bytes,0,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,sort,index,clear,this,record,buffer,segments,clear,this,current,sort,index,segment,next,memory,segment,this,sort,index,add,this,current,sort,index,segment,this,record,collector,reset
NormalizedKeySorter -> @Override 	public long getOccupancy();1405024514;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.currentDataBufferOffset + this.sortIndexBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,current,data,buffer,offset,this,sort,index,bytes
NormalizedKeySorter -> @Override 	public long getOccupancy();1405090423;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.currentDataBufferOffset + this.sortIndexBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,current,data,buffer,offset,this,sort,index,bytes
NormalizedKeySorter -> @Override 	public long getOccupancy();1411372797;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.currentDataBufferOffset + this.sortIndexBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,current,data,buffer,offset,this,sort,index,bytes
NormalizedKeySorter -> @Override 	public long getOccupancy();1411473593;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.currentDataBufferOffset + this.sortIndexBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,current,data,buffer,offset,this,sort,index,bytes
NormalizedKeySorter -> @Override 	public long getOccupancy();1417449432;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.currentDataBufferOffset + this.sortIndexBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,current,data,buffer,offset,this,sort,index,bytes
NormalizedKeySorter -> @Override 	public long getOccupancy();1420654570;Gets the number of bytes currently occupied in this sorter.__@return The number of bytes occupied.;@Override_	public long getOccupancy() {_		return this.currentDataBufferOffset + this.sortIndexBytes__	};gets,the,number,of,bytes,currently,occupied,in,this,sorter,return,the,number,of,bytes,occupied;override,public,long,get,occupancy,return,this,current,data,buffer,offset,this,sort,index,bytes
NormalizedKeySorter -> @Override 	public boolean isEmpty();1405024514;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1405090423;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1411372797;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1411473593;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1417449432;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1420654570;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1421838095;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1421838096;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1441738685;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1442870284;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1460472696;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1493221488;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public boolean isEmpty();1530185676;Checks whether the buffer is empty.__@return True, if no record is contained, false otherwise.;@Override_	public boolean isEmpty() {_		return this.numRecords == 0__	};checks,whether,the,buffer,is,empty,return,true,if,no,record,is,contained,false,otherwise;override,public,boolean,is,empty,return,this,num,records,0
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1405024514;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1405090423;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1411372797;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1411473593;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1417449432;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1420654570;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1421838095;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1421838096;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public List<MemorySegment> dispose();1441738685;Collects all memory segments from this sorter.__@return All memory segments from this sorter.;@Override_	public List<MemorySegment> dispose() {_		this.freeMemory.addAll(this.sortIndex)__		this.freeMemory.addAll(this.recordBufferSegments)__		_		this.recordBufferSegments.clear()__		this.sortIndex.clear()__		_		return this.freeMemory__	};collects,all,memory,segments,from,this,sorter,return,all,memory,segments,from,this,sorter;override,public,list,memory,segment,dispose,this,free,memory,add,all,this,sort,index,this,free,memory,add,all,this,record,buffer,segments,this,record,buffer,segments,clear,this,sort,index,clear,return,this,free,memory
NormalizedKeySorter -> @Override 	public long getCapacity();1405024514;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
NormalizedKeySorter -> @Override 	public long getCapacity();1405090423;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
NormalizedKeySorter -> @Override 	public long getCapacity();1411372797;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
NormalizedKeySorter -> @Override 	public long getCapacity();1411473593;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
NormalizedKeySorter -> @Override 	public long getCapacity();1417449432;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
NormalizedKeySorter -> @Override 	public long getCapacity();1420654570;Gets the total capacity of this sorter, in bytes.__@return The sorter's total capacity.;@Override_	public long getCapacity() {_		return ((long) this.totalNumBuffers) * this.segmentSize__	};gets,the,total,capacity,of,this,sorter,in,bytes,return,the,sorter,s,total,capacity;override,public,long,get,capacity,return,long,this,total,num,buffers,this,segment,size
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1405024514;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1405090423;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1411372797;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1411473593;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1417449432;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1420654570;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1421838095;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1421838096;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
NormalizedKeySorter -> @Override 	public T getRecord(T reuse, int logicalPosition) throws IOException;1441738685;Gets the record at the given logical position.__@param reuse The target object to deserialize the record into._@param logicalPosition The logical position of the record._@throws IOException Thrown, if an exception occurred during deserialization.;@Override_	public T getRecord(T reuse, int logicalPosition) throws IOException {_		return getRecordFromBuffer(reuse, readPointer(logicalPosition))__	};gets,the,record,at,the,given,logical,position,param,reuse,the,target,object,to,deserialize,the,record,into,param,logical,position,the,logical,position,of,the,record,throws,ioexception,thrown,if,an,exception,occurred,during,deserialization;override,public,t,get,record,t,reuse,int,logical,position,throws,ioexception,return,get,record,from,buffer,reuse,read,pointer,logical,position
