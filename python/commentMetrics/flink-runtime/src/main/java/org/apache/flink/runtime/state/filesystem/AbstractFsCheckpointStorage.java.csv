# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFsCheckpointStorage -> @Nullable 	public Path getDefaultSavepointDirectory();1509045960;Gets the default directory for savepoints. Returns null, if no default savepoint_directory is configured.;@Nullable_	public Path getDefaultSavepointDirectory() {_		return defaultSavepointDirectory__	};gets,the,default,directory,for,savepoints,returns,null,if,no,default,savepoint,directory,is,configured;nullable,public,path,get,default,savepoint,directory,return,default,savepoint,directory
AbstractFsCheckpointStorage -> @Nullable 	public Path getDefaultSavepointDirectory();1515600846;Gets the default directory for savepoints. Returns null, if no default savepoint_directory is configured.;@Nullable_	public Path getDefaultSavepointDirectory() {_		return defaultSavepointDirectory__	};gets,the,default,directory,for,savepoints,returns,null,if,no,default,savepoint,directory,is,configured;nullable,public,path,get,default,savepoint,directory,return,default,savepoint,directory
AbstractFsCheckpointStorage -> @Nullable 	public Path getDefaultSavepointDirectory();1516365428;Gets the default directory for savepoints. Returns null, if no default savepoint_directory is configured.;@Nullable_	public Path getDefaultSavepointDirectory() {_		return defaultSavepointDirectory__	};gets,the,default,directory,for,savepoints,returns,null,if,no,default,savepoint,directory,is,configured;nullable,public,path,get,default,savepoint,directory,return,default,savepoint,directory
AbstractFsCheckpointStorage -> @Nullable 	public Path getDefaultSavepointDirectory();1517414098;Gets the default directory for savepoints. Returns null, if no default savepoint_directory is configured.;@Nullable_	public Path getDefaultSavepointDirectory() {_		return defaultSavepointDirectory__	};gets,the,default,directory,for,savepoints,returns,null,if,no,default,savepoint,directory,is,configured;nullable,public,path,get,default,savepoint,directory,return,default,savepoint,directory
AbstractFsCheckpointStorage -> public static CheckpointStorageLocationReference encodePathAsReference(Path path);1515600846;Encodes the given path as a reference in bytes. The path is encoded as a UTF-8 string_and prepended as a magic number.__@param path The path to encode._@return The location reference.;public static CheckpointStorageLocationReference encodePathAsReference(Path path) {_		byte[] refBytes = path.toString().getBytes(StandardCharsets.UTF_8)__		byte[] bytes = new byte[REFERENCE_MAGIC_NUMBER.length + refBytes.length]___		System.arraycopy(REFERENCE_MAGIC_NUMBER, 0, bytes, 0, REFERENCE_MAGIC_NUMBER.length)__		System.arraycopy(refBytes, 0, bytes, REFERENCE_MAGIC_NUMBER.length, refBytes.length)___		return new CheckpointStorageLocationReference(bytes)__	};encodes,the,given,path,as,a,reference,in,bytes,the,path,is,encoded,as,a,utf,8,string,and,prepended,as,a,magic,number,param,path,the,path,to,encode,return,the,location,reference;public,static,checkpoint,storage,location,reference,encode,path,as,reference,path,path,byte,ref,bytes,path,to,string,get,bytes,standard,charsets,byte,bytes,new,byte,length,ref,bytes,length,system,arraycopy,0,bytes,0,length,system,arraycopy,ref,bytes,0,bytes,length,ref,bytes,length,return,new,checkpoint,storage,location,reference,bytes
AbstractFsCheckpointStorage -> public static CheckpointStorageLocationReference encodePathAsReference(Path path);1516365428;Encodes the given path as a reference in bytes. The path is encoded as a UTF-8 string_and prepended as a magic number.__@param path The path to encode._@return The location reference.;public static CheckpointStorageLocationReference encodePathAsReference(Path path) {_		byte[] refBytes = path.toString().getBytes(StandardCharsets.UTF_8)__		byte[] bytes = new byte[REFERENCE_MAGIC_NUMBER.length + refBytes.length]___		System.arraycopy(REFERENCE_MAGIC_NUMBER, 0, bytes, 0, REFERENCE_MAGIC_NUMBER.length)__		System.arraycopy(refBytes, 0, bytes, REFERENCE_MAGIC_NUMBER.length, refBytes.length)___		return new CheckpointStorageLocationReference(bytes)__	};encodes,the,given,path,as,a,reference,in,bytes,the,path,is,encoded,as,a,utf,8,string,and,prepended,as,a,magic,number,param,path,the,path,to,encode,return,the,location,reference;public,static,checkpoint,storage,location,reference,encode,path,as,reference,path,path,byte,ref,bytes,path,to,string,get,bytes,standard,charsets,byte,bytes,new,byte,length,ref,bytes,length,system,arraycopy,0,bytes,0,length,system,arraycopy,ref,bytes,0,bytes,length,ref,bytes,length,return,new,checkpoint,storage,location,reference,bytes
AbstractFsCheckpointStorage -> public static CheckpointStorageLocationReference encodePathAsReference(Path path);1517414098;Encodes the given path as a reference in bytes. The path is encoded as a UTF-8 string_and prepended as a magic number.__@param path The path to encode._@return The location reference.;public static CheckpointStorageLocationReference encodePathAsReference(Path path) {_		byte[] refBytes = path.toString().getBytes(StandardCharsets.UTF_8)__		byte[] bytes = new byte[REFERENCE_MAGIC_NUMBER.length + refBytes.length]___		System.arraycopy(REFERENCE_MAGIC_NUMBER, 0, bytes, 0, REFERENCE_MAGIC_NUMBER.length)__		System.arraycopy(refBytes, 0, bytes, REFERENCE_MAGIC_NUMBER.length, refBytes.length)___		return new CheckpointStorageLocationReference(bytes)__	};encodes,the,given,path,as,a,reference,in,bytes,the,path,is,encoded,as,a,utf,8,string,and,prepended,as,a,magic,number,param,path,the,path,to,encode,return,the,location,reference;public,static,checkpoint,storage,location,reference,encode,path,as,reference,path,path,byte,ref,bytes,path,to,string,get,bytes,standard,charsets,byte,bytes,new,byte,length,ref,bytes,length,system,arraycopy,0,bytes,0,length,system,arraycopy,ref,bytes,0,bytes,length,ref,bytes,length,return,new,checkpoint,storage,location,reference,bytes
AbstractFsCheckpointStorage -> protected AbstractFsCheckpointStorage( 			JobID jobId, 			@Nullable Path defaultSavepointDirectory);1509045960;Creates a new checkpoint storage.__@param jobId The ID of the job that writes the checkpoints._@param defaultSavepointDirectory The default location for savepoints, or null, if none is set.;protected AbstractFsCheckpointStorage(_			JobID jobId,_			@Nullable Path defaultSavepointDirectory) {__		this.jobId = checkNotNull(jobId)__		this.defaultSavepointDirectory = defaultSavepointDirectory__	};creates,a,new,checkpoint,storage,param,job,id,the,id,of,the,job,that,writes,the,checkpoints,param,default,savepoint,directory,the,default,location,for,savepoints,or,null,if,none,is,set;protected,abstract,fs,checkpoint,storage,job,id,job,id,nullable,path,default,savepoint,directory,this,job,id,check,not,null,job,id,this,default,savepoint,directory,default,savepoint,directory
AbstractFsCheckpointStorage -> protected AbstractFsCheckpointStorage( 			JobID jobId, 			@Nullable Path defaultSavepointDirectory);1515600846;Creates a new checkpoint storage.__@param jobId The ID of the job that writes the checkpoints._@param defaultSavepointDirectory The default location for savepoints, or null, if none is set.;protected AbstractFsCheckpointStorage(_			JobID jobId,_			@Nullable Path defaultSavepointDirectory) {__		this.jobId = checkNotNull(jobId)__		this.defaultSavepointDirectory = defaultSavepointDirectory__	};creates,a,new,checkpoint,storage,param,job,id,the,id,of,the,job,that,writes,the,checkpoints,param,default,savepoint,directory,the,default,location,for,savepoints,or,null,if,none,is,set;protected,abstract,fs,checkpoint,storage,job,id,job,id,nullable,path,default,savepoint,directory,this,job,id,check,not,null,job,id,this,default,savepoint,directory,default,savepoint,directory
AbstractFsCheckpointStorage -> protected AbstractFsCheckpointStorage( 			JobID jobId, 			@Nullable Path defaultSavepointDirectory);1516365428;Creates a new checkpoint storage.__@param jobId The ID of the job that writes the checkpoints._@param defaultSavepointDirectory The default location for savepoints, or null, if none is set.;protected AbstractFsCheckpointStorage(_			JobID jobId,_			@Nullable Path defaultSavepointDirectory) {__		this.jobId = checkNotNull(jobId)__		this.defaultSavepointDirectory = defaultSavepointDirectory__	};creates,a,new,checkpoint,storage,param,job,id,the,id,of,the,job,that,writes,the,checkpoints,param,default,savepoint,directory,the,default,location,for,savepoints,or,null,if,none,is,set;protected,abstract,fs,checkpoint,storage,job,id,job,id,nullable,path,default,savepoint,directory,this,job,id,check,not,null,job,id,this,default,savepoint,directory,default,savepoint,directory
AbstractFsCheckpointStorage -> protected AbstractFsCheckpointStorage( 			JobID jobId, 			@Nullable Path defaultSavepointDirectory);1517414098;Creates a new checkpoint storage.__@param jobId The ID of the job that writes the checkpoints._@param defaultSavepointDirectory The default location for savepoints, or null, if none is set.;protected AbstractFsCheckpointStorage(_			JobID jobId,_			@Nullable Path defaultSavepointDirectory) {__		this.jobId = checkNotNull(jobId)__		this.defaultSavepointDirectory = defaultSavepointDirectory__	};creates,a,new,checkpoint,storage,param,job,id,the,id,of,the,job,that,writes,the,checkpoints,param,default,savepoint,directory,the,default,location,for,savepoints,or,null,if,none,is,set;protected,abstract,fs,checkpoint,storage,job,id,job,id,nullable,path,default,savepoint,directory,this,job,id,check,not,null,job,id,this,default,savepoint,directory,default,savepoint,directory
AbstractFsCheckpointStorage -> protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId);1509045960;Builds directory into which a specific job checkpoints, meaning the directory inside which_it creates the checkpoint-specific subdirectories.__<p>This method only succeeds if a base checkpoint directory has been set_ otherwise_the method fails with an exception.__@param jobId The ID of the job_@return The job's checkpoint directory, re__@throws UnsupportedOperationException Thrown, if no base checkpoint directory has been set.;protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId) {_		return new Path(baseCheckpointPath, jobId.toString())__	};builds,directory,into,which,a,specific,job,checkpoints,meaning,the,directory,inside,which,it,creates,the,checkpoint,specific,subdirectories,p,this,method,only,succeeds,if,a,base,checkpoint,directory,has,been,set,otherwise,the,method,fails,with,an,exception,param,job,id,the,id,of,the,job,return,the,job,s,checkpoint,directory,re,throws,unsupported,operation,exception,thrown,if,no,base,checkpoint,directory,has,been,set;protected,static,path,get,checkpoint,directory,for,job,path,base,checkpoint,path,job,id,job,id,return,new,path,base,checkpoint,path,job,id,to,string
AbstractFsCheckpointStorage -> protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId);1515600846;Builds directory into which a specific job checkpoints, meaning the directory inside which_it creates the checkpoint-specific subdirectories.__<p>This method only succeeds if a base checkpoint directory has been set_ otherwise_the method fails with an exception.__@param jobId The ID of the job_@return The job's checkpoint directory, re__@throws UnsupportedOperationException Thrown, if no base checkpoint directory has been set.;protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId) {_		return new Path(baseCheckpointPath, jobId.toString())__	};builds,directory,into,which,a,specific,job,checkpoints,meaning,the,directory,inside,which,it,creates,the,checkpoint,specific,subdirectories,p,this,method,only,succeeds,if,a,base,checkpoint,directory,has,been,set,otherwise,the,method,fails,with,an,exception,param,job,id,the,id,of,the,job,return,the,job,s,checkpoint,directory,re,throws,unsupported,operation,exception,thrown,if,no,base,checkpoint,directory,has,been,set;protected,static,path,get,checkpoint,directory,for,job,path,base,checkpoint,path,job,id,job,id,return,new,path,base,checkpoint,path,job,id,to,string
AbstractFsCheckpointStorage -> protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId);1516365428;Builds directory into which a specific job checkpoints, meaning the directory inside which_it creates the checkpoint-specific subdirectories.__<p>This method only succeeds if a base checkpoint directory has been set_ otherwise_the method fails with an exception.__@param jobId The ID of the job_@return The job's checkpoint directory, re__@throws UnsupportedOperationException Thrown, if no base checkpoint directory has been set.;protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId) {_		return new Path(baseCheckpointPath, jobId.toString())__	};builds,directory,into,which,a,specific,job,checkpoints,meaning,the,directory,inside,which,it,creates,the,checkpoint,specific,subdirectories,p,this,method,only,succeeds,if,a,base,checkpoint,directory,has,been,set,otherwise,the,method,fails,with,an,exception,param,job,id,the,id,of,the,job,return,the,job,s,checkpoint,directory,re,throws,unsupported,operation,exception,thrown,if,no,base,checkpoint,directory,has,been,set;protected,static,path,get,checkpoint,directory,for,job,path,base,checkpoint,path,job,id,job,id,return,new,path,base,checkpoint,path,job,id,to,string
AbstractFsCheckpointStorage -> protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId);1517414098;Builds directory into which a specific job checkpoints, meaning the directory inside which_it creates the checkpoint-specific subdirectories.__<p>This method only succeeds if a base checkpoint directory has been set_ otherwise_the method fails with an exception.__@param jobId The ID of the job_@return The job's checkpoint directory, re__@throws UnsupportedOperationException Thrown, if no base checkpoint directory has been set.;protected static Path getCheckpointDirectoryForJob(Path baseCheckpointPath, JobID jobId) {_		return new Path(baseCheckpointPath, jobId.toString())__	};builds,directory,into,which,a,specific,job,checkpoints,meaning,the,directory,inside,which,it,creates,the,checkpoint,specific,subdirectories,p,this,method,only,succeeds,if,a,base,checkpoint,directory,has,been,set,otherwise,the,method,fails,with,an,exception,param,job,id,the,id,of,the,job,return,the,job,s,checkpoint,directory,re,throws,unsupported,operation,exception,thrown,if,no,base,checkpoint,directory,has,been,set;protected,static,path,get,checkpoint,directory,for,job,path,base,checkpoint,path,job,id,job,id,return,new,path,base,checkpoint,path,job,id,to,string
AbstractFsCheckpointStorage -> protected static StreamStateHandle resolveCheckpointPointer(String checkpointPointer) throws IOException;1509045960;Takes the given string (representing a pointer to a checkpoint) and resolves it to a file_status for the checkpoint's metadata file.__@param checkpointPointer The pointer to resolve._@return A state handle to checkpoint/savepoint's metadata.__@throws IOException Thrown, if the pointer cannot be resolved, the file system not accessed, or_the pointer points to a location that does not seem to be a checkpoint/savepoint.;protected static StreamStateHandle resolveCheckpointPointer(String checkpointPointer) throws IOException {_		checkNotNull(checkpointPointer, "checkpointPointer")__		checkArgument(!checkpointPointer.isEmpty(), "empty checkpoint pointer")___		_		final Path path__		try {_			path = new Path(checkpointPointer)__		}_		catch (Exception e) {_			throw new IOException("Checkpoint/savepoint path '" + checkpointPointer + "' is not a valid file URI. " +_					"Either the pointer path is invalid, or the checkpoint was created by a different state backend.")__		}__		_		final FileSystem fs__		try {_			fs = path.getFileSystem()__		}_		catch (IOException e) {_			throw new IOException("Cannot access file system for checkpoint/savepoint path '" +_					checkpointPointer + "'.", e)__		}__		final FileStatus status__		try {_			status = fs.getFileStatus(path)__		}_		catch (FileNotFoundException e) {_			throw new FileNotFoundException("Cannot find checkpoint or savepoint " +_					"file/directory '" + checkpointPointer + "' on file system '" + fs.getUri().getScheme() + "'.")__		}__		_		final FileStatus metadataFileStatus___		_		if (status.isDir()) {_			final Path metadataFilePath = new Path(path, METADATA_FILE_NAME)__			try {_				metadataFileStatus = fs.getFileStatus(metadataFilePath)__			}_			catch (FileNotFoundException e) {_				throw new FileNotFoundException("Cannot find meta data file '" + METADATA_FILE_NAME +_						"' in directory '" + path + "'. Please try to load the checkpoint/savepoint " +_						"directly from the metadata file instead of the directory.")__			}_		}_		else {_			_			_			metadataFileStatus = status__		}__		return new FileStateHandle(metadataFileStatus.getPath(), metadataFileStatus.getLen())__	};takes,the,given,string,representing,a,pointer,to,a,checkpoint,and,resolves,it,to,a,file,status,for,the,checkpoint,s,metadata,file,param,checkpoint,pointer,the,pointer,to,resolve,return,a,state,handle,to,checkpoint,savepoint,s,metadata,throws,ioexception,thrown,if,the,pointer,cannot,be,resolved,the,file,system,not,accessed,or,the,pointer,points,to,a,location,that,does,not,seem,to,be,a,checkpoint,savepoint;protected,static,stream,state,handle,resolve,checkpoint,pointer,string,checkpoint,pointer,throws,ioexception,check,not,null,checkpoint,pointer,checkpoint,pointer,check,argument,checkpoint,pointer,is,empty,empty,checkpoint,pointer,final,path,path,try,path,new,path,checkpoint,pointer,catch,exception,e,throw,new,ioexception,checkpoint,savepoint,path,checkpoint,pointer,is,not,a,valid,file,uri,either,the,pointer,path,is,invalid,or,the,checkpoint,was,created,by,a,different,state,backend,final,file,system,fs,try,fs,path,get,file,system,catch,ioexception,e,throw,new,ioexception,cannot,access,file,system,for,checkpoint,savepoint,path,checkpoint,pointer,e,final,file,status,status,try,status,fs,get,file,status,path,catch,file,not,found,exception,e,throw,new,file,not,found,exception,cannot,find,checkpoint,or,savepoint,file,directory,checkpoint,pointer,on,file,system,fs,get,uri,get,scheme,final,file,status,metadata,file,status,if,status,is,dir,final,path,metadata,file,path,new,path,path,try,metadata,file,status,fs,get,file,status,metadata,file,path,catch,file,not,found,exception,e,throw,new,file,not,found,exception,cannot,find,meta,data,file,in,directory,path,please,try,to,load,the,checkpoint,savepoint,directly,from,the,metadata,file,instead,of,the,directory,else,metadata,file,status,status,return,new,file,state,handle,metadata,file,status,get,path,metadata,file,status,get,len
AbstractFsCheckpointStorage -> protected static StreamStateHandle resolveCheckpointPointer(String checkpointPointer) throws IOException;1515600846;Takes the given string (representing a pointer to a checkpoint) and resolves it to a file_status for the checkpoint's metadata file.__@param checkpointPointer The pointer to resolve._@return A state handle to checkpoint/savepoint's metadata.__@throws IOException Thrown, if the pointer cannot be resolved, the file system not accessed, or_the pointer points to a location that does not seem to be a checkpoint/savepoint.;protected static StreamStateHandle resolveCheckpointPointer(String checkpointPointer) throws IOException {_		checkNotNull(checkpointPointer, "checkpointPointer")__		checkArgument(!checkpointPointer.isEmpty(), "empty checkpoint pointer")___		_		final Path path__		try {_			path = new Path(checkpointPointer)__		}_		catch (Exception e) {_			throw new IOException("Checkpoint/savepoint path '" + checkpointPointer + "' is not a valid file URI. " +_					"Either the pointer path is invalid, or the checkpoint was created by a different state backend.")__		}__		_		final FileSystem fs__		try {_			fs = path.getFileSystem()__		}_		catch (IOException e) {_			throw new IOException("Cannot access file system for checkpoint/savepoint path '" +_					checkpointPointer + "'.", e)__		}__		final FileStatus status__		try {_			status = fs.getFileStatus(path)__		}_		catch (FileNotFoundException e) {_			throw new FileNotFoundException("Cannot find checkpoint or savepoint " +_					"file/directory '" + checkpointPointer + "' on file system '" + fs.getUri().getScheme() + "'.")__		}__		_		final FileStatus metadataFileStatus___		_		if (status.isDir()) {_			final Path metadataFilePath = new Path(path, METADATA_FILE_NAME)__			try {_				metadataFileStatus = fs.getFileStatus(metadataFilePath)__			}_			catch (FileNotFoundException e) {_				throw new FileNotFoundException("Cannot find meta data file '" + METADATA_FILE_NAME +_						"' in directory '" + path + "'. Please try to load the checkpoint/savepoint " +_						"directly from the metadata file instead of the directory.")__			}_		}_		else {_			_			_			metadataFileStatus = status__		}__		return new FileStateHandle(metadataFileStatus.getPath(), metadataFileStatus.getLen())__	};takes,the,given,string,representing,a,pointer,to,a,checkpoint,and,resolves,it,to,a,file,status,for,the,checkpoint,s,metadata,file,param,checkpoint,pointer,the,pointer,to,resolve,return,a,state,handle,to,checkpoint,savepoint,s,metadata,throws,ioexception,thrown,if,the,pointer,cannot,be,resolved,the,file,system,not,accessed,or,the,pointer,points,to,a,location,that,does,not,seem,to,be,a,checkpoint,savepoint;protected,static,stream,state,handle,resolve,checkpoint,pointer,string,checkpoint,pointer,throws,ioexception,check,not,null,checkpoint,pointer,checkpoint,pointer,check,argument,checkpoint,pointer,is,empty,empty,checkpoint,pointer,final,path,path,try,path,new,path,checkpoint,pointer,catch,exception,e,throw,new,ioexception,checkpoint,savepoint,path,checkpoint,pointer,is,not,a,valid,file,uri,either,the,pointer,path,is,invalid,or,the,checkpoint,was,created,by,a,different,state,backend,final,file,system,fs,try,fs,path,get,file,system,catch,ioexception,e,throw,new,ioexception,cannot,access,file,system,for,checkpoint,savepoint,path,checkpoint,pointer,e,final,file,status,status,try,status,fs,get,file,status,path,catch,file,not,found,exception,e,throw,new,file,not,found,exception,cannot,find,checkpoint,or,savepoint,file,directory,checkpoint,pointer,on,file,system,fs,get,uri,get,scheme,final,file,status,metadata,file,status,if,status,is,dir,final,path,metadata,file,path,new,path,path,try,metadata,file,status,fs,get,file,status,metadata,file,path,catch,file,not,found,exception,e,throw,new,file,not,found,exception,cannot,find,meta,data,file,in,directory,path,please,try,to,load,the,checkpoint,savepoint,directly,from,the,metadata,file,instead,of,the,directory,else,metadata,file,status,status,return,new,file,state,handle,metadata,file,status,get,path,metadata,file,status,get,len
AbstractFsCheckpointStorage -> protected static StreamStateHandle resolveCheckpointPointer(String checkpointPointer) throws IOException;1516365428;Takes the given string (representing a pointer to a checkpoint) and resolves it to a file_status for the checkpoint's metadata file.__@param checkpointPointer The pointer to resolve._@return A state handle to checkpoint/savepoint's metadata.__@throws IOException Thrown, if the pointer cannot be resolved, the file system not accessed, or_the pointer points to a location that does not seem to be a checkpoint/savepoint.;protected static StreamStateHandle resolveCheckpointPointer(String checkpointPointer) throws IOException {_		checkNotNull(checkpointPointer, "checkpointPointer")__		checkArgument(!checkpointPointer.isEmpty(), "empty checkpoint pointer")___		_		final Path path__		try {_			path = new Path(checkpointPointer)__		}_		catch (Exception e) {_			throw new IOException("Checkpoint/savepoint path '" + checkpointPointer + "' is not a valid file URI. " +_					"Either the pointer path is invalid, or the checkpoint was created by a different state backend.")__		}__		_		final FileSystem fs__		try {_			fs = path.getFileSystem()__		}_		catch (IOException e) {_			throw new IOException("Cannot access file system for checkpoint/savepoint path '" +_					checkpointPointer + "'.", e)__		}__		final FileStatus status__		try {_			status = fs.getFileStatus(path)__		}_		catch (FileNotFoundException e) {_			throw new FileNotFoundException("Cannot find checkpoint or savepoint " +_					"file/directory '" + checkpointPointer + "' on file system '" + fs.getUri().getScheme() + "'.")__		}__		_		final FileStatus metadataFileStatus___		_		if (status.isDir()) {_			final Path metadataFilePath = new Path(path, METADATA_FILE_NAME)__			try {_				metadataFileStatus = fs.getFileStatus(metadataFilePath)__			}_			catch (FileNotFoundException e) {_				throw new FileNotFoundException("Cannot find meta data file '" + METADATA_FILE_NAME +_						"' in directory '" + path + "'. Please try to load the checkpoint/savepoint " +_						"directly from the metadata file instead of the directory.")__			}_		}_		else {_			_			_			metadataFileStatus = status__		}__		return new FileStateHandle(metadataFileStatus.getPath(), metadataFileStatus.getLen())__	};takes,the,given,string,representing,a,pointer,to,a,checkpoint,and,resolves,it,to,a,file,status,for,the,checkpoint,s,metadata,file,param,checkpoint,pointer,the,pointer,to,resolve,return,a,state,handle,to,checkpoint,savepoint,s,metadata,throws,ioexception,thrown,if,the,pointer,cannot,be,resolved,the,file,system,not,accessed,or,the,pointer,points,to,a,location,that,does,not,seem,to,be,a,checkpoint,savepoint;protected,static,stream,state,handle,resolve,checkpoint,pointer,string,checkpoint,pointer,throws,ioexception,check,not,null,checkpoint,pointer,checkpoint,pointer,check,argument,checkpoint,pointer,is,empty,empty,checkpoint,pointer,final,path,path,try,path,new,path,checkpoint,pointer,catch,exception,e,throw,new,ioexception,checkpoint,savepoint,path,checkpoint,pointer,is,not,a,valid,file,uri,either,the,pointer,path,is,invalid,or,the,checkpoint,was,created,by,a,different,state,backend,final,file,system,fs,try,fs,path,get,file,system,catch,ioexception,e,throw,new,ioexception,cannot,access,file,system,for,checkpoint,savepoint,path,checkpoint,pointer,e,final,file,status,status,try,status,fs,get,file,status,path,catch,file,not,found,exception,e,throw,new,file,not,found,exception,cannot,find,checkpoint,or,savepoint,file,directory,checkpoint,pointer,on,file,system,fs,get,uri,get,scheme,final,file,status,metadata,file,status,if,status,is,dir,final,path,metadata,file,path,new,path,path,try,metadata,file,status,fs,get,file,status,metadata,file,path,catch,file,not,found,exception,e,throw,new,file,not,found,exception,cannot,find,meta,data,file,in,directory,path,please,try,to,load,the,checkpoint,savepoint,directly,from,the,metadata,file,instead,of,the,directory,else,metadata,file,status,status,return,new,file,state,handle,metadata,file,status,get,path,metadata,file,status,get,len
AbstractFsCheckpointStorage -> public static Path decodePathFromReference(CheckpointStorageLocationReference reference);1515600846;Decodes the given reference into a path. This method validates that the reference bytes start with_the correct magic number (as written by {@link #encodePathAsReference(Path)}) and converts_the remaining bytes back to a proper path.__@param reference The bytes representing the reference._@return The path decoded from the reference.__@throws IllegalArgumentException Thrown, if the bytes do not represent a proper reference.;public static Path decodePathFromReference(CheckpointStorageLocationReference reference) {_		if (reference.isDefaultReference()) {_			throw new IllegalArgumentException("Cannot decode default reference")__		}__		final byte[] bytes = reference.getReferenceBytes()__		final int headerLen = REFERENCE_MAGIC_NUMBER.length___		if (bytes.length > headerLen) {_			_			for (int i = 0_ i < headerLen_ i++) {_				if (bytes[i] != REFERENCE_MAGIC_NUMBER[i]) {_					throw new IllegalArgumentException("Reference starts with the wrong magic number")__				}_			}__			_			try {_				return new Path(new String(bytes, headerLen, bytes.length - headerLen, StandardCharsets.UTF_8))__			}_			catch (Exception e) {_				throw new IllegalArgumentException("Reference cannot be decoded to a path", e)__			}_		}_		else {_			throw new IllegalArgumentException("Reference too short.")__		}_	};decodes,the,given,reference,into,a,path,this,method,validates,that,the,reference,bytes,start,with,the,correct,magic,number,as,written,by,link,encode,path,as,reference,path,and,converts,the,remaining,bytes,back,to,a,proper,path,param,reference,the,bytes,representing,the,reference,return,the,path,decoded,from,the,reference,throws,illegal,argument,exception,thrown,if,the,bytes,do,not,represent,a,proper,reference;public,static,path,decode,path,from,reference,checkpoint,storage,location,reference,reference,if,reference,is,default,reference,throw,new,illegal,argument,exception,cannot,decode,default,reference,final,byte,bytes,reference,get,reference,bytes,final,int,header,len,length,if,bytes,length,header,len,for,int,i,0,i,header,len,i,if,bytes,i,i,throw,new,illegal,argument,exception,reference,starts,with,the,wrong,magic,number,try,return,new,path,new,string,bytes,header,len,bytes,length,header,len,standard,charsets,catch,exception,e,throw,new,illegal,argument,exception,reference,cannot,be,decoded,to,a,path,e,else,throw,new,illegal,argument,exception,reference,too,short
AbstractFsCheckpointStorage -> public static Path decodePathFromReference(CheckpointStorageLocationReference reference);1516365428;Decodes the given reference into a path. This method validates that the reference bytes start with_the correct magic number (as written by {@link #encodePathAsReference(Path)}) and converts_the remaining bytes back to a proper path.__@param reference The bytes representing the reference._@return The path decoded from the reference.__@throws IllegalArgumentException Thrown, if the bytes do not represent a proper reference.;public static Path decodePathFromReference(CheckpointStorageLocationReference reference) {_		if (reference.isDefaultReference()) {_			throw new IllegalArgumentException("Cannot decode default reference")__		}__		final byte[] bytes = reference.getReferenceBytes()__		final int headerLen = REFERENCE_MAGIC_NUMBER.length___		if (bytes.length > headerLen) {_			_			for (int i = 0_ i < headerLen_ i++) {_				if (bytes[i] != REFERENCE_MAGIC_NUMBER[i]) {_					throw new IllegalArgumentException("Reference starts with the wrong magic number")__				}_			}__			_			try {_				return new Path(new String(bytes, headerLen, bytes.length - headerLen, StandardCharsets.UTF_8))__			}_			catch (Exception e) {_				throw new IllegalArgumentException("Reference cannot be decoded to a path", e)__			}_		}_		else {_			throw new IllegalArgumentException("Reference too short.")__		}_	};decodes,the,given,reference,into,a,path,this,method,validates,that,the,reference,bytes,start,with,the,correct,magic,number,as,written,by,link,encode,path,as,reference,path,and,converts,the,remaining,bytes,back,to,a,proper,path,param,reference,the,bytes,representing,the,reference,return,the,path,decoded,from,the,reference,throws,illegal,argument,exception,thrown,if,the,bytes,do,not,represent,a,proper,reference;public,static,path,decode,path,from,reference,checkpoint,storage,location,reference,reference,if,reference,is,default,reference,throw,new,illegal,argument,exception,cannot,decode,default,reference,final,byte,bytes,reference,get,reference,bytes,final,int,header,len,length,if,bytes,length,header,len,for,int,i,0,i,header,len,i,if,bytes,i,i,throw,new,illegal,argument,exception,reference,starts,with,the,wrong,magic,number,try,return,new,path,new,string,bytes,header,len,bytes,length,header,len,standard,charsets,catch,exception,e,throw,new,illegal,argument,exception,reference,cannot,be,decoded,to,a,path,e,else,throw,new,illegal,argument,exception,reference,too,short
AbstractFsCheckpointStorage -> public static Path decodePathFromReference(CheckpointStorageLocationReference reference);1517414098;Decodes the given reference into a path. This method validates that the reference bytes start with_the correct magic number (as written by {@link #encodePathAsReference(Path)}) and converts_the remaining bytes back to a proper path.__@param reference The bytes representing the reference._@return The path decoded from the reference.__@throws IllegalArgumentException Thrown, if the bytes do not represent a proper reference.;public static Path decodePathFromReference(CheckpointStorageLocationReference reference) {_		if (reference.isDefaultReference()) {_			throw new IllegalArgumentException("Cannot decode default reference")__		}__		final byte[] bytes = reference.getReferenceBytes()__		final int headerLen = REFERENCE_MAGIC_NUMBER.length___		if (bytes.length > headerLen) {_			_			for (int i = 0_ i < headerLen_ i++) {_				if (bytes[i] != REFERENCE_MAGIC_NUMBER[i]) {_					throw new IllegalArgumentException("Reference starts with the wrong magic number")__				}_			}__			_			try {_				return new Path(new String(bytes, headerLen, bytes.length - headerLen, StandardCharsets.UTF_8))__			}_			catch (Exception e) {_				throw new IllegalArgumentException("Reference cannot be decoded to a path", e)__			}_		}_		else {_			throw new IllegalArgumentException("Reference too short.")__		}_	};decodes,the,given,reference,into,a,path,this,method,validates,that,the,reference,bytes,start,with,the,correct,magic,number,as,written,by,link,encode,path,as,reference,path,and,converts,the,remaining,bytes,back,to,a,proper,path,param,reference,the,bytes,representing,the,reference,return,the,path,decoded,from,the,reference,throws,illegal,argument,exception,thrown,if,the,bytes,do,not,represent,a,proper,reference;public,static,path,decode,path,from,reference,checkpoint,storage,location,reference,reference,if,reference,is,default,reference,throw,new,illegal,argument,exception,cannot,decode,default,reference,final,byte,bytes,reference,get,reference,bytes,final,int,header,len,length,if,bytes,length,header,len,for,int,i,0,i,header,len,i,if,bytes,i,i,throw,new,illegal,argument,exception,reference,starts,with,the,wrong,magic,number,try,return,new,path,new,string,bytes,header,len,bytes,length,header,len,standard,charsets,catch,exception,e,throw,new,illegal,argument,exception,reference,cannot,be,decoded,to,a,path,e,else,throw,new,illegal,argument,exception,reference,too,short
AbstractFsCheckpointStorage -> @Override 	public FsCheckpointStorageLocation initializeLocationForSavepoint( 			@SuppressWarnings("unused") long checkpointId, 			@Nullable String externalLocationPointer) throws IOException;1509045960;Creates a file system based storage location for a savepoint.__<p>This methods implements the logic that decides which location to use (given optional_parameters for a configured location and a location passed for this specific savepoint)_and how to name and initialize the savepoint directory.__@param externalLocationPointer    The target location pointer for the savepoint._Must be a valid URI. Null, if not supplied._@param checkpointId               The checkpoint ID of the savepoint.__@return The checkpoint storage location for the savepoint.__@throws IOException Thrown if the target directory could not be created.;@Override_	public FsCheckpointStorageLocation initializeLocationForSavepoint(_			@SuppressWarnings("unused") long checkpointId,_			@Nullable String externalLocationPointer) throws IOException {__		__		final Path savepointBasePath__		if (externalLocationPointer != null) {_			savepointBasePath = new Path(externalLocationPointer)__		}_		else if (defaultSavepointDirectory != null) {_			savepointBasePath = defaultSavepointDirectory__		}_		else {_			throw new IllegalArgumentException("No savepoint location given and no default location configured.")__		}__		__		final FileSystem fs = savepointBasePath.getFileSystem()__		final String prefix = "savepoint-" + jobId.toString().substring(0, 6) + '-'___		Exception latestException = null__		for (int attempt = 0_ attempt < 10_ attempt++) {_			final Path path = new Path(savepointBasePath, FileUtils.getRandomFilename(prefix))___			try {_				if (fs.mkdirs(path)) {_					return new FsCheckpointStorageLocation(fs, path, path, path)__				}_			} catch (Exception e) {_				latestException = e__			}_		}__		throw new IOException("Failed to create savepoint directory at " + savepointBasePath, latestException)__	};creates,a,file,system,based,storage,location,for,a,savepoint,p,this,methods,implements,the,logic,that,decides,which,location,to,use,given,optional,parameters,for,a,configured,location,and,a,location,passed,for,this,specific,savepoint,and,how,to,name,and,initialize,the,savepoint,directory,param,external,location,pointer,the,target,location,pointer,for,the,savepoint,must,be,a,valid,uri,null,if,not,supplied,param,checkpoint,id,the,checkpoint,id,of,the,savepoint,return,the,checkpoint,storage,location,for,the,savepoint,throws,ioexception,thrown,if,the,target,directory,could,not,be,created;override,public,fs,checkpoint,storage,location,initialize,location,for,savepoint,suppress,warnings,unused,long,checkpoint,id,nullable,string,external,location,pointer,throws,ioexception,final,path,savepoint,base,path,if,external,location,pointer,null,savepoint,base,path,new,path,external,location,pointer,else,if,default,savepoint,directory,null,savepoint,base,path,default,savepoint,directory,else,throw,new,illegal,argument,exception,no,savepoint,location,given,and,no,default,location,configured,final,file,system,fs,savepoint,base,path,get,file,system,final,string,prefix,savepoint,job,id,to,string,substring,0,6,exception,latest,exception,null,for,int,attempt,0,attempt,10,attempt,final,path,path,new,path,savepoint,base,path,file,utils,get,random,filename,prefix,try,if,fs,mkdirs,path,return,new,fs,checkpoint,storage,location,fs,path,path,path,catch,exception,e,latest,exception,e,throw,new,ioexception,failed,to,create,savepoint,directory,at,savepoint,base,path,latest,exception
AbstractFsCheckpointStorage -> @Override 	public FsCheckpointStorageLocation initializeLocationForSavepoint( 			@SuppressWarnings("unused") long checkpointId, 			@Nullable String externalLocationPointer) throws IOException;1516365428;Creates a file system based storage location for a savepoint.__<p>This methods implements the logic that decides which location to use (given optional_parameters for a configured location and a location passed for this specific savepoint)_and how to name and initialize the savepoint directory.__@param externalLocationPointer    The target location pointer for the savepoint._Must be a valid URI. Null, if not supplied._@param checkpointId               The checkpoint ID of the savepoint.__@return The checkpoint storage location for the savepoint.__@throws IOException Thrown if the target directory could not be created.;@Override_	public FsCheckpointStorageLocation initializeLocationForSavepoint(_			@SuppressWarnings("unused") long checkpointId,_			@Nullable String externalLocationPointer) throws IOException {__		__		final Path savepointBasePath__		if (externalLocationPointer != null) {_			savepointBasePath = new Path(externalLocationPointer)__		}_		else if (defaultSavepointDirectory != null) {_			savepointBasePath = defaultSavepointDirectory__		}_		else {_			throw new IllegalArgumentException("No savepoint location given and no default location configured.")__		}__		__		final FileSystem fs = savepointBasePath.getFileSystem()__		final String prefix = "savepoint-" + jobId.toString().substring(0, 6) + '-'___		Exception latestException = null__		for (int attempt = 0_ attempt < 10_ attempt++) {_			final Path path = new Path(savepointBasePath, FileUtils.getRandomFilename(prefix))___			try {_				if (fs.mkdirs(path)) {_					_					final Path qp = path.makeQualified(fs)___					final CheckpointStorageLocationReference reference = encodePathAsReference(qp)___					return new FsCheckpointStorageLocation(fs, qp, qp, qp, reference)__				}_			} catch (Exception e) {_				latestException = e__			}_		}__		throw new IOException("Failed to create savepoint directory at " + savepointBasePath, latestException)__	};creates,a,file,system,based,storage,location,for,a,savepoint,p,this,methods,implements,the,logic,that,decides,which,location,to,use,given,optional,parameters,for,a,configured,location,and,a,location,passed,for,this,specific,savepoint,and,how,to,name,and,initialize,the,savepoint,directory,param,external,location,pointer,the,target,location,pointer,for,the,savepoint,must,be,a,valid,uri,null,if,not,supplied,param,checkpoint,id,the,checkpoint,id,of,the,savepoint,return,the,checkpoint,storage,location,for,the,savepoint,throws,ioexception,thrown,if,the,target,directory,could,not,be,created;override,public,fs,checkpoint,storage,location,initialize,location,for,savepoint,suppress,warnings,unused,long,checkpoint,id,nullable,string,external,location,pointer,throws,ioexception,final,path,savepoint,base,path,if,external,location,pointer,null,savepoint,base,path,new,path,external,location,pointer,else,if,default,savepoint,directory,null,savepoint,base,path,default,savepoint,directory,else,throw,new,illegal,argument,exception,no,savepoint,location,given,and,no,default,location,configured,final,file,system,fs,savepoint,base,path,get,file,system,final,string,prefix,savepoint,job,id,to,string,substring,0,6,exception,latest,exception,null,for,int,attempt,0,attempt,10,attempt,final,path,path,new,path,savepoint,base,path,file,utils,get,random,filename,prefix,try,if,fs,mkdirs,path,final,path,qp,path,make,qualified,fs,final,checkpoint,storage,location,reference,reference,encode,path,as,reference,qp,return,new,fs,checkpoint,storage,location,fs,qp,qp,qp,reference,catch,exception,e,latest,exception,e,throw,new,ioexception,failed,to,create,savepoint,directory,at,savepoint,base,path,latest,exception
AbstractFsCheckpointStorage -> protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId);1509045960;Creates the directory path for the data exclusive to a specific checkpoint.__@param baseDirectory The base directory into which the job checkpoints._@param checkpointId The ID (logical timestamp) of the checkpoint.;protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId) {_		return new Path(baseDirectory, CHECKPOINT_DIR_PREFIX + checkpointId)__	};creates,the,directory,path,for,the,data,exclusive,to,a,specific,checkpoint,param,base,directory,the,base,directory,into,which,the,job,checkpoints,param,checkpoint,id,the,id,logical,timestamp,of,the,checkpoint;protected,static,path,create,checkpoint,directory,path,base,directory,long,checkpoint,id,return,new,path,base,directory,checkpoint,id
AbstractFsCheckpointStorage -> protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId);1515600846;Creates the directory path for the data exclusive to a specific checkpoint.__@param baseDirectory The base directory into which the job checkpoints._@param checkpointId The ID (logical timestamp) of the checkpoint.;protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId) {_		return new Path(baseDirectory, CHECKPOINT_DIR_PREFIX + checkpointId)__	};creates,the,directory,path,for,the,data,exclusive,to,a,specific,checkpoint,param,base,directory,the,base,directory,into,which,the,job,checkpoints,param,checkpoint,id,the,id,logical,timestamp,of,the,checkpoint;protected,static,path,create,checkpoint,directory,path,base,directory,long,checkpoint,id,return,new,path,base,directory,checkpoint,id
AbstractFsCheckpointStorage -> protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId);1516365428;Creates the directory path for the data exclusive to a specific checkpoint.__@param baseDirectory The base directory into which the job checkpoints._@param checkpointId The ID (logical timestamp) of the checkpoint.;protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId) {_		return new Path(baseDirectory, CHECKPOINT_DIR_PREFIX + checkpointId)__	};creates,the,directory,path,for,the,data,exclusive,to,a,specific,checkpoint,param,base,directory,the,base,directory,into,which,the,job,checkpoints,param,checkpoint,id,the,id,logical,timestamp,of,the,checkpoint;protected,static,path,create,checkpoint,directory,path,base,directory,long,checkpoint,id,return,new,path,base,directory,checkpoint,id
AbstractFsCheckpointStorage -> protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId);1517414098;Creates the directory path for the data exclusive to a specific checkpoint.__@param baseDirectory The base directory into which the job checkpoints._@param checkpointId The ID (logical timestamp) of the checkpoint.;protected static Path createCheckpointDirectory(Path baseDirectory, long checkpointId) {_		return new Path(baseDirectory, CHECKPOINT_DIR_PREFIX + checkpointId)__	};creates,the,directory,path,for,the,data,exclusive,to,a,specific,checkpoint,param,base,directory,the,base,directory,into,which,the,job,checkpoints,param,checkpoint,id,the,id,logical,timestamp,of,the,checkpoint;protected,static,path,create,checkpoint,directory,path,base,directory,long,checkpoint,id,return,new,path,base,directory,checkpoint,id
AbstractFsCheckpointStorage -> @Override 	public CheckpointStorageLocation initializeLocationForSavepoint( 			@SuppressWarnings("unused") long checkpointId, 			@Nullable String externalLocationPointer) throws IOException;1515600846;Creates a file system based storage location for a savepoint.__<p>This methods implements the logic that decides which location to use (given optional_parameters for a configured location and a location passed for this specific savepoint)_and how to name and initialize the savepoint directory.__@param externalLocationPointer    The target location pointer for the savepoint._Must be a valid URI. Null, if not supplied._@param checkpointId               The checkpoint ID of the savepoint.__@return The checkpoint storage location for the savepoint.__@throws IOException Thrown if the target directory could not be created.;@Override_	public CheckpointStorageLocation initializeLocationForSavepoint(_			@SuppressWarnings("unused") long checkpointId,_			@Nullable String externalLocationPointer) throws IOException {__		__		final Path savepointBasePath__		if (externalLocationPointer != null) {_			savepointBasePath = new Path(externalLocationPointer)__		}_		else if (defaultSavepointDirectory != null) {_			savepointBasePath = defaultSavepointDirectory__		}_		else {_			throw new IllegalArgumentException("No savepoint location given and no default location configured.")__		}__		__		final FileSystem fs = savepointBasePath.getFileSystem()__		final String prefix = "savepoint-" + jobId.toString().substring(0, 6) + '-'___		Exception latestException = null__		for (int attempt = 0_ attempt < 10_ attempt++) {_			final Path path = new Path(savepointBasePath, FileUtils.getRandomFilename(prefix))___			try {_				if (fs.mkdirs(path)) {_					_					final Path qp = path.makeQualified(fs)___					return createSavepointLocation(fs, qp)__				}_			} catch (Exception e) {_				latestException = e__			}_		}__		throw new IOException("Failed to create savepoint directory at " + savepointBasePath, latestException)__	};creates,a,file,system,based,storage,location,for,a,savepoint,p,this,methods,implements,the,logic,that,decides,which,location,to,use,given,optional,parameters,for,a,configured,location,and,a,location,passed,for,this,specific,savepoint,and,how,to,name,and,initialize,the,savepoint,directory,param,external,location,pointer,the,target,location,pointer,for,the,savepoint,must,be,a,valid,uri,null,if,not,supplied,param,checkpoint,id,the,checkpoint,id,of,the,savepoint,return,the,checkpoint,storage,location,for,the,savepoint,throws,ioexception,thrown,if,the,target,directory,could,not,be,created;override,public,checkpoint,storage,location,initialize,location,for,savepoint,suppress,warnings,unused,long,checkpoint,id,nullable,string,external,location,pointer,throws,ioexception,final,path,savepoint,base,path,if,external,location,pointer,null,savepoint,base,path,new,path,external,location,pointer,else,if,default,savepoint,directory,null,savepoint,base,path,default,savepoint,directory,else,throw,new,illegal,argument,exception,no,savepoint,location,given,and,no,default,location,configured,final,file,system,fs,savepoint,base,path,get,file,system,final,string,prefix,savepoint,job,id,to,string,substring,0,6,exception,latest,exception,null,for,int,attempt,0,attempt,10,attempt,final,path,path,new,path,savepoint,base,path,file,utils,get,random,filename,prefix,try,if,fs,mkdirs,path,final,path,qp,path,make,qualified,fs,return,create,savepoint,location,fs,qp,catch,exception,e,latest,exception,e,throw,new,ioexception,failed,to,create,savepoint,directory,at,savepoint,base,path,latest,exception
AbstractFsCheckpointStorage -> @Override 	public CheckpointStorageLocation initializeLocationForSavepoint( 			@SuppressWarnings("unused") long checkpointId, 			@Nullable String externalLocationPointer) throws IOException;1517414098;Creates a file system based storage location for a savepoint.__<p>This methods implements the logic that decides which location to use (given optional_parameters for a configured location and a location passed for this specific savepoint)_and how to name and initialize the savepoint directory.__@param externalLocationPointer    The target location pointer for the savepoint._Must be a valid URI. Null, if not supplied._@param checkpointId               The checkpoint ID of the savepoint.__@return The checkpoint storage location for the savepoint.__@throws IOException Thrown if the target directory could not be created.;@Override_	public CheckpointStorageLocation initializeLocationForSavepoint(_			@SuppressWarnings("unused") long checkpointId,_			@Nullable String externalLocationPointer) throws IOException {__		__		final Path savepointBasePath__		if (externalLocationPointer != null) {_			savepointBasePath = new Path(externalLocationPointer)__		}_		else if (defaultSavepointDirectory != null) {_			savepointBasePath = defaultSavepointDirectory__		}_		else {_			throw new IllegalArgumentException("No savepoint location given and no default location configured.")__		}__		__		final FileSystem fs = savepointBasePath.getFileSystem()__		final String prefix = "savepoint-" + jobId.toString().substring(0, 6) + '-'___		Exception latestException = null__		for (int attempt = 0_ attempt < 10_ attempt++) {_			final Path path = new Path(savepointBasePath, FileUtils.getRandomFilename(prefix))___			try {_				if (fs.mkdirs(path)) {_					_					final Path qp = path.makeQualified(fs)___					return createSavepointLocation(fs, qp)__				}_			} catch (Exception e) {_				latestException = e__			}_		}__		throw new IOException("Failed to create savepoint directory at " + savepointBasePath, latestException)__	};creates,a,file,system,based,storage,location,for,a,savepoint,p,this,methods,implements,the,logic,that,decides,which,location,to,use,given,optional,parameters,for,a,configured,location,and,a,location,passed,for,this,specific,savepoint,and,how,to,name,and,initialize,the,savepoint,directory,param,external,location,pointer,the,target,location,pointer,for,the,savepoint,must,be,a,valid,uri,null,if,not,supplied,param,checkpoint,id,the,checkpoint,id,of,the,savepoint,return,the,checkpoint,storage,location,for,the,savepoint,throws,ioexception,thrown,if,the,target,directory,could,not,be,created;override,public,checkpoint,storage,location,initialize,location,for,savepoint,suppress,warnings,unused,long,checkpoint,id,nullable,string,external,location,pointer,throws,ioexception,final,path,savepoint,base,path,if,external,location,pointer,null,savepoint,base,path,new,path,external,location,pointer,else,if,default,savepoint,directory,null,savepoint,base,path,default,savepoint,directory,else,throw,new,illegal,argument,exception,no,savepoint,location,given,and,no,default,location,configured,final,file,system,fs,savepoint,base,path,get,file,system,final,string,prefix,savepoint,job,id,to,string,substring,0,6,exception,latest,exception,null,for,int,attempt,0,attempt,10,attempt,final,path,path,new,path,savepoint,base,path,file,utils,get,random,filename,prefix,try,if,fs,mkdirs,path,final,path,qp,path,make,qualified,fs,return,create,savepoint,location,fs,qp,catch,exception,e,latest,exception,e,throw,new,ioexception,failed,to,create,savepoint,directory,at,savepoint,base,path,latest,exception
