# id;timestamp;commentText;codeText;commentWords;codeWords
InMemoryPartition -> public long getRecordCount();1405024514;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1405090423;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1405529391;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1409845762;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1411473593;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1418570573;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1420654570;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1438803435;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1441738685;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public long getRecordCount();1491417674;number of records in partition including garbage__@return number record count;public long getRecordCount() {_		return this.recordCounter__	};number,of,records,in,partition,including,garbage,return,number,record,count;public,long,get,record,count,return,this,record,counter
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1405024514;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}_		_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1405090423;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}_		_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1405529391;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1409845762;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1411473593;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1418570573;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1420654570;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1438803435;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1441738685;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public void clearAllMemory(List<MemorySegment> target);1491417674;releases all of the partition's segments (pages and overflow buckets)__@param target memory pool to release segments to;public void clearAllMemory(List<MemorySegment> target) {_		_		if (this.overflowSegments != null) {_			for (int k = 0_ k < this.numOverflowSegments_ k++) {_				target.add(this.overflowSegments[k])__			}_		}	_		_		target.addAll(this.partitionPages)__		this.partitionPages.clear()__	};releases,all,of,the,partition,s,segments,pages,and,overflow,buckets,param,target,memory,pool,to,release,segments,to;public,void,clear,all,memory,list,memory,segment,target,if,this,overflow,segments,null,for,int,k,0,k,this,num,overflow,segments,k,target,add,this,overflow,segments,k,target,add,all,this,partition,pages,this,partition,pages,clear
InMemoryPartition -> public int getPartitionNumber();1405024514;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1405090423;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1405529391;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1409845762;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1411473593;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1418570573;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1420654570;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1438803435;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1441738685;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public int getPartitionNumber();1491417674;Gets the partition number of this partition.__@return This partition's number.;public int getPartitionNumber() {_		return this.partitionNumber__	};gets,the,partition,number,of,this,partition,return,this,partition,s,number;public,int,get,partition,number,return,this,partition,number
InMemoryPartition -> public void resetRecordCounter();1405024514;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1405090423;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1405529391;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1409845762;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1411473593;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1418570573;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1420654570;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1438803435;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1441738685;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> public void resetRecordCounter();1491417674;sets record counter to zero and should only be used on compaction partition;public void resetRecordCounter() {_		this.recordCounter = 0L__	};sets,record,counter,to,zero,and,should,only,be,used,on,compaction,partition;public,void,reset,record,counter,this,record,counter,0l
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1405024514;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1405090423;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1405529391;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1409845762;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1411473593;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1418570573;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1420654570;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1438803435;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1441738685;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> @Deprecated 	public void overwriteRecordAt(long pointer, T record) throws IOException;1491417674;UNSAFE!! overwrites record_causes inconsistency or data loss for overwriting everything but records of the exact same size__@param pointer pointer to start of record_@param record record to overwrite old one with_@throws IOException_@deprecated Don't use this, overwrites record and causes inconsistency or data loss for_overwriting everything but records of the exact same size;@Deprecated_	public void overwriteRecordAt(long pointer, T record) throws IOException {_		long tmpPointer = this.writeView.getCurrentPointer()__		this.writeView.resetTo(pointer)__		this.serializer.serialize(record, this.writeView)__		this.writeView.resetTo(tmpPointer)__	};unsafe,overwrites,record,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size,param,pointer,pointer,to,start,of,record,param,record,record,to,overwrite,old,one,with,throws,ioexception,deprecated,don,t,use,this,overwrites,record,and,causes,inconsistency,or,data,loss,for,overwriting,everything,but,records,of,the,exact,same,size;deprecated,public,void,overwrite,record,at,long,pointer,t,record,throws,ioexception,long,tmp,pointer,this,write,view,get,current,pointer,this,write,view,reset,to,pointer,this,serializer,serialize,record,this,write,view,this,write,view,reset,to,tmp,pointer
InMemoryPartition -> public boolean isCompacted();1405024514;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1405090423;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1405529391;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1409845762;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1411473593;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1418570573;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1420654570;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1438803435;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1441738685;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public boolean isCompacted();1491417674;@return true if garbage exists in partition;public boolean isCompacted() {_		return this.compacted__	};return,true,if,garbage,exists,in,partition;public,boolean,is,compacted,return,this,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1405024514;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1405090423;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1405529391;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1409845762;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1411473593;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1418570573;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setCompaction(boolean compacted);1420654570;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setCompaction(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,compaction,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void resetRWViews();1405529391;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1409845762;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1411473593;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1418570573;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1420654570;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1438803435;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1441738685;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void resetRWViews();1491417674;resets read and write views and should only be used on compaction partition;public void resetRWViews() {_		this.writeView.resetTo(0L)__		this.readView.setReadPosition(0L)__	};resets,read,and,write,views,and,should,only,be,used,on,compaction,partition;public,void,reset,rwviews,this,write,view,reset,to,0l,this,read,view,set,read,position,0l
InMemoryPartition -> public void setPartitionNumber(int number);1405024514;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1405090423;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1405529391;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1409845762;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1411473593;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1418570573;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1420654570;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1438803435;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1441738685;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public void setPartitionNumber(int number);1491417674;overwrites partition number and should only be used on compaction partition_@param number new partition;public void setPartitionNumber(int number) {_		this.partitionNumber = number__	};overwrites,partition,number,and,should,only,be,used,on,compaction,partition,param,number,new,partition;public,void,set,partition,number,int,number,this,partition,number,number
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1405024514;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		}_		catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1405090423;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		}_		catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1405529391;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1409845762;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1411473593;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1418570573;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1420654570;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1438803435;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1441738685;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public final long appendRecord(T record) throws IOException;1491417674;Inserts the given object into the current buffer. This method returns a pointer that_can be used to address the written record in this partition.__@param record The object to be written to the partition._@return A pointer to the object in the partition._@throws IOException Thrown when the write failed.;public final long appendRecord(T record) throws IOException {_		long pointer = this.writeView.getCurrentPointer()__		try {_			this.serializer.serialize(record, this.writeView)__			this.recordCounter++__			return pointer__		} catch (EOFException e) {_			_			_			_			this.writeView.resetTo(pointer)__			_			_			_			throw e__		}_	};inserts,the,given,object,into,the,current,buffer,this,method,returns,a,pointer,that,can,be,used,to,address,the,written,record,in,this,partition,param,record,the,object,to,be,written,to,the,partition,return,a,pointer,to,the,object,in,the,partition,throws,ioexception,thrown,when,the,write,failed;public,final,long,append,record,t,record,throws,ioexception,long,pointer,this,write,view,get,current,pointer,try,this,serializer,serialize,record,this,write,view,this,record,counter,return,pointer,catch,eofexception,e,this,write,view,reset,to,pointer,throw,e
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1405529391;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1409845762;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1411473593;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1418570573;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1420654570;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1438803435;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1441738685;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public ArrayList<MemorySegment> resetOverflowBuckets();1491417674;resets overflow bucket counters and returns freed memory and should only be used for resizing__@return freed memory segments;public ArrayList<MemorySegment> resetOverflowBuckets() {_		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		ArrayList<MemorySegment> result = new ArrayList<MemorySegment>(this.overflowSegments.length)__		for(int i = 0_ i < this.overflowSegments.length_ i++) {_			if(this.overflowSegments[i] != null) {_				result.add(this.overflowSegments[i])__			}_		}_		this.overflowSegments = new MemorySegment[2]__		return result__	};resets,overflow,bucket,counters,and,returns,freed,memory,and,should,only,be,used,for,resizing,return,freed,memory,segments;public,array,list,memory,segment,reset,overflow,buckets,this,num,overflow,segments,0,this,next,overflow,bucket,0,array,list,memory,segment,result,new,array,list,memory,segment,this,overflow,segments,length,for,int,i,0,i,this,overflow,segments,length,i,if,this,overflow,segments,i,null,result,add,this,overflow,segments,i,this,overflow,segments,new,memory,segment,2,return,result
InMemoryPartition -> public void setIsCompacted(boolean compacted);1438803435;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setIsCompacted(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,is,compacted,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setIsCompacted(boolean compacted);1441738685;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setIsCompacted(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,is,compacted,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public void setIsCompacted(boolean compacted);1491417674;sets compaction status (should only be set <code>true</code> directly after compaction and <code>false</code> when garbage was created)__@param compacted compaction status;public void setIsCompacted(boolean compacted) {_		this.compacted = compacted__	};sets,compaction,status,should,only,be,set,code,true,code,directly,after,compaction,and,code,false,code,when,garbage,was,created,param,compacted,compaction,status;public,void,set,is,compacted,boolean,compacted,this,compacted,compacted
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1405024514;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1405090423;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1405529391;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1409845762;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1411473593;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1418570573;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1420654570;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1438803435;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1441738685;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber, 			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits);1491417674;Creates a new partition, in memory, with one buffer.__@param serializer Serializer for T._@param partitionNumber The number of the partition._@param memSource memory pool_@param pageSize segment size in bytes_@param pageSizeInBits;public InMemoryPartition(TypeSerializer<T> serializer, int partitionNumber,_			ListMemorySegmentSource memSource, int pageSize, int pageSizeInBits)_	{_		this.overflowSegments = new MemorySegment[2]__		this.numOverflowSegments = 0__		this.nextOverflowBucket = 0__		_		this.serializer = serializer__		this.partitionPages = new ArrayList<MemorySegment>(64)__		this.availableMemory = memSource__		_		this.partitionNumber = partitionNumber__		_		_		this.partitionPages.add(memSource.nextSegment())__		_		this.compacted = true__		_		this.pageSize = pageSize__		_		this.pageSizeInBits = pageSizeInBits__		_		this.writeView = new WriteView(this.partitionPages, memSource, pageSize, pageSizeInBits)__		this.readView = new ReadView(this.partitionPages, pageSize, pageSizeInBits)__	};creates,a,new,partition,in,memory,with,one,buffer,param,serializer,serializer,for,t,param,partition,number,the,number,of,the,partition,param,mem,source,memory,pool,param,page,size,segment,size,in,bytes,param,page,size,in,bits;public,in,memory,partition,type,serializer,t,serializer,int,partition,number,list,memory,segment,source,mem,source,int,page,size,int,page,size,in,bits,this,overflow,segments,new,memory,segment,2,this,num,overflow,segments,0,this,next,overflow,bucket,0,this,serializer,serializer,this,partition,pages,new,array,list,memory,segment,64,this,available,memory,mem,source,this,partition,number,partition,number,this,partition,pages,add,mem,source,next,segment,this,compacted,true,this,page,size,page,size,this,page,size,in,bits,page,size,in,bits,this,write,view,new,write,view,this,partition,pages,mem,source,page,size,page,size,in,bits,this,read,view,new,read,view,this,partition,pages,page,size,page,size,in,bits
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1405024514;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1405090423;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1405529391;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1409845762;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1411473593;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1418570573;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1420654570;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while(getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if(next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1438803435;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while (getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if (next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1441738685;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while (getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if (next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public void allocateSegments(int numberOfSegments);1491417674;attempts to allocate specified number of segments and should only be used by compaction partition_fails silently if not enough segments are available since next compaction could still succeed__@param numberOfSegments allocation count;public void allocateSegments(int numberOfSegments) {_		while (getBlockCount() < numberOfSegments) {_			MemorySegment next = this.availableMemory.nextSegment()__			if (next != null) {_				this.partitionPages.add(next)__			} else {_				return__			}_		}_	};attempts,to,allocate,specified,number,of,segments,and,should,only,be,used,by,compaction,partition,fails,silently,if,not,enough,segments,are,available,since,next,compaction,could,still,succeed,param,number,of,segments,allocation,count;public,void,allocate,segments,int,number,of,segments,while,get,block,count,number,of,segments,memory,segment,next,this,available,memory,next,segment,if,next,null,this,partition,pages,add,next,else,return
InMemoryPartition -> public int getBlockCount();1405024514;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1405090423;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1405529391;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1409845762;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1411473593;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1418570573;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1420654570;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1438803435;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1441738685;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
InMemoryPartition -> public int getBlockCount();1491417674;@return number of segments owned by partition;public int getBlockCount() {_		return this.partitionPages.size()__	};return,number,of,segments,owned,by,partition;public,int,get,block,count,return,this,partition,pages,size
