# id;timestamp;commentText;codeText;commentWords;codeWords
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1420560668;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1440602049;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1445356653;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1465394479;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1515427323;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1515514130;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> @Override 	public void closeAndDelete() throws IOException;1538510358;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;@Override_	public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> public void close() throws IOException;1412761231;Closes the reader and waits until all pending asynchronous requests are_handled. Even if an exception interrupts the closing, the underlying <tt>FileChannel</tt> is closed.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true__			_			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException ignored) {}_				}_			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,reader,and,waits,until,all,pending,asynchronous,requests,are,handled,even,if,an,exception,interrupts,the,closing,the,underlying,tt,file,channel,tt,is,closed,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,ignored,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> public void close() throws IOException;1415382319;Closes the reader and waits until all pending asynchronous requests are_handled. Even if an exception interrupts the closing, the underlying <tt>FileChannel</tt> is closed.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true__			_			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {}_				}_			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,reader,and,waits,until,all,pending,asynchronous,requests,are,handled,even,if,an,exception,interrupts,the,closing,the,underlying,tt,file,channel,tt,is,closed,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> public void close() throws IOException;1417461685;Closes the reader and waits until all pending asynchronous requests are_handled. Even if an exception interrupts the closing, the underlying <tt>FileChannel</tt> is closed.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true__			_			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}_			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,reader,and,waits,until,all,pending,asynchronous,requests,are,handled,even,if,an,exception,interrupts,the,closing,the,underlying,tt,file,channel,tt,is,closed,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> public void close() throws IOException;1421771162;Closes the reader and waits until all pending asynchronous requests are_handled. Even if an exception interrupts the closing, the underlying <tt>FileChannel</tt> is closed.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true__			_			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}_			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,reader,and,waits,until,all,pending,asynchronous,requests,are,handled,even,if,an,exception,interrupts,the,closing,the,underlying,tt,file,channel,tt,is,closed,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> public void close() throws IOException;1423928015;Closes the reader and waits until all pending asynchronous requests are_handled. Even if an exception interrupts the closing, the underlying <tt>FileChannel</tt> is closed.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true__			_			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,reader,and,waits,until,all,pending,asynchronous,requests,are,handled,even,if,an,exception,interrupts,the,closing,the,underlying,tt,file,channel,tt,is,closed,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1412761231;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1415382319;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1417461685;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1420560668;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1421771162;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1423928015;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1440602049;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1445356653;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1465394479;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1515427323;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1515514130;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> public final void checkErroneous() throws IOException;1538510358;Checks the exception state of this channel. The channel is erroneous, if one of its requests could not_be processed correctly.__@throws IOException Thrown, if the channel is erroneous. The thrown exception contains the original exception_that defined the erroneous state as its cause.;public final void checkErroneous() throws IOException {_		if (this.exception != null) {_			throw this.exception__		}_	};checks,the,exception,state,of,this,channel,the,channel,is,erroneous,if,one,of,its,requests,could,not,be,processed,correctly,throws,ioexception,thrown,if,the,channel,is,erroneous,the,thrown,exception,contains,the,original,exception,that,defined,the,erroneous,state,as,its,cause;public,final,void,check,erroneous,throws,ioexception,if,this,exception,null,throw,this,exception
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1412761231;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1420560668;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1421771162;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1423928015;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1440602049;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1445356653;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1465394479;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1515427323;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1515514130;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException;1538510358;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID    The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback     The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback<T> callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,t,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback callback, boolean writeEnabled) throws IOException;1415382319;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)__		_		if (requestQueue == null) {_			throw new NullPointerException()__		}_		_		this.requestQueue = requestQueue__		this.resultHander = callback__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,if,request,queue,null,throw,new,null,pointer,exception,this,request,queue,request,queue,this,result,hander,callback
AsynchronousFileIOChannel -> protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue,  			RequestDoneCallback callback, boolean writeEnabled) throws IOException;1417461685;Creates a new channel access to the path indicated by the given ID. The channel accepts buffers to be_read/written and hands them to the asynchronous I/O thread. After being processed, the buffers_are returned by adding the to the given queue.__@param channelID The id describing the path of the file that the channel accessed._@param requestQueue The queue that this channel hands its IO requests to._@param callback The callback to be invoked when a request is done._@param writeEnabled Flag describing whether the channel should be opened in read/write mode, rather_than in read-only mode._@throws IOException Thrown, if the channel could no be opened.;protected AsynchronousFileIOChannel(FileIOChannel.ID channelID, RequestQueue<R> requestQueue, _			RequestDoneCallback callback, boolean writeEnabled) throws IOException_	{_		super(channelID, writeEnabled)___		this.requestQueue = checkNotNull(requestQueue)__		this.resultHandler = checkNotNull(callback)__	};creates,a,new,channel,access,to,the,path,indicated,by,the,given,id,the,channel,accepts,buffers,to,be,read,written,and,hands,them,to,the,asynchronous,i,o,thread,after,being,processed,the,buffers,are,returned,by,adding,the,to,the,given,queue,param,channel,id,the,id,describing,the,path,of,the,file,that,the,channel,accessed,param,request,queue,the,queue,that,this,channel,hands,its,io,requests,to,param,callback,the,callback,to,be,invoked,when,a,request,is,done,param,write,enabled,flag,describing,whether,the,channel,should,be,opened,in,read,write,mode,rather,than,in,read,only,mode,throws,ioexception,thrown,if,the,channel,could,no,be,opened;protected,asynchronous,file,iochannel,file,iochannel,id,channel,id,request,queue,r,request,queue,request,done,callback,callback,boolean,write,enabled,throws,ioexception,super,channel,id,write,enabled,this,request,queue,check,not,null,request,queue,this,result,handler,check,not,null,callback
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1420560668;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1440602049;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1445356653;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1465394479;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1515427323;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1515514130;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException;1538510358;Registers a listener to be notified when all outstanding requests have been processed.__<p> New requests can arrive right after the listener got notified. Therefore, it is not safe_to assume that the number of outstanding requests is still zero after a notification unless_there was a close right before the listener got called.__<p> Returns <code>true</code>, if the registration was successful. A registration can fail,_if there are no outstanding requests when trying to register a listener.;protected boolean registerAllRequestsProcessedListener(NotificationListener listener) throws IOException {_		checkNotNull(listener)___		synchronized (listenerLock) {_			if (allRequestsProcessedListener == null) {_				_				if (requestsNotReturned.get() == 0) {_					return false__				}__				allRequestsProcessedListener = listener___				return true__			}_		}__		throw new IllegalStateException("Already subscribed.")__	};registers,a,listener,to,be,notified,when,all,outstanding,requests,have,been,processed,p,new,requests,can,arrive,right,after,the,listener,got,notified,therefore,it,is,not,safe,to,assume,that,the,number,of,outstanding,requests,is,still,zero,after,a,notification,unless,there,was,a,close,right,before,the,listener,got,called,p,returns,code,true,code,if,the,registration,was,successful,a,registration,can,fail,if,there,are,no,outstanding,requests,when,trying,to,register,a,listener;protected,boolean,register,all,requests,processed,listener,notification,listener,listener,throws,ioexception,check,not,null,listener,synchronized,listener,lock,if,all,requests,processed,listener,null,if,requests,not,returned,get,0,return,false,all,requests,processed,listener,listener,return,true,throw,new,illegal,state,exception,already,subscribed
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1420560668;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1440602049;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1445356653;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1465394479;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1515427323;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1515514130;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> @Override 	public void close() throws IOException;1538510358;Closes the channel and waits until all pending asynchronous requests are processed. The_underlying <code>FileChannel</code> is closed even if an exception interrupts the closing.__<p> <strong>Important:</strong> the {@link #isClosed()} method returns <code>true</code>_immediately after this method has been called even when there are outstanding requests.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if_the closing was interrupted.;@Override_	public void close() throws IOException {_		_		synchronized (this.closeLock) {_			if (this.closed) {_				return__			}_			this.closed = true___			try {_				_				_				while (this.requestsNotReturned.get() > 0) {_					try {_						_						_						_						this.closeLock.wait(1000)__						checkErroneous()__					}_					catch (InterruptedException iex) {_						throw new IOException("Closing of asynchronous file channel was interrupted.")__					}_				}__				_				checkErroneous()__			}_			finally {_				_				if (this.fileChannel.isOpen()) {_					this.fileChannel.close()__				}_			}_		}_	};closes,the,channel,and,waits,until,all,pending,asynchronous,requests,are,processed,the,underlying,code,file,channel,code,is,closed,even,if,an,exception,interrupts,the,closing,p,strong,important,strong,the,link,is,closed,method,returns,code,true,code,immediately,after,this,method,has,been,called,even,when,there,are,outstanding,requests,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;override,public,void,close,throws,ioexception,synchronized,this,close,lock,if,this,closed,return,this,closed,true,try,while,this,requests,not,returned,get,0,try,this,close,lock,wait,1000,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,closing,of,asynchronous,file,channel,was,interrupted,check,erroneous,finally,if,this,file,channel,is,open,this,file,channel,close
AsynchronousFileIOChannel -> public void closeAndDelete() throws IOException;1412761231;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> public void closeAndDelete() throws IOException;1415382319;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> public void closeAndDelete() throws IOException;1417461685;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> public void closeAndDelete() throws IOException;1421771162;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> public void closeAndDelete() throws IOException;1423928015;This method waits for all pending asynchronous requests to return. When the_last request has returned, the channel is closed and deleted._<p>_Even if an exception interrupts the closing, such that not all request are handled,_the underlying <tt>FileChannel</tt> is closed and deleted.__@throws IOException Thrown, if an I/O exception occurred while waiting for the buffers, or if the closing was interrupted.;public void closeAndDelete() throws IOException {_		try {_			close()__		}_		finally {_			deleteChannel()__		}_	};this,method,waits,for,all,pending,asynchronous,requests,to,return,when,the,last,request,has,returned,the,channel,is,closed,and,deleted,p,even,if,an,exception,interrupts,the,closing,such,that,not,all,request,are,handled,the,underlying,tt,file,channel,tt,is,closed,and,deleted,throws,ioexception,thrown,if,an,i,o,exception,occurred,while,waiting,for,the,buffers,or,if,the,closing,was,interrupted;public,void,close,and,delete,throws,ioexception,try,close,finally,delete,channel
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1412761231;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			_			if (this.closed) {_				synchronized (this.closeLock) {_					int num = this.requestsNotReturned.decrementAndGet()__					if (num == 0) {_						this.closeLock.notifyAll()__					}_				}_			}_			else {_				this.requestsNotReturned.decrementAndGet()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,if,this,closed,synchronized,this,close,lock,int,num,this,requests,not,returned,decrement,and,get,if,num,0,this,close,lock,notify,all,else,this,requests,not,returned,decrement,and,get
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1417461685;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			_			synchronized (this.closeLock) {_				final int num = this.requestsNotReturned.decrementAndGet()__				if (this.closed && num == 0) {_					this.closeLock.notifyAll()__				}_			}_			else {_				this.requestsNotReturned.decrementAndGet()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,synchronized,this,close,lock,final,int,num,this,requests,not,returned,decrement,and,get,if,this,closed,num,0,this,close,lock,notify,all,else,this,requests,not,returned,decrement,and,get
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1420560668;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1421771162;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			_			synchronized (this.closeLock) {_				final int num = this.requestsNotReturned.decrementAndGet()__				if (this.closed && num == 0) {_					this.closeLock.notifyAll()__				}_			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,synchronized,this,close,lock,final,int,num,this,requests,not,returned,decrement,and,get,if,this,closed,num,0,this,close,lock,notify,all
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1423928015;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			_			synchronized (this.closeLock) {_				final int num = this.requestsNotReturned.decrementAndGet()__				if (this.closed && num == 0) {_					this.closeLock.notifyAll()__				}_			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,synchronized,this,close,lock,final,int,num,this,requests,not,returned,decrement,and,get,if,this,closed,num,0,this,close,lock,notify,all
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1440602049;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1445356653;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1465394479;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1515427323;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1515514130;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
AsynchronousFileIOChannel -> final protected void handleProcessedBuffer(T buffer, IOException ex);1538510358;Handles a processed <tt>Buffer</tt>. This method is invoked by the_asynchronous IO worker threads upon completion of the IO request with the_provided buffer and/or an exception that occurred while processing the request_for that buffer.__@param buffer The buffer to be processed._@param ex     The exception that occurred in the I/O threads when processing the buffer's request.;final protected void handleProcessedBuffer(T buffer, IOException ex) {_		if (buffer == null) {_			return__		}__		_		try {_			if (ex != null && this.exception == null) {_				this.exception = ex__				this.resultHandler.requestFailed(buffer, ex)__			}_			else {_				this.resultHandler.requestSuccessful(buffer)__			}_		}_		finally {_			NotificationListener listener = null___			_			_			synchronized (this.closeLock) {_				if (this.requestsNotReturned.decrementAndGet() == 0) {_					if (this.closed) {_						this.closeLock.notifyAll()__					}__					synchronized (listenerLock) {_						listener = allRequestsProcessedListener__						allRequestsProcessedListener = null__					}_				}_			}__			if (listener != null) {_				listener.onNotification()__			}_		}_	};handles,a,processed,tt,buffer,tt,this,method,is,invoked,by,the,asynchronous,io,worker,threads,upon,completion,of,the,io,request,with,the,provided,buffer,and,or,an,exception,that,occurred,while,processing,the,request,for,that,buffer,param,buffer,the,buffer,to,be,processed,param,ex,the,exception,that,occurred,in,the,i,o,threads,when,processing,the,buffer,s,request;final,protected,void,handle,processed,buffer,t,buffer,ioexception,ex,if,buffer,null,return,try,if,ex,null,this,exception,null,this,exception,ex,this,result,handler,request,failed,buffer,ex,else,this,result,handler,request,successful,buffer,finally,notification,listener,listener,null,synchronized,this,close,lock,if,this,requests,not,returned,decrement,and,get,0,if,this,closed,this,close,lock,notify,all,synchronized,listener,lock,listener,all,requests,processed,listener,all,requests,processed,listener,null,if,listener,null,listener,on,notification
