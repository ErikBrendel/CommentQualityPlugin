# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointStatsHistory -> void addInProgressCheckpoint(PendingCheckpointStats pending);1484038132;Adds an in progress checkpoint to the checkpoint history.__@param pending In progress checkpoint to add.;void addInProgressCheckpoint(PendingCheckpointStats pending) {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		if (maxSize == 0) {_			return__		}__		checkNotNull(pending, "Pending checkpoint")___		_		_		_		if (checkpointsArray.length < maxSize) {_			checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length + 1)__		}__		_		_		if (nextPos == checkpointsArray.length) {_			nextPos = 0__		}__		checkpointsArray[nextPos++] = pending__	};adds,an,in,progress,checkpoint,to,the,checkpoint,history,param,pending,in,progress,checkpoint,to,add;void,add,in,progress,checkpoint,pending,checkpoint,stats,pending,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,max,size,0,return,check,not,null,pending,pending,checkpoint,if,checkpoints,array,length,max,size,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,1,if,next,pos,checkpoints,array,length,next,pos,0,checkpoints,array,next,pos,pending
CheckpointStatsHistory -> void addInProgressCheckpoint(PendingCheckpointStats pending);1485790402;Adds an in progress checkpoint to the checkpoint history.__@param pending In progress checkpoint to add.;void addInProgressCheckpoint(PendingCheckpointStats pending) {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		if (maxSize == 0) {_			return__		}__		checkNotNull(pending, "Pending checkpoint")___		_		_		_		if (checkpointsArray.length < maxSize) {_			checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length + 1)__		}__		_		_		if (nextPos == checkpointsArray.length) {_			nextPos = 0__		}__		checkpointsArray[nextPos++] = pending__	};adds,an,in,progress,checkpoint,to,the,checkpoint,history,param,pending,in,progress,checkpoint,to,add;void,add,in,progress,checkpoint,pending,checkpoint,stats,pending,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,max,size,0,return,check,not,null,pending,pending,checkpoint,if,checkpoints,array,length,max,size,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,1,if,next,pos,checkpoints,array,length,next,pos,0,checkpoints,array,next,pos,pending
CheckpointStatsHistory -> void addInProgressCheckpoint(PendingCheckpointStats pending);1487762095;Adds an in progress checkpoint to the checkpoint history.__@param pending In progress checkpoint to add.;void addInProgressCheckpoint(PendingCheckpointStats pending) {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		if (maxSize == 0) {_			return__		}__		checkNotNull(pending, "Pending checkpoint")___		_		_		_		if (checkpointsArray.length < maxSize) {_			checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length + 1)__		}__		_		_		if (nextPos == checkpointsArray.length) {_			nextPos = 0__		}__		checkpointsArray[nextPos++] = pending__	};adds,an,in,progress,checkpoint,to,the,checkpoint,history,param,pending,in,progress,checkpoint,to,add;void,add,in,progress,checkpoint,pending,checkpoint,stats,pending,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,max,size,0,return,check,not,null,pending,pending,checkpoint,if,checkpoints,array,length,max,size,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,1,if,next,pos,checkpoints,array,length,next,pos,0,checkpoints,array,next,pos,pending
CheckpointStatsHistory -> void addInProgressCheckpoint(PendingCheckpointStats pending);1506967184;Adds an in progress checkpoint to the checkpoint history.__@param pending In progress checkpoint to add.;void addInProgressCheckpoint(PendingCheckpointStats pending) {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		if (maxSize == 0) {_			return__		}__		checkNotNull(pending, "Pending checkpoint")___		_		_		_		if (checkpointsArray.length < maxSize) {_			checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length + 1)__		}__		_		_		if (nextPos == checkpointsArray.length) {_			nextPos = 0__		}__		checkpointsArray[nextPos++] = pending__	};adds,an,in,progress,checkpoint,to,the,checkpoint,history,param,pending,in,progress,checkpoint,to,add;void,add,in,progress,checkpoint,pending,checkpoint,stats,pending,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,max,size,0,return,check,not,null,pending,pending,checkpoint,if,checkpoints,array,length,max,size,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,1,if,next,pos,checkpoints,array,length,next,pos,0,checkpoints,array,next,pos,pending
CheckpointStatsHistory -> CheckpointStatsHistory(int maxSize);1484038132;Creates a writeable checkpoint history with the given maximum size.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param maxSize Maximum history size.;CheckpointStatsHistory(int maxSize) {_		this(_			false,_			maxSize,_			new AbstractCheckpointStats[0],_			Collections.<AbstractCheckpointStats>emptyList(),_			Collections.<Long, AbstractCheckpointStats>emptyMap(),_			null,_			null,_			null)__	};creates,a,writeable,checkpoint,history,with,the,given,maximum,size,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,max,size,maximum,history,size;checkpoint,stats,history,int,max,size,this,false,max,size,new,abstract,checkpoint,stats,0,collections,abstract,checkpoint,stats,empty,list,collections,long,abstract,checkpoint,stats,empty,map,null,null,null
CheckpointStatsHistory -> CheckpointStatsHistory(int maxSize);1485790402;Creates a writeable checkpoint history with the given maximum size.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param maxSize Maximum history size.;CheckpointStatsHistory(int maxSize) {_		this(_			false,_			maxSize,_			new AbstractCheckpointStats[0],_			Collections.<AbstractCheckpointStats>emptyList(),_			Collections.<Long, AbstractCheckpointStats>emptyMap(),_			null,_			null,_			null)__	};creates,a,writeable,checkpoint,history,with,the,given,maximum,size,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,max,size,maximum,history,size;checkpoint,stats,history,int,max,size,this,false,max,size,new,abstract,checkpoint,stats,0,collections,abstract,checkpoint,stats,empty,list,collections,long,abstract,checkpoint,stats,empty,map,null,null,null
CheckpointStatsHistory -> CheckpointStatsHistory(int maxSize);1487762095;Creates a writeable checkpoint history with the given maximum size.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param maxSize Maximum history size.;CheckpointStatsHistory(int maxSize) {_		this(_			false,_			maxSize,_			new AbstractCheckpointStats[0],_			Collections.<AbstractCheckpointStats>emptyList(),_			Collections.<Long, AbstractCheckpointStats>emptyMap(),_			null,_			null,_			null)__	};creates,a,writeable,checkpoint,history,with,the,given,maximum,size,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,max,size,maximum,history,size;checkpoint,stats,history,int,max,size,this,false,max,size,new,abstract,checkpoint,stats,0,collections,abstract,checkpoint,stats,empty,list,collections,long,abstract,checkpoint,stats,empty,map,null,null,null
CheckpointStatsHistory -> CheckpointStatsHistory(int maxSize);1506967184;Creates a writeable checkpoint history with the given maximum size.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param maxSize Maximum history size.;CheckpointStatsHistory(int maxSize) {_		this(_			false,_			maxSize,_			new AbstractCheckpointStats[0],_			Collections.<AbstractCheckpointStats>emptyList(),_			Collections.<Long, AbstractCheckpointStats>emptyMap(),_			null,_			null,_			null)__	};creates,a,writeable,checkpoint,history,with,the,given,maximum,size,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,max,size,maximum,history,size;checkpoint,stats,history,int,max,size,this,false,max,size,new,abstract,checkpoint,stats,0,collections,abstract,checkpoint,stats,empty,list,collections,long,abstract,checkpoint,stats,empty,map,null,null,null
CheckpointStatsHistory -> CheckpointStatsHistory createSnapshot();1484038132;Creates a snapshot of the current state.__@return Snapshot of the current state.;CheckpointStatsHistory createSnapshot() {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		Iterable<AbstractCheckpointStats> checkpointsIterable__		Map<Long, AbstractCheckpointStats> checkpointsById___		checkpointsById = new HashMap<>(checkpointsArray.length)___		if (maxSize == 0) {_			checkpointsIterable = Collections.emptyList()__		} else {_			_			checkpointsIterable = new CheckpointsStatsHistoryIterable(checkpointsArray, nextPos)___			for (AbstractCheckpointStats checkpoint : checkpointsIterable) {_				checkpointsById.put(checkpoint.getCheckpointId(), checkpoint)__			}_		}__		if (latestCompletedCheckpoint != null) {_			checkpointsById.put(latestCompletedCheckpoint.getCheckpointId(), latestCompletedCheckpoint)__		}__		if (latestFailedCheckpoint != null) {_			checkpointsById.put(latestFailedCheckpoint.getCheckpointId(), latestFailedCheckpoint)__		}__		if (latestSavepoint != null) {_			checkpointsById.put(latestSavepoint.getCheckpointId(), latestSavepoint)__		}__		return new CheckpointStatsHistory(_			true,_			maxSize,_			null,_			checkpointsIterable,_			checkpointsById,_			latestCompletedCheckpoint,_			latestFailedCheckpoint,_			latestSavepoint)__	};creates,a,snapshot,of,the,current,state,return,snapshot,of,the,current,state;checkpoint,stats,history,create,snapshot,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,iterable,abstract,checkpoint,stats,checkpoints,iterable,map,long,abstract,checkpoint,stats,checkpoints,by,id,checkpoints,by,id,new,hash,map,checkpoints,array,length,if,max,size,0,checkpoints,iterable,collections,empty,list,else,checkpoints,iterable,new,checkpoints,stats,history,iterable,checkpoints,array,next,pos,for,abstract,checkpoint,stats,checkpoint,checkpoints,iterable,checkpoints,by,id,put,checkpoint,get,checkpoint,id,checkpoint,if,latest,completed,checkpoint,null,checkpoints,by,id,put,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,if,latest,failed,checkpoint,null,checkpoints,by,id,put,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,if,latest,savepoint,null,checkpoints,by,id,put,latest,savepoint,get,checkpoint,id,latest,savepoint,return,new,checkpoint,stats,history,true,max,size,null,checkpoints,iterable,checkpoints,by,id,latest,completed,checkpoint,latest,failed,checkpoint,latest,savepoint
CheckpointStatsHistory -> CheckpointStatsHistory createSnapshot();1485790402;Creates a snapshot of the current state.__@return Snapshot of the current state.;CheckpointStatsHistory createSnapshot() {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		Iterable<AbstractCheckpointStats> checkpointsIterable__		Map<Long, AbstractCheckpointStats> checkpointsById___		checkpointsById = new HashMap<>(checkpointsArray.length)___		if (maxSize == 0) {_			checkpointsIterable = Collections.emptyList()__		} else {_			_			checkpointsIterable = new CheckpointsStatsHistoryIterable(checkpointsArray, nextPos)___			for (AbstractCheckpointStats checkpoint : checkpointsIterable) {_				checkpointsById.put(checkpoint.getCheckpointId(), checkpoint)__			}_		}__		if (latestCompletedCheckpoint != null) {_			checkpointsById.put(latestCompletedCheckpoint.getCheckpointId(), latestCompletedCheckpoint)__		}__		if (latestFailedCheckpoint != null) {_			checkpointsById.put(latestFailedCheckpoint.getCheckpointId(), latestFailedCheckpoint)__		}__		if (latestSavepoint != null) {_			checkpointsById.put(latestSavepoint.getCheckpointId(), latestSavepoint)__		}__		return new CheckpointStatsHistory(_			true,_			maxSize,_			null,_			checkpointsIterable,_			checkpointsById,_			latestCompletedCheckpoint,_			latestFailedCheckpoint,_			latestSavepoint)__	};creates,a,snapshot,of,the,current,state,return,snapshot,of,the,current,state;checkpoint,stats,history,create,snapshot,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,iterable,abstract,checkpoint,stats,checkpoints,iterable,map,long,abstract,checkpoint,stats,checkpoints,by,id,checkpoints,by,id,new,hash,map,checkpoints,array,length,if,max,size,0,checkpoints,iterable,collections,empty,list,else,checkpoints,iterable,new,checkpoints,stats,history,iterable,checkpoints,array,next,pos,for,abstract,checkpoint,stats,checkpoint,checkpoints,iterable,checkpoints,by,id,put,checkpoint,get,checkpoint,id,checkpoint,if,latest,completed,checkpoint,null,checkpoints,by,id,put,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,if,latest,failed,checkpoint,null,checkpoints,by,id,put,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,if,latest,savepoint,null,checkpoints,by,id,put,latest,savepoint,get,checkpoint,id,latest,savepoint,return,new,checkpoint,stats,history,true,max,size,null,checkpoints,iterable,checkpoints,by,id,latest,completed,checkpoint,latest,failed,checkpoint,latest,savepoint
CheckpointStatsHistory -> CheckpointStatsHistory createSnapshot();1487762095;Creates a snapshot of the current state.__@return Snapshot of the current state.;CheckpointStatsHistory createSnapshot() {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		Iterable<AbstractCheckpointStats> checkpointsIterable__		Map<Long, AbstractCheckpointStats> checkpointsById___		checkpointsById = new HashMap<>(checkpointsArray.length)___		if (maxSize == 0) {_			checkpointsIterable = Collections.emptyList()__		} else {_			_			checkpointsIterable = new CheckpointsStatsHistoryIterable(checkpointsArray, nextPos)___			for (AbstractCheckpointStats checkpoint : checkpointsIterable) {_				checkpointsById.put(checkpoint.getCheckpointId(), checkpoint)__			}_		}__		if (latestCompletedCheckpoint != null) {_			checkpointsById.put(latestCompletedCheckpoint.getCheckpointId(), latestCompletedCheckpoint)__		}__		if (latestFailedCheckpoint != null) {_			checkpointsById.put(latestFailedCheckpoint.getCheckpointId(), latestFailedCheckpoint)__		}__		if (latestSavepoint != null) {_			checkpointsById.put(latestSavepoint.getCheckpointId(), latestSavepoint)__		}__		return new CheckpointStatsHistory(_			true,_			maxSize,_			null,_			checkpointsIterable,_			checkpointsById,_			latestCompletedCheckpoint,_			latestFailedCheckpoint,_			latestSavepoint)__	};creates,a,snapshot,of,the,current,state,return,snapshot,of,the,current,state;checkpoint,stats,history,create,snapshot,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,iterable,abstract,checkpoint,stats,checkpoints,iterable,map,long,abstract,checkpoint,stats,checkpoints,by,id,checkpoints,by,id,new,hash,map,checkpoints,array,length,if,max,size,0,checkpoints,iterable,collections,empty,list,else,checkpoints,iterable,new,checkpoints,stats,history,iterable,checkpoints,array,next,pos,for,abstract,checkpoint,stats,checkpoint,checkpoints,iterable,checkpoints,by,id,put,checkpoint,get,checkpoint,id,checkpoint,if,latest,completed,checkpoint,null,checkpoints,by,id,put,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,if,latest,failed,checkpoint,null,checkpoints,by,id,put,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,if,latest,savepoint,null,checkpoints,by,id,put,latest,savepoint,get,checkpoint,id,latest,savepoint,return,new,checkpoint,stats,history,true,max,size,null,checkpoints,iterable,checkpoints,by,id,latest,completed,checkpoint,latest,failed,checkpoint,latest,savepoint
CheckpointStatsHistory -> CheckpointStatsHistory createSnapshot();1506967184;Creates a snapshot of the current state.__@return Snapshot of the current state.;CheckpointStatsHistory createSnapshot() {_		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		List<AbstractCheckpointStats> checkpointsHistory__		Map<Long, AbstractCheckpointStats> checkpointsById___		checkpointsById = new HashMap<>(checkpointsArray.length)___		if (maxSize == 0) {_			checkpointsHistory = Collections.emptyList()__		} else {_			AbstractCheckpointStats[] newCheckpointsArray = new AbstractCheckpointStats[checkpointsArray.length]___			System.arraycopy(checkpointsArray, nextPos, newCheckpointsArray, 0, checkpointsArray.length - nextPos)__			System.arraycopy(checkpointsArray, 0, newCheckpointsArray, checkpointsArray.length - nextPos, nextPos)___			checkpointsHistory = Arrays.asList(newCheckpointsArray)___			_			Collections.reverse(checkpointsHistory)___			for (AbstractCheckpointStats checkpoint : checkpointsHistory) {_				checkpointsById.put(checkpoint.getCheckpointId(), checkpoint)__			}_		}__		if (latestCompletedCheckpoint != null) {_			checkpointsById.put(latestCompletedCheckpoint.getCheckpointId(), latestCompletedCheckpoint)__		}__		if (latestFailedCheckpoint != null) {_			checkpointsById.put(latestFailedCheckpoint.getCheckpointId(), latestFailedCheckpoint)__		}__		if (latestSavepoint != null) {_			checkpointsById.put(latestSavepoint.getCheckpointId(), latestSavepoint)__		}__		return new CheckpointStatsHistory(_			true,_			maxSize,_			null,_			checkpointsHistory,_			checkpointsById,_			latestCompletedCheckpoint,_			latestFailedCheckpoint,_			latestSavepoint)__	};creates,a,snapshot,of,the,current,state,return,snapshot,of,the,current,state;checkpoint,stats,history,create,snapshot,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,list,abstract,checkpoint,stats,checkpoints,history,map,long,abstract,checkpoint,stats,checkpoints,by,id,checkpoints,by,id,new,hash,map,checkpoints,array,length,if,max,size,0,checkpoints,history,collections,empty,list,else,abstract,checkpoint,stats,new,checkpoints,array,new,abstract,checkpoint,stats,checkpoints,array,length,system,arraycopy,checkpoints,array,next,pos,new,checkpoints,array,0,checkpoints,array,length,next,pos,system,arraycopy,checkpoints,array,0,new,checkpoints,array,checkpoints,array,length,next,pos,next,pos,checkpoints,history,arrays,as,list,new,checkpoints,array,collections,reverse,checkpoints,history,for,abstract,checkpoint,stats,checkpoint,checkpoints,history,checkpoints,by,id,put,checkpoint,get,checkpoint,id,checkpoint,if,latest,completed,checkpoint,null,checkpoints,by,id,put,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,if,latest,failed,checkpoint,null,checkpoints,by,id,put,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,if,latest,savepoint,null,checkpoints,by,id,put,latest,savepoint,get,checkpoint,id,latest,savepoint,return,new,checkpoint,stats,history,true,max,size,null,checkpoints,history,checkpoints,by,id,latest,completed,checkpoint,latest,failed,checkpoint,latest,savepoint
CheckpointStatsHistory -> CheckpointsStatsHistoryIterable -> CheckpointsSnapshotIterator -> CheckpointsSnapshotIterator();1484038132;Creates the iterator.;CheckpointsSnapshotIterator() {_				this.currentPos = startPos__				this.remaining = checkpointsArray.length__			};creates,the,iterator;checkpoints,snapshot,iterator,this,current,pos,start,pos,this,remaining,checkpoints,array,length
CheckpointStatsHistory -> CheckpointsStatsHistoryIterable -> CheckpointsSnapshotIterator -> CheckpointsSnapshotIterator();1485790402;Creates the iterator.;CheckpointsSnapshotIterator() {_				this.currentPos = startPos__				this.remaining = checkpointsArray.length__			};creates,the,iterator;checkpoints,snapshot,iterator,this,current,pos,start,pos,this,remaining,checkpoints,array,length
CheckpointStatsHistory -> CheckpointsStatsHistoryIterable -> CheckpointsSnapshotIterator -> CheckpointsSnapshotIterator();1487762095;Creates the iterator.;CheckpointsSnapshotIterator() {_				this.currentPos = startPos__				this.remaining = checkpointsArray.length__			};creates,the,iterator;checkpoints,snapshot,iterator,this,current,pos,start,pos,this,remaining,checkpoints,array,length
CheckpointStatsHistory -> private CheckpointStatsHistory( 			boolean readOnly, 			int maxSize, 			AbstractCheckpointStats[] checkpointArray, 			Iterable<AbstractCheckpointStats> checkpointsIterable, 			Map<Long, AbstractCheckpointStats> checkpointsById, 			CompletedCheckpointStats latestCompletedCheckpoint, 			FailedCheckpointStats latestFailedCheckpoint, 			CompletedCheckpointStats latestSavepoint);1484038132;Creates a checkpoint history with the given maximum size and state.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param readOnly Flag indicating whether the history is read-only._@param maxSize Maximum history size._@param checkpointsIterable Checkpoints iterable._@param checkpointsById Checkpoints by ID.;private CheckpointStatsHistory(_			boolean readOnly,_			int maxSize,_			AbstractCheckpointStats[] checkpointArray,_			Iterable<AbstractCheckpointStats> checkpointsIterable,_			Map<Long, AbstractCheckpointStats> checkpointsById,_			CompletedCheckpointStats latestCompletedCheckpoint,_			FailedCheckpointStats latestFailedCheckpoint,_			CompletedCheckpointStats latestSavepoint) {__		this.readOnly = readOnly__		checkArgument(maxSize >= 0, "Negative maximum size")__		this.maxSize = maxSize__		this.checkpointsArray = checkpointArray__		this.checkpointsIterable = checkNotNull(checkpointsIterable)__		this.checkpointsById = checkNotNull(checkpointsById)__		this.latestCompletedCheckpoint = latestCompletedCheckpoint__		this.latestFailedCheckpoint = latestFailedCheckpoint__		this.latestSavepoint = latestSavepoint__	};creates,a,checkpoint,history,with,the,given,maximum,size,and,state,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,read,only,flag,indicating,whether,the,history,is,read,only,param,max,size,maximum,history,size,param,checkpoints,iterable,checkpoints,iterable,param,checkpoints,by,id,checkpoints,by,id;private,checkpoint,stats,history,boolean,read,only,int,max,size,abstract,checkpoint,stats,checkpoint,array,iterable,abstract,checkpoint,stats,checkpoints,iterable,map,long,abstract,checkpoint,stats,checkpoints,by,id,completed,checkpoint,stats,latest,completed,checkpoint,failed,checkpoint,stats,latest,failed,checkpoint,completed,checkpoint,stats,latest,savepoint,this,read,only,read,only,check,argument,max,size,0,negative,maximum,size,this,max,size,max,size,this,checkpoints,array,checkpoint,array,this,checkpoints,iterable,check,not,null,checkpoints,iterable,this,checkpoints,by,id,check,not,null,checkpoints,by,id,this,latest,completed,checkpoint,latest,completed,checkpoint,this,latest,failed,checkpoint,latest,failed,checkpoint,this,latest,savepoint,latest,savepoint
CheckpointStatsHistory -> private CheckpointStatsHistory( 			boolean readOnly, 			int maxSize, 			AbstractCheckpointStats[] checkpointArray, 			Iterable<AbstractCheckpointStats> checkpointsIterable, 			Map<Long, AbstractCheckpointStats> checkpointsById, 			CompletedCheckpointStats latestCompletedCheckpoint, 			FailedCheckpointStats latestFailedCheckpoint, 			CompletedCheckpointStats latestSavepoint);1485790402;Creates a checkpoint history with the given maximum size and state.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param readOnly Flag indicating whether the history is read-only._@param maxSize Maximum history size._@param checkpointsIterable Checkpoints iterable._@param checkpointsById Checkpoints by ID.;private CheckpointStatsHistory(_			boolean readOnly,_			int maxSize,_			AbstractCheckpointStats[] checkpointArray,_			Iterable<AbstractCheckpointStats> checkpointsIterable,_			Map<Long, AbstractCheckpointStats> checkpointsById,_			CompletedCheckpointStats latestCompletedCheckpoint,_			FailedCheckpointStats latestFailedCheckpoint,_			CompletedCheckpointStats latestSavepoint) {__		this.readOnly = readOnly__		checkArgument(maxSize >= 0, "Negative maximum size")__		this.maxSize = maxSize__		this.checkpointsArray = checkpointArray__		this.checkpointsIterable = checkNotNull(checkpointsIterable)__		this.checkpointsById = checkNotNull(checkpointsById)__		this.latestCompletedCheckpoint = latestCompletedCheckpoint__		this.latestFailedCheckpoint = latestFailedCheckpoint__		this.latestSavepoint = latestSavepoint__	};creates,a,checkpoint,history,with,the,given,maximum,size,and,state,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,read,only,flag,indicating,whether,the,history,is,read,only,param,max,size,maximum,history,size,param,checkpoints,iterable,checkpoints,iterable,param,checkpoints,by,id,checkpoints,by,id;private,checkpoint,stats,history,boolean,read,only,int,max,size,abstract,checkpoint,stats,checkpoint,array,iterable,abstract,checkpoint,stats,checkpoints,iterable,map,long,abstract,checkpoint,stats,checkpoints,by,id,completed,checkpoint,stats,latest,completed,checkpoint,failed,checkpoint,stats,latest,failed,checkpoint,completed,checkpoint,stats,latest,savepoint,this,read,only,read,only,check,argument,max,size,0,negative,maximum,size,this,max,size,max,size,this,checkpoints,array,checkpoint,array,this,checkpoints,iterable,check,not,null,checkpoints,iterable,this,checkpoints,by,id,check,not,null,checkpoints,by,id,this,latest,completed,checkpoint,latest,completed,checkpoint,this,latest,failed,checkpoint,latest,failed,checkpoint,this,latest,savepoint,latest,savepoint
CheckpointStatsHistory -> private CheckpointStatsHistory( 			boolean readOnly, 			int maxSize, 			AbstractCheckpointStats[] checkpointArray, 			Iterable<AbstractCheckpointStats> checkpointsIterable, 			Map<Long, AbstractCheckpointStats> checkpointsById, 			CompletedCheckpointStats latestCompletedCheckpoint, 			FailedCheckpointStats latestFailedCheckpoint, 			CompletedCheckpointStats latestSavepoint);1487762095;Creates a checkpoint history with the given maximum size and state.__<p>The read views are only updated on calls to {@link #createSnapshot()}._Initially they are empty.__@param readOnly Flag indicating whether the history is read-only._@param maxSize Maximum history size._@param checkpointsIterable Checkpoints iterable._@param checkpointsById Checkpoints by ID.;private CheckpointStatsHistory(_			boolean readOnly,_			int maxSize,_			AbstractCheckpointStats[] checkpointArray,_			Iterable<AbstractCheckpointStats> checkpointsIterable,_			Map<Long, AbstractCheckpointStats> checkpointsById,_			CompletedCheckpointStats latestCompletedCheckpoint,_			FailedCheckpointStats latestFailedCheckpoint,_			CompletedCheckpointStats latestSavepoint) {__		this.readOnly = readOnly__		checkArgument(maxSize >= 0, "Negative maximum size")__		this.maxSize = maxSize__		this.checkpointsArray = checkpointArray__		this.checkpointsIterable = checkNotNull(checkpointsIterable)__		this.checkpointsById = checkNotNull(checkpointsById)__		this.latestCompletedCheckpoint = latestCompletedCheckpoint__		this.latestFailedCheckpoint = latestFailedCheckpoint__		this.latestSavepoint = latestSavepoint__	};creates,a,checkpoint,history,with,the,given,maximum,size,and,state,p,the,read,views,are,only,updated,on,calls,to,link,create,snapshot,initially,they,are,empty,param,read,only,flag,indicating,whether,the,history,is,read,only,param,max,size,maximum,history,size,param,checkpoints,iterable,checkpoints,iterable,param,checkpoints,by,id,checkpoints,by,id;private,checkpoint,stats,history,boolean,read,only,int,max,size,abstract,checkpoint,stats,checkpoint,array,iterable,abstract,checkpoint,stats,checkpoints,iterable,map,long,abstract,checkpoint,stats,checkpoints,by,id,completed,checkpoint,stats,latest,completed,checkpoint,failed,checkpoint,stats,latest,failed,checkpoint,completed,checkpoint,stats,latest,savepoint,this,read,only,read,only,check,argument,max,size,0,negative,maximum,size,this,max,size,max,size,this,checkpoints,array,checkpoint,array,this,checkpoints,iterable,check,not,null,checkpoints,iterable,this,checkpoints,by,id,check,not,null,checkpoints,by,id,this,latest,completed,checkpoint,latest,completed,checkpoint,this,latest,failed,checkpoint,latest,failed,checkpoint,this,latest,savepoint,latest,savepoint
CheckpointStatsHistory -> CheckpointsStatsHistoryIterable -> CheckpointsStatsHistoryIterable(AbstractCheckpointStats[] checkpointsArray, int nextPos);1484038132;Creates the iterable by creating a copy of the checkpoints array.__@param checkpointsArray Checkpoints to iterate over. This array is copied._@param nextPos The next write position for the array;CheckpointsStatsHistoryIterable(AbstractCheckpointStats[] checkpointsArray, int nextPos) {_			_			this.checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length)___			_			this.startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1__		};creates,the,iterable,by,creating,a,copy,of,the,checkpoints,array,param,checkpoints,array,checkpoints,to,iterate,over,this,array,is,copied,param,next,pos,the,next,write,position,for,the,array;checkpoints,stats,history,iterable,abstract,checkpoint,stats,checkpoints,array,int,next,pos,this,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,this,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1
CheckpointStatsHistory -> CheckpointsStatsHistoryIterable -> CheckpointsStatsHistoryIterable(AbstractCheckpointStats[] checkpointsArray, int nextPos);1485790402;Creates the iterable by creating a copy of the checkpoints array.__@param checkpointsArray Checkpoints to iterate over. This array is copied._@param nextPos The next write position for the array;CheckpointsStatsHistoryIterable(AbstractCheckpointStats[] checkpointsArray, int nextPos) {_			_			this.checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length)___			_			this.startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1__		};creates,the,iterable,by,creating,a,copy,of,the,checkpoints,array,param,checkpoints,array,checkpoints,to,iterate,over,this,array,is,copied,param,next,pos,the,next,write,position,for,the,array;checkpoints,stats,history,iterable,abstract,checkpoint,stats,checkpoints,array,int,next,pos,this,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,this,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1
CheckpointStatsHistory -> CheckpointsStatsHistoryIterable -> CheckpointsStatsHistoryIterable(AbstractCheckpointStats[] checkpointsArray, int nextPos);1487762095;Creates the iterable by creating a copy of the checkpoints array.__@param checkpointsArray Checkpoints to iterate over. This array is copied._@param nextPos The next write position for the array;CheckpointsStatsHistoryIterable(AbstractCheckpointStats[] checkpointsArray, int nextPos) {_			_			this.checkpointsArray = Arrays.copyOf(checkpointsArray, checkpointsArray.length)___			_			this.startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1__		};creates,the,iterable,by,creating,a,copy,of,the,checkpoints,array,param,checkpoints,array,checkpoints,to,iterate,over,this,array,is,copied,param,next,pos,the,next,write,position,for,the,array;checkpoints,stats,history,iterable,abstract,checkpoint,stats,checkpoints,array,int,next,pos,this,checkpoints,array,arrays,copy,of,checkpoints,array,checkpoints,array,length,this,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1
CheckpointStatsHistory -> boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed);1484038132;Searches for the in progress checkpoint with the given ID and replaces_it with the given completed or failed checkpoint.__<p>This is bounded by the maximum number of concurrent in progress_checkpointsArray, which means that the runtime of this is constant.__@param completedOrFailed The completed or failed checkpoint to replace the in progress checkpoint with._@return <code>true</code> if the checkpoint was replaced or <code>false</code> otherwise.;boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed) {_		checkArgument(!completedOrFailed.getStatus().isInProgress(), "Not allowed to replace with in progress checkpoints.")___		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		_		if (completedOrFailed.getStatus().isCompleted()) {_			CompletedCheckpointStats completed = (CompletedCheckpointStats) completedOrFailed__			if (CheckpointProperties.isSavepoint(completed.getProperties()) &&_				(latestSavepoint == null ||_					completed.getCheckpointId() > latestSavepoint.getCheckpointId())) {__				latestSavepoint = completed__			} else if (latestCompletedCheckpoint == null ||_				completed.getCheckpointId() > latestCompletedCheckpoint.getCheckpointId()) {__				latestCompletedCheckpoint = completed__			}_		} else if (completedOrFailed.getStatus().isFailed()) {_			FailedCheckpointStats failed = (FailedCheckpointStats) completedOrFailed__			if (latestFailedCheckpoint == null ||_				failed.getCheckpointId() > latestFailedCheckpoint.getCheckpointId()) {__				latestFailedCheckpoint = failed__			}_		}__		if (maxSize == 0) {_			return false__		}__		long checkpointId = completedOrFailed.getCheckpointId()___		_		_		_		int startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1___		for (int i = startPos_ i >= 0_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		for (int i = checkpointsArray.length - 1_ i > startPos_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		return false__	};searches,for,the,in,progress,checkpoint,with,the,given,id,and,replaces,it,with,the,given,completed,or,failed,checkpoint,p,this,is,bounded,by,the,maximum,number,of,concurrent,in,progress,checkpoints,array,which,means,that,the,runtime,of,this,is,constant,param,completed,or,failed,the,completed,or,failed,checkpoint,to,replace,the,in,progress,checkpoint,with,return,code,true,code,if,the,checkpoint,was,replaced,or,code,false,code,otherwise;boolean,replace,pending,checkpoint,by,id,abstract,checkpoint,stats,completed,or,failed,check,argument,completed,or,failed,get,status,is,in,progress,not,allowed,to,replace,with,in,progress,checkpoints,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,completed,or,failed,get,status,is,completed,completed,checkpoint,stats,completed,completed,checkpoint,stats,completed,or,failed,if,checkpoint,properties,is,savepoint,completed,get,properties,latest,savepoint,null,completed,get,checkpoint,id,latest,savepoint,get,checkpoint,id,latest,savepoint,completed,else,if,latest,completed,checkpoint,null,completed,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,completed,else,if,completed,or,failed,get,status,is,failed,failed,checkpoint,stats,failed,failed,checkpoint,stats,completed,or,failed,if,latest,failed,checkpoint,null,failed,get,checkpoint,id,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,failed,if,max,size,0,return,false,long,checkpoint,id,completed,or,failed,get,checkpoint,id,int,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1,for,int,i,start,pos,i,0,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,for,int,i,checkpoints,array,length,1,i,start,pos,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,return,false
CheckpointStatsHistory -> boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed);1485790402;Searches for the in progress checkpoint with the given ID and replaces_it with the given completed or failed checkpoint.__<p>This is bounded by the maximum number of concurrent in progress_checkpointsArray, which means that the runtime of this is constant.__@param completedOrFailed The completed or failed checkpoint to replace the in progress checkpoint with._@return <code>true</code> if the checkpoint was replaced or <code>false</code> otherwise.;boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed) {_		checkArgument(!completedOrFailed.getStatus().isInProgress(), "Not allowed to replace with in progress checkpoints.")___		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		_		if (completedOrFailed.getStatus().isCompleted()) {_			CompletedCheckpointStats completed = (CompletedCheckpointStats) completedOrFailed__			if (CheckpointProperties.isSavepoint(completed.getProperties()) &&_				(latestSavepoint == null ||_					completed.getCheckpointId() > latestSavepoint.getCheckpointId())) {__				latestSavepoint = completed__			} else if (latestCompletedCheckpoint == null ||_				completed.getCheckpointId() > latestCompletedCheckpoint.getCheckpointId()) {__				latestCompletedCheckpoint = completed__			}_		} else if (completedOrFailed.getStatus().isFailed()) {_			FailedCheckpointStats failed = (FailedCheckpointStats) completedOrFailed__			if (latestFailedCheckpoint == null ||_				failed.getCheckpointId() > latestFailedCheckpoint.getCheckpointId()) {__				latestFailedCheckpoint = failed__			}_		}__		if (maxSize == 0) {_			return false__		}__		long checkpointId = completedOrFailed.getCheckpointId()___		_		_		_		int startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1___		for (int i = startPos_ i >= 0_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		for (int i = checkpointsArray.length - 1_ i > startPos_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		return false__	};searches,for,the,in,progress,checkpoint,with,the,given,id,and,replaces,it,with,the,given,completed,or,failed,checkpoint,p,this,is,bounded,by,the,maximum,number,of,concurrent,in,progress,checkpoints,array,which,means,that,the,runtime,of,this,is,constant,param,completed,or,failed,the,completed,or,failed,checkpoint,to,replace,the,in,progress,checkpoint,with,return,code,true,code,if,the,checkpoint,was,replaced,or,code,false,code,otherwise;boolean,replace,pending,checkpoint,by,id,abstract,checkpoint,stats,completed,or,failed,check,argument,completed,or,failed,get,status,is,in,progress,not,allowed,to,replace,with,in,progress,checkpoints,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,completed,or,failed,get,status,is,completed,completed,checkpoint,stats,completed,completed,checkpoint,stats,completed,or,failed,if,checkpoint,properties,is,savepoint,completed,get,properties,latest,savepoint,null,completed,get,checkpoint,id,latest,savepoint,get,checkpoint,id,latest,savepoint,completed,else,if,latest,completed,checkpoint,null,completed,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,completed,else,if,completed,or,failed,get,status,is,failed,failed,checkpoint,stats,failed,failed,checkpoint,stats,completed,or,failed,if,latest,failed,checkpoint,null,failed,get,checkpoint,id,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,failed,if,max,size,0,return,false,long,checkpoint,id,completed,or,failed,get,checkpoint,id,int,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1,for,int,i,start,pos,i,0,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,for,int,i,checkpoints,array,length,1,i,start,pos,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,return,false
CheckpointStatsHistory -> boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed);1487762095;Searches for the in progress checkpoint with the given ID and replaces_it with the given completed or failed checkpoint.__<p>This is bounded by the maximum number of concurrent in progress_checkpointsArray, which means that the runtime of this is constant.__@param completedOrFailed The completed or failed checkpoint to replace the in progress checkpoint with._@return <code>true</code> if the checkpoint was replaced or <code>false</code> otherwise.;boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed) {_		checkArgument(!completedOrFailed.getStatus().isInProgress(), "Not allowed to replace with in progress checkpoints.")___		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		_		if (completedOrFailed.getStatus().isCompleted()) {_			CompletedCheckpointStats completed = (CompletedCheckpointStats) completedOrFailed__			if (completed.getProperties().isSavepoint() &&_				(latestSavepoint == null ||_					completed.getCheckpointId() > latestSavepoint.getCheckpointId())) {__				latestSavepoint = completed__			} else if (latestCompletedCheckpoint == null ||_				completed.getCheckpointId() > latestCompletedCheckpoint.getCheckpointId()) {__				latestCompletedCheckpoint = completed__			}_		} else if (completedOrFailed.getStatus().isFailed()) {_			FailedCheckpointStats failed = (FailedCheckpointStats) completedOrFailed__			if (latestFailedCheckpoint == null ||_				failed.getCheckpointId() > latestFailedCheckpoint.getCheckpointId()) {__				latestFailedCheckpoint = failed__			}_		}__		if (maxSize == 0) {_			return false__		}__		long checkpointId = completedOrFailed.getCheckpointId()___		_		_		_		int startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1___		for (int i = startPos_ i >= 0_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		for (int i = checkpointsArray.length - 1_ i > startPos_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		return false__	};searches,for,the,in,progress,checkpoint,with,the,given,id,and,replaces,it,with,the,given,completed,or,failed,checkpoint,p,this,is,bounded,by,the,maximum,number,of,concurrent,in,progress,checkpoints,array,which,means,that,the,runtime,of,this,is,constant,param,completed,or,failed,the,completed,or,failed,checkpoint,to,replace,the,in,progress,checkpoint,with,return,code,true,code,if,the,checkpoint,was,replaced,or,code,false,code,otherwise;boolean,replace,pending,checkpoint,by,id,abstract,checkpoint,stats,completed,or,failed,check,argument,completed,or,failed,get,status,is,in,progress,not,allowed,to,replace,with,in,progress,checkpoints,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,completed,or,failed,get,status,is,completed,completed,checkpoint,stats,completed,completed,checkpoint,stats,completed,or,failed,if,completed,get,properties,is,savepoint,latest,savepoint,null,completed,get,checkpoint,id,latest,savepoint,get,checkpoint,id,latest,savepoint,completed,else,if,latest,completed,checkpoint,null,completed,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,completed,else,if,completed,or,failed,get,status,is,failed,failed,checkpoint,stats,failed,failed,checkpoint,stats,completed,or,failed,if,latest,failed,checkpoint,null,failed,get,checkpoint,id,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,failed,if,max,size,0,return,false,long,checkpoint,id,completed,or,failed,get,checkpoint,id,int,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1,for,int,i,start,pos,i,0,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,for,int,i,checkpoints,array,length,1,i,start,pos,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,return,false
CheckpointStatsHistory -> boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed);1506967184;Searches for the in progress checkpoint with the given ID and replaces_it with the given completed or failed checkpoint.__<p>This is bounded by the maximum number of concurrent in progress_checkpointsArray, which means that the runtime of this is constant.__@param completedOrFailed The completed or failed checkpoint to replace the in progress checkpoint with._@return <code>true</code> if the checkpoint was replaced or <code>false</code> otherwise.;boolean replacePendingCheckpointById(AbstractCheckpointStats completedOrFailed) {_		checkArgument(!completedOrFailed.getStatus().isInProgress(), "Not allowed to replace with in progress checkpoints.")___		if (readOnly) {_			throw new UnsupportedOperationException("Can't create a snapshot of a read-only history.")__		}__		_		if (completedOrFailed.getStatus().isCompleted()) {_			CompletedCheckpointStats completed = (CompletedCheckpointStats) completedOrFailed__			if (completed.getProperties().isSavepoint() &&_				(latestSavepoint == null ||_					completed.getCheckpointId() > latestSavepoint.getCheckpointId())) {__				latestSavepoint = completed__			} else if (latestCompletedCheckpoint == null ||_				completed.getCheckpointId() > latestCompletedCheckpoint.getCheckpointId()) {__				latestCompletedCheckpoint = completed__			}_		} else if (completedOrFailed.getStatus().isFailed()) {_			FailedCheckpointStats failed = (FailedCheckpointStats) completedOrFailed__			if (latestFailedCheckpoint == null ||_				failed.getCheckpointId() > latestFailedCheckpoint.getCheckpointId()) {__				latestFailedCheckpoint = failed__			}_		}__		if (maxSize == 0) {_			return false__		}__		long checkpointId = completedOrFailed.getCheckpointId()___		_		_		_		int startPos = nextPos == checkpointsArray.length ? checkpointsArray.length - 1 : nextPos - 1___		for (int i = startPos_ i >= 0_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		for (int i = checkpointsArray.length - 1_ i > startPos_ i--) {_			if (checkpointsArray[i].getCheckpointId() == checkpointId) {_				checkpointsArray[i] = completedOrFailed__				return true__			}_		}__		return false__	};searches,for,the,in,progress,checkpoint,with,the,given,id,and,replaces,it,with,the,given,completed,or,failed,checkpoint,p,this,is,bounded,by,the,maximum,number,of,concurrent,in,progress,checkpoints,array,which,means,that,the,runtime,of,this,is,constant,param,completed,or,failed,the,completed,or,failed,checkpoint,to,replace,the,in,progress,checkpoint,with,return,code,true,code,if,the,checkpoint,was,replaced,or,code,false,code,otherwise;boolean,replace,pending,checkpoint,by,id,abstract,checkpoint,stats,completed,or,failed,check,argument,completed,or,failed,get,status,is,in,progress,not,allowed,to,replace,with,in,progress,checkpoints,if,read,only,throw,new,unsupported,operation,exception,can,t,create,a,snapshot,of,a,read,only,history,if,completed,or,failed,get,status,is,completed,completed,checkpoint,stats,completed,completed,checkpoint,stats,completed,or,failed,if,completed,get,properties,is,savepoint,latest,savepoint,null,completed,get,checkpoint,id,latest,savepoint,get,checkpoint,id,latest,savepoint,completed,else,if,latest,completed,checkpoint,null,completed,get,checkpoint,id,latest,completed,checkpoint,get,checkpoint,id,latest,completed,checkpoint,completed,else,if,completed,or,failed,get,status,is,failed,failed,checkpoint,stats,failed,failed,checkpoint,stats,completed,or,failed,if,latest,failed,checkpoint,null,failed,get,checkpoint,id,latest,failed,checkpoint,get,checkpoint,id,latest,failed,checkpoint,failed,if,max,size,0,return,false,long,checkpoint,id,completed,or,failed,get,checkpoint,id,int,start,pos,next,pos,checkpoints,array,length,checkpoints,array,length,1,next,pos,1,for,int,i,start,pos,i,0,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,for,int,i,checkpoints,array,length,1,i,start,pos,i,if,checkpoints,array,i,get,checkpoint,id,checkpoint,id,checkpoints,array,i,completed,or,failed,return,true,return,false
