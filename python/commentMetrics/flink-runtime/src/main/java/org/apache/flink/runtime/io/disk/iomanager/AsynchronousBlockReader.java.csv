# id;timestamp;commentText;codeText;commentWords;codeWords
AsynchronousBlockReader -> @Override 	public void readBlock(MemorySegment segment) throws IOException;1412761231;Issues a read request, which will asynchronously fill the given segment with the next block in the_underlying file channel. Once the read request is fulfilled, the segment will be added to this reader's_return queue.__@param segment The segment to read the block into._@throws IOException Thrown, when the reader encounters an I/O error. Due to the asynchronous nature of the_reader, the exception thrown here may have been caused by an earlier read request.;@Override_	public void readBlock(MemorySegment segment) throws IOException {_		addRequest(new SegmentReadRequest(this, segment))__	};issues,a,read,request,which,will,asynchronously,fill,the,given,segment,with,the,next,block,in,the,underlying,file,channel,once,the,read,request,is,fulfilled,the,segment,will,be,added,to,this,reader,s,return,queue,param,segment,the,segment,to,read,the,block,into,throws,ioexception,thrown,when,the,reader,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,reader,the,exception,thrown,here,may,have,been,caused,by,an,earlier,read,request;override,public,void,read,block,memory,segment,segment,throws,ioexception,add,request,new,segment,read,request,this,segment
AsynchronousBlockReader -> @Override 	public void readBlock(MemorySegment segment) throws IOException;1415382319;Issues a read request, which will asynchronously fill the given segment with the next block in the_underlying file channel. Once the read request is fulfilled, the segment will be added to this reader's_return queue.__@param segment The segment to read the block into._@throws IOException Thrown, when the reader encounters an I/O error. Due to the asynchronous nature of the_reader, the exception thrown here may have been caused by an earlier read request.;@Override_	public void readBlock(MemorySegment segment) throws IOException {_		_		checkErroneous()__		_		_		_		_		this.requestsNotReturned.incrementAndGet()__		if (this.closed || this.requestQueue.isClosed()) {_			_			_			this.requestsNotReturned.decrementAndGet()__			throw new IOException("The reader has been closed.")__		}_		this.requestQueue.add(new SegmentReadRequest(this, segment))__	};issues,a,read,request,which,will,asynchronously,fill,the,given,segment,with,the,next,block,in,the,underlying,file,channel,once,the,read,request,is,fulfilled,the,segment,will,be,added,to,this,reader,s,return,queue,param,segment,the,segment,to,read,the,block,into,throws,ioexception,thrown,when,the,reader,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,reader,the,exception,thrown,here,may,have,been,caused,by,an,earlier,read,request;override,public,void,read,block,memory,segment,segment,throws,ioexception,check,erroneous,this,requests,not,returned,increment,and,get,if,this,closed,this,request,queue,is,closed,this,requests,not,returned,decrement,and,get,throw,new,ioexception,the,reader,has,been,closed,this,request,queue,add,new,segment,read,request,this,segment
AsynchronousBlockReader -> @Override 	public void readBlock(MemorySegment segment) throws IOException;1417461685;Issues a read request, which will asynchronously fill the given segment with the next block in the_underlying file channel. Once the read request is fulfilled, the segment will be added to this reader's_return queue.__@param segment The segment to read the block into._@throws IOException Thrown, when the reader encounters an I/O error. Due to the asynchronous nature of the_reader, the exception thrown here may have been caused by an earlier read request.;@Override_	public void readBlock(MemorySegment segment) throws IOException {_		addRequest(new SegmentReadRequest(this, segment))__	};issues,a,read,request,which,will,asynchronously,fill,the,given,segment,with,the,next,block,in,the,underlying,file,channel,once,the,read,request,is,fulfilled,the,segment,will,be,added,to,this,reader,s,return,queue,param,segment,the,segment,to,read,the,block,into,throws,ioexception,thrown,when,the,reader,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,reader,the,exception,thrown,here,may,have,been,caused,by,an,earlier,read,request;override,public,void,read,block,memory,segment,segment,throws,ioexception,add,request,new,segment,read,request,this,segment
AsynchronousBlockReader -> @Override 	public void readBlock(MemorySegment segment) throws IOException;1420560668;Issues a read request, which will asynchronously fill the given segment with the next block in the_underlying file channel. Once the read request is fulfilled, the segment will be added to this reader's_return queue.__@param segment The segment to read the block into._@throws IOException Thrown, when the reader encounters an I/O error. Due to the asynchronous nature of the_reader, the exception thrown here may have been caused by an earlier read request.;@Override_	public void readBlock(MemorySegment segment) throws IOException {_		addRequest(new SegmentReadRequest(this, segment))__	};issues,a,read,request,which,will,asynchronously,fill,the,given,segment,with,the,next,block,in,the,underlying,file,channel,once,the,read,request,is,fulfilled,the,segment,will,be,added,to,this,reader,s,return,queue,param,segment,the,segment,to,read,the,block,into,throws,ioexception,thrown,when,the,reader,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,reader,the,exception,thrown,here,may,have,been,caused,by,an,earlier,read,request;override,public,void,read,block,memory,segment,segment,throws,ioexception,add,request,new,segment,read,request,this,segment
AsynchronousBlockReader -> @Override 	public MemorySegment getNextReturnedSegment() throws IOException;1412761231;Gets the next memory segment that has been filled with data by the reader. This method blocks until_such a segment is available, or until an error occurs in the reader, or the reader is closed._<p>_WARNING: If this method is invoked without any segment ever returning (for example, because the_{@link #readBlock(MemorySegment)} method has not been invoked appropriately), the method may block_forever.__@return The next memory segment from the reader's return queue._@throws IOException Thrown, if an I/O error occurs in the reader while waiting for the request to return.;@Override_	public MemorySegment getNextReturnedSegment() throws IOException {_		try {_			while (true) {_				final MemorySegment next = this.returnSegments.poll(1000, TimeUnit.MILLISECONDS)__				if (next != null) {_					return next__				} else {_					if (this.closed) {_						throw new IOException("The reader has been asynchronously closed.")__					}_					checkErroneous()__				}_			}_		} catch (InterruptedException iex) {_			throw new IOException("Reader was interrupted while waiting for the next returning segment.")__		}_	};gets,the,next,memory,segment,that,has,been,filled,with,data,by,the,reader,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,reader,or,the,reader,is,closed,p,warning,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,read,block,memory,segment,method,has,not,been,invoked,appropriately,the,method,may,block,forever,return,the,next,memory,segment,from,the,reader,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,reader,while,waiting,for,the,request,to,return;override,public,memory,segment,get,next,returned,segment,throws,ioexception,try,while,true,final,memory,segment,next,this,return,segments,poll,1000,time,unit,milliseconds,if,next,null,return,next,else,if,this,closed,throw,new,ioexception,the,reader,has,been,asynchronously,closed,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,reader,was,interrupted,while,waiting,for,the,next,returning,segment
AsynchronousBlockReader -> @Override 	public MemorySegment getNextReturnedSegment() throws IOException;1415382319;Gets the next memory segment that has been filled with data by the reader. This method blocks until_such a segment is available, or until an error occurs in the reader, or the reader is closed._<p>_WARNING: If this method is invoked without any segment ever returning (for example, because the_{@link #readBlock(MemorySegment)} method has not been invoked appropriately), the method may block_forever.__@return The next memory segment from the reader's return queue._@throws IOException Thrown, if an I/O error occurs in the reader while waiting for the request to return.;@Override_	public MemorySegment getNextReturnedSegment() throws IOException {_		try {_			while (true) {_				final MemorySegment next = this.returnSegments.poll(1000, TimeUnit.MILLISECONDS)__				if (next != null) {_					return next__				} else {_					if (this.closed) {_						throw new IOException("The reader has been asynchronously closed.")__					}_					checkErroneous()__				}_			}_		} catch (InterruptedException iex) {_			throw new IOException("Reader was interrupted while waiting for the next returning segment.")__		}_	};gets,the,next,memory,segment,that,has,been,filled,with,data,by,the,reader,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,reader,or,the,reader,is,closed,p,warning,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,read,block,memory,segment,method,has,not,been,invoked,appropriately,the,method,may,block,forever,return,the,next,memory,segment,from,the,reader,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,reader,while,waiting,for,the,request,to,return;override,public,memory,segment,get,next,returned,segment,throws,ioexception,try,while,true,final,memory,segment,next,this,return,segments,poll,1000,time,unit,milliseconds,if,next,null,return,next,else,if,this,closed,throw,new,ioexception,the,reader,has,been,asynchronously,closed,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,reader,was,interrupted,while,waiting,for,the,next,returning,segment
AsynchronousBlockReader -> @Override 	public MemorySegment getNextReturnedSegment() throws IOException;1417461685;Gets the next memory segment that has been filled with data by the reader. This method blocks until_such a segment is available, or until an error occurs in the reader, or the reader is closed._<p>_WARNING: If this method is invoked without any segment ever returning (for example, because the_{@link #readBlock(MemorySegment)} method has not been invoked appropriately), the method may block_forever.__@return The next memory segment from the reader's return queue._@throws IOException Thrown, if an I/O error occurs in the reader while waiting for the request to return.;@Override_	public MemorySegment getNextReturnedSegment() throws IOException {_		try {_			while (true) {_				final MemorySegment next = this.returnSegments.poll(1000, TimeUnit.MILLISECONDS)__				if (next != null) {_					return next__				} else {_					if (this.closed) {_						throw new IOException("The reader has been asynchronously closed.")__					}_					checkErroneous()__				}_			}_		} catch (InterruptedException iex) {_			throw new IOException("Reader was interrupted while waiting for the next returning segment.")__		}_	};gets,the,next,memory,segment,that,has,been,filled,with,data,by,the,reader,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,reader,or,the,reader,is,closed,p,warning,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,read,block,memory,segment,method,has,not,been,invoked,appropriately,the,method,may,block,forever,return,the,next,memory,segment,from,the,reader,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,reader,while,waiting,for,the,request,to,return;override,public,memory,segment,get,next,returned,segment,throws,ioexception,try,while,true,final,memory,segment,next,this,return,segments,poll,1000,time,unit,milliseconds,if,next,null,return,next,else,if,this,closed,throw,new,ioexception,the,reader,has,been,asynchronously,closed,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,reader,was,interrupted,while,waiting,for,the,next,returning,segment
AsynchronousBlockReader -> @Override 	public LinkedBlockingQueue<MemorySegment> getReturnQueue();1412761231;Gets the queue in which the full memory segments are queued after the asynchronous read_is complete.__@return The queue with the full memory segments.;@Override_	public LinkedBlockingQueue<MemorySegment> getReturnQueue() {_		return this.returnSegments__	};gets,the,queue,in,which,the,full,memory,segments,are,queued,after,the,asynchronous,read,is,complete,return,the,queue,with,the,full,memory,segments;override,public,linked,blocking,queue,memory,segment,get,return,queue,return,this,return,segments
AsynchronousBlockReader -> @Override 	public LinkedBlockingQueue<MemorySegment> getReturnQueue();1415382319;Gets the queue in which the full memory segments are queued after the asynchronous read_is complete.__@return The queue with the full memory segments.;@Override_	public LinkedBlockingQueue<MemorySegment> getReturnQueue() {_		return this.returnSegments__	};gets,the,queue,in,which,the,full,memory,segments,are,queued,after,the,asynchronous,read,is,complete,return,the,queue,with,the,full,memory,segments;override,public,linked,blocking,queue,memory,segment,get,return,queue,return,this,return,segments
AsynchronousBlockReader -> @Override 	public LinkedBlockingQueue<MemorySegment> getReturnQueue();1417461685;Gets the queue in which the full memory segments are queued after the asynchronous read_is complete.__@return The queue with the full memory segments.;@Override_	public LinkedBlockingQueue<MemorySegment> getReturnQueue() {_		return this.returnSegments__	};gets,the,queue,in,which,the,full,memory,segments,are,queued,after,the,asynchronous,read,is,complete,return,the,queue,with,the,full,memory,segments;override,public,linked,blocking,queue,memory,segment,get,return,queue,return,this,return,segments
AsynchronousBlockReader -> @Override 	public LinkedBlockingQueue<MemorySegment> getReturnQueue();1420560668;Gets the queue in which the full memory segments are queued after the asynchronous read_is complete.__@return The queue with the full memory segments.;@Override_	public LinkedBlockingQueue<MemorySegment> getReturnQueue() {_		return this.returnSegments__	};gets,the,queue,in,which,the,full,memory,segments,are,queued,after,the,asynchronous,read,is,complete,return,the,queue,with,the,full,memory,segments;override,public,linked,blocking,queue,memory,segment,get,return,queue,return,this,return,segments
AsynchronousBlockReader -> protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments) 	throws IOException;1412761231;Creates a new block channel reader for the given channel.__@param channelID The ID of the channel to read._@param requestQueue The request queue of the asynchronous reader thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the full Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened.;protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments)_	throws IOException_	{_		super(channelID, requestQueue, new QueuingCallback(returnSegments), false)__		this.returnSegments = returnSegments__	};creates,a,new,block,channel,reader,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,read,param,request,queue,the,request,queue,of,the,asynchronous,reader,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,full,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened;protected,asynchronous,block,reader,file,iochannel,id,channel,id,request,queue,read,request,request,queue,linked,blocking,queue,memory,segment,return,segments,throws,ioexception,super,channel,id,request,queue,new,queuing,callback,return,segments,false,this,return,segments,return,segments
AsynchronousBlockReader -> protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments) 	throws IOException;1415382319;Creates a new block channel reader for the given channel.__@param channelID The ID of the channel to read._@param requestQueue The request queue of the asynchronous reader thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the full Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened.;protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments)_	throws IOException_	{_		super(channelID, requestQueue, new QueuingCallback(returnSegments), false)__		this.returnSegments = returnSegments__	};creates,a,new,block,channel,reader,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,read,param,request,queue,the,request,queue,of,the,asynchronous,reader,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,full,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened;protected,asynchronous,block,reader,file,iochannel,id,channel,id,request,queue,read,request,request,queue,linked,blocking,queue,memory,segment,return,segments,throws,ioexception,super,channel,id,request,queue,new,queuing,callback,return,segments,false,this,return,segments,return,segments
AsynchronousBlockReader -> protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments) 	throws IOException;1417461685;Creates a new block channel reader for the given channel.__@param channelID The ID of the channel to read._@param requestQueue The request queue of the asynchronous reader thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the full Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened.;protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments)_	throws IOException_	{_		super(channelID, requestQueue, new QueuingCallback(returnSegments), false)__		this.returnSegments = returnSegments__	};creates,a,new,block,channel,reader,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,read,param,request,queue,the,request,queue,of,the,asynchronous,reader,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,full,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened;protected,asynchronous,block,reader,file,iochannel,id,channel,id,request,queue,read,request,request,queue,linked,blocking,queue,memory,segment,return,segments,throws,ioexception,super,channel,id,request,queue,new,queuing,callback,return,segments,false,this,return,segments,return,segments
AsynchronousBlockReader -> protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments) 	throws IOException;1420560668;Creates a new block channel reader for the given channel.__@param channelID The ID of the channel to read._@param requestQueue The request queue of the asynchronous reader thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the full Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened.;protected AsynchronousBlockReader(FileIOChannel.ID channelID, RequestQueue<ReadRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments)_	throws IOException_	{_		super(channelID, requestQueue, new QueuingCallback<MemorySegment>(returnSegments), false)__		this.returnSegments = returnSegments__	};creates,a,new,block,channel,reader,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,read,param,request,queue,the,request,queue,of,the,asynchronous,reader,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,full,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened;protected,asynchronous,block,reader,file,iochannel,id,channel,id,request,queue,read,request,request,queue,linked,blocking,queue,memory,segment,return,segments,throws,ioexception,super,channel,id,request,queue,new,queuing,callback,memory,segment,return,segments,false,this,return,segments,return,segments
