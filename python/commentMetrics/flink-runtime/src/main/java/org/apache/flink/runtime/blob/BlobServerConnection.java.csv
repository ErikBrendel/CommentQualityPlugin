# id;timestamp;commentText;codeText;commentWords;codeWords
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1424258195;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1426258431;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1427041086;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1427127837;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1427237828;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1428440699;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1428504219;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1444048246;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1468506589;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1479815343;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1483724578;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private static String readKey(byte[] buf, InputStream inputStream) throws IOException;1494430729;Reads the key of a BLOB from the given input stream.__@param buf_auxiliary buffer to data deserialization_@param inputStream_the input stream to read the key from_@return the key of a BLOB_@throws IOException_thrown if an I/O error occurs while reading the key data from the input stream;private static String readKey(byte[] buf, InputStream inputStream) throws IOException {_		final int keyLength = readLength(inputStream)__		if (keyLength > MAX_KEY_LENGTH) {_			throw new IOException("Unexpected key length " + keyLength)__		}__		readFully(inputStream, buf, 0, keyLength, "BlobKey")__		return new String(buf, 0, keyLength, BlobUtils.DEFAULT_CHARSET)__	};reads,the,key,of,a,blob,from,the,given,input,stream,param,buf,auxiliary,buffer,to,data,deserialization,param,input,stream,the,input,stream,to,read,the,key,from,return,the,key,of,a,blob,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,key,data,from,the,input,stream;private,static,string,read,key,byte,buf,input,stream,input,stream,throws,ioexception,final,int,key,length,read,length,input,stream,if,key,length,throw,new,ioexception,unexpected,key,length,key,length,read,fully,input,stream,buf,0,key,length,blob,key,return,new,string,buf,0,key,length,blob,utils
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1424258195;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1426258431;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427041086;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427127837;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427237828;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1428440699;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1428504219;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1444048246;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}__				blobServer.getBlobStore().delete(key)__			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}__				blobServer.getBlobStore().delete(jobID, key)__			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)___				blobServer.getBlobStore().deleteAll(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,server,get,blob,store,delete,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,server,get,blob,store,delete,job,id,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,blob,server,get,blob,store,delete,all,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1468506589;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}__				blobStore.delete(key)__			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}__				blobStore.delete(jobID, key)__			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)___				blobStore.deleteAll(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,store,delete,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,store,delete,job,id,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,blob,store,delete,all,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1479815343;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = this.blobServer.getStorageLocation(key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}__				blobStore.delete(key)__			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)__				if (blobFile.exists() && !blobFile.delete()) {_					throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__				}__				blobStore.delete(jobID, key)__			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				blobServer.deleteJobDirectory(jobID)___				blobStore.deleteAll(jobID)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,this,blob,server,get,storage,location,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,store,delete,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,store,delete,job,id,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,blob,server,delete,job,directory,job,id,blob,store,delete,all,job,id,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1483724578;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobServer.delete(key)__			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)___				writeLock.lock()___				try {_					_					_					if (blobFile.exists() && !blobFile.delete()) {_						LOG.warn("Cannot delete local BLOB file " + blobFile.getAbsolutePath())__					}__					blobStore.delete(jobID, key)__				} finally {_					writeLock.unlock()__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				writeLock.lock()___				try {_					_					_					blobServer.deleteJobDirectory(jobID)___					blobStore.deleteAll(jobID)__				} finally {_					writeLock.unlock()__				}_			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,server,delete,key,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,write,lock,lock,try,if,blob,file,exists,blob,file,delete,log,warn,cannot,delete,local,blob,file,blob,file,get,absolute,path,blob,store,delete,job,id,key,finally,write,lock,unlock,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,write,lock,lock,try,blob,server,delete,job,directory,job,id,blob,store,delete,all,job,id,finally,write,lock,unlock,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1494430729;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				File blobFile = blobServer.getStorageLocation(key)___				writeLock.lock()___				try {_					_					_					if (blobFile.exists() && !blobFile.delete()) {_						throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__					}__					blobStore.delete(key)__				} finally {_					writeLock.unlock()__				}_			}_			else if (type == NAME_ADDRESSABLE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				String key = readKey(buf, inputStream)___				File blobFile = this.blobServer.getStorageLocation(jobID, key)___				writeLock.lock()___				try {_					_					_					if (blobFile.exists() && !blobFile.delete()) {_						throw new IOException("Cannot delete BLOB file " + blobFile.getAbsolutePath())__					}__					blobStore.delete(jobID, key)__				} finally {_					writeLock.unlock()__				}_			}_			else if (type == JOB_ID_SCOPE) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				JobID jobID = JobID.fromByteArray(jidBytes)___				writeLock.lock()___				try {_					_					_					blobServer.deleteJobDirectory(jobID)___					blobStore.deleteAll(jobID)__				} finally {_					writeLock.unlock()__				}_			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,file,blob,file,blob,server,get,storage,location,key,write,lock,lock,try,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,store,delete,key,finally,write,lock,unlock,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,file,blob,file,this,blob,server,get,storage,location,job,id,key,write,lock,lock,try,if,blob,file,exists,blob,file,delete,throw,new,ioexception,cannot,delete,blob,file,blob,file,get,absolute,path,blob,store,delete,job,id,key,finally,write,lock,unlock,else,if,type,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,write,lock,lock,try,blob,server,delete,job,directory,job,id,blob,store,delete,all,job,id,finally,write,lock,unlock,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> public void close();1424258195;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1426258431;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1427041086;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1427127837;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1427237828;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1428440699;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1428504219;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1444048246;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1468506589;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1479815343;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1483724578;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1494430729;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1497603064;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1498061083;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1498580984;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1499764760;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1505901925;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> public void close();1507188807;Closes the connection socket and lets the thread exit.;public void close() {_		closeSilently(clientSocket, LOG)__		interrupt()__	};closes,the,connection,socket,and,lets,the,thread,exit;public,void,close,close,silently,client,socket,log,interrupt
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1424258195;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAdressable = inputStream.read()__			if (contentAdressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAdressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAdressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAdressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}__			fos.close()__			fos = null___			if (contentAdressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,adressable,input,stream,read,if,content,adressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,adressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,adressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,adressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,fos,null,if,content,adressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1426258431;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427041086;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAdressable = inputStream.read()__			if (contentAdressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAdressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAdressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAdressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}__			fos.close()__			fos = null___			if (contentAdressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,adressable,input,stream,read,if,content,adressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,adressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,adressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,adressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,fos,null,if,content,adressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427127837;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427237828;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}__			fos.close()__			fos = null___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				if (!incomingFile.renameTo(storageFile)) {_					throw new IOException(String.format("Cannot move staging file %s to BLOB file %s",_							incomingFile.getAbsolutePath(), storageFile.getAbsolutePath()))__				}_				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,fos,null,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,if,incoming,file,rename,to,storage,file,throw,new,ioexception,string,format,cannot,move,staging,file,s,to,blob,file,s,incoming,file,get,absolute,path,storage,file,get,absolute,path,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1428440699;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				Files.move(incomingFile, storageFile)__				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,files,move,incoming,file,storage,file,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,files,move,incoming,file,storage,file,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1428504219;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				Files.move(incomingFile, storageFile)__				incomingFile = null__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,files,move,incoming,file,storage,file,incoming,file,null,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,files,move,incoming,file,storage,file,incoming,file,null,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1444048246;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				blobServer.getBlobStore().put(storageFile, jobID, key)___				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				blobServer.getBlobStore().put(storageFile, blobKey)___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,files,move,incoming,file,storage,file,incoming,file,null,blob,server,get,blob,store,put,storage,file,job,id,key,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,files,move,incoming,file,storage,file,incoming,file,null,blob,server,get,blob,store,put,storage,file,blob,key,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1468506589;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				blobStore.put(storageFile, jobID, key)___				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				blobStore.put(storageFile, blobKey)___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,files,move,incoming,file,storage,file,incoming,file,null,blob,store,put,storage,file,job,id,key,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,files,move,incoming,file,storage,file,incoming,file,null,blob,store,put,storage,file,blob,key,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1479815343;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = this.blobServer.getStorageLocation(jobID, key)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				blobStore.put(storageFile, jobID, key)___				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)__				Files.move(incomingFile, storageFile)__				incomingFile = null___				blobStore.put(storageFile, blobKey)___				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,this,blob,server,get,storage,location,job,id,key,files,move,incoming,file,storage,file,incoming,file,null,blob,store,put,storage,file,job,id,key,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,files,move,incoming,file,storage,file,incoming,file,null,blob,store,put,storage,file,blob,key,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1483724578;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = blobServer.getStorageLocation(jobID, key)___				writeLock.lock()___				try {_					_					if (!storageFile.exists()) {_						try {_							_							Files.move(incomingFile.toPath(), storageFile.toPath())___							incomingFile = null___						} catch (FileAlreadyExistsException ignored) {_							LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_								"BlobServer use the same storage directory.")__							_							_							_						}__						_						_						blobStore.put(storageFile, jobID, key)__					}_				} catch(IOException ioe) {_					_					_					if (storageFile.exists() && !storageFile.delete()) {_						LOG.warn("Could not delete the storage file.")__					}__					throw ioe__				} finally {_					writeLock.unlock()__				}__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)___				writeLock.lock()___				try {_					_					if (!storageFile.exists()) {_						try {_							_							Files.move(incomingFile.toPath(), storageFile.toPath())___							incomingFile = null___						} catch (FileAlreadyExistsException ignored) {_							LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_								"BlobServer use the same storage directory.")__							_							_							_						}__						_						_						blobStore.put(storageFile, blobKey)__					}_				} catch(IOException ioe) {_					_					_					if (storageFile.exists() && !storageFile.delete()) {_						LOG.warn("Could not delete the storage file.")__					}__					throw ioe__				} finally {_					writeLock.unlock()__				}__				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,blob,server,get,storage,location,job,id,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,job,id,key,catch,ioexception,ioe,if,storage,file,exists,storage,file,delete,log,warn,could,not,delete,the,storage,file,throw,ioe,finally,write,lock,unlock,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,blob,key,catch,ioexception,ioe,if,storage,file,exists,storage,file,delete,log,warn,could,not,delete,the,storage,file,throw,ioe,finally,write,lock,unlock,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1494430729;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		String key = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobID = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				if (contentAddressable == NAME_ADDRESSABLE) {_					LOG.debug(String.format("Received PUT request for BLOB under %s / \"%s\"", jobID, key))__				} else {_					LOG.debug("Received PUT request for content addressable BLOB")__				}_			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			if (contentAddressable == NAME_ADDRESSABLE) {_				File storageFile = blobServer.getStorageLocation(jobID, key)___				writeLock.lock()___				try {_					_					if (!storageFile.exists()) {_						try {_							_							Files.move(incomingFile.toPath(), storageFile.toPath())___							incomingFile = null___						} catch (FileAlreadyExistsException ignored) {_							LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_								"BlobServer use the same storage directory.")__							_							_							_						}__						_						_						blobStore.put(storageFile, jobID, key)__					}_				} catch(IOException ioe) {_					_					_					if (storageFile.exists() && !storageFile.delete()) {_						LOG.warn("Could not delete the storage file.")__					}__					throw ioe__				} finally {_					writeLock.unlock()__				}__				outputStream.write(RETURN_OKAY)__			}_			else {_				BlobKey blobKey = new BlobKey(md.digest())__				File storageFile = blobServer.getStorageLocation(blobKey)___				writeLock.lock()___				try {_					_					if (!storageFile.exists()) {_						try {_							_							Files.move(incomingFile.toPath(), storageFile.toPath())___							incomingFile = null___						} catch (FileAlreadyExistsException ignored) {_							LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_								"BlobServer use the same storage directory.")__							_							_							_						}__						_						_						blobStore.put(storageFile, blobKey)__					}_				} catch(IOException ioe) {_					_					_					if (storageFile.exists() && !storageFile.delete()) {_						LOG.warn("Could not delete the storage file.")__					}__					throw ioe__				} finally {_					writeLock.unlock()__				}__				_				outputStream.write(RETURN_OKAY)__				blobKey.writeToOutputStream(outputStream)__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,string,key,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,else,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,if,content,addressable,log,debug,string,format,received,put,request,for,blob,under,s,s,job,id,key,else,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,if,content,addressable,file,storage,file,blob,server,get,storage,location,job,id,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,job,id,key,catch,ioexception,ioe,if,storage,file,exists,storage,file,delete,log,warn,could,not,delete,the,storage,file,throw,ioe,finally,write,lock,unlock,output,stream,write,else,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,blob,key,catch,ioexception,ioe,if,storage,file,exists,storage,file,delete,log,warn,could,not,delete,the,storage,file,throw,ioe,finally,write,lock,unlock,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1497603064;Handles an incoming PUT request from a BLOB client.__@param inputStream The input stream to read incoming data from._@param outputStream The output stream to send data back to the client._@param buf An auxiliary buffer for data serialization/deserialization.;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		JobID jobID = null__		MessageDigest md = null___		File incomingFile = null__		FileOutputStream fos = null___		try {_			final int contentAddressable = inputStream.read()__			if (contentAddressable < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			if (contentAddressable == CONTENT_ADDRESSABLE) {_				md = BlobUtils.createMessageDigest()__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				LOG.debug("Received PUT request for content addressable BLOB")__			}__			incomingFile = blobServer.createTemporaryFilename()__			fos = new FileOutputStream(incomingFile)___			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException("Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				if (md != null) {_					md.update(buf, 0, bytesExpected)__				}_			}_			fos.close()___			BlobKey blobKey = new BlobKey(md.digest())__			File storageFile = blobServer.getStorageLocation(blobKey)___			writeLock.lock()___			try {_				_				if (!storageFile.exists()) {_					try {_						_						Files.move(incomingFile.toPath(), storageFile.toPath())___						incomingFile = null___					} catch (FileAlreadyExistsException ignored) {_						LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_							"BlobServer use the same storage directory.")__						_						_						_					}__					_					_					blobStore.put(storageFile, blobKey)__				}_			} catch(IOException ioe) {_				_				_				if (storageFile.exists() && !storageFile.delete()) {_					LOG.warn("Could not delete the storage file.")__				}__				throw ioe__			} finally {_				writeLock.unlock()__			}__			_			outputStream.write(RETURN_OKAY)__			blobKey.writeToOutputStream(outputStream)__		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (fos != null) {_				try {_					fos.close()__				} catch (Throwable t) {_					LOG.warn("Cannot close stream to BLOB staging file", t)__				}_			}_			if (incomingFile != null) {_				if (!incomingFile.delete()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,job,id,job,id,null,message,digest,md,null,file,incoming,file,null,file,output,stream,fos,null,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,put,request,if,content,addressable,md,blob,utils,create,message,digest,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,log,debug,received,put,request,for,content,addressable,blob,incoming,file,blob,server,create,temporary,filename,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,if,md,null,md,update,buf,0,bytes,expected,fos,close,blob,key,blob,key,new,blob,key,md,digest,file,storage,file,blob,server,get,storage,location,blob,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,blob,key,catch,ioexception,ioe,if,storage,file,exists,storage,file,delete,log,warn,could,not,delete,the,storage,file,throw,ioe,finally,write,lock,unlock,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,fos,null,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t,if,incoming,file,null,if,incoming,file,delete,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1498061083;Handles an incoming PUT request from a BLOB client.__@param inputStream_The input stream to read incoming data from_@param outputStream_The output stream to send data back to the client_@param buf_An auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		File incomingFile = null___		try {_			final int mode = inputStream.read()___			if (mode < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			_			final JobID jobId__			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				LOG.debug("Received PUT request for BLOB of job {} with from {}.", jobId,_					clientSocket.getInetAddress())__			}__			incomingFile = blobServer.createTemporaryFilename()__			BlobKey blobKey = readFileFully(inputStream, incomingFile, buf)___			File storageFile = blobServer.getStorageLocation(jobId, blobKey)___			writeLock.lock()___			try {_				_				if (!storageFile.exists()) {_					try {_						_						Files.move(incomingFile.toPath(), storageFile.toPath())___						incomingFile = null___					} catch (FileAlreadyExistsException ignored) {_						LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_							"BlobServer use the same storage directory.")__						_						_						_					}__					_					_					blobStore.put(storageFile, jobId, blobKey)__				} else {_					LOG.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__				}_			} catch(IOException ioe) {_				_				_				if (!storageFile.delete() && storageFile.exists()) {_					LOG.warn("Could not delete the storage file with key {} and job {}.", blobKey, jobId)__				}__				throw ioe__			} finally {_				writeLock.unlock()__			}__			_			outputStream.write(RETURN_OKAY)__			blobKey.writeToOutputStream(outputStream)__		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (incomingFile != null) {_				if (!incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,incoming,file,null,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,put,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,log,debug,received,put,request,for,blob,of,job,with,from,job,id,client,socket,get,inet,address,incoming,file,blob,server,create,temporary,filename,blob,key,blob,key,read,file,fully,input,stream,incoming,file,buf,file,storage,file,blob,server,get,storage,location,job,id,blob,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,catch,ioexception,ioe,if,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,with,key,and,job,blob,key,job,id,throw,ioe,finally,write,lock,unlock,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,incoming,file,null,if,incoming,file,delete,incoming,file,exists,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1498580984;Handles an incoming PUT request from a BLOB client.__@param inputStream_The input stream to read incoming data from_@param outputStream_The output stream to send data back to the client_@param buf_An auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		File incomingFile = null___		try {_			final int mode = inputStream.read()___			if (mode < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			_			final JobID jobId__			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				LOG.debug("Received PUT request for BLOB of job {} with from {}.", jobId,_					clientSocket.getInetAddress())__			}__			incomingFile = blobServer.createTemporaryFilename()__			BlobKey blobKey = readFileFully(inputStream, incomingFile, buf)___			File storageFile = blobServer.getStorageLocation(jobId, blobKey)___			writeLock.lock()___			try {_				_				if (!storageFile.exists()) {_					try {_						_						Files.move(incomingFile.toPath(), storageFile.toPath())___						incomingFile = null___					} catch (FileAlreadyExistsException ignored) {_						LOG.warn("Detected concurrent file modifications. This should only happen if multiple" +_							"BlobServer use the same storage directory.")__						_						_						_					}__					_					_					blobStore.put(storageFile, jobId, blobKey)__				} else {_					LOG.warn("File upload for an existing file with key {} for job {}. This may indicate a duplicate upload or a hash collision. Ignoring newest upload.", blobKey, jobId)__				}_			} catch(IOException ioe) {_				_				_				if (!storageFile.delete() && storageFile.exists()) {_					LOG.warn("Could not delete the storage file with key {} and job {}.", blobKey, jobId)__				}__				throw ioe__			} finally {_				writeLock.unlock()__			}__			_			outputStream.write(RETURN_OKAY)__			blobKey.writeToOutputStream(outputStream)__		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (incomingFile != null) {_				if (!incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,incoming,file,null,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,put,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,log,debug,received,put,request,for,blob,of,job,with,from,job,id,client,socket,get,inet,address,incoming,file,blob,server,create,temporary,filename,blob,key,blob,key,read,file,fully,input,stream,incoming,file,buf,file,storage,file,blob,server,get,storage,location,job,id,blob,key,write,lock,lock,try,if,storage,file,exists,try,files,move,incoming,file,to,path,storage,file,to,path,incoming,file,null,catch,file,already,exists,exception,ignored,log,warn,detected,concurrent,file,modifications,this,should,only,happen,if,multiple,blob,server,use,the,same,storage,directory,blob,store,put,storage,file,job,id,blob,key,else,log,warn,file,upload,for,an,existing,file,with,key,for,job,this,may,indicate,a,duplicate,upload,or,a,hash,collision,ignoring,newest,upload,blob,key,job,id,catch,ioexception,ioe,if,storage,file,delete,storage,file,exists,log,warn,could,not,delete,the,storage,file,with,key,and,job,blob,key,job,id,throw,ioe,finally,write,lock,unlock,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,incoming,file,null,if,incoming,file,delete,incoming,file,exists,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1499764760;Handles an incoming PUT request from a BLOB client.__@param inputStream_The input stream to read incoming data from_@param outputStream_The output stream to send data back to the client_@param buf_An auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		File incomingFile = null___		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			final JobID jobId__			final boolean permanentBlob__			if (mode == CONTENT_NO_JOB) {_				jobId = null__				permanentBlob = false__			} else if (mode == CONTENT_FOR_JOB_HA) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__				permanentBlob = true__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__				permanentBlob = false__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			if (LOG.isDebugEnabled()) {_				LOG.debug("Received PUT request for BLOB of job {} with from {}.", jobId,_					clientSocket.getInetAddress())__			}__			incomingFile = blobServer.createTemporaryFilename()__			BlobKey blobKey = readFileFully(inputStream, incomingFile, buf)___			blobServer.moveTempFileToStore(incomingFile, jobId, blobKey, permanentBlob)___			_			outputStream.write(RETURN_OKAY)__			blobKey.writeToOutputStream(outputStream)__		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (incomingFile != null) {_				if (!incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,incoming,file,null,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,put,request,final,job,id,job,id,final,boolean,permanent,blob,if,mode,job,id,null,permanent,blob,false,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,permanent,blob,true,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,permanent,blob,false,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,log,is,debug,enabled,log,debug,received,put,request,for,blob,of,job,with,from,job,id,client,socket,get,inet,address,incoming,file,blob,server,create,temporary,filename,blob,key,blob,key,read,file,fully,input,stream,incoming,file,buf,blob,server,move,temp,file,to,store,incoming,file,job,id,blob,key,permanent,blob,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,incoming,file,null,if,incoming,file,delete,incoming,file,exists,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1505901925;Handles an incoming PUT request from a BLOB client.__@param inputStream_The input stream to read incoming data from_@param outputStream_The output stream to send data back to the client_@param buf_An auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		File incomingFile = null___		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			final JobID jobId__			if (mode == JOB_UNRELATED_CONTENT) {_				jobId = null__			} else if (mode == JOB_RELATED_CONTENT) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			final BlobKey.BlobType blobType__			{_				final int read = inputStream.read()__				if (read < 0) {_					throw new EOFException("Read an incomplete BLOB type")__				} else if (read == TRANSIENT_BLOB.ordinal()) {_					blobType = TRANSIENT_BLOB__				} else if (read == PERMANENT_BLOB.ordinal()) {_					blobType = PERMANENT_BLOB__					checkArgument(jobId != null, "Invalid BLOB addressing for permanent BLOBs")__				} else {_					throw new IOException("Invalid data received for the BLOB type: " + read)__				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug("Received PUT request for BLOB of job {} with from {}.", jobId,_					clientSocket.getInetAddress())__			}__			incomingFile = blobServer.createTemporaryFilename()__			BlobKey blobKey = readFileFully(inputStream, incomingFile, buf, blobType)___			blobServer.moveTempFileToStore(incomingFile, jobId, blobKey)___			_			outputStream.write(RETURN_OKAY)__			blobKey.writeToOutputStream(outputStream)__		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (incomingFile != null) {_				if (!incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,incoming,file,null,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,put,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,final,blob,key,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,check,argument,job,id,null,invalid,blob,addressing,for,permanent,blobs,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,if,log,is,debug,enabled,log,debug,received,put,request,for,blob,of,job,with,from,job,id,client,socket,get,inet,address,incoming,file,blob,server,create,temporary,filename,blob,key,blob,key,read,file,fully,input,stream,incoming,file,buf,blob,type,blob,server,move,temp,file,to,store,incoming,file,job,id,blob,key,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,incoming,file,null,if,incoming,file,delete,incoming,file,exists,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1507188807;Handles an incoming PUT request from a BLOB client.__@param inputStream_The input stream to read incoming data from_@param outputStream_The output stream to send data back to the client_@param buf_An auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void put(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		File incomingFile = null___		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of PUT request")__			}__			final JobID jobId__			if (mode == JOB_UNRELATED_CONTENT) {_				jobId = null__			} else if (mode == JOB_RELATED_CONTENT) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			final BlobKey.BlobType blobType__			{_				final int read = inputStream.read()__				if (read < 0) {_					throw new EOFException("Read an incomplete BLOB type")__				} else if (read == TRANSIENT_BLOB.ordinal()) {_					blobType = TRANSIENT_BLOB__				} else if (read == PERMANENT_BLOB.ordinal()) {_					blobType = PERMANENT_BLOB__					checkArgument(jobId != null, "Invalid BLOB addressing for permanent BLOBs")__				} else {_					throw new IOException("Invalid data received for the BLOB type: " + read)__				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug("Received PUT request for BLOB of job {} with from {}.", jobId,_					clientSocket.getInetAddress())__			}__			incomingFile = blobServer.createTemporaryFilename()__			byte[] digest = readFileFully(inputStream, incomingFile, buf)___			BlobKey blobKey = blobServer.moveTempFileToStore(incomingFile, jobId, digest, blobType)___			_			outputStream.write(RETURN_OKAY)__			blobKey.writeToOutputStream(outputStream)__		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("PUT operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_		finally {_			if (incomingFile != null) {_				if (!incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Cannot delete BLOB server staging file " + incomingFile.getAbsolutePath())__				}_			}_		}_	};handles,an,incoming,put,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,put,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,incoming,file,null,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,put,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,final,blob,key,blob,type,blob,type,final,int,read,input,stream,read,if,read,0,throw,new,eofexception,read,an,incomplete,blob,type,else,if,read,ordinal,blob,type,else,if,read,ordinal,blob,type,check,argument,job,id,null,invalid,blob,addressing,for,permanent,blobs,else,throw,new,ioexception,invalid,data,received,for,the,blob,type,read,if,log,is,debug,enabled,log,debug,received,put,request,for,blob,of,job,with,from,job,id,client,socket,get,inet,address,incoming,file,blob,server,create,temporary,filename,byte,digest,read,file,fully,input,stream,incoming,file,buf,blob,key,blob,key,blob,server,move,temp,file,to,store,incoming,file,job,id,digest,blob,type,output,stream,write,blob,key,write,to,output,stream,output,stream,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,put,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,finally,if,incoming,file,null,if,incoming,file,delete,incoming,file,exists,log,warn,cannot,delete,blob,server,staging,file,incoming,file,get,absolute,path
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1424258195;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1426258431;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1427041086;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1427127837;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1427237828;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1428440699;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1428504219;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1444048246;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1468506589;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1479815343;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1483724578;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1494430729;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1497603064;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1498061083;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1498580984;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1499764760;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1505901925;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException;1507188807;Writes to the output stream the error return code, and the given exception in serialized form.__@param out Thr output stream to write to._@param t The exception to send._@throws IOException Thrown, if the output stream could not be written to.;private static void writeErrorToStream(OutputStream out, Throwable t) throws IOException {_		byte[] bytes = InstantiationUtil.serializeObject(t)__		out.write(RETURN_ERROR)__		writeLength(bytes.length, out)__		out.write(bytes)__	};writes,to,the,output,stream,the,error,return,code,and,the,given,exception,in,serialized,form,param,out,thr,output,stream,to,write,to,param,t,the,exception,to,send,throws,ioexception,thrown,if,the,output,stream,could,not,be,written,to;private,static,void,write,error,to,stream,output,stream,out,throwable,t,throws,ioexception,byte,bytes,instantiation,util,serialize,object,t,out,write,write,length,bytes,length,out,out,write,bytes
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1424258195;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1426258431;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1427041086;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1427127837;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1427237828;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1428440699;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1428504219;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1444048246;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1468506589;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__		this.blobStore = blobServer.getBlobStore()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server,this,blob,store,blob,server,get,blob,store
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1479815343;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress().toString())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__		this.blobStore = blobServer.getBlobStore()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,to,string,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server,this,blob,store,blob,server,get,blob,store
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1483724578;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__		this.blobStore = blobServer.getBlobStore()___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.writeLock = readWriteLock.writeLock()__		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server,this,blob,store,blob,server,get,blob,store,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,write,lock,read,write,lock,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1494430729;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__		this.blobStore = blobServer.getBlobStore()___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.writeLock = readWriteLock.writeLock()__		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server,this,blob,store,blob,server,get,blob,store,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,write,lock,read,write,lock,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1497603064;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		if (blobServer == null) {_			throw new NullPointerException()__		}__		this.clientSocket = clientSocket__		this.blobServer = blobServer__		this.blobStore = blobServer.getBlobStore()___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.writeLock = readWriteLock.writeLock()__		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,if,blob,server,null,throw,new,null,pointer,exception,this,client,socket,client,socket,this,blob,server,blob,server,this,blob,store,blob,server,get,blob,store,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,write,lock,read,write,lock,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1498061083;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		this.clientSocket = clientSocket__		this.blobServer = checkNotNull(blobServer)__		this.blobStore = blobServer.getBlobStore()___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.writeLock = readWriteLock.writeLock()__		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,this,client,socket,client,socket,this,blob,server,check,not,null,blob,server,this,blob,store,blob,server,get,blob,store,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,write,lock,read,write,lock,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1498580984;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		this.clientSocket = clientSocket__		this.blobServer = checkNotNull(blobServer)__		this.blobStore = blobServer.getBlobStore()___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.writeLock = readWriteLock.writeLock()__		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,this,client,socket,client,socket,this,blob,server,check,not,null,blob,server,this,blob,store,blob,server,get,blob,store,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,write,lock,read,write,lock,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1499764760;Creates a new BLOB connection for a client request__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		this.clientSocket = clientSocket__		this.blobServer = checkNotNull(blobServer)___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,this,client,socket,client,socket,this,blob,server,check,not,null,blob,server,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1505901925;Creates a new BLOB connection for a client request.__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		this.clientSocket = clientSocket__		this.blobServer = checkNotNull(blobServer)___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,this,client,socket,client,socket,this,blob,server,check,not,null,blob,server,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> BlobServerConnection(Socket clientSocket, BlobServer blobServer);1507188807;Creates a new BLOB connection for a client request.__@param clientSocket The socket to read/write data._@param blobServer The BLOB server.;BlobServerConnection(Socket clientSocket, BlobServer blobServer) {_		super("BLOB connection for " + clientSocket.getRemoteSocketAddress())__		setDaemon(true)___		this.clientSocket = clientSocket__		this.blobServer = checkNotNull(blobServer)___		ReadWriteLock readWriteLock = blobServer.getReadWriteLock()___		this.readLock = readWriteLock.readLock()__	};creates,a,new,blob,connection,for,a,client,request,param,client,socket,the,socket,to,read,write,data,param,blob,server,the,blob,server;blob,server,connection,socket,client,socket,blob,server,blob,server,super,blob,connection,for,client,socket,get,remote,socket,address,set,daemon,true,this,client,socket,client,socket,this,blob,server,check,not,null,blob,server,read,write,lock,read,write,lock,blob,server,get,read,write,lock,this,read,lock,read,write,lock,read,lock
BlobServerConnection -> private static BlobKey readFileFully( 			final InputStream inputStream, final File incomingFile, final byte[] buf) 			throws IOException;1498061083;Reads a full file from <tt>inputStream</tt> into <tt>incomingFile</tt> returning its checksum.__@param inputStream_stream to read from_@param incomingFile_file to write to_@param buf_An auxiliary buffer for data serialization/deserialization__@return the received file's content hash as a BLOB key__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private static BlobKey readFileFully(_			final InputStream inputStream, final File incomingFile, final byte[] buf)_			throws IOException {_		MessageDigest md = BlobUtils.createMessageDigest()__		FileOutputStream fos = new FileOutputStream(incomingFile)___		try {_			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException(_						"Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				md.update(buf, 0, bytesExpected)__			}_			return new BlobKey(md.digest())__		} finally {_			try {_				fos.close()__			} catch (Throwable t) {_				LOG.warn("Cannot close stream to BLOB staging file", t)__			}_		}_	};reads,a,full,file,from,tt,input,stream,tt,into,tt,incoming,file,tt,returning,its,checksum,param,input,stream,stream,to,read,from,param,incoming,file,file,to,write,to,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,return,the,received,file,s,content,hash,as,a,blob,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,static,blob,key,read,file,fully,final,input,stream,input,stream,final,file,incoming,file,final,byte,buf,throws,ioexception,message,digest,md,blob,utils,create,message,digest,file,output,stream,fos,new,file,output,stream,incoming,file,try,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,md,update,buf,0,bytes,expected,return,new,blob,key,md,digest,finally,try,fos,close,catch,throwable,t,log,warn,cannot,close,stream,to,blob,staging,file,t
BlobServerConnection -> private static BlobKey readFileFully( 			final InputStream inputStream, final File incomingFile, final byte[] buf) 			throws IOException;1498580984;Reads a full file from <tt>inputStream</tt> into <tt>incomingFile</tt> returning its checksum.__@param inputStream_stream to read from_@param incomingFile_file to write to_@param buf_An auxiliary buffer for data serialization/deserialization__@return the received file's content hash as a BLOB key__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private static BlobKey readFileFully(_			final InputStream inputStream, final File incomingFile, final byte[] buf)_			throws IOException {_		MessageDigest md = BlobUtils.createMessageDigest()___		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException(_						"Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				md.update(buf, 0, bytesExpected)__			}_			return new BlobKey(md.digest())__		}_	};reads,a,full,file,from,tt,input,stream,tt,into,tt,incoming,file,tt,returning,its,checksum,param,input,stream,stream,to,read,from,param,incoming,file,file,to,write,to,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,return,the,received,file,s,content,hash,as,a,blob,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,static,blob,key,read,file,fully,final,input,stream,input,stream,final,file,incoming,file,final,byte,buf,throws,ioexception,message,digest,md,blob,utils,create,message,digest,try,file,output,stream,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,md,update,buf,0,bytes,expected,return,new,blob,key,md,digest
BlobServerConnection -> private static BlobKey readFileFully( 			final InputStream inputStream, final File incomingFile, final byte[] buf) 			throws IOException;1499764760;Reads a full file from <tt>inputStream</tt> into <tt>incomingFile</tt> returning its checksum.__@param inputStream_stream to read from_@param incomingFile_file to write to_@param buf_An auxiliary buffer for data serialization/deserialization__@return the received file's content hash as a BLOB key__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private static BlobKey readFileFully(_			final InputStream inputStream, final File incomingFile, final byte[] buf)_			throws IOException {_		MessageDigest md = BlobUtils.createMessageDigest()___		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			while (true) {_				final int bytesExpected = readLength(inputStream)__				if (bytesExpected == -1) {_					_					break__				}_				if (bytesExpected > BUFFER_SIZE) {_					throw new IOException(_						"Unexpected number of incoming bytes: " + bytesExpected)__				}__				readFully(inputStream, buf, 0, bytesExpected, "buffer")__				fos.write(buf, 0, bytesExpected)___				md.update(buf, 0, bytesExpected)__			}_			return new BlobKey(md.digest())__		}_	};reads,a,full,file,from,tt,input,stream,tt,into,tt,incoming,file,tt,returning,its,checksum,param,input,stream,stream,to,read,from,param,incoming,file,file,to,write,to,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,return,the,received,file,s,content,hash,as,a,blob,key,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,static,blob,key,read,file,fully,final,input,stream,input,stream,final,file,incoming,file,final,byte,buf,throws,ioexception,message,digest,md,blob,utils,create,message,digest,try,file,output,stream,fos,new,file,output,stream,incoming,file,while,true,final,int,bytes,expected,read,length,input,stream,if,bytes,expected,1,break,if,bytes,expected,throw,new,ioexception,unexpected,number,of,incoming,bytes,bytes,expected,read,fully,input,stream,buf,0,bytes,expected,buffer,fos,write,buf,0,bytes,expected,md,update,buf,0,bytes,expected,return,new,blob,key,md,digest
BlobServerConnection -> @Override 	public void run();1424258195;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1426258431;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1427041086;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1427127837;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1427237828;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1428440699;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1428504219;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1444048246;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1468506589;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1479815343;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1483724578;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1494430729;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()__			final byte[] buffer = new byte[BUFFER_SIZE]___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, buffer)__					break__				case GET_OPERATION:_					get(inputStream, outputStream, buffer)__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream, buffer)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,final,byte,buffer,new,byte,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,buffer,break,case,get,input,stream,output,stream,buffer,break,case,delete,input,stream,output,stream,buffer,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1497603064;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case GET_OPERATION:_					get(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,new,byte,break,case,get,input,stream,output,stream,new,byte,break,case,delete,input,stream,output,stream,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1498061083;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case GET_OPERATION:_					get(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			try {_				if (clientSocket != null) {_					clientSocket.close()__				}_			} catch (Throwable t) {_				LOG.debug("Exception while closing BLOB server connection socket.", t)__			}__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,new,byte,break,case,get,input,stream,output,stream,new,byte,break,case,delete,input,stream,output,stream,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,try,if,client,socket,null,client,socket,close,catch,throwable,t,log,debug,exception,while,closing,blob,server,connection,socket,t,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1498580984;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case GET_OPERATION:_					get(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			closeSilently(clientSocket, LOG)__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,new,byte,break,case,get,input,stream,output,stream,new,byte,break,case,delete,input,stream,output,stream,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,close,silently,client,socket,log,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1499764760;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case GET_OPERATION:_					get(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case DELETE_OPERATION:_					delete(inputStream, outputStream)__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			closeSilently(clientSocket, LOG)__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,new,byte,break,case,get,input,stream,output,stream,new,byte,break,case,delete,input,stream,output,stream,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,close,silently,client,socket,log,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1505901925;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case GET_OPERATION:_					get(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			closeSilently(clientSocket, LOG)__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,new,byte,break,case,get,input,stream,output,stream,new,byte,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,close,silently,client,socket,log,blob,server,unregister,connection,this
BlobServerConnection -> @Override 	public void run();1507188807;Main connection work method. Accepts requests until the other side closes the connection.;@Override_	public void run() {_		try {_			final InputStream inputStream = this.clientSocket.getInputStream()__			final OutputStream outputStream = this.clientSocket.getOutputStream()___			while (true) {_				_				final int operation = inputStream.read()__				if (operation < 0) {_					_					return__				}__				switch (operation) {_				case PUT_OPERATION:_					put(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				case GET_OPERATION:_					get(inputStream, outputStream, new byte[BUFFER_SIZE])__					break__				default:_					throw new IOException("Unknown operation " + operation)__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("Error while executing BLOB connection.", t)__		}_		finally {_			closeSilently(clientSocket, LOG)__			blobServer.unregisterConnection(this)__		}_	};main,connection,work,method,accepts,requests,until,the,other,side,closes,the,connection;override,public,void,run,try,final,input,stream,input,stream,this,client,socket,get,input,stream,final,output,stream,output,stream,this,client,socket,get,output,stream,while,true,final,int,operation,input,stream,read,if,operation,0,return,switch,operation,case,put,input,stream,output,stream,new,byte,break,case,get,input,stream,output,stream,new,byte,break,default,throw,new,ioexception,unknown,operation,operation,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,error,while,executing,blob,connection,t,finally,close,silently,client,socket,log,blob,server,unregister,connection,this
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1424258195;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAdressable = inputStream.read()___			if (contentAdressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAdressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAdressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,adressable,input,stream,read,if,content,adressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,adressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,adressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1426258431;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427041086;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAdressable = inputStream.read()___			if (contentAdressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAdressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAdressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,adressable,input,stream,read,if,content,adressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,adressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,adressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427127837;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1427237828;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1428440699;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1428504219;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}_			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			FileInputStream fis = new FileInputStream(blobFile)__			try {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			} finally {_				fis.close()__			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,file,input,stream,fis,new,file,input,stream,blob,file,try,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,fis,close,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1444048246;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)___				if (!blobFile.exists()) {_					blobServer.getBlobStore().get(jobID, key, blobFile)__				}_			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)___				if (!blobFile.exists()) {_					blobServer.getBlobStore().get(key, blobFile)__				}_			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}__			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,server,get,blob,store,get,job,id,key,blob,file,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,if,blob,file,exists,blob,server,get,blob,store,get,key,blob,file,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1468506589;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)___				if (!blobFile.exists()) {_					blobStore.get(jobID, key, blobFile)__				}_			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)___				if (!blobFile.exists()) {_					blobStore.get(key, blobFile)__				}_			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}__			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,store,get,job,id,key,blob,file,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,if,blob,file,exists,blob,store,get,key,blob,file,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1479815343;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		File blobFile__		try {_			final int contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				JobID jobID = JobID.fromByteArray(jidBytes)__				String key = readKey(buf, inputStream)__				blobFile = this.blobServer.getStorageLocation(jobID, key)___				if (!blobFile.exists()) {_					blobStore.get(jobID, key, blobFile)__				}_			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				final BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(key)___				if (!blobFile.exists()) {_					blobStore.get(key, blobFile)__				}_			}_			else {_				throw new IOException("Unknown type of BLOB addressing.")__			}__			_			if (!blobFile.exists()) {_				throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__			}__			if (blobFile.length() > Integer.MAX_VALUE) {_				throw new IOException("BLOB size exceeds the maximum size (2 GB).")__			}__			outputStream.write(RETURN_OKAY)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		_		try {_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		}_		catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,try,final,int,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,job,id,from,byte,array,jid,bytes,string,key,read,key,buf,input,stream,blob,file,this,blob,server,get,storage,location,job,id,key,if,blob,file,exists,blob,store,get,job,id,key,blob,file,else,if,content,addressable,final,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,key,if,blob,file,exists,blob,store,get,key,blob,file,else,throw,new,ioexception,unknown,type,of,blob,addressing,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1483724578;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		File blobFile__		int contentAddressable = -1__		JobID jobId = null__		String key = null__		BlobKey blobKey = null___		try {_			contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				jobId = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__				blobFile = blobServer.getStorageLocation(jobId, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				blobKey = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(blobKey)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing: " + contentAddressable + '.')__			}__			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		readLock.lock()___		try {_			try {_				if (!blobFile.exists()) {_					_					readLock.unlock()__					writeLock.lock()___					try {_						if (blobFile.exists()) {_							LOG.debug("Blob file {} has downloaded from the BlobStore by a different connection.", blobFile)__						} else {_							if (contentAddressable == NAME_ADDRESSABLE) {_								blobStore.get(jobId, key, blobFile)__							} else if (contentAddressable == CONTENT_ADDRESSABLE) {_								blobStore.get(blobKey, blobFile)__							} else {_								throw new IOException("Unknown type of BLOB addressing: " + contentAddressable + '.')__							}_						}_					} finally {_						writeLock.unlock()__					}__					readLock.lock()___					_					if (!blobFile.exists()) {_						throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__					}_				}__				if (blobFile.length() > Integer.MAX_VALUE) {_					throw new IOException("BLOB size exceeds the maximum size (2 GB).")__				}__				outputStream.write(RETURN_OKAY)__			} catch (Throwable t) {_				LOG.error("GET operation failed", t)__				try {_					writeErrorToStream(outputStream, t)__				}_				catch (IOException e) {_					_					_				}_				clientSocket.close()__				return__			}__			_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		} finally {_			readLock.unlock()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,int,content,addressable,1,job,id,job,id,null,string,key,null,blob,key,blob,key,null,try,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,blob,file,blob,server,get,storage,location,job,id,key,else,if,content,addressable,blob,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,blob,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,content,addressable,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,read,lock,lock,try,try,if,blob,file,exists,read,lock,unlock,write,lock,lock,try,if,blob,file,exists,log,debug,blob,file,has,downloaded,from,the,blob,store,by,a,different,connection,blob,file,else,if,content,addressable,blob,store,get,job,id,key,blob,file,else,if,content,addressable,blob,store,get,blob,key,blob,file,else,throw,new,ioexception,unknown,type,of,blob,addressing,content,addressable,finally,write,lock,unlock,read,lock,lock,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close,finally,read,lock,unlock
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1494430729;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		File blobFile__		int contentAddressable = -1__		JobID jobId = null__		String key = null__		BlobKey blobKey = null___		try {_			contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == NAME_ADDRESSABLE) {_				_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")___				jobId = JobID.fromByteArray(jidBytes)__				key = readKey(buf, inputStream)__				blobFile = blobServer.getStorageLocation(jobId, key)__			}_			else if (contentAddressable == CONTENT_ADDRESSABLE) {_				blobKey = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(blobKey)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing: " + contentAddressable + '.')__			}__			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		readLock.lock()___		try {_			try {_				if (!blobFile.exists()) {_					_					readLock.unlock()__					writeLock.lock()___					try {_						if (blobFile.exists()) {_							LOG.debug("Blob file {} has downloaded from the BlobStore by a different connection.", blobFile)__						} else {_							if (contentAddressable == NAME_ADDRESSABLE) {_								blobStore.get(jobId, key, blobFile)__							} else if (contentAddressable == CONTENT_ADDRESSABLE) {_								blobStore.get(blobKey, blobFile)__							} else {_								throw new IOException("Unknown type of BLOB addressing: " + contentAddressable + '.')__							}_						}_					} finally {_						writeLock.unlock()__					}__					readLock.lock()___					_					if (!blobFile.exists()) {_						throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__					}_				}__				if (blobFile.length() > Integer.MAX_VALUE) {_					throw new IOException("BLOB size exceeds the maximum size (2 GB).")__				}__				outputStream.write(RETURN_OKAY)__			} catch (Throwable t) {_				LOG.error("GET operation failed", t)__				try {_					writeErrorToStream(outputStream, t)__				}_				catch (IOException e) {_					_					_				}_				clientSocket.close()__				return__			}__			_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		} finally {_			readLock.unlock()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,int,content,addressable,1,job,id,job,id,null,string,key,null,blob,key,blob,key,null,try,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,key,read,key,buf,input,stream,blob,file,blob,server,get,storage,location,job,id,key,else,if,content,addressable,blob,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,blob,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,content,addressable,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,read,lock,lock,try,try,if,blob,file,exists,read,lock,unlock,write,lock,lock,try,if,blob,file,exists,log,debug,blob,file,has,downloaded,from,the,blob,store,by,a,different,connection,blob,file,else,if,content,addressable,blob,store,get,job,id,key,blob,file,else,if,content,addressable,blob,store,get,blob,key,blob,file,else,throw,new,ioexception,unknown,type,of,blob,addressing,content,addressable,finally,write,lock,unlock,read,lock,lock,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close,finally,read,lock,unlock
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1497603064;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization_@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		File blobFile__		int contentAddressable = -1__		JobID jobId = null__		BlobKey blobKey = null___		try {_			contentAddressable = inputStream.read()___			if (contentAddressable < 0) {_				throw new EOFException("Premature end of GET request")__			}_			if (contentAddressable == CONTENT_ADDRESSABLE) {_				blobKey = BlobKey.readFromInputStream(inputStream)__				blobFile = blobServer.getStorageLocation(blobKey)__			}_			else {_				throw new IOException("Unknown type of BLOB addressing: " + contentAddressable + '.')__			}__			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		readLock.lock()___		try {_			try {_				if (!blobFile.exists()) {_					_					readLock.unlock()__					writeLock.lock()___					try {_						if (blobFile.exists()) {_							LOG.debug("Blob file {} has downloaded from the BlobStore by a different connection.", blobFile)__						} else {_							blobStore.get(blobKey, blobFile)__						}_					} finally {_						writeLock.unlock()__					}__					readLock.lock()___					_					if (!blobFile.exists()) {_						throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__					}_				}__				if (blobFile.length() > Integer.MAX_VALUE) {_					throw new IOException("BLOB size exceeds the maximum size (2 GB).")__				}__				outputStream.write(RETURN_OKAY)__			} catch (Throwable t) {_				LOG.error("GET operation failed", t)__				try {_					writeErrorToStream(outputStream, t)__				}_				catch (IOException e) {_					_					_				}_				clientSocket.close()__				return__			}__			_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		} finally {_			readLock.unlock()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,file,blob,file,int,content,addressable,1,job,id,job,id,null,blob,key,blob,key,null,try,content,addressable,input,stream,read,if,content,addressable,0,throw,new,eofexception,premature,end,of,get,request,if,content,addressable,blob,key,blob,key,read,from,input,stream,input,stream,blob,file,blob,server,get,storage,location,blob,key,else,throw,new,ioexception,unknown,type,of,blob,addressing,content,addressable,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,read,lock,lock,try,try,if,blob,file,exists,read,lock,unlock,write,lock,lock,try,if,blob,file,exists,log,debug,blob,file,has,downloaded,from,the,blob,store,by,a,different,connection,blob,file,else,blob,store,get,blob,key,blob,file,finally,write,lock,unlock,read,lock,lock,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close,finally,read,lock,unlock
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1498061083;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		final File blobFile__		final JobID jobId__		final BlobKey blobKey___		try {_			final int mode = inputStream.read()___			if (mode < 0) {_				throw new EOFException("Premature end of GET request")__			}__			_			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing: " + mode + '.')__			}_			blobKey = BlobKey.readFromInputStream(inputStream)___			if (LOG.isDebugEnabled()) {_				LOG.debug("Received GET request for BLOB {}/{} from {}.", jobId,_					blobKey, clientSocket.getInetAddress())__			}__			blobFile = blobServer.getStorageLocation(jobId, blobKey)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		readLock.lock()___		try {_			_			try {_				if (!blobFile.exists()) {_					_					readLock.unlock()__					writeLock.lock()___					try {_						if (blobFile.exists()) {_							LOG.debug("Blob file {} has been downloaded from the (distributed) blob store by a different connection.", blobFile)__						} else {_							blobStore.get(jobId, blobKey, blobFile)__						}_					} finally {_						writeLock.unlock()__					}__					readLock.lock()___					_					if (!blobFile.exists()) {_						throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__					}_				}__				_				if (blobFile.length() > Integer.MAX_VALUE) {_					throw new IOException("BLOB size exceeds the maximum size (2 GB).")__				}__				outputStream.write(RETURN_OKAY)__			} catch (Throwable t) {_				LOG.error("GET operation failed", t)__				try {_					writeErrorToStream(outputStream, t)__				}_				catch (IOException e) {_					_					_				}_				clientSocket.close()__				return__			}__			_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		} finally {_			readLock.unlock()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,final,file,blob,file,final,job,id,job,id,final,blob,key,blob,key,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,get,request,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,mode,blob,key,blob,key,read,from,input,stream,input,stream,if,log,is,debug,enabled,log,debug,received,get,request,for,blob,from,job,id,blob,key,client,socket,get,inet,address,blob,file,blob,server,get,storage,location,job,id,blob,key,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,read,lock,lock,try,try,if,blob,file,exists,read,lock,unlock,write,lock,lock,try,if,blob,file,exists,log,debug,blob,file,has,been,downloaded,from,the,distributed,blob,store,by,a,different,connection,blob,file,else,blob,store,get,job,id,blob,key,blob,file,finally,write,lock,unlock,read,lock,lock,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close,finally,read,lock,unlock
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1498580984;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		final File blobFile__		final JobID jobId__		final BlobKey blobKey___		try {_			final int mode = inputStream.read()___			if (mode < 0) {_				throw new EOFException("Premature end of GET request")__			}__			_			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing: " + mode + '.')__			}_			blobKey = BlobKey.readFromInputStream(inputStream)___			if (LOG.isDebugEnabled()) {_				LOG.debug("Received GET request for BLOB {}/{} from {}.", jobId,_					blobKey, clientSocket.getInetAddress())__			}__			blobFile = blobServer.getStorageLocation(jobId, blobKey)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		readLock.lock()___		try {_			_			try {_				if (!blobFile.exists()) {_					_					readLock.unlock()__					writeLock.lock()___					try {_						if (blobFile.exists()) {_							LOG.debug("Blob file {} has been downloaded from the (distributed) blob store by a different connection.", blobFile)__						} else {_							blobStore.get(jobId, blobKey, blobFile)__						}_					} finally {_						writeLock.unlock()__					}__					readLock.lock()___					_					if (!blobFile.exists()) {_						throw new IOException("Cannot find required BLOB at " + blobFile.getAbsolutePath())__					}_				}__				_				if (blobFile.length() > Integer.MAX_VALUE) {_					throw new IOException("BLOB size exceeds the maximum size (2 GB).")__				}__				outputStream.write(RETURN_OKAY)__			} catch (Throwable t) {_				LOG.error("GET operation failed", t)__				try {_					writeErrorToStream(outputStream, t)__				}_				catch (IOException e) {_					_					_				}_				clientSocket.close()__				return__			}__			_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		} finally {_			readLock.unlock()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,final,file,blob,file,final,job,id,job,id,final,blob,key,blob,key,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,get,request,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,mode,blob,key,blob,key,read,from,input,stream,input,stream,if,log,is,debug,enabled,log,debug,received,get,request,for,blob,from,job,id,blob,key,client,socket,get,inet,address,blob,file,blob,server,get,storage,location,job,id,blob,key,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,read,lock,lock,try,try,if,blob,file,exists,read,lock,unlock,write,lock,lock,try,if,blob,file,exists,log,debug,blob,file,has,been,downloaded,from,the,distributed,blob,store,by,a,different,connection,blob,file,else,blob,store,get,job,id,blob,key,blob,file,finally,write,lock,unlock,read,lock,lock,if,blob,file,exists,throw,new,ioexception,cannot,find,required,blob,at,blob,file,get,absolute,path,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close,finally,read,lock,unlock
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1499764760;Handles an incoming GET request from a BLOB client.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		final File blobFile__		final JobID jobId__		final BlobKey blobKey__		final boolean permanentBlob___		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of GET request")__			}__			_			if (mode == CONTENT_NO_JOB) {_				jobId = null__				permanentBlob = false__			} else if (mode == CONTENT_FOR_JOB_HA) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__				permanentBlob = true__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__				permanentBlob = false__			} else {_				throw new IOException("Unknown type of BLOB addressing: " + mode + '.')__			}_			blobKey = BlobKey.readFromInputStream(inputStream)___			if (LOG.isDebugEnabled()) {_				LOG.debug("Received GET request for BLOB {}/{} from {}.", jobId,_					blobKey, clientSocket.getInetAddress())__			}__			_			blobFile = blobServer.getStorageLocation(jobId, blobKey)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		readLock.lock()___		try {_			_			try {_				blobServer.getFileInternal(jobId, blobKey, permanentBlob, blobFile)___				_				if (blobFile.length() > Integer.MAX_VALUE) {_					throw new IOException("BLOB size exceeds the maximum size (2 GB).")__				}__				outputStream.write(RETURN_OKAY)__			} catch (Throwable t) {_				LOG.error("GET operation failed", t)__				try {_					writeErrorToStream(outputStream, t)__				}_				catch (IOException e) {_					_					_				}_				clientSocket.close()__				return__			}__			_			int blobLen = (int) blobFile.length()__			writeLength(blobLen, outputStream)___			try (FileInputStream fis = new FileInputStream(blobFile)) {_				int bytesRemaining = blobLen__				while (bytesRemaining > 0) {_					int read = fis.read(buf)__					if (read < 0) {_						throw new IOException("Premature end of BLOB file stream for " + blobFile.getAbsolutePath())__					}_					outputStream.write(buf, 0, read)__					bytesRemaining -= read__				}_			}_		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		} finally {_			readLock.unlock()__		}_	};handles,an,incoming,get,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,final,file,blob,file,final,job,id,job,id,final,blob,key,blob,key,final,boolean,permanent,blob,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,get,request,if,mode,job,id,null,permanent,blob,false,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,permanent,blob,true,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,permanent,blob,false,else,throw,new,ioexception,unknown,type,of,blob,addressing,mode,blob,key,blob,key,read,from,input,stream,input,stream,if,log,is,debug,enabled,log,debug,received,get,request,for,blob,from,job,id,blob,key,client,socket,get,inet,address,blob,file,blob,server,get,storage,location,job,id,blob,key,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,read,lock,lock,try,try,blob,server,get,file,internal,job,id,blob,key,permanent,blob,blob,file,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close,finally,read,lock,unlock
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1505901925;Handles an incoming GET request from a BLOB client.__<p>Transient BLOB files are deleted after a successful read operation by the client. Note_that we do not enforce atomicity here, i.e. multiple clients reading from the same BLOB may_still succeed.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		final File blobFile__		final JobID jobId__		final BlobKey blobKey___		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of GET request")__			}__			_			if (mode == JOB_UNRELATED_CONTENT) {_				jobId = null__			} else if (mode == JOB_RELATED_CONTENT) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing: " + mode + '.')__			}_			blobKey = BlobKey.readFromInputStream(inputStream)___			checkArgument(blobKey instanceof TransientBlobKey || jobId != null,_				"Invalid BLOB addressing for permanent BLOBs")___			if (LOG.isDebugEnabled()) {_				LOG.debug("Received GET request for BLOB {}/{} from {}.", jobId,_					blobKey, clientSocket.getInetAddress())__			}__			_			blobFile = blobServer.getStorageLocation(jobId, blobKey)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation from {} failed.", clientSocket.getInetAddress(), t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		try {__			readLock.lock()__			try {_				_				try {_					blobServer.getFileInternal(jobId, blobKey, blobFile)___					_					if (blobFile.length() > Integer.MAX_VALUE) {_						throw new IOException("BLOB size exceeds the maximum size (2 GB).")__					}__					outputStream.write(RETURN_OKAY)__				} catch (Throwable t) {_					LOG.error("GET operation failed for BLOB {}/{} from {}.", jobId,_						blobKey, clientSocket.getInetAddress(), t)__					try {_						writeErrorToStream(outputStream, t)__					} catch (IOException e) {_						_						_					}_					clientSocket.close()__					return__				}__				_				int blobLen = (int) blobFile.length()__				writeLength(blobLen, outputStream)___				try (FileInputStream fis = new FileInputStream(blobFile)) {_					int bytesRemaining = blobLen__					while (bytesRemaining > 0) {_						int read = fis.read(buf)__						if (read < 0) {_							throw new IOException("Premature end of BLOB file stream for " +_								blobFile.getAbsolutePath())__						}_						outputStream.write(buf, 0, read)__						bytesRemaining -= read__					}_				}_			} finally {_				readLock.unlock()__			}__			_			int result = inputStream.read()__			if (result < 0) {_				throw new EOFException("Premature end of GET request")__			} else if (blobKey instanceof TransientBlobKey && result == RETURN_OKAY) {_				_				if (!blobServer.deleteInternal(jobId, (TransientBlobKey) blobKey)) {_					LOG.warn("DELETE operation failed for BLOB {}/{} from {}.", jobId,_						blobKey, clientSocket.getInetAddress())__				}_			}__		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}__	};handles,an,incoming,get,request,from,a,blob,client,p,transient,blob,files,are,deleted,after,a,successful,read,operation,by,the,client,note,that,we,do,not,enforce,atomicity,here,i,e,multiple,clients,reading,from,the,same,blob,may,still,succeed,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,final,file,blob,file,final,job,id,job,id,final,blob,key,blob,key,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,get,request,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,mode,blob,key,blob,key,read,from,input,stream,input,stream,check,argument,blob,key,instanceof,transient,blob,key,job,id,null,invalid,blob,addressing,for,permanent,blobs,if,log,is,debug,enabled,log,debug,received,get,request,for,blob,from,job,id,blob,key,client,socket,get,inet,address,blob,file,blob,server,get,storage,location,job,id,blob,key,catch,throwable,t,log,error,get,operation,from,failed,client,socket,get,inet,address,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,read,lock,lock,try,try,blob,server,get,file,internal,job,id,blob,key,blob,file,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,for,blob,from,job,id,blob,key,client,socket,get,inet,address,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,read,lock,unlock,int,result,input,stream,read,if,result,0,throw,new,eofexception,premature,end,of,get,request,else,if,blob,key,instanceof,transient,blob,key,result,if,blob,server,delete,internal,job,id,transient,blob,key,blob,key,log,warn,delete,operation,failed,for,blob,from,job,id,blob,key,client,socket,get,inet,address,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException;1507188807;Handles an incoming GET request from a BLOB client.__<p>Transient BLOB files are deleted after a successful read operation by the client. Note_that we do not enforce atomicity here, i.e. multiple clients reading from the same BLOB may_still succeed.__@param inputStream_the input stream to read incoming data from_@param outputStream_the output stream to send data back to the client_@param buf_an auxiliary buffer for data serialization/deserialization__@throws IOException_thrown if an I/O error occurs while reading/writing data from/to the respective streams;private void get(InputStream inputStream, OutputStream outputStream, byte[] buf) throws IOException {_		__		final File blobFile__		final JobID jobId__		final BlobKey blobKey___		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of GET request")__			}__			_			if (mode == JOB_UNRELATED_CONTENT) {_				jobId = null__			} else if (mode == JOB_RELATED_CONTENT) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing: " + mode + '.')__			}_			blobKey = BlobKey.readFromInputStream(inputStream)___			checkArgument(blobKey instanceof TransientBlobKey || jobId != null,_				"Invalid BLOB addressing for permanent BLOBs")___			if (LOG.isDebugEnabled()) {_				LOG.debug("Received GET request for BLOB {}/{} from {}.", jobId,_					blobKey, clientSocket.getInetAddress())__			}__			_			blobFile = blobServer.getStorageLocation(jobId, blobKey)___			_		}_		catch (Throwable t) {_			LOG.error("GET operation from {} failed.", clientSocket.getInetAddress(), t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__			return__		}__		try {__			readLock.lock()__			try {_				_				try {_					blobServer.getFileInternal(jobId, blobKey, blobFile)___					_					if (blobFile.length() > Integer.MAX_VALUE) {_						throw new IOException("BLOB size exceeds the maximum size (2 GB).")__					}__					outputStream.write(RETURN_OKAY)__				} catch (Throwable t) {_					LOG.error("GET operation failed for BLOB {}/{} from {}.", jobId,_						blobKey, clientSocket.getInetAddress(), t)__					try {_						writeErrorToStream(outputStream, t)__					} catch (IOException e) {_						_						_					}_					clientSocket.close()__					return__				}__				_				int blobLen = (int) blobFile.length()__				writeLength(blobLen, outputStream)___				try (FileInputStream fis = new FileInputStream(blobFile)) {_					int bytesRemaining = blobLen__					while (bytesRemaining > 0) {_						int read = fis.read(buf)__						if (read < 0) {_							throw new IOException("Premature end of BLOB file stream for " +_								blobFile.getAbsolutePath())__						}_						outputStream.write(buf, 0, read)__						bytesRemaining -= read__					}_				}_			} finally {_				readLock.unlock()__			}__			_			int result = inputStream.read()__			if (result < 0) {_				throw new EOFException("Premature end of GET request")__			} else if (blobKey instanceof TransientBlobKey && result == RETURN_OKAY) {_				_				if (!blobServer.deleteInternal(jobId, (TransientBlobKey) blobKey)) {_					LOG.warn("DELETE operation failed for BLOB {}/{} from {}.", jobId,_						blobKey, clientSocket.getInetAddress())__				}_			}__		} catch (SocketException e) {_			_			LOG.debug("Socket connection closed", e)__		} catch (Throwable t) {_			LOG.error("GET operation failed", t)__			clientSocket.close()__		}__	};handles,an,incoming,get,request,from,a,blob,client,p,transient,blob,files,are,deleted,after,a,successful,read,operation,by,the,client,note,that,we,do,not,enforce,atomicity,here,i,e,multiple,clients,reading,from,the,same,blob,may,still,succeed,param,input,stream,the,input,stream,to,read,incoming,data,from,param,output,stream,the,output,stream,to,send,data,back,to,the,client,param,buf,an,auxiliary,buffer,for,data,serialization,deserialization,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,writing,data,from,to,the,respective,streams;private,void,get,input,stream,input,stream,output,stream,output,stream,byte,buf,throws,ioexception,final,file,blob,file,final,job,id,job,id,final,blob,key,blob,key,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,get,request,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,mode,blob,key,blob,key,read,from,input,stream,input,stream,check,argument,blob,key,instanceof,transient,blob,key,job,id,null,invalid,blob,addressing,for,permanent,blobs,if,log,is,debug,enabled,log,debug,received,get,request,for,blob,from,job,id,blob,key,client,socket,get,inet,address,blob,file,blob,server,get,storage,location,job,id,blob,key,catch,throwable,t,log,error,get,operation,from,failed,client,socket,get,inet,address,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,try,read,lock,lock,try,try,blob,server,get,file,internal,job,id,blob,key,blob,file,if,blob,file,length,integer,throw,new,ioexception,blob,size,exceeds,the,maximum,size,2,gb,output,stream,write,catch,throwable,t,log,error,get,operation,failed,for,blob,from,job,id,blob,key,client,socket,get,inet,address,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close,return,int,blob,len,int,blob,file,length,write,length,blob,len,output,stream,try,file,input,stream,fis,new,file,input,stream,blob,file,int,bytes,remaining,blob,len,while,bytes,remaining,0,int,read,fis,read,buf,if,read,0,throw,new,ioexception,premature,end,of,blob,file,stream,for,blob,file,get,absolute,path,output,stream,write,buf,0,read,bytes,remaining,read,finally,read,lock,unlock,int,result,input,stream,read,if,result,0,throw,new,eofexception,premature,end,of,get,request,else,if,blob,key,instanceof,transient,blob,key,result,if,blob,server,delete,internal,job,id,transient,blob,key,blob,key,log,warn,delete,operation,failed,for,blob,from,job,id,blob,key,client,socket,get,inet,address,catch,socket,exception,e,log,debug,socket,connection,closed,e,catch,throwable,t,log,error,get,operation,failed,t,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream) throws IOException;1497603064;Handles an incoming DELETE request from a BLOB client.__@param inputStream The input stream to read the request from._@param outputStream The output stream to write the response to._@throws java.io.IOException Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream) throws IOException {__		try {_			int type = inputStream.read()__			if (type < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			if (type == CONTENT_ADDRESSABLE) {_				BlobKey key = BlobKey.readFromInputStream(inputStream)__				blobServer.delete(key)__			}_			else {_				throw new IOException("Unrecognized addressing type: " + type)__			}__			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,java,io,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,throws,ioexception,try,int,type,input,stream,read,if,type,0,throw,new,eofexception,premature,end,of,delete,request,if,type,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,server,delete,key,else,throw,new,ioexception,unrecognized,addressing,type,type,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream) throws IOException;1498061083;Handles an incoming DELETE request from a BLOB client.__@param inputStream_The input stream to read the request from._@param outputStream_The output stream to write the response to.__@throws IOException_Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream) throws IOException {__		try {_			final int mode = inputStream.read()___			if (mode < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			_			final JobID jobId__			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}_			BlobKey key = BlobKey.readFromInputStream(inputStream)___			blobServer.deleteInternal(jobId, key)___			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,throws,ioexception,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,delete,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,server,delete,internal,job,id,key,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream) throws IOException;1498580984;Handles an incoming DELETE request from a BLOB client.__@param inputStream_The input stream to read the request from._@param outputStream_The output stream to write the response to.__@throws IOException_Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream) throws IOException {__		try {_			final int mode = inputStream.read()___			if (mode < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			_			final JobID jobId__			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}_			BlobKey key = BlobKey.readFromInputStream(inputStream)___			blobServer.deleteInternal(jobId, key)___			outputStream.write(RETURN_OKAY)__		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,throws,ioexception,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,delete,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,blob,key,key,blob,key,read,from,input,stream,input,stream,blob,server,delete,internal,job,id,key,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
BlobServerConnection -> private void delete(InputStream inputStream, OutputStream outputStream) throws IOException;1499764760;Handles an incoming DELETE request from a BLOB client.__@param inputStream_The input stream to read the request from._@param outputStream_The output stream to write the response to.__@throws IOException_Thrown if an I/O error occurs while reading the request data from the input stream.;private void delete(InputStream inputStream, OutputStream outputStream) throws IOException {__		try {_			_			final int mode = inputStream.read()__			if (mode < 0) {_				throw new EOFException("Premature end of DELETE request")__			}__			final JobID jobId__			if (mode == CONTENT_NO_JOB) {_				jobId = null__			} else if (mode == CONTENT_FOR_JOB) {_				byte[] jidBytes = new byte[JobID.SIZE]__				readFully(inputStream, jidBytes, 0, JobID.SIZE, "JobID")__				jobId = JobID.fromByteArray(jidBytes)__			} else {_				throw new IOException("Unknown type of BLOB addressing.")__			}_			BlobKey key = BlobKey.readFromInputStream(inputStream)___			if (!blobServer.deleteInternal(jobId, key)) {_				LOG.error("DELETE operation failed")__				writeErrorToStream(outputStream, null)__			} else {_				outputStream.write(RETURN_OKAY)__			}_		}_		catch (Throwable t) {_			LOG.error("DELETE operation failed", t)__			try {_				writeErrorToStream(outputStream, t)__			}_			catch (IOException e) {_				_				_			}_			clientSocket.close()__		}_	};handles,an,incoming,delete,request,from,a,blob,client,param,input,stream,the,input,stream,to,read,the,request,from,param,output,stream,the,output,stream,to,write,the,response,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,request,data,from,the,input,stream;private,void,delete,input,stream,input,stream,output,stream,output,stream,throws,ioexception,try,final,int,mode,input,stream,read,if,mode,0,throw,new,eofexception,premature,end,of,delete,request,final,job,id,job,id,if,mode,job,id,null,else,if,mode,byte,jid,bytes,new,byte,job,id,size,read,fully,input,stream,jid,bytes,0,job,id,size,job,id,job,id,job,id,from,byte,array,jid,bytes,else,throw,new,ioexception,unknown,type,of,blob,addressing,blob,key,key,blob,key,read,from,input,stream,input,stream,if,blob,server,delete,internal,job,id,key,log,error,delete,operation,failed,write,error,to,stream,output,stream,null,else,output,stream,write,catch,throwable,t,log,error,delete,operation,failed,t,try,write,error,to,stream,output,stream,t,catch,ioexception,e,client,socket,close
