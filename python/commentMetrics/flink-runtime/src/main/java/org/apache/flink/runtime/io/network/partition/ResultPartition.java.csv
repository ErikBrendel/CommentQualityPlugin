# id;timestamp;commentText;codeText;commentWords;codeWords
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1427367086;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1427784999;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1430123107;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1431371621;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1432295874;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1433143315;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1452854660;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1465991918;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1468422989;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1472821521;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1475219249;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1477836028;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1478815184;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1478815615;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public void release(Throwable cause);1433143315;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1452854660;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1465991918;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1468422989;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1472821521;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1475219249;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1477836028;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1478815184;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1478815615;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1480624969;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1485269495;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1489149058;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1493298849;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1493302348;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1493724918;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1513102147;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1515161905;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1515510696;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1516285878;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1519039276;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1519039287;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1519039301;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1519308961;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1536571100;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1537385496;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1540301084;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void finish() throws IOException;1426697080;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1427367086;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1427367086;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1427784999;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1430123107;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1431371621;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1432295874;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1433143315;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1452854660;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1465991918;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1468422989;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1472821521;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1475219249;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1477836028;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1478815184;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1478815615;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1480624969;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1485269495;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1489149058;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1493298849;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1493302348;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1493724918;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1513102147;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1515161905;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1515510696;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1516285878;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1519039276;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1519039287;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1519039301;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1519308961;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1536571100;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1537385496;Finishes the result partition.__<p>After this operation, it is not possible to add further data to the result partition.__<p>For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1540301084;Finishes the result partition.__<p>After this operation, it is not possible to add further data to the result partition.__<p>For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> private void notifyPipelinedConsumers();1475219249;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1477836028;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1478815184;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1478815615;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1480624969;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1485269495;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1489149058;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1493298849;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1493302348;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1493724918;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1513102147;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1515161905;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1515510696;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1516285878;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1519039276;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1519039287;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1519039301;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1519308961;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1536571100;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1537385496;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1540301084;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1480624969;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1485269495;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1489149058;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1493298849;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1493302348;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public boolean getEagerlyDeployConsumers();1452854660;Returns whether consumers should be deployed eagerly (as soon as they_are registered at the result manager of the task manager).__@return Whether consumers should be deployed eagerly;public boolean getEagerlyDeployConsumers() {_		return eagerlyDeployConsumers__	};returns,whether,consumers,should,be,deployed,eagerly,as,soon,as,they,are,registered,at,the,result,manager,of,the,task,manager,return,whether,consumers,should,be,deployed,eagerly;public,boolean,get,eagerly,deploy,consumers,return,eagerly,deploy,consumers
ResultPartition -> public boolean getEagerlyDeployConsumers();1465991918;Returns whether consumers should be deployed eagerly (as soon as they_are registered at the result manager of the task manager).__@return Whether consumers should be deployed eagerly;public boolean getEagerlyDeployConsumers() {_		return eagerlyDeployConsumers__	};returns,whether,consumers,should,be,deployed,eagerly,as,soon,as,they,are,registered,at,the,result,manager,of,the,task,manager,return,whether,consumers,should,be,deployed,eagerly;public,boolean,get,eagerly,deploy,consumers,return,eagerly,deploy,consumers
ResultPartition -> public boolean getEagerlyDeployConsumers();1468422989;Returns whether consumers should be deployed eagerly (as soon as they_are registered at the result manager of the task manager).__@return Whether consumers should be deployed eagerly;public boolean getEagerlyDeployConsumers() {_		return eagerlyDeployConsumers__	};returns,whether,consumers,should,be,deployed,eagerly,as,soon,as,they,are,registered,at,the,result,manager,of,the,task,manager,return,whether,consumers,should,be,deployed,eagerly;public,boolean,get,eagerly,deploy,consumers,return,eagerly,deploy,consumers
ResultPartition -> public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException;1426697080;Returns the requested subpartition.;public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].getReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,get,subpartition,int,index,optional,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,get,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException;1427367086;Returns the requested subpartition.;public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].getReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,get,subpartition,int,index,optional,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,get,read,view,buffer,provider
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1426697080;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			ScheduleOrUpdateConsumers msg = new ScheduleOrUpdateConsumers(jobId, partitionId)___			Future<Object> futureResponse = Patterns.ask(networkEnvironment.getJobManager(), msg,_					networkEnvironment.getJobManagerTimeout())___			futureResponse.onFailure(new OnFailure() {_				@Override_				public void onFailure(Throwable failure) throws Throwable {_					LOG.error("Could not schedule or update consumers at the JobManager.", failure)___					_					FailTask failMsg = new FailTask(partitionId.getProducerId(),_							new RuntimeException("Could not schedule or update consumers at " +_									"the JobManager.", failure))___					networkEnvironment.getTaskManager().tell(failMsg, ActorRef.noSender())__				}_			}, AkkaUtils.globalExecutionContext())___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,schedule,or,update,consumers,msg,new,schedule,or,update,consumers,job,id,partition,id,future,object,future,response,patterns,ask,network,environment,get,job,manager,msg,network,environment,get,job,manager,timeout,future,response,on,failure,new,on,failure,override,public,void,on,failure,throwable,failure,throws,throwable,log,error,could,not,schedule,or,update,consumers,at,the,job,manager,failure,fail,task,fail,msg,new,fail,task,partition,id,get,producer,id,new,runtime,exception,could,not,schedule,or,update,consumers,at,the,job,manager,failure,network,environment,get,task,manager,tell,fail,msg,actor,ref,no,sender,akka,utils,global,execution,context,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1427367086;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1427367086;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1427784999;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1430123107;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1431371621;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1432295874;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1433143315;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1452854660;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1465991918;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1468422989;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1472821521;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1426697080;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() == getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1427367086;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() == getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1427367086;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1427784999;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1430123107;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1431371621;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1432295874;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1433143315;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1452854660;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1465991918;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1468422989;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1472821521;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1475219249;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1477836028;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1478815184;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1478815615;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1480624969;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1485269495;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1489149058;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1493298849;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1493302348;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1493724918;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1513102147;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1515161905;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1515510696;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1516285878;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1519039276;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1519039287;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1519039301;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1519308961;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1536571100;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1537385496;Registers a buffer pool with this result partition.__<p>There is one pool for each result partition, which is shared by all its sub partitions.__<p>The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1540301084;Registers a buffer pool with this result partition.__<p>There is one pool for each result partition, which is shared by all its sub partitions.__<p>The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)__	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1426697080;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1427367086;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1427367086;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1427784999;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1430123107;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1431371621;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1432295874;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1433143315;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1452854660;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1465991918;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1468422989;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1472821521;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1475219249;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1477836028;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1478815184;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1478815615;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1480624969;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1485269495;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1489149058;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1493298849;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1493302348;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1493724918;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> void pin();1426697080;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1427367086;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1427367086;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1427784999;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1430123107;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1431371621;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1432295874;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1433143315;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1452854660;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1465991918;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1468422989;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1472821521;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1475219249;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1477836028;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1478815184;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1478815615;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1480624969;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1485269495;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1489149058;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1493298849;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1493302348;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1493724918;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1513102147;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1515161905;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1515510696;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1516285878;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1519039276;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1519039287;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1519039301;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1519308961;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1536571100;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1537385496;Pins the result partition.__<p>The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1540301084;Pins the result partition.__<p>The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> public void deployConsumers();1472821521;Deploys consumers if eager deployment is activated;public void deployConsumers() {_		if (doEagerDeployment) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)__		}_	};deploys,consumers,if,eager,deployment,is,activated;public,void,deploy,consumers,if,do,eager,deployment,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id
ResultPartition -> public void deployConsumers();1475219249;Deploys consumers if eager deployment is activated;public void deployConsumers() {_		if (doEagerDeployment) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)__		}_	};deploys,consumers,if,eager,deployment,is,activated;public,void,deploy,consumers,if,do,eager,deployment,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions
ResultPartition -> public void deployConsumers();1477836028;Deploys consumers if eager deployment is activated;public void deployConsumers() {_		if (doEagerDeployment) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)__		}_	};deploys,consumers,if,eager,deployment,is,activated;public,void,deploy,consumers,if,do,eager,deployment,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions
ResultPartition -> public long getTotalNumberOfBytes();1493302348;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public long getTotalNumberOfBytes();1493724918;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public long getTotalNumberOfBytes();1513102147;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public long getTotalNumberOfBytes();1515161905;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public ResultPartitionType getPartitionType();1489149058;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1493298849;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1493302348;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1493724918;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1513102147;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1515161905;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1515510696;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1516285878;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1519039276;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1519039287;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1519039301;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1519308961;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1536571100;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1537385496;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1540301084;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public int getTotalNumberOfBuffers();1493302348;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> public int getTotalNumberOfBuffers();1493724918;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> public int getTotalNumberOfBuffers();1513102147;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> public int getTotalNumberOfBuffers();1515161905;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1426697080;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			networkEnvironment.getPartitionManager().onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,network,environment,get,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1427367086;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1427367086;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1427784999;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1430123107;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1431371621;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1432295874;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1433143315;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1452854660;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1465991918;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1468422989;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1472821521;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1475219249;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1477836028;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1478815184;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1478815615;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1480624969;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1485269495;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1489149058;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1493298849;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1493302348;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1493724918;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1513102147;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1515161905;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1515510696;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1516285878;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1519039276;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1519039287;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1519039301;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1519308961;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1536571100;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1537385496;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1540301084;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> public void release();1426697080;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1427367086;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1427367086;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1427784999;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1430123107;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owner.getTaskNameWithSubtasks(), this)___			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,owner,get,task,name,with,subtasks,this,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release();1431371621;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release();1432295874;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1426697080;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1427367086;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1427367086;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1427784999;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1430123107;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1431371621;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1432295874;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1433143315;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1452854660;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1465991918;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1468422989;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1472821521;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1475219249;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1477836028;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1478815184;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1478815615;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1480624969;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1485269495;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1489149058;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1493298849;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1493302348;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1493724918;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1513102147;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1515161905;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1515510696;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1516285878;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1519039276;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1519039287;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1519039301;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1519308961;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1536571100;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1537385496;Releases buffers held by this result partition.__<p>This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1540301084;Releases buffers held by this result partition.__<p>This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1493724918;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1513102147;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1515161905;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1515510696;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1516285878;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1519039276;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1519039287;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1519039301;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1519308961;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1536571100;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1537385496;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1540301084;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
