# id;timestamp;commentText;codeText;commentWords;codeWords
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1426258431;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1427278828;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1429887507;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1430620863;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1431354895;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1432817911;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1452707135;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1465394479;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		return subpartitions[index].createReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,return,subpartitions,index,create,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1468422911;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1472628826;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1475158770;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1477468111;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1478704042;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException;1478712306;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,log,debug,created,read,view,return,read,view
ResultPartition -> public void release(Throwable cause);1432817911;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1452707135;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1465394479;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1468422911;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1472628826;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1475158770;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1477468111;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1478704042;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1478712306;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1479407816;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1480323569;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1484573482;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1486734789;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1487684105;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1493194734;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1511445501;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1512552326;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1515162520;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1515534998;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1516267343;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1516267728;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1516801403;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1518702099;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1536570841;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1536830955;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release(Throwable cause);1539141061;Releases the result partition.;public void release(Throwable cause) {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			if (cause != null) {_				this.cause = cause__			}__			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					subpartition.release()__				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,throwable,cause,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,if,cause,null,this,cause,cause,for,result,subpartition,subpartition,subpartitions,try,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void finish() throws IOException;1420560668;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1426258431;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1427119168;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1427278828;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1429887507;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1430620863;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1431354895;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1432817911;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1452707135;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1465394479;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1468422911;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1472628826;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1475158770;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1477468111;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1478704042;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1478712306;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1479407816;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1480323569;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1484573482;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1486734789;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1487684105;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1493194734;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1511445501;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1512552326;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				synchronized (subpartition) {_					subpartition.finish()__				}_			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,synchronized,subpartition,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1515162520;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1515534998;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1516267343;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1516267728;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1516801403;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1518702099;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1536570841;Finishes the result partition.__<p> After this operation, it is not possible to add further data to the result partition.__<p> For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1536830955;Finishes the result partition.__<p>After this operation, it is not possible to add further data to the result partition.__<p>For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> public void finish() throws IOException;1539141061;Finishes the result partition.__<p>After this operation, it is not possible to add further data to the result partition.__<p>For BLOCKING results, this will trigger the deployment of consuming tasks.;public void finish() throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			for (ResultSubpartition subpartition : subpartitions) {_				subpartition.finish()__			}__			success = true__		}_		finally {_			if (success) {_				isFinished = true___				notifyPipelinedConsumers()__			}_		}_	};finishes,the,result,partition,p,after,this,operation,it,is,not,possible,to,add,further,data,to,the,result,partition,p,for,blocking,results,this,will,trigger,the,deployment,of,consuming,tasks;public,void,finish,throws,ioexception,boolean,success,false,try,check,in,produce,state,for,result,subpartition,subpartition,subpartitions,subpartition,finish,success,true,finally,if,success,is,finished,true,notify,pipelined,consumers
ResultPartition -> private void notifyPipelinedConsumers();1475158770;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1477468111;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1478704042;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1478712306;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1479407816;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1480323569;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1484573482;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1486734789;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1487684105;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1493194734;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1511445501;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1512552326;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1515162520;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1515534998;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1516267343;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1516267728;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1516801403;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1518702099;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1536570841;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1536830955;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers();1539141061;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() {_		if (sendScheduleOrUpdateConsumersMessage && !hasNotifiedPipelinedConsumers && partitionType.isPipelined()) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,if,send,schedule,or,update,consumers,message,has,notified,pipelined,consumers,partition,type,is,pipelined,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions,has,notified,pipelined,consumers,true
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1479407816;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1480323569;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1484573482;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1486734789;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException;1487684105;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferProvider bufferProvider, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(bufferProvider, availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,provider,buffer,provider,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,buffer,provider,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public boolean getEagerlyDeployConsumers();1452707135;Returns whether consumers should be deployed eagerly (as soon as they_are registered at the result manager of the task manager).__@return Whether consumers should be deployed eagerly;public boolean getEagerlyDeployConsumers() {_		return eagerlyDeployConsumers__	};returns,whether,consumers,should,be,deployed,eagerly,as,soon,as,they,are,registered,at,the,result,manager,of,the,task,manager,return,whether,consumers,should,be,deployed,eagerly;public,boolean,get,eagerly,deploy,consumers,return,eagerly,deploy,consumers
ResultPartition -> public boolean getEagerlyDeployConsumers();1465394479;Returns whether consumers should be deployed eagerly (as soon as they_are registered at the result manager of the task manager).__@return Whether consumers should be deployed eagerly;public boolean getEagerlyDeployConsumers() {_		return eagerlyDeployConsumers__	};returns,whether,consumers,should,be,deployed,eagerly,as,soon,as,they,are,registered,at,the,result,manager,of,the,task,manager,return,whether,consumers,should,be,deployed,eagerly;public,boolean,get,eagerly,deploy,consumers,return,eagerly,deploy,consumers
ResultPartition -> public boolean getEagerlyDeployConsumers();1468422911;Returns whether consumers should be deployed eagerly (as soon as they_are registered at the result manager of the task manager).__@return Whether consumers should be deployed eagerly;public boolean getEagerlyDeployConsumers() {_		return eagerlyDeployConsumers__	};returns,whether,consumers,should,be,deployed,eagerly,as,soon,as,they,are,registered,at,the,result,manager,of,the,task,manager,return,whether,consumers,should,be,deployed,eagerly;public,boolean,get,eagerly,deploy,consumers,return,eagerly,deploy,consumers
ResultPartition -> public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException;1420560668;Returns the requested subpartition.;public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].getReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,get,subpartition,int,index,optional,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,get,read,view,buffer,provider
ResultPartition -> public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException;1427119168;Returns the requested subpartition.;public ResultSubpartitionView getSubpartition(int index, Optional<BufferProvider> bufferProvider) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		return subpartitions[index].getReadView(bufferProvider)__	};returns,the,requested,subpartition;public,result,subpartition,view,get,subpartition,int,index,optional,buffer,provider,buffer,provider,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,return,subpartitions,index,get,read,view,buffer,provider
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1420560668;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			ScheduleOrUpdateConsumers msg = new ScheduleOrUpdateConsumers(jobId, partitionId)___			Future<Object> futureResponse = Patterns.ask(networkEnvironment.getJobManager(), msg,_					networkEnvironment.getJobManagerTimeout())___			futureResponse.onFailure(new OnFailure() {_				@Override_				public void onFailure(Throwable failure) throws Throwable {_					LOG.error("Could not schedule or update consumers at the JobManager.", failure)___					_					FailTask failMsg = new FailTask(partitionId.getProducerId(),_							new RuntimeException("Could not schedule or update consumers at " +_									"the JobManager.", failure))___					networkEnvironment.getTaskManager().tell(failMsg, ActorRef.noSender())__				}_			}, AkkaUtils.globalExecutionContext())___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,schedule,or,update,consumers,msg,new,schedule,or,update,consumers,job,id,partition,id,future,object,future,response,patterns,ask,network,environment,get,job,manager,msg,network,environment,get,job,manager,timeout,future,response,on,failure,new,on,failure,override,public,void,on,failure,throwable,failure,throws,throwable,log,error,could,not,schedule,or,update,consumers,at,the,job,manager,failure,fail,task,fail,msg,new,fail,task,partition,id,get,producer,id,new,runtime,exception,could,not,schedule,or,update,consumers,at,the,job,manager,failure,network,environment,get,task,manager,tell,fail,msg,actor,ref,no,sender,akka,utils,global,execution,context,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1426258431;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1427119168;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1427278828;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1429887507;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1430620863;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1431354895;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1432817911;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1452707135;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1465394479;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1468422911;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> private void notifyPipelinedConsumers() throws IOException;1472628826;Notifies pipelined consumers of this result partition once.;private void notifyPipelinedConsumers() throws IOException {_		if (partitionType.isPipelined() && !hasNotifiedPipelinedConsumers) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)___			hasNotifiedPipelinedConsumers = true__		}_	};notifies,pipelined,consumers,of,this,result,partition,once;private,void,notify,pipelined,consumers,throws,ioexception,if,partition,type,is,pipelined,has,notified,pipelined,consumers,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,has,notified,pipelined,consumers,true
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1420560668;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() == getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1426258431;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1427119168;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() == getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1427278828;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1429887507;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1430620863;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1431354895;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1432817911;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1452707135;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1465394479;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1468422911;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1472628826;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1475158770;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1477468111;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1478704042;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1478712306;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1479407816;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1480323569;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1484573482;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1486734789;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1487684105;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1493194734;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1511445501;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1512552326;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1515162520;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1515534998;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1516267343;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1516267728;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1516801403;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1518702099;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1536570841;Registers a buffer pool with this result partition._<p>_There is one pool for each result partition, which is shared by all its sub partitions._<p>_The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1536830955;Registers a buffer pool with this result partition.__<p>There is one pool for each result partition, which is shared by all its sub partitions.__<p>The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)___		_		_		if (!partitionType.hasBackPressure()) {_			bufferPool.setBufferPoolOwner(this)__		}_	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool,if,partition,type,has,back,pressure,buffer,pool,set,buffer,pool,owner,this
ResultPartition -> public void registerBufferPool(BufferPool bufferPool);1539141061;Registers a buffer pool with this result partition.__<p>There is one pool for each result partition, which is shared by all its sub partitions.__<p>The pool is registered with the partition *after* it as been constructed in order to conform_to the life-cycle of task registrations in the {@link TaskManager}.;public void registerBufferPool(BufferPool bufferPool) {_		checkArgument(bufferPool.getNumberOfRequiredMemorySegments() >= getNumberOfSubpartitions(),_				"Bug in result partition setup logic: Buffer pool has not enough guaranteed buffers for this result partition.")___		checkState(this.bufferPool == null, "Bug in result partition setup logic: Already registered buffer pool.")___		this.bufferPool = checkNotNull(bufferPool)__	};registers,a,buffer,pool,with,this,result,partition,p,there,is,one,pool,for,each,result,partition,which,is,shared,by,all,its,sub,partitions,p,the,pool,is,registered,with,the,partition,after,it,as,been,constructed,in,order,to,conform,to,the,life,cycle,of,task,registrations,in,the,link,task,manager;public,void,register,buffer,pool,buffer,pool,buffer,pool,check,argument,buffer,pool,get,number,of,required,memory,segments,get,number,of,subpartitions,bug,in,result,partition,setup,logic,buffer,pool,has,not,enough,guaranteed,buffers,for,this,result,partition,check,state,this,buffer,pool,null,bug,in,result,partition,setup,logic,already,registered,buffer,pool,this,buffer,pool,check,not,null,buffer,pool
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1420560668;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1426258431;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1427119168;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1427278828;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1429887507;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1430620863;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1431354895;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1432817911;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1452707135;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1465394479;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1468422911;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1472628826;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1475158770;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1477468111;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1478704042;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1478712306;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1479407816;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1480323569;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1484573482;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1486734789;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1487684105;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> public void add(Buffer buffer, int subpartitionIndex) throws IOException;1493194734;Adds a buffer to the subpartition with the given index.__<p> For PIPELINED results, this will trigger the deployment of consuming tasks after the_first buffer has been added.;public void add(Buffer buffer, int subpartitionIndex) throws IOException {_		boolean success = false___		try {_			checkInProduceState()___			final ResultSubpartition subpartition = subpartitions[subpartitionIndex]___			synchronized (subpartition) {_				success = subpartition.add(buffer)___				_				totalNumberOfBuffers++__				totalNumberOfBytes += buffer.getSize()__			}_		}_		finally {_			if (success) {_				notifyPipelinedConsumers()__			}_			else {_				buffer.recycle()__			}_		}_	};adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,results,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;public,void,add,buffer,buffer,int,subpartition,index,throws,ioexception,boolean,success,false,try,check,in,produce,state,final,result,subpartition,subpartition,subpartitions,subpartition,index,synchronized,subpartition,success,subpartition,add,buffer,total,number,of,buffers,total,number,of,bytes,buffer,get,size,finally,if,success,notify,pipelined,consumers,else,buffer,recycle
ResultPartition -> void pin();1420560668;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1426258431;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1427119168;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1427278828;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1429887507;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1430620863;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1431354895;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1432817911;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1452707135;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1465394479;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1468422911;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1472628826;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1475158770;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1477468111;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1478704042;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1478712306;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1479407816;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1480323569;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1484573482;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1486734789;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1487684105;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1493194734;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1511445501;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1512552326;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1515162520;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1515534998;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1516267343;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1516267728;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1516801403;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1518702099;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1536570841;Pins the result partition.__<p> The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1536830955;Pins the result partition.__<p>The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> void pin();1539141061;Pins the result partition.__<p>The partition can only be released after each subpartition has been consumed once per pin_operation.;void pin() {_		while (true) {_			int refCnt = pendingReferences.get()___			if (refCnt >= 0) {_				if (pendingReferences.compareAndSet(refCnt, refCnt + subpartitions.length)) {_					break__				}_			}_			else {_				throw new IllegalStateException("Released.")__			}_		}_	};pins,the,result,partition,p,the,partition,can,only,be,released,after,each,subpartition,has,been,consumed,once,per,pin,operation;void,pin,while,true,int,ref,cnt,pending,references,get,if,ref,cnt,0,if,pending,references,compare,and,set,ref,cnt,ref,cnt,subpartitions,length,break,else,throw,new,illegal,state,exception,released
ResultPartition -> public void deployConsumers();1472628826;Deploys consumers if eager deployment is activated;public void deployConsumers() {_		if (doEagerDeployment) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId)__		}_	};deploys,consumers,if,eager,deployment,is,activated;public,void,deploy,consumers,if,do,eager,deployment,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id
ResultPartition -> public void deployConsumers();1475158770;Deploys consumers if eager deployment is activated;public void deployConsumers() {_		if (doEagerDeployment) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)__		}_	};deploys,consumers,if,eager,deployment,is,activated;public,void,deploy,consumers,if,do,eager,deployment,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions
ResultPartition -> public void deployConsumers();1477468111;Deploys consumers if eager deployment is activated;public void deployConsumers() {_		if (doEagerDeployment) {_			partitionConsumableNotifier.notifyPartitionConsumable(jobId, partitionId, taskActions)__		}_	};deploys,consumers,if,eager,deployment,is,activated;public,void,deploy,consumers,if,do,eager,deployment,partition,consumable,notifier,notify,partition,consumable,job,id,partition,id,task,actions
ResultPartition -> public long getTotalNumberOfBytes();1487684105;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public long getTotalNumberOfBytes();1493194734;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public long getTotalNumberOfBytes();1511445501;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public long getTotalNumberOfBytes();1512552326;Returns the total size of processed network buffers since initialization.__@return overall size of processed network buffers;public long getTotalNumberOfBytes() {_		return totalNumberOfBytes__	};returns,the,total,size,of,processed,network,buffers,since,initialization,return,overall,size,of,processed,network,buffers;public,long,get,total,number,of,bytes,return,total,number,of,bytes
ResultPartition -> public ResultPartitionType getPartitionType();1479407816;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1486734789;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1487684105;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1493194734;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1511445501;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1512552326;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1515162520;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1515534998;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1516267343;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1516267728;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1516801403;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1518702099;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1536570841;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1536830955;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public ResultPartitionType getPartitionType();1539141061;Returns the type of this result partition.__@return result partition type;public ResultPartitionType getPartitionType() {_		return partitionType__	};returns,the,type,of,this,result,partition,return,result,partition,type;public,result,partition,type,get,partition,type,return,partition,type
ResultPartition -> public int getTotalNumberOfBuffers();1487684105;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> public int getTotalNumberOfBuffers();1493194734;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> public int getTotalNumberOfBuffers();1511445501;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> public int getTotalNumberOfBuffers();1512552326;Returns the total number of processed network buffers since initialization.__@return overall number of processed network buffers;public int getTotalNumberOfBuffers() {_		return totalNumberOfBuffers__	};returns,the,total,number,of,processed,network,buffers,since,initialization,return,overall,number,of,processed,network,buffers;public,int,get,total,number,of,buffers,return,total,number,of,buffers
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1420560668;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			networkEnvironment.getPartitionManager().onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,network,environment,get,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1426258431;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1427119168;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1427278828;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1429887507;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1430620863;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1431354895;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1432817911;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1452707135;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1465394479;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1468422911;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1472628826;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1475158770;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1477468111;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1478704042;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1478712306;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1479407816;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1480323569;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1484573482;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1486734789;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1487684105;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1493194734;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1511445501;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1512552326;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1515162520;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1515534998;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1516267343;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1516267728;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1516801403;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1518702099;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1536570841;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1536830955;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> void onConsumedSubpartition(int subpartitionIndex);1539141061;Notification when a subpartition is released.;void onConsumedSubpartition(int subpartitionIndex) {__		if (isReleased.get()) {_			return__		}__		int refCnt = pendingReferences.decrementAndGet()___		if (refCnt == 0) {_			partitionManager.onConsumedPartition(this)__		}_		else if (refCnt < 0) {_			throw new IllegalStateException("All references released.")__		}__		LOG.debug("{}: Received release notification for subpartition {} (reference count now at: {}).",_				this, subpartitionIndex, pendingReferences)__	};notification,when,a,subpartition,is,released;void,on,consumed,subpartition,int,subpartition,index,if,is,released,get,return,int,ref,cnt,pending,references,decrement,and,get,if,ref,cnt,0,partition,manager,on,consumed,partition,this,else,if,ref,cnt,0,throw,new,illegal,state,exception,all,references,released,log,debug,received,release,notification,for,subpartition,reference,count,now,at,this,subpartition,index,pending,references
ResultPartition -> public void release();1420560668;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1426258431;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1427119168;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1427278828;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("Releasing {}", this)___			try {_				for (ResultSubpartition subpartition : subpartitions) {_					try {_						synchronized (subpartition) {_							subpartition.release()__						}_					}_					_					catch (Throwable t) {_						LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__					}_				}_			}_			finally {_				if (bufferPool != null) {_					bufferPool.lazyDestroy()__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,this,try,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t,finally,if,buffer,pool,null,buffer,pool,lazy,destroy
ResultPartition -> public void release();1429887507;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owner.getTaskNameWithSubtasks(), this)___			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,owner,get,task,name,with,subtasks,this,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release();1430620863;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> public void release();1431354895;Releases the result partition.;public void release() {_		if (isReleased.compareAndSet(false, true)) {_			LOG.debug("{}: Releasing {}.", owningTaskName, this)___			_			for (ResultSubpartition subpartition : subpartitions) {_				try {_					synchronized (subpartition) {_						subpartition.release()__					}_				}_				_				catch (Throwable t) {_					LOG.error("Error during release of result subpartition: " + t.getMessage(), t)__				}_			}_		}_	};releases,the,result,partition;public,void,release,if,is,released,compare,and,set,false,true,log,debug,releasing,owning,task,name,this,for,result,subpartition,subpartition,subpartitions,try,synchronized,subpartition,subpartition,release,catch,throwable,t,log,error,error,during,release,of,result,subpartition,t,get,message,t
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1420560668;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1426258431;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1427119168;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1427278828;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1429887507;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1430620863;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1431354895;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1432817911;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1452707135;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1465394479;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1468422911;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1472628826;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1475158770;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1477468111;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1478704042;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1478712306;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1479407816;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1480323569;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1484573482;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1486734789;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1487684105;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1493194734;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1511445501;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1512552326;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1515162520;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1515534998;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1516267343;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1516267728;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1516801403;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1518702099;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1536570841;Releases buffers held by this result partition.__<p> This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1536830955;Releases buffers held by this result partition.__<p>This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> @Override 	public void releaseMemory(int toRelease) throws IOException;1539141061;Releases buffers held by this result partition.__<p>This is a callback from the buffer pool, which is registered for result partitions, which_are back pressure-free.;@Override_	public void releaseMemory(int toRelease) throws IOException {_		checkArgument(toRelease > 0)___		for (ResultSubpartition subpartition : subpartitions) {_			toRelease -= subpartition.releaseMemory()___			_			if (toRelease <= 0) {_				break__			}_		}_	};releases,buffers,held,by,this,result,partition,p,this,is,a,callback,from,the,buffer,pool,which,is,registered,for,result,partitions,which,are,back,pressure,free;override,public,void,release,memory,int,to,release,throws,ioexception,check,argument,to,release,0,for,result,subpartition,subpartition,subpartitions,to,release,subpartition,release,memory,if,to,release,0,break
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1493194734;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1511445501;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1512552326;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1515162520;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1515534998;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1516267343;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1516267728;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1516801403;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1518702099;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1536570841;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1536830955;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
ResultPartition -> public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException;1539141061;Returns the requested subpartition.;public ResultSubpartitionView createSubpartitionView(int index, BufferAvailabilityListener availabilityListener) throws IOException {_		int refCnt = pendingReferences.get()___		checkState(refCnt != -1, "Partition released.")__		checkState(refCnt > 0, "Partition not pinned.")___		checkElementIndex(index, subpartitions.length, "Subpartition not found.")___		ResultSubpartitionView readView = subpartitions[index].createReadView(availabilityListener)___		LOG.debug("Created {}", readView)___		return readView__	};returns,the,requested,subpartition;public,result,subpartition,view,create,subpartition,view,int,index,buffer,availability,listener,availability,listener,throws,ioexception,int,ref,cnt,pending,references,get,check,state,ref,cnt,1,partition,released,check,state,ref,cnt,0,partition,not,pinned,check,element,index,index,subpartitions,length,subpartition,not,found,result,subpartition,view,read,view,subpartitions,index,create,read,view,availability,listener,log,debug,created,read,view,return,read,view
