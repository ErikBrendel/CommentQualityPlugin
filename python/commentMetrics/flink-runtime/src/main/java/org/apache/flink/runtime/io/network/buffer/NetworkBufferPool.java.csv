# id;timestamp;commentText;codeText;commentWords;codeWords
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1421050512;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " + requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).", allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1425490836;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " + requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).", allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1426200616;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " +_					requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1426697080;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " +_					requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1427733175;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length " + numberOfSegmentsToAllocate)__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + ").")__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1511516912;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530683488;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530683488;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530683488;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530683488;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530683488;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1538389013;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(MemorySegmentFactory.allocateUnpooledOffHeapMemory(segmentSize, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,memory,segment,factory,allocate,unpooled,off,heap,memory,segment,size,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1540301084;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(MemorySegmentFactory.allocateUnpooledOffHeapMemory(segmentSize, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,memory,segment,factory,allocate,unpooled,off,heap,memory,segment,size,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public void destroyAllBufferPools();1427733175;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1441738685;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1442412963;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1465991918;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1489060856;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1489149058;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1489149058;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1491500150;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1494092429;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1507316227;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1507647199;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1511516912;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530683488;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530683488;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530683488;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530683488;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530683488;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1538389013;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1540301084;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1441738685;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1442412963;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1465991918;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1489060856;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1489149058;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1489149058;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1491500150;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1494092429;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1507316227;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1507647199;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
