# id;timestamp;commentText;codeText;commentWords;codeWords
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1412761231;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " + requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).", allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1420560668;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " +_					requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1425490701;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " + requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).", allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1426200616;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize__		this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)___		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int requiredMb = (numberOfSegmentsToAllocate * segmentSize) >> 20__			int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20__			int missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for GlobalBufferPool (required (Mb): " +_					requiredMb + ", allocated (Mb): " + allocatedMb + ", missing (Mb): " + missingMb + ").")__		}__		int allocatedMb = ((availableMemorySegments.size()) * segmentSize) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,required,mb,number,of,segments,to,allocate,segment,size,20,int,allocated,mb,available,memory,segments,size,segment,size,20,int,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,global,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,int,allocated,mb,available,memory,segments,size,segment,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1427733175;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length " + numberOfSegmentsToAllocate)__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(new MemorySegment(new byte[segmentSize]))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + ").")__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,new,memory,segment,new,byte,segment,size,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1501586640;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {_		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530525047;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530525069;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530528160;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530602770;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1530629003;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__				availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1538014862;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(MemorySegmentFactory.allocateUnpooledOffHeapMemory(segmentSize, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,memory,segment,factory,allocate,unpooled,off,heap,memory,segment,size,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize);1539141061;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize) {__		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_				availableMemorySegments.add(MemorySegmentFactory.allocateUnpooledOffHeapMemory(segmentSize, null))__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,for,int,i,0,i,number,of,segments,to,allocate,i,available,memory,segments,add,memory,segment,factory,allocate,unpooled,off,heap,memory,segment,size,null,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public void destroyAllBufferPools();1427733175;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1440967006;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1442236043;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1465394479;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, boolean)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || managedBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,boolean;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,managed,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1486734789;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1486739468;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1489145117;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1491385557;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1491482512;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1501586640;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1501666494;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1502098277;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530525047;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530525069;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530528160;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530602770;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1530629003;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1538014862;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void destroyAllBufferPools();1539141061;Destroys all buffer pools that allocate their buffers from this_buffer pool (created via {@link #createBufferPool(int, int)}).;public void destroyAllBufferPools() {_		synchronized (factoryLock) {_			_			LocalBufferPool[] poolsCopy = allBufferPools.toArray(new LocalBufferPool[allBufferPools.size()])___			for (LocalBufferPool pool : poolsCopy) {_				pool.lazyDestroy()__			}__			_			if (allBufferPools.size() > 0 || numTotalRequiredBuffers > 0) {_				throw new IllegalStateException("NetworkBufferPool is not empty after destroying all LocalBufferPools")__			}_		}_	};destroys,all,buffer,pools,that,allocate,their,buffers,from,this,buffer,pool,created,via,link,create,buffer,pool,int,int;public,void,destroy,all,buffer,pools,synchronized,factory,lock,local,buffer,pool,pools,copy,all,buffer,pools,to,array,new,local,buffer,pool,all,buffer,pools,size,for,local,buffer,pool,pool,pools,copy,pool,lazy,destroy,if,all,buffer,pools,size,0,num,total,required,buffers,0,throw,new,illegal,state,exception,network,buffer,pool,is,not,empty,after,destroying,all,local,buffer,pools
NetworkBufferPool -> public void recycle(MemorySegment segment);1412761231;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1412761231;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1420560668;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1420560668;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1425490701;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1425490701;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1426200616;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1426200616;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1427733175;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1427733175;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1440967006;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1440967006;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1442236043;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1442236043;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1465394479;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1465394479;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1486734789;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1486734789;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1486739468;This is not safe with regard to destroy calls, but it does not hurt, because destroy happens;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};this,is,not,safe,with,regard,to,destroy,calls,but,it,does,not,hurt,because,destroy,happens;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> public void recycle(MemorySegment segment);1486739468;only once at clean up time (task manager shutdown).;public void recycle(MemorySegment segment) {_		availableMemorySegments.add(segment)__	};only,once,at,clean,up,time,task,manager,shutdown;public,void,recycle,memory,segment,segment,available,memory,segments,add,segment
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1412761231;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1420560668;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1425490701;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1426200616;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1427733175;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1440967006;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1442236043;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1465394479;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		int numManagedBufferPools = managedBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : managedBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,int,num,managed,buffer,pools,managed,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,managed,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1486734789;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		int totalCapacity = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		int memorySegmentsToDistribute = Math.min(numAvailableMemorySegment, totalCapacity)___		int totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			int mySize = memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment__			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,int,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,int,memory,segments,to,distribute,math,min,num,available,memory,segment,total,capacity,int,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,int,my,size,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1486739468;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		int numManagedBufferPools = allBufferPools.size()___		if (numManagedBufferPools == 0) {_			return_ _		}__		_		int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		_		int numExcessBuffersPerPool = numAvailableMemorySegment / numManagedBufferPools___		_		int numLeftoverBuffers = numAvailableMemorySegment % numManagedBufferPools___		int bufferPoolIndex = 0___		for (LocalBufferPool bufferPool : allBufferPools) {_			int leftoverBuffers = bufferPoolIndex++ < numLeftoverBuffers ? 1 : 0___			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + numExcessBuffersPerPool + leftoverBuffers)__		}_	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,int,num,managed,buffer,pools,all,buffer,pools,size,if,num,managed,buffer,pools,0,return,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,int,num,excess,buffers,per,pool,num,available,memory,segment,num,managed,buffer,pools,int,num,leftover,buffers,num,available,memory,segment,num,managed,buffer,pools,int,buffer,pool,index,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,leftover,buffers,buffer,pool,index,num,leftover,buffers,1,0,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,num,excess,buffers,per,pool,leftover,buffers
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1489145117;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1491385557;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1491482512;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1501586640;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1501666494;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1502098277;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1530525047;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1530525069;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1530528160;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1530602770;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1530629003;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1538014862;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> private void redistributeBuffers() throws IOException;1539141061;Must be called from synchronized block;private void redistributeBuffers() throws IOException {_		assert Thread.holdsLock(factoryLock)___		_		final int numAvailableMemorySegment = totalNumberOfMemorySegments - numTotalRequiredBuffers___		if (numAvailableMemorySegment == 0) {_			_			for (LocalBufferPool bufferPool : allBufferPools) {_				bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments())__			}_			return__		}__		__		long totalCapacity = 0_ __		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()__			totalCapacity += Math.min(numAvailableMemorySegment, excessMax)__		}__		_		if (totalCapacity == 0) {_			return_ _		}__		_		_		_		final int memorySegmentsToDistribute = MathUtils.checkedDownCast(_				Math.min(numAvailableMemorySegment, totalCapacity))___		long totalPartsUsed = 0_ _		int numDistributedMemorySegment = 0__		for (LocalBufferPool bufferPool : allBufferPools) {_			int excessMax = bufferPool.getMaxNumberOfMemorySegments() -_				bufferPool.getNumberOfRequiredMemorySegments()___			_			if (excessMax == 0) {_				continue__			}__			totalPartsUsed += Math.min(numAvailableMemorySegment, excessMax)___			_			_			_			final int mySize = MathUtils.checkedDownCast(_					memorySegmentsToDistribute * totalPartsUsed / totalCapacity - numDistributedMemorySegment)___			numDistributedMemorySegment += mySize__			bufferPool.setNumBuffers(bufferPool.getNumberOfRequiredMemorySegments() + mySize)__		}__		assert (totalPartsUsed == totalCapacity)__		assert (numDistributedMemorySegment == memorySegmentsToDistribute)__	};must,be,called,from,synchronized,block;private,void,redistribute,buffers,throws,ioexception,assert,thread,holds,lock,factory,lock,final,int,num,available,memory,segment,total,number,of,memory,segments,num,total,required,buffers,if,num,available,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,return,long,total,capacity,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,total,capacity,math,min,num,available,memory,segment,excess,max,if,total,capacity,0,return,final,int,memory,segments,to,distribute,math,utils,checked,down,cast,math,min,num,available,memory,segment,total,capacity,long,total,parts,used,0,int,num,distributed,memory,segment,0,for,local,buffer,pool,buffer,pool,all,buffer,pools,int,excess,max,buffer,pool,get,max,number,of,memory,segments,buffer,pool,get,number,of,required,memory,segments,if,excess,max,0,continue,total,parts,used,math,min,num,available,memory,segment,excess,max,final,int,my,size,math,utils,checked,down,cast,memory,segments,to,distribute,total,parts,used,total,capacity,num,distributed,memory,segment,num,distributed,memory,segment,my,size,buffer,pool,set,num,buffers,buffer,pool,get,number,of,required,memory,segments,my,size,assert,total,parts,used,total,capacity,assert,num,distributed,memory,segment,memory,segments,to,distribute
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1440967006;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1442236043;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1465394479;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1486734789;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1486739468;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1489145117;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1491385557;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1491482512;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<MemorySegment>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,memory,segment,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1501666494;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
NetworkBufferPool -> public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType);1502098277;Allocates all {@link MemorySegment} instances managed by this pool.;public NetworkBufferPool(int numberOfSegmentsToAllocate, int segmentSize, MemoryType memoryType) {_		checkNotNull(memoryType)__		_		this.totalNumberOfMemorySegments = numberOfSegmentsToAllocate__		this.memorySegmentSize = segmentSize___		final long sizeInLong = (long) segmentSize___		try {_			this.availableMemorySegments = new ArrayBlockingQueue<>(numberOfSegmentsToAllocate)__		}_		catch (OutOfMemoryError err) {_			throw new OutOfMemoryError("Could not allocate buffer queue of length "_					+ numberOfSegmentsToAllocate + " - " + err.getMessage())__		}__		try {_			if (memoryType == MemoryType.HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					byte[] memory = new byte[segmentSize]__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledHeapMemory(memory, null))__				}_			}_			else if (memoryType == MemoryType.OFF_HEAP) {_				for (int i = 0_ i < numberOfSegmentsToAllocate_ i++) {_					ByteBuffer memory = ByteBuffer.allocateDirect(segmentSize)__					availableMemorySegments.add(MemorySegmentFactory.wrapPooledOffHeapMemory(memory, null))__				}_			}_			else {_				throw new IllegalArgumentException("Unknown memory type " + memoryType)__			}_		}_		catch (OutOfMemoryError err) {_			int allocated = availableMemorySegments.size()___			_			availableMemorySegments.clear()___			long requiredMb = (sizeInLong * numberOfSegmentsToAllocate) >> 20__			long allocatedMb = (sizeInLong * allocated) >> 20__			long missingMb = requiredMb - allocatedMb___			throw new OutOfMemoryError("Could not allocate enough memory segments for NetworkBufferPool " +_					"(required (Mb): " + requiredMb +_					", allocated (Mb): " + allocatedMb +_					", missing (Mb): " + missingMb + "). Cause: " + err.getMessage())__		}__		long allocatedMb = (sizeInLong * availableMemorySegments.size()) >> 20___		LOG.info("Allocated {} MB for network buffer pool (number of memory segments: {}, bytes per segment: {}).",_				allocatedMb, availableMemorySegments.size(), segmentSize)__	};allocates,all,link,memory,segment,instances,managed,by,this,pool;public,network,buffer,pool,int,number,of,segments,to,allocate,int,segment,size,memory,type,memory,type,check,not,null,memory,type,this,total,number,of,memory,segments,number,of,segments,to,allocate,this,memory,segment,size,segment,size,final,long,size,in,long,long,segment,size,try,this,available,memory,segments,new,array,blocking,queue,number,of,segments,to,allocate,catch,out,of,memory,error,err,throw,new,out,of,memory,error,could,not,allocate,buffer,queue,of,length,number,of,segments,to,allocate,err,get,message,try,if,memory,type,memory,type,heap,for,int,i,0,i,number,of,segments,to,allocate,i,byte,memory,new,byte,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,heap,memory,memory,null,else,if,memory,type,memory,type,for,int,i,0,i,number,of,segments,to,allocate,i,byte,buffer,memory,byte,buffer,allocate,direct,segment,size,available,memory,segments,add,memory,segment,factory,wrap,pooled,off,heap,memory,memory,null,else,throw,new,illegal,argument,exception,unknown,memory,type,memory,type,catch,out,of,memory,error,err,int,allocated,available,memory,segments,size,available,memory,segments,clear,long,required,mb,size,in,long,number,of,segments,to,allocate,20,long,allocated,mb,size,in,long,allocated,20,long,missing,mb,required,mb,allocated,mb,throw,new,out,of,memory,error,could,not,allocate,enough,memory,segments,for,network,buffer,pool,required,mb,required,mb,allocated,mb,allocated,mb,missing,mb,missing,mb,cause,err,get,message,long,allocated,mb,size,in,long,available,memory,segments,size,20,log,info,allocated,mb,for,network,buffer,pool,number,of,memory,segments,bytes,per,segment,allocated,mb,available,memory,segments,size,segment,size
