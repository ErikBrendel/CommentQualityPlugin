# id;timestamp;commentText;codeText;commentWords;codeWords
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1471967994;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			Future<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)__	_			_			registrationFuture.onSuccess(new OnSuccess<RegistrationResponse>() {_				_				@Override_				public void onSuccess(RegistrationResponse result) throws Throwable {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionPromise.success(new Tuple2<>(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: " + result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				}_			}, rpcService.getExecutionContext())__	_			_			registrationFuture.onFailure(new OnFailure() {_				@Override_				public void onFailure(Throwable failure) {_					if (!isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_										targetName, targetAddress, attempt, timeoutMillis)__							}_	_							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at " + targetName + " failed due to an error", failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)__	_							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				}_			}, rpcService.getExecutionContext())__		}_		catch (Throwable t) {_			cancel()__			completionPromise.tryFailure(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,registration,future,on,success,new,on,success,registration,response,override,public,void,on,success,registration,response,result,throws,throwable,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,promise,success,new,tuple2,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,execution,context,registration,future,on,failure,new,on,failure,override,public,void,on,failure,throwable,failure,if,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,target,name,failed,due,to,an,error,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,execution,context,catch,throwable,t,cancel,completion,promise,try,failure,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1472481329;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			Future<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)__	_			_			registrationFuture.onSuccess(new OnSuccess<RegistrationResponse>() {_				_				@Override_				public void onSuccess(RegistrationResponse result) throws Throwable {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionPromise.success(new Tuple2<>(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: " + result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				}_			}, rpcService.getExecutionContext())__	_			_			registrationFuture.onFailure(new OnFailure() {_				@Override_				public void onFailure(Throwable failure) {_					if (!isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_										targetName, targetAddress, attempt, timeoutMillis)__							}_	_							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at " + targetName + " failed due to an error", failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)__	_							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				}_			}, rpcService.getExecutionContext())__		}_		catch (Throwable t) {_			cancel()__			completionPromise.tryFailure(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,registration,future,on,success,new,on,success,registration,response,override,public,void,on,success,registration,response,result,throws,throwable,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,promise,success,new,tuple2,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,execution,context,registration,future,on,failure,new,on,failure,override,public,void,on,failure,throwable,failure,if,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,target,name,failed,due,to,an,error,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,execution,context,catch,throwable,t,cancel,completion,promise,try,failure,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1474471581;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			Future<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)__	_			_			registrationFuture.thenAcceptAsync(new AcceptFunction<RegistrationResponse>() {_				@Override_				public void accept(RegistrationResponse result) {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				}_			}, rpcService.getExecutor())__	_			_			registrationFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					if (!isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}__					return null__				}_			}, rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,registration,future,then,accept,async,new,accept,function,registration,response,override,public,void,accept,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,if,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,return,null,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1489508610;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			Future<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)__	_			_			Future<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(new AcceptFunction<RegistrationResponse>() {_				@Override_				public void accept(RegistrationResponse result) {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				}_			}, rpcService.getExecutor())__	_			_			registrationAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					if (!isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}__					return null__				}_			}, rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,future,void,registration,accept,future,registration,future,then,accept,async,new,accept,function,registration,response,override,public,void,accept,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,if,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,return,null,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1497040366;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			Future<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)___			_			Future<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(new AcceptFunction<RegistrationResponse>() {_				@Override_				public void accept(RegistrationResponse result) {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				}_			}, rpcService.getExecutor())___			_			registrationAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					if (!isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}__					return null__				}_			}, rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,future,void,registration,accept,future,registration,future,then,accept,async,new,accept,function,registration,response,override,public,void,accept,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,if,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,return,null,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1501524690;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final Gateway gateway, final int attempt, final long timeoutMillis);1501580028;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final Gateway gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, leaderId, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							Success success = (Success) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,gateway,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,leader,id,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,success,success,success,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1471967994;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			Future<Gateway> resourceManagerFuture = rpcService.connect(targetAddress, targetType)__	_			_			resourceManagerFuture.onSuccess(new OnSuccess<Gateway>() {_				@Override_				public void onSuccess(Gateway result) {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				}_			}, rpcService.getExecutionContext())__	_			_			resourceManagerFuture.onFailure(new OnFailure() {_				@Override_				public void onFailure(Throwable failure) {_					if (!isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}_				}_			}, rpcService.getExecutionContext())__		}_		catch (Throwable t) {_			cancel()__			completionPromise.tryFailure(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,future,gateway,resource,manager,future,rpc,service,connect,target,address,target,type,resource,manager,future,on,success,new,on,success,gateway,override,public,void,on,success,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,execution,context,resource,manager,future,on,failure,new,on,failure,override,public,void,on,failure,throwable,failure,if,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,rpc,service,get,execution,context,catch,throwable,t,cancel,completion,promise,try,failure,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1472481329;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			Future<Gateway> resourceManagerFuture = rpcService.connect(targetAddress, targetType)__	_			_			resourceManagerFuture.onSuccess(new OnSuccess<Gateway>() {_				@Override_				public void onSuccess(Gateway result) {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				}_			}, rpcService.getExecutionContext())__	_			_			resourceManagerFuture.onFailure(new OnFailure() {_				@Override_				public void onFailure(Throwable failure) {_					if (!isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress)__						startRegistration()__					}_				}_			}, rpcService.getExecutionContext())__		}_		catch (Throwable t) {_			cancel()__			completionPromise.tryFailure(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,future,gateway,resource,manager,future,rpc,service,connect,target,address,target,type,resource,manager,future,on,success,new,on,success,gateway,override,public,void,on,success,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,execution,context,resource,manager,future,on,failure,new,on,failure,override,public,void,on,failure,throwable,failure,if,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,start,registration,rpc,service,get,execution,context,catch,throwable,t,cancel,completion,promise,try,failure,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1474471581;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			Future<Gateway> resourceManagerFuture = rpcService.connect(targetAddress, targetType)__	_			_			resourceManagerFuture.thenAcceptAsync(new AcceptFunction<Gateway>() {_				@Override_				public void accept(Gateway result) {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				}_			}, rpcService.getExecutor())___			_			resourceManagerFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					if (!isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}__					return null__				}_			}, rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,future,gateway,resource,manager,future,rpc,service,connect,target,address,target,type,resource,manager,future,then,accept,async,new,accept,function,gateway,override,public,void,accept,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,if,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,return,null,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1489508610;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			Future<Gateway> resourceManagerFuture = rpcService.connect(targetAddress, targetType)__	_			_			Future<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(new AcceptFunction<Gateway>() {_				@Override_				public void accept(Gateway result) {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				}_			}, rpcService.getExecutor())___			_			resourceManagerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					if (!isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}__					return null__				}_			}, rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,future,gateway,resource,manager,future,rpc,service,connect,target,address,target,type,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,new,accept,function,gateway,override,public,void,accept,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,if,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,return,null,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1497040366;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			Future<Gateway> resourceManagerFuture = rpcService.connect(targetAddress, targetType)___			_			Future<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(new AcceptFunction<Gateway>() {_				@Override_				public void accept(Gateway result) {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				}_			}, rpcService.getExecutor())___			_			resourceManagerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					if (!isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}__					return null__				}_			}, rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,future,gateway,resource,manager,future,rpc,service,connect,target,address,target,type,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,new,accept,function,gateway,override,public,void,accept,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,if,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,return,null,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1501524690;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			CompletableFuture<Gateway> resourceManagerFuture = FutureUtils.toJava(_				rpcService.connect(targetAddress, targetType))___			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(Gateway result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,completable,future,gateway,resource,manager,future,future,utils,to,java,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1501580028;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			CompletableFuture<Gateway> resourceManagerFuture = rpcService.connect(targetAddress, targetType)___			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(Gateway result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,completable,future,gateway,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,gateway,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1503580260;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			final CompletableFuture<G> resourceManagerFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				resourceManagerFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				resourceManagerFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,final,completable,future,g,resource,manager,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,resource,manager,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1503581387;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		try {_			_			CompletableFuture<G> resourceManagerFuture = rpcService.connect(targetAddress, targetType)___			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						log.warn("Could not resolve {} address {}, retrying...", targetName, targetAddress, failure)__						startRegistration()__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,try,completable,future,g,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,log,warn,could,not,resolve,address,retrying,target,name,target,address,failure,start,registration,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1505901898;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> resourceManagerFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				resourceManagerFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				resourceManagerFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						log.warn("Could not resolve {} address {}, retrying in {} ms", targetName, targetAddress, delayOnError, failure)___						startRegistrationLater(delayOnError)__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,resource,manager,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,resource,manager,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,log,warn,could,not,resolve,address,retrying,in,ms,target,name,target,address,delay,on,error,failure,start,registration,later,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1508672330;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> resourceManagerFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				resourceManagerFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				resourceManagerFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						log.warn("Could not resolve {} address {}, retrying in {} ms", targetName, targetAddress, delayOnError, failure)___						startRegistrationLater(delayOnError)__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,resource,manager,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,resource,manager,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,log,warn,could,not,resolve,address,retrying,in,ms,target,name,target,address,delay,on,error,failure,start,registration,later,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1515762125;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> resourceManagerFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				resourceManagerFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				resourceManagerFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						log.warn("Could not resolve {} address {}, retrying in {} ms", targetName, targetAddress, delayOnError, failure)___						startRegistrationLater(delayOnError)__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,resource,manager,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,resource,manager,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,log,warn,could,not,resolve,address,retrying,in,ms,target,name,target,address,delay,on,error,failure,start,registration,later,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1518082047;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> resourceManagerFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				resourceManagerFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				resourceManagerFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, initialRegistrationTimeout)__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						final Throwable strippedFailure = ExceptionUtils.stripCompletionException(failure)__						if (log.isDebugEnabled()) {_							log.debug(_								"Could not resolve {} address {}, retrying in {} ms.",_								targetName,_								targetAddress,_								delayOnError,_								strippedFailure)__						} else {_							log.info(_								"Could not resolve {} address {}, retrying in {} ms: {}.",_								targetName,_								targetAddress,_								delayOnError,_								strippedFailure.getMessage())__						}__						startRegistrationLater(delayOnError)__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,resource,manager,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,resource,manager,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,initial,registration,timeout,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,final,throwable,stripped,failure,exception,utils,strip,completion,exception,failure,if,log,is,debug,enabled,log,debug,could,not,resolve,address,retrying,in,ms,target,name,target,address,delay,on,error,stripped,failure,else,log,info,could,not,resolve,address,retrying,in,ms,target,name,target,address,delay,on,error,stripped,failure,get,message,start,registration,later,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1549036717;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> resourceManagerFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				resourceManagerFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				resourceManagerFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> resourceManagerAcceptFuture = resourceManagerFuture.thenAcceptAsync(_				(G result) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(result, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis())__				},_				rpcService.getExecutor())___			_			resourceManagerAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						final Throwable strippedFailure = ExceptionUtils.stripCompletionException(failure)__						if (log.isDebugEnabled()) {_							log.debug(_								"Could not resolve {} address {}, retrying in {} ms.",_								targetName,_								targetAddress,_								retryingRegistrationConfiguration.getErrorDelayMillis(),_								strippedFailure)__						} else {_							log.info(_								"Could not resolve {} address {}, retrying in {} ms: {}.",_								targetName,_								targetAddress,_								retryingRegistrationConfiguration.getErrorDelayMillis(),_								strippedFailure.getMessage())__						}__						startRegistrationLater(retryingRegistrationConfiguration.getErrorDelayMillis())__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,resource,manager,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,resource,manager,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,resource,manager,future,rpc,service,connect,target,address,target,type,completable,future,void,resource,manager,accept,future,resource,manager,future,then,accept,async,g,result,log,info,resolved,address,beginning,registration,target,name,register,result,1,retrying,registration,configuration,get,initial,registration,timeout,millis,rpc,service,get,executor,resource,manager,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,final,throwable,stripped,failure,exception,utils,strip,completion,exception,failure,if,log,is,debug,enabled,log,debug,could,not,resolve,address,retrying,in,ms,target,name,target,address,retrying,registration,configuration,get,error,delay,millis,stripped,failure,else,log,info,could,not,resolve,address,retrying,in,ms,target,name,target,address,retrying,registration,configuration,get,error,delay,millis,stripped,failure,get,message,start,registration,later,retrying,registration,configuration,get,error,delay,millis,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1550267869;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> rpcGatewayFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				rpcGatewayFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				rpcGatewayFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> rpcGatewayAcceptFuture = rpcGatewayFuture.thenAcceptAsync(_				(G rpcGateway) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(rpcGateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis())__				},_				rpcService.getExecutor())___			_			rpcGatewayAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						final Throwable strippedFailure = ExceptionUtils.stripCompletionException(failure)__						if (log.isDebugEnabled()) {_							log.debug(_								"Could not resolve {} address {}, retrying in {} ms.",_								targetName,_								targetAddress,_								retryingRegistrationConfiguration.getErrorDelayMillis(),_								strippedFailure)__						} else {_							log.info(_								"Could not resolve {} address {}, retrying in {} ms: {}.",_								targetName,_								targetAddress,_								retryingRegistrationConfiguration.getErrorDelayMillis(),_								strippedFailure.getMessage())__						}__						startRegistrationLater(retryingRegistrationConfiguration.getErrorDelayMillis())__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,rpc,gateway,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,rpc,gateway,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,rpc,gateway,future,rpc,service,connect,target,address,target,type,completable,future,void,rpc,gateway,accept,future,rpc,gateway,future,then,accept,async,g,rpc,gateway,log,info,resolved,address,beginning,registration,target,name,register,rpc,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,rpc,service,get,executor,rpc,gateway,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,final,throwable,stripped,failure,exception,utils,strip,completion,exception,failure,if,log,is,debug,enabled,log,debug,could,not,resolve,address,retrying,in,ms,target,name,target,address,retrying,registration,configuration,get,error,delay,millis,stripped,failure,else,log,info,could,not,resolve,address,retrying,in,ms,target,name,target,address,retrying,registration,configuration,get,error,delay,millis,stripped,failure,get,message,start,registration,later,retrying,registration,configuration,get,error,delay,millis,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	public void startRegistration();1550267912;This method resolves the target address to a callable gateway and starts the_registration after that.;@SuppressWarnings("unchecked")_	public void startRegistration() {_		if (canceled) {_			_			return__		}__		try {_			_			final CompletableFuture<G> rpcGatewayFuture___			if (FencedRpcGateway.class.isAssignableFrom(targetType)) {_				rpcGatewayFuture = (CompletableFuture<G>) rpcService.connect(_					targetAddress,_					fencingToken,_					targetType.asSubclass(FencedRpcGateway.class))__			} else {_				rpcGatewayFuture = rpcService.connect(targetAddress, targetType)__			}__			_			CompletableFuture<Void> rpcGatewayAcceptFuture = rpcGatewayFuture.thenAcceptAsync(_				(G rpcGateway) -> {_					log.info("Resolved {} address, beginning registration", targetName)__					register(rpcGateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis())__				},_				rpcService.getExecutor())___			_			rpcGatewayAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !canceled) {_						final Throwable strippedFailure = ExceptionUtils.stripCompletionException(failure)__						if (log.isDebugEnabled()) {_							log.debug(_								"Could not resolve {} address {}, retrying in {} ms.",_								targetName,_								targetAddress,_								retryingRegistrationConfiguration.getErrorDelayMillis(),_								strippedFailure)__						} else {_							log.info(_								"Could not resolve {} address {}, retrying in {} ms: {}.",_								targetName,_								targetAddress,_								retryingRegistrationConfiguration.getErrorDelayMillis(),_								strippedFailure.getMessage())__						}__						startRegistrationLater(retryingRegistrationConfiguration.getErrorDelayMillis())__					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,resolves,the,target,address,to,a,callable,gateway,and,starts,the,registration,after,that;suppress,warnings,unchecked,public,void,start,registration,if,canceled,return,try,final,completable,future,g,rpc,gateway,future,if,fenced,rpc,gateway,class,is,assignable,from,target,type,rpc,gateway,future,completable,future,g,rpc,service,connect,target,address,fencing,token,target,type,as,subclass,fenced,rpc,gateway,class,else,rpc,gateway,future,rpc,service,connect,target,address,target,type,completable,future,void,rpc,gateway,accept,future,rpc,gateway,future,then,accept,async,g,rpc,gateway,log,info,resolved,address,beginning,registration,target,name,register,rpc,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,rpc,service,get,executor,rpc,gateway,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,canceled,final,throwable,stripped,failure,exception,utils,strip,completion,exception,failure,if,log,is,debug,enabled,log,debug,could,not,resolve,address,retrying,in,ms,target,name,target,address,retrying,registration,configuration,get,error,delay,millis,stripped,failure,else,log,info,could,not,resolve,address,retrying,in,ms,target,name,target,address,retrying,registration,configuration,get,error,delay,millis,stripped,failure,get,message,start,registration,later,retrying,registration,configuration,get,error,delay,millis,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1503580260;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1503581387;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			cancel()__			completionFuture.completeExceptionally(t)__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,cancel,completion,future,complete,exceptionally,t
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1505901898;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1508672330;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (failure instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1515762125;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (ExceptionUtils.stripCompletionException(failure) instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,exception,utils,strip,completion,exception,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1518082047;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", delayOnRefusedRegistration)__							registerLater(gateway, 1, initialRegistrationTimeout, delayOnRefusedRegistration)__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (ExceptionUtils.stripCompletionException(failure) instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, maxRegistrationTimeout)__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", delayOnError)___							registerLater(gateway, 1, initialRegistrationTimeout, delayOnError)__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,refused,registration,register,later,gateway,1,initial,registration,timeout,delay,on,refused,registration,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,exception,utils,strip,completion,exception,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,max,registration,timeout,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,delay,on,error,register,later,gateway,1,initial,registration,timeout,delay,on,error,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1549036717;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", retryingRegistrationConfiguration.getRefusedDelayMillis())__							registerLater(gateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis(), retryingRegistrationConfiguration.getRefusedDelayMillis())__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (ExceptionUtils.stripCompletionException(failure) instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, retryingRegistrationConfiguration.getMaxRegistrationTimeoutMillis())__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", retryingRegistrationConfiguration.getErrorDelayMillis())___							registerLater(gateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis(), retryingRegistrationConfiguration.getErrorDelayMillis())__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,retrying,registration,configuration,get,refused,delay,millis,register,later,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,retrying,registration,configuration,get,refused,delay,millis,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,exception,utils,strip,completion,exception,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,retrying,registration,configuration,get,max,registration,timeout,millis,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,retrying,registration,configuration,get,error,delay,millis,register,later,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,retrying,registration,configuration,get,error,delay,millis,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1550267869;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", retryingRegistrationConfiguration.getRefusedDelayMillis())__							registerLater(gateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis(), retryingRegistrationConfiguration.getRefusedDelayMillis())__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (ExceptionUtils.stripCompletionException(failure) instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, retryingRegistrationConfiguration.getMaxRegistrationTimeoutMillis())__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", retryingRegistrationConfiguration.getErrorDelayMillis())___							registerLater(gateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis(), retryingRegistrationConfiguration.getErrorDelayMillis())__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,retrying,registration,configuration,get,refused,delay,millis,register,later,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,retrying,registration,configuration,get,refused,delay,millis,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,exception,utils,strip,completion,exception,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,retrying,registration,configuration,get,max,registration,timeout,millis,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,retrying,registration,configuration,get,error,delay,millis,register,later,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,retrying,registration,configuration,get,error,delay,millis,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> @SuppressWarnings("unchecked") 	private void register(final G gateway, final int attempt, final long timeoutMillis);1550267912;This method performs a registration attempt and triggers either a success notification or a retry,_depending on the result.;@SuppressWarnings("unchecked")_	private void register(final G gateway, final int attempt, final long timeoutMillis) {_		_		if (canceled) {_			return__		}__		try {_			log.info("Registration at {} attempt {} (timeout={}ms)", targetName, attempt, timeoutMillis)__			CompletableFuture<RegistrationResponse> registrationFuture = invokeRegistration(gateway, fencingToken, timeoutMillis)___			_			CompletableFuture<Void> registrationAcceptFuture = registrationFuture.thenAcceptAsync(_				(RegistrationResponse result) -> {_					if (!isCanceled()) {_						if (result instanceof RegistrationResponse.Success) {_							_							S success = (S) result__							completionFuture.complete(Tuple2.of(gateway, success))__						}_						else {_							_							if (result instanceof RegistrationResponse.Decline) {_								RegistrationResponse.Decline decline = (RegistrationResponse.Decline) result__								log.info("Registration at {} was declined: {}", targetName, decline.getReason())__							} else {_								log.error("Received unknown response to registration attempt: {}", result)__							}__							log.info("Pausing and re-attempting registration in {} ms", retryingRegistrationConfiguration.getRefusedDelayMillis())__							registerLater(gateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis(), retryingRegistrationConfiguration.getRefusedDelayMillis())__						}_					}_				},_				rpcService.getExecutor())___			_			registrationAcceptFuture.whenCompleteAsync(_				(Void v, Throwable failure) -> {_					if (failure != null && !isCanceled()) {_						if (ExceptionUtils.stripCompletionException(failure) instanceof TimeoutException) {_							_							_							_							if (log.isDebugEnabled()) {_								log.debug("Registration at {} ({}) attempt {} timed out after {} ms",_									targetName, targetAddress, attempt, timeoutMillis)__							}__							long newTimeoutMillis = Math.min(2 * timeoutMillis, retryingRegistrationConfiguration.getMaxRegistrationTimeoutMillis())__							register(gateway, attempt + 1, newTimeoutMillis)__						}_						else {_							_							log.error("Registration at {} failed due to an error", targetName, failure)__							log.info("Pausing and re-attempting registration in {} ms", retryingRegistrationConfiguration.getErrorDelayMillis())___							registerLater(gateway, 1, retryingRegistrationConfiguration.getInitialRegistrationTimeoutMillis(), retryingRegistrationConfiguration.getErrorDelayMillis())__						}_					}_				},_				rpcService.getExecutor())__		}_		catch (Throwable t) {_			completionFuture.completeExceptionally(t)__			cancel()__		}_	};this,method,performs,a,registration,attempt,and,triggers,either,a,success,notification,or,a,retry,depending,on,the,result;suppress,warnings,unchecked,private,void,register,final,g,gateway,final,int,attempt,final,long,timeout,millis,if,canceled,return,try,log,info,registration,at,attempt,timeout,ms,target,name,attempt,timeout,millis,completable,future,registration,response,registration,future,invoke,registration,gateway,fencing,token,timeout,millis,completable,future,void,registration,accept,future,registration,future,then,accept,async,registration,response,result,if,is,canceled,if,result,instanceof,registration,response,success,s,success,s,result,completion,future,complete,tuple2,of,gateway,success,else,if,result,instanceof,registration,response,decline,registration,response,decline,decline,registration,response,decline,result,log,info,registration,at,was,declined,target,name,decline,get,reason,else,log,error,received,unknown,response,to,registration,attempt,result,log,info,pausing,and,re,attempting,registration,in,ms,retrying,registration,configuration,get,refused,delay,millis,register,later,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,retrying,registration,configuration,get,refused,delay,millis,rpc,service,get,executor,registration,accept,future,when,complete,async,void,v,throwable,failure,if,failure,null,is,canceled,if,exception,utils,strip,completion,exception,failure,instanceof,timeout,exception,if,log,is,debug,enabled,log,debug,registration,at,attempt,timed,out,after,ms,target,name,target,address,attempt,timeout,millis,long,new,timeout,millis,math,min,2,timeout,millis,retrying,registration,configuration,get,max,registration,timeout,millis,register,gateway,attempt,1,new,timeout,millis,else,log,error,registration,at,failed,due,to,an,error,target,name,failure,log,info,pausing,and,re,attempting,registration,in,ms,retrying,registration,configuration,get,error,delay,millis,register,later,gateway,1,retrying,registration,configuration,get,initial,registration,timeout,millis,retrying,registration,configuration,get,error,delay,millis,rpc,service,get,executor,catch,throwable,t,completion,future,complete,exceptionally,t,cancel
RetryingRegistration -> public boolean isCanceled();1471967994;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1472481329;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1474471581;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1489508610;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1497040366;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1501524690;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1501580028;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1503580260;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1503581387;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1505901898;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1508672330;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1515762125;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1518082047;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1549036717;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1550267869;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public boolean isCanceled();1550267912;Checks if the registration was canceled._@return True if the registration was canceled, false otherwise.;public boolean isCanceled() {_		return canceled__	};checks,if,the,registration,was,canceled,return,true,if,the,registration,was,canceled,false,otherwise;public,boolean,is,canceled,return,canceled
RetryingRegistration -> public void cancel();1471967994;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1472481329;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1474471581;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1489508610;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1497040366;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1501524690;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1501580028;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1503580260;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1503581387;Cancels the registration procedure.;public void cancel() {_		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,canceled,true
RetryingRegistration -> public void cancel();1505901898;Cancels the registration procedure.;public void cancel() {_		completionFuture.cancel(false)__		canceled = true__	};cancels,the,registration,procedure;public,void,cancel,completion,future,cancel,false,canceled,true
RetryingRegistration -> public void cancel();1508672330;Cancels the registration procedure.;public void cancel() {_		canceled = true__		completionFuture.cancel(false)__	};cancels,the,registration,procedure;public,void,cancel,canceled,true,completion,future,cancel,false
RetryingRegistration -> public void cancel();1515762125;Cancels the registration procedure.;public void cancel() {_		canceled = true__		completionFuture.cancel(false)__	};cancels,the,registration,procedure;public,void,cancel,canceled,true,completion,future,cancel,false
RetryingRegistration -> public void cancel();1518082047;Cancels the registration procedure.;public void cancel() {_		canceled = true__		completionFuture.cancel(false)__	};cancels,the,registration,procedure;public,void,cancel,canceled,true,completion,future,cancel,false
RetryingRegistration -> public void cancel();1549036717;Cancels the registration procedure.;public void cancel() {_		canceled = true__		completionFuture.cancel(false)__	};cancels,the,registration,procedure;public,void,cancel,canceled,true,completion,future,cancel,false
RetryingRegistration -> public void cancel();1550267869;Cancels the registration procedure.;public void cancel() {_		canceled = true__		completionFuture.cancel(false)__	};cancels,the,registration,procedure;public,void,cancel,canceled,true,completion,future,cancel,false
RetryingRegistration -> public void cancel();1550267912;Cancels the registration procedure.;public void cancel() {_		canceled = true__		completionFuture.cancel(false)__	};cancels,the,registration,procedure;public,void,cancel,canceled,true,completion,future,cancel,false
