# id;timestamp;commentText;codeText;commentWords;codeWords
TransientBlobCache -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1507209538;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
TransientBlobCache -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1517911296;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
TransientBlobCache -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1517911540;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
TransientBlobCache -> private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1505901925;Deletes the file associated with the blob key in this BLOB cache.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()__		try {_			if (!localFile.delete() && localFile.exists()) {_				log.warn("Failed to delete locally cached BLOB {} at {}", key,_					localFile.getAbsolutePath())__				return false__			}_		} finally {_			readWriteLock.writeLock().unlock()__		}_		return true__	};deletes,the,file,associated,with,the,blob,key,in,this,blob,cache,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;private,boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,cached,blob,at,key,local,file,get,absolute,path,return,false,finally,read,write,lock,write,lock,unlock,return,true
TransientBlobCache -> private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1507209538;Deletes the file associated with the blob key in this BLOB cache.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()__		try {_			if (!localFile.delete() && localFile.exists()) {_				log.warn("Failed to delete locally cached BLOB {} at {}", key,_					localFile.getAbsolutePath())__				return false__			} else {_				_				blobExpiryTimes.remove(Tuple2.of(jobId, key))__			}_		} finally {_			readWriteLock.writeLock().unlock()__		}_		return true__	};deletes,the,file,associated,with,the,blob,key,in,this,blob,cache,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;private,boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,cached,blob,at,key,local,file,get,absolute,path,return,false,else,blob,expiry,times,remove,tuple2,of,job,id,key,finally,read,write,lock,write,lock,unlock,return,true
TransientBlobCache -> private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1517911296;Deletes the file associated with the blob key in this BLOB cache.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()__		try {_			if (!localFile.delete() && localFile.exists()) {_				log.warn("Failed to delete locally cached BLOB {} at {}", key,_					localFile.getAbsolutePath())__				return false__			} else {_				_				blobExpiryTimes.remove(Tuple2.of(jobId, key))__			}_		} finally {_			readWriteLock.writeLock().unlock()__		}_		return true__	};deletes,the,file,associated,with,the,blob,key,in,this,blob,cache,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;private,boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,cached,blob,at,key,local,file,get,absolute,path,return,false,else,blob,expiry,times,remove,tuple2,of,job,id,key,finally,read,write,lock,write,lock,unlock,return,true
TransientBlobCache -> private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1517911540;Deletes the file associated with the blob key in this BLOB cache.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;private boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()__		try {_			if (!localFile.delete() && localFile.exists()) {_				log.warn("Failed to delete locally cached BLOB {} at {}", key,_					localFile.getAbsolutePath())__				return false__			} else {_				_				blobExpiryTimes.remove(Tuple2.of(jobId, key))__			}_		} finally {_			readWriteLock.writeLock().unlock()__		}_		return true__	};deletes,the,file,associated,with,the,blob,key,in,this,blob,cache,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;private,boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,cached,blob,at,key,local,file,get,absolute,path,return,false,else,blob,expiry,times,remove,tuple2,of,job,id,key,finally,read,write,lock,write,lock,unlock,return,true
TransientBlobCache -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1499764760;Returns a file handle to the file associated with the given blob key on the blob_server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_identifying the file__@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
TransientBlobCache -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1505901925;Returns a file handle to the file associated with the given blob key on the blob_server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_identifying the file__@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
TransientBlobCache -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1507209538;Returns a file handle to the file associated with the given blob key on the blob_server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_identifying the file__@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
TransientBlobCache -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1517911296;Returns a file handle to the file associated with the given blob key on the blob_server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_identifying the file__@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
TransientBlobCache -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1517911540;Returns a file handle to the file associated with the given blob key on the blob_server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_identifying the file__@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
TransientBlobCache -> public TransientBlobCache( 			final InetSocketAddress serverAddress, 			final Configuration blobClientConfig) throws IOException;1499764760;Instantiates a new BLOB cache.__@param serverAddress_address of the {@link BlobServer} to use for fetching files from_@param blobClientConfig_global configuration__@throws IOException_thrown if the (local or distributed) file storage cannot be created or is not usable;public TransientBlobCache(_			final InetSocketAddress serverAddress,_			final Configuration blobClientConfig) throws IOException {__		this.serverAddress = checkNotNull(serverAddress)__		this.blobClientConfig = checkNotNull(blobClientConfig)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = blobClientConfig.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created transient BLOB cache storage directory " + storageDir)___		_		final int fetchRetries = blobClientConfig.getInteger(BlobServerOptions.FETCH_RETRIES)__		if (fetchRetries >= 0) {_			this.numFetchRetries = fetchRetries__		} else {_			LOG.warn("Invalid value for {}. System will attempt no retries on failed fetches of BLOBs.",_				BlobServerOptions.FETCH_RETRIES.key())__			this.numFetchRetries = 0__		}__		_		shutdownHook = BlobUtils.addShutdownHook(this, LOG)__	};instantiates,a,new,blob,cache,param,server,address,address,of,the,link,blob,server,to,use,for,fetching,files,from,param,blob,client,config,global,configuration,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,transient,blob,cache,final,inet,socket,address,server,address,final,configuration,blob,client,config,throws,ioexception,this,server,address,check,not,null,server,address,this,blob,client,config,check,not,null,blob,client,config,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,blob,client,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,transient,blob,cache,storage,directory,storage,dir,final,int,fetch,retries,blob,client,config,get,integer,blob,server,options,if,fetch,retries,0,this,num,fetch,retries,fetch,retries,else,log,warn,invalid,value,for,system,will,attempt,no,retries,on,failed,fetches,of,blobs,blob,server,options,key,this,num,fetch,retries,0,shutdown,hook,blob,utils,add,shutdown,hook,this,log
TransientBlobCache -> public TransientBlobCache( 			final InetSocketAddress serverAddress, 			final Configuration blobClientConfig) throws IOException;1505901925;Instantiates a new BLOB cache.__@param serverAddress_address of the {@link BlobServer} to use for fetching files from_@param blobClientConfig_global configuration__@throws IOException_thrown if the (local or distributed) file storage cannot be created or is not usable;public TransientBlobCache(_			final InetSocketAddress serverAddress,_			final Configuration blobClientConfig) throws IOException {__		super(serverAddress, blobClientConfig, new VoidBlobStore(),_			LoggerFactory.getLogger(TransientBlobCache.class))__	};instantiates,a,new,blob,cache,param,server,address,address,of,the,link,blob,server,to,use,for,fetching,files,from,param,blob,client,config,global,configuration,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,transient,blob,cache,final,inet,socket,address,server,address,final,configuration,blob,client,config,throws,ioexception,super,server,address,blob,client,config,new,void,blob,store,logger,factory,get,logger,transient,blob,cache,class
TransientBlobCache -> public TransientBlobCache( 			final InetSocketAddress serverAddress, 			final Configuration blobClientConfig) throws IOException;1507209538;Instantiates a new BLOB cache.__@param serverAddress_address of the {@link BlobServer} to use for fetching files from_@param blobClientConfig_global configuration__@throws IOException_thrown if the (local or distributed) file storage cannot be created or is not usable;public TransientBlobCache(_			final InetSocketAddress serverAddress,_			final Configuration blobClientConfig) throws IOException {__		super(serverAddress, blobClientConfig, new VoidBlobStore(),_			LoggerFactory.getLogger(TransientBlobCache.class))___		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = blobClientConfig.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, log), cleanupInterval, cleanupInterval)__	};instantiates,a,new,blob,cache,param,server,address,address,of,the,link,blob,server,to,use,for,fetching,files,from,param,blob,client,config,global,configuration,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,transient,blob,cache,final,inet,socket,address,server,address,final,configuration,blob,client,config,throws,ioexception,super,server,address,blob,client,config,new,void,blob,store,logger,factory,get,logger,transient,blob,cache,class,this,cleanup,timer,new,timer,true,this,cleanup,interval,blob,client,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval
TransientBlobCache -> public TransientBlobCache( 			final Configuration blobClientConfig, 			@Nullable final InetSocketAddress serverAddress) throws IOException;1517911296;Instantiates a new BLOB cache.__@param blobClientConfig_global configuration_@param serverAddress_address of the {@link BlobServer} to use for fetching files from or {@code null} if none yet_@throws IOException_thrown if the (local or distributed) file storage cannot be created or is not usable;public TransientBlobCache(_			final Configuration blobClientConfig,_			@Nullable final InetSocketAddress serverAddress) throws IOException {__		super(blobClientConfig, new VoidBlobStore(), LoggerFactory.getLogger(TransientBlobCache.class), serverAddress_		)___		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = blobClientConfig.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, log), cleanupInterval, cleanupInterval)__	};instantiates,a,new,blob,cache,param,blob,client,config,global,configuration,param,server,address,address,of,the,link,blob,server,to,use,for,fetching,files,from,or,code,null,if,none,yet,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,transient,blob,cache,final,configuration,blob,client,config,nullable,final,inet,socket,address,server,address,throws,ioexception,super,blob,client,config,new,void,blob,store,logger,factory,get,logger,transient,blob,cache,class,server,address,this,cleanup,timer,new,timer,true,this,cleanup,interval,blob,client,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval
TransientBlobCache -> public TransientBlobCache( 			final Configuration blobClientConfig, 			@Nullable final InetSocketAddress serverAddress) throws IOException;1517911540;Instantiates a new BLOB cache.__@param blobClientConfig_global configuration_@param serverAddress_address of the {@link BlobServer} to use for fetching files from or {@code null} if none yet_@throws IOException_thrown if the (local or distributed) file storage cannot be created or is not usable;public TransientBlobCache(_			final Configuration blobClientConfig,_			@Nullable final InetSocketAddress serverAddress) throws IOException {__		super(blobClientConfig, new VoidBlobStore(), LoggerFactory.getLogger(TransientBlobCache.class), serverAddress_		)___		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = blobClientConfig.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, log), cleanupInterval, cleanupInterval)__	};instantiates,a,new,blob,cache,param,blob,client,config,global,configuration,param,server,address,address,of,the,link,blob,server,to,use,for,fetching,files,from,or,code,null,if,none,yet,throws,ioexception,thrown,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,transient,blob,cache,final,configuration,blob,client,config,nullable,final,inet,socket,address,server,address,throws,ioexception,super,blob,client,config,new,void,blob,store,logger,factory,get,logger,transient,blob,cache,class,server,address,this,cleanup,timer,new,timer,true,this,cleanup,interval,blob,client,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval
