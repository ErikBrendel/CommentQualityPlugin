# id;timestamp;commentText;codeText;commentWords;codeWords
JobVertex -> public JobVertex(String name, JobVertexID id);1434467925;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1442492509;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1452854660;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1455549373;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1460563153;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1465991918;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1472663071;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1472663401;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1472663401;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1478815184;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1481709237;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1485269495;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1489060856;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1489671807;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id
JobVertex -> public JobVertex(String name, JobVertexID id);1493403095;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__		_		this.operatorIDs.add(OperatorID.fromJobVertexID(this.id))__		this.operatorIdsAlternatives.add(null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id,this,operator,ids,add,operator,id,from,job,vertex,id,this,id,this,operator,ids,alternatives,add,null
JobVertex -> public JobVertex(String name, JobVertexID id);1515177485;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__		_		this.operatorIDs.add(OperatorID.fromJobVertexID(this.id))__		this.operatorIdsAlternatives.add(null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id,this,operator,ids,add,operator,id,from,job,vertex,id,this,id,this,operator,ids,alternatives,add,null
JobVertex -> public JobVertex(String name, JobVertexID id);1547644408;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param id The id of the job vertex.;public JobVertex(String name, JobVertexID id) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = id == null ? new JobVertexID() : id__		_		this.operatorIDs.add(OperatorID.fromJobVertexID(this.id))__		this.operatorIdsAlternatives.add(null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,id,the,id,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,id,this,name,name,null,name,this,id,id,null,new,job,vertex,id,id,this,operator,ids,add,operator,id,from,job,vertex,id,this,id,this,operator,ids,alternatives,add,null
JobVertex -> public int getMaxParallelism();1472663071;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1472663401;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1472663401;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1478815184;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1481709237;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1485269495;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1489060856;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1489671807;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1493403095;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1515177485;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public int getMaxParallelism();1547644408;Gets the maximum parallelism for the task.__@return The maximum parallelism for the task.;public int getMaxParallelism() {_		return maxParallelism__	};gets,the,maximum,parallelism,for,the,task,return,the,maximum,parallelism,for,the,task;public,int,get,max,parallelism,return,max,parallelism
JobVertex -> public String getName();1434467925;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1442492509;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1452854660;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1455549373;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1460563153;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1465991918;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1472663071;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1472663401;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1472663401;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1478815184;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1481709237;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1485269495;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1489060856;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1489671807;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1493403095;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1515177485;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public String getName();1547644408;Returns the name of the vertex.__@return The name of the vertex.;public String getName() {_		return this.name__	};returns,the,name,of,the,vertex,return,the,name,of,the,vertex;public,string,get,name,return,this,name
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1434467925;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1442492509;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1452854660;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1455549373;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1460563153;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1465991918;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1472663071;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1472663401;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1472663401;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1478815184;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1481709237;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1485269495;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1489060856;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1489671807;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1493403095;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1515177485;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public SlotSharingGroup getSlotSharingGroup();1547644408;Gets the slot sharing group that this vertex is associated with. Different vertices in the same_slot sharing group can run one subtask each in the same slot. If the vertex is not associated with_a slot sharing group, this method returns {@code null}.__@return The slot sharing group to associate the vertex with, or {@code null}, if not associated with one.;public SlotSharingGroup getSlotSharingGroup() {_		return slotSharingGroup__	};gets,the,slot,sharing,group,that,this,vertex,is,associated,with,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,if,the,vertex,is,not,associated,with,a,slot,sharing,group,this,method,returns,code,null,return,the,slot,sharing,group,to,associate,the,vertex,with,or,code,null,if,not,associated,with,one;public,slot,sharing,group,get,slot,sharing,group,return,slot,sharing,group
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1434467925;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}_		_		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1442492509;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}_		_		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1452854660;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}_		_		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1455549373;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1460563153;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1465991918;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1472663071;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1472663401;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1472663401;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1478815184;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1481709237;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1485269495;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1489060856;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1489671807;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1493403095;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1515177485;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl);1547644408;Returns the invokable class which represents the task of this vertex__@param cl The classloader used to resolve user-defined classes_@return The invokable class, <code>null</code> if it is not set;public Class<? extends AbstractInvokable> getInvokableClass(ClassLoader cl) {_		if (cl == null) {_			throw new NullPointerException("The classloader must not be null.")__		}_		if (invokableClassName == null) {_			return null__		}__		try {_			return Class.forName(invokableClassName, true, cl).asSubclass(AbstractInvokable.class)__		}_		catch (ClassNotFoundException e) {_			throw new RuntimeException("The user-code class could not be resolved.", e)__		}_		catch (ClassCastException e) {_			throw new RuntimeException("The user-code class is no subclass of " + AbstractInvokable.class.getName(), e)__		}_	};returns,the,invokable,class,which,represents,the,task,of,this,vertex,param,cl,the,classloader,used,to,resolve,user,defined,classes,return,the,invokable,class,code,null,code,if,it,is,not,set;public,class,extends,abstract,invokable,get,invokable,class,class,loader,cl,if,cl,null,throw,new,null,pointer,exception,the,classloader,must,not,be,null,if,invokable,class,name,null,return,null,try,return,class,for,name,invokable,class,name,true,cl,as,subclass,abstract,invokable,class,catch,class,not,found,exception,e,throw,new,runtime,exception,the,user,code,class,could,not,be,resolved,e,catch,class,cast,exception,e,throw,new,runtime,exception,the,user,code,class,is,no,subclass,of,abstract,invokable,class,get,name,e
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds);1481709237;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex.;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds);1485269495;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex.;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds);1489060856;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex.;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds);1489671807;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex.;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds) {_		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids
JobVertex -> public int getNumberOfInputs();1434467925;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1442492509;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1452854660;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1455549373;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1460563153;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1465991918;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1472663071;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1472663401;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1472663401;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1478815184;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1481709237;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1485269495;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1489060856;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1489671807;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1493403095;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1515177485;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public int getNumberOfInputs();1547644408;Returns the number of inputs.__@return The number of inputs.;public int getNumberOfInputs() {_		return this.inputs.size()__	};returns,the,number,of,inputs,return,the,number,of,inputs;public,int,get,number,of,inputs,return,this,inputs,size
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1434467925;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1442492509;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1452854660;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1455549373;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1460563153;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1465991918;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1472663071;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1472663401;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1472663401;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1478815184;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1481709237;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1485269495;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1489060856;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1489671807;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1493403095;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1515177485;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void initializeOnMaster(ClassLoader loader) throws Exception;1547644408;A hook that can be overwritten by sub classes to implement logic that is called by the_master when the job starts.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void initializeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,when,the,job,starts,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,initialize,on,master,class,loader,loader,throws,exception
JobVertex -> public void setParallelism(int parallelism);1434467925;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1442492509;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1452854660;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1455549373;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1460563153;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1465991918;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1472663071;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1472663401;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1472663401;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1478815184;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1481709237;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1485269495;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1489060856;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1489671807;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1493403095;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1515177485;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public void setParallelism(int parallelism);1547644408;Sets the parallelism for the task.__@param parallelism The parallelism for the task.;public void setParallelism(int parallelism) {_		if (parallelism < 1) {_			throw new IllegalArgumentException("The parallelism must be at least one.")__		}_		this.parallelism = parallelism__	};sets,the,parallelism,for,the,task,param,parallelism,the,parallelism,for,the,task;public,void,set,parallelism,int,parallelism,if,parallelism,1,throw,new,illegal,argument,exception,the,parallelism,must,be,at,least,one,this,parallelism,parallelism
JobVertex -> public JobVertexID getID();1434467925;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1442492509;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1452854660;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1455549373;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1460563153;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1465991918;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1472663071;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1472663401;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1472663401;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1478815184;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1481709237;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1485269495;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1489060856;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1489671807;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1493403095;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1515177485;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public JobVertexID getID();1547644408;Returns the ID of this job vertex.__@return The ID of this job vertex;public JobVertexID getID() {_		return this.id__	};returns,the,id,of,this,job,vertex,return,the,id,of,this,job,vertex;public,job,vertex,id,get,id,return,this,id
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1434467925;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}_		_		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup__		_		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1442492509;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}_		_		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup__		_		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1452854660;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}_		_		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup__		_		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1455549373;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1460563153;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1465991918;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1472663071;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1472663401;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1472663401;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1478815184;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1481709237;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1485269495;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1489060856;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1489671807;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1493403095;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1515177485;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith);1547644408;Tells this vertex to strictly co locate its subtasks with the subtasks of the given vertex._Strict co-location implies that the n'th subtask of this vertex will run on the same parallel computing_instance (TaskManager) as the n'th subtask of the given vertex.__NOTE: Co-location is only possible between vertices in a slot sharing group.__NOTE: This vertex must (transitively) depend on the vertex to be co-located with. That means that the_respective vertex must be a (transitive) input of this vertex.__@param strictlyCoLocatedWith The vertex whose subtasks to co-locate this vertex's subtasks with.__@throws IllegalArgumentException Thrown, if this vertex and the vertex to co-locate with are not in a common_slot sharing group.__@see #setSlotSharingGroup(SlotSharingGroup);public void setStrictlyCoLocatedWith(JobVertex strictlyCoLocatedWith) {_		if (this.slotSharingGroup == null || this.slotSharingGroup != strictlyCoLocatedWith.slotSharingGroup) {_			throw new IllegalArgumentException("Strict co-location requires that both vertices are in the same slot sharing group.")__		}__		CoLocationGroup thisGroup = this.coLocationGroup__		CoLocationGroup otherGroup = strictlyCoLocatedWith.coLocationGroup___		if (otherGroup == null) {_			if (thisGroup == null) {_				CoLocationGroup group = new CoLocationGroup(this, strictlyCoLocatedWith)__				this.coLocationGroup = group__				strictlyCoLocatedWith.coLocationGroup = group__			}_			else {_				thisGroup.addVertex(strictlyCoLocatedWith)__				strictlyCoLocatedWith.coLocationGroup = thisGroup__			}_		}_		else {_			if (thisGroup == null) {_				otherGroup.addVertex(this)__				this.coLocationGroup = otherGroup__			}_			else {_				_				thisGroup.mergeInto(otherGroup)__			}_		}_	};tells,this,vertex,to,strictly,co,locate,its,subtasks,with,the,subtasks,of,the,given,vertex,strict,co,location,implies,that,the,n,th,subtask,of,this,vertex,will,run,on,the,same,parallel,computing,instance,task,manager,as,the,n,th,subtask,of,the,given,vertex,note,co,location,is,only,possible,between,vertices,in,a,slot,sharing,group,note,this,vertex,must,transitively,depend,on,the,vertex,to,be,co,located,with,that,means,that,the,respective,vertex,must,be,a,transitive,input,of,this,vertex,param,strictly,co,located,with,the,vertex,whose,subtasks,to,co,locate,this,vertex,s,subtasks,with,throws,illegal,argument,exception,thrown,if,this,vertex,and,the,vertex,to,co,locate,with,are,not,in,a,common,slot,sharing,group,see,set,slot,sharing,group,slot,sharing,group;public,void,set,strictly,co,located,with,job,vertex,strictly,co,located,with,if,this,slot,sharing,group,null,this,slot,sharing,group,strictly,co,located,with,slot,sharing,group,throw,new,illegal,argument,exception,strict,co,location,requires,that,both,vertices,are,in,the,same,slot,sharing,group,co,location,group,this,group,this,co,location,group,co,location,group,other,group,strictly,co,located,with,co,location,group,if,other,group,null,if,this,group,null,co,location,group,group,new,co,location,group,this,strictly,co,located,with,this,co,location,group,group,strictly,co,located,with,co,location,group,group,else,this,group,add,vertex,strictly,co,located,with,strictly,co,located,with,co,location,group,this,group,else,if,this,group,null,other,group,add,vertex,this,this,co,location,group,other,group,else,this,group,merge,into,other,group
JobVertex -> public void setMaxParallelism(int maxParallelism);1472663071;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set.;public void setMaxParallelism(int maxParallelism) {_		org.apache.flink.util.Preconditions.checkArgument(_				maxParallelism > 0 && maxParallelism <= Short.MAX_VALUE, "The max parallelism must be at least 1.")___		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set;public,void,set,max,parallelism,int,max,parallelism,org,apache,flink,util,preconditions,check,argument,max,parallelism,0,max,parallelism,short,the,max,parallelism,must,be,at,least,1,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1472663401;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		org.apache.flink.util.Preconditions.checkArgument(_				maxParallelism > 0 && maxParallelism <= Short.MAX_VALUE, "The max parallelism must be at least 1.")___		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,org,apache,flink,util,preconditions,check,argument,max,parallelism,0,max,parallelism,short,the,max,parallelism,must,be,at,least,1,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1472663401;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		org.apache.flink.util.Preconditions.checkArgument(_				maxParallelism > 0 && maxParallelism <= (1 << 15),_				"The max parallelism must be at least 1 and smaller than 2^15.")___		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,org,apache,flink,util,preconditions,check,argument,max,parallelism,0,max,parallelism,1,15,the,max,parallelism,must,be,at,least,1,and,smaller,than,2,15,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1478815184;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		org.apache.flink.util.Preconditions.checkArgument(_				maxParallelism > 0 && maxParallelism <= (1 << 15),_				"The max parallelism must be at least 1 and smaller than 2^15.")___		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,org,apache,flink,util,preconditions,check,argument,max,parallelism,0,max,parallelism,1,15,the,max,parallelism,must,be,at,least,1,and,smaller,than,2,15,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1481709237;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		org.apache.flink.util.Preconditions.checkArgument(_				maxParallelism > 0 && maxParallelism <= (1 << 15),_				"The max parallelism must be at least 1 and smaller than 2^15.")___		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,org,apache,flink,util,preconditions,check,argument,max,parallelism,0,max,parallelism,1,15,the,max,parallelism,must,be,at,least,1,and,smaller,than,2,15,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1485269495;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1489060856;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1489671807;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1493403095;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1515177485;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
JobVertex -> public void setMaxParallelism(int maxParallelism);1547644408;Sets the maximum parallelism for the task.__@param maxParallelism The maximum parallelism to be set. must be between 1 and Short.MAX_VALUE.;public void setMaxParallelism(int maxParallelism) {_		this.maxParallelism = maxParallelism__	};sets,the,maximum,parallelism,for,the,task,param,max,parallelism,the,maximum,parallelism,to,be,set,must,be,between,1,and,short;public,void,set,max,parallelism,int,max,parallelism,this,max,parallelism,max,parallelism
JobVertex -> public String getInvokableClassName();1434467925;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1442492509;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1452854660;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1455549373;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1460563153;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1465991918;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1472663071;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1472663401;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1472663401;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1478815184;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1481709237;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1485269495;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1489060856;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1489671807;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1493403095;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1515177485;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public String getInvokableClassName();1547644408;Returns the name of the invokable class which represents the task of this vertex.__@return The name of the invokable class, <code>null</code> if not set.;public String getInvokableClassName() {_		return this.invokableClassName__	};returns,the,name,of,the,invokable,class,which,represents,the,task,of,this,vertex,return,the,name,of,the,invokable,class,code,null,code,if,not,set;public,string,get,invokable,class,name,return,this,invokable,class,name
JobVertex -> public void setName(String name);1434467925;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1442492509;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1452854660;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1455549373;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1460563153;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1465991918;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1472663071;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1472663401;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1472663401;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1478815184;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1481709237;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1485269495;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1489060856;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1489671807;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1493403095;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1515177485;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public void setName(String name);1547644408;Sets the name of the vertex__@param name The new name.;public void setName(String name) {_		this.name = name == null ? DEFAULT_NAME : name__	};sets,the,name,of,the,vertex,param,name,the,new,name;public,void,set,name,string,name,this,name,name,null,name
JobVertex -> public ResourceSpec getMinResources();1489671807;Gets the minimum resource for the task.__@return The minimum resource for the task.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,for,the,task,return,the,minimum,resource,for,the,task;public,resource,spec,get,min,resources,return,min,resources
JobVertex -> public ResourceSpec getMinResources();1493403095;Gets the minimum resource for the task.__@return The minimum resource for the task.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,for,the,task,return,the,minimum,resource,for,the,task;public,resource,spec,get,min,resources,return,min,resources
JobVertex -> public ResourceSpec getMinResources();1515177485;Gets the minimum resource for the task.__@return The minimum resource for the task.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,for,the,task,return,the,minimum,resource,for,the,task;public,resource,spec,get,min,resources,return,min,resources
JobVertex -> public ResourceSpec getMinResources();1547644408;Gets the minimum resource for the task.__@return The minimum resource for the task.;public ResourceSpec getMinResources() {_		return minResources__	};gets,the,minimum,resource,for,the,task,return,the,minimum,resource,for,the,task;public,resource,spec,get,min,resources,return,min,resources
JobVertex -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1489671807;Sets the minimum and preferred resources for the task.__@param minResources The minimum resource for the task._@param preferredResources The preferred resource for the task.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,the,task,param,min,resources,the,minimum,resource,for,the,task,param,preferred,resources,the,preferred,resource,for,the,task;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
JobVertex -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1493403095;Sets the minimum and preferred resources for the task.__@param minResources The minimum resource for the task._@param preferredResources The preferred resource for the task.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,the,task,param,min,resources,the,minimum,resource,for,the,task,param,preferred,resources,the,preferred,resource,for,the,task;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
JobVertex -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1515177485;Sets the minimum and preferred resources for the task.__@param minResources The minimum resource for the task._@param preferredResources The preferred resource for the task.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,the,task,param,min,resources,the,minimum,resource,for,the,task,param,preferred,resources,the,preferred,resource,for,the,task;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
JobVertex -> public void setResources(ResourceSpec minResources, ResourceSpec preferredResources);1547644408;Sets the minimum and preferred resources for the task.__@param minResources The minimum resource for the task._@param preferredResources The preferred resource for the task.;public void setResources(ResourceSpec minResources, ResourceSpec preferredResources) {_		this.minResources = checkNotNull(minResources)__		this.preferredResources = checkNotNull(preferredResources)__	};sets,the,minimum,and,preferred,resources,for,the,task,param,min,resources,the,minimum,resource,for,the,task,param,preferred,resources,the,preferred,resource,for,the,task;public,void,set,resources,resource,spec,min,resources,resource,spec,preferred,resources,this,min,resources,check,not,null,min,resources,this,preferred,resources,check,not,null,preferred,resources
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1434467925;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1442492509;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1452854660;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1455549373;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1460563153;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1465991918;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1472663071;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1472663401;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1472663401;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1478815184;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1481709237;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1485269495;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1489060856;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1489671807;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1493403095;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1515177485;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public int getNumberOfProducedIntermediateDataSets();1547644408;Returns the number of produced intermediate data sets.__@return The number of produced intermediate data sets.;public int getNumberOfProducedIntermediateDataSets() {_		return this.results.size()__	};returns,the,number,of,produced,intermediate,data,sets,return,the,number,of,produced,intermediate,data,sets;public,int,get,number,of,produced,intermediate,data,sets,return,this,results,size
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1434467925;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1442492509;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1452854660;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1455549373;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1460563153;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1465991918;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1472663071;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1472663401;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1472663401;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1478815184;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1481709237;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1485269495;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1489060856;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1489671807;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1493403095;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1515177485;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public void finalizeOnMaster(ClassLoader loader) throws Exception;1547644408;A hook that can be overwritten by sub classes to implement logic that is called by the_master after the job completed.__@param loader The class loader for user defined code._@throws Exception The method may throw exceptions which cause the job to fail immediately.;public void finalizeOnMaster(ClassLoader loader) throws Exception {};a,hook,that,can,be,overwritten,by,sub,classes,to,implement,logic,that,is,called,by,the,master,after,the,job,completed,param,loader,the,class,loader,for,user,defined,code,throws,exception,the,method,may,throw,exceptions,which,cause,the,job,to,fail,immediately;public,void,finalize,on,master,class,loader,loader,throws,exception
JobVertex -> public Configuration getConfiguration();1434467925;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1442492509;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1452854660;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1455549373;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1460563153;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1465991918;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1472663071;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1472663401;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1472663401;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1478815184;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1481709237;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1485269495;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1489060856;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1489671807;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1493403095;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1515177485;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public Configuration getConfiguration();1547644408;Returns the vertex's configuration object which can be used to pass custom settings to the task at runtime.__@return the vertex's configuration object;public Configuration getConfiguration() {_		if (this.configuration == null) {_			this.configuration = new Configuration()__		}_		return this.configuration__	};returns,the,vertex,s,configuration,object,which,can,be,used,to,pass,custom,settings,to,the,task,at,runtime,return,the,vertex,s,configuration,object;public,configuration,get,configuration,if,this,configuration,null,this,configuration,new,configuration,return,this,configuration
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds);1493403095;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex._@param operatorIds The ids of all operators contained in this job vertex._@param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {_		Preconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size())__		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__		this.operatorIDs.addAll(operatorIds)__		this.operatorIdsAlternatives.addAll(alternativeOperatorIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex,param,operator,ids,the,ids,of,all,operators,contained,in,this,job,vertex,param,alternative,operator,ids,the,alternative,ids,of,all,operators,contained,in,this,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,list,operator,id,operator,ids,list,operator,id,alternative,operator,ids,preconditions,check,argument,operator,ids,size,alternative,operator,ids,size,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids,this,operator,ids,add,all,operator,ids,this,operator,ids,alternatives,add,all,alternative,operator,ids
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds);1515177485;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex._@param operatorIds The ids of all operators contained in this job vertex._@param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {_		Preconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size())__		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__		this.operatorIDs.addAll(operatorIds)__		this.operatorIdsAlternatives.addAll(alternativeOperatorIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex,param,operator,ids,the,ids,of,all,operators,contained,in,this,job,vertex,param,alternative,operator,ids,the,alternative,ids,of,all,operators,contained,in,this,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,list,operator,id,operator,ids,list,operator,id,alternative,operator,ids,preconditions,check,argument,operator,ids,size,alternative,operator,ids,size,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids,this,operator,ids,add,all,operator,ids,this,operator,ids,alternatives,add,all,alternative,operator,ids
JobVertex -> public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds);1547644408;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex._@param primaryId The id of the job vertex._@param alternativeIds The alternative ids of the job vertex._@param operatorIds The ids of all operators contained in this job vertex._@param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-;public JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {_		Preconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size())__		this.name = name == null ? DEFAULT_NAME : name__		this.id = primaryId == null ? new JobVertexID() : primaryId__		this.idAlternatives.addAll(alternativeIds)__		this.operatorIDs.addAll(operatorIds)__		this.operatorIdsAlternatives.addAll(alternativeOperatorIds)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex,param,primary,id,the,id,of,the,job,vertex,param,alternative,ids,the,alternative,ids,of,the,job,vertex,param,operator,ids,the,ids,of,all,operators,contained,in,this,job,vertex,param,alternative,operator,ids,the,alternative,ids,of,all,operators,contained,in,this,job,vertex;public,job,vertex,string,name,job,vertex,id,primary,id,list,job,vertex,id,alternative,ids,list,operator,id,operator,ids,list,operator,id,alternative,operator,ids,preconditions,check,argument,operator,ids,size,alternative,operator,ids,size,this,name,name,null,name,this,id,primary,id,null,new,job,vertex,id,primary,id,this,id,alternatives,add,all,alternative,ids,this,operator,ids,add,all,operator,ids,this,operator,ids,alternatives,add,all,alternative,operator,ids
JobVertex -> public ResourceSpec getPreferredResources();1489671807;Gets the preferred resource for the task.__@return The preferred resource for the task.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,for,the,task,return,the,preferred,resource,for,the,task;public,resource,spec,get,preferred,resources,return,preferred,resources
JobVertex -> public ResourceSpec getPreferredResources();1493403095;Gets the preferred resource for the task.__@return The preferred resource for the task.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,for,the,task,return,the,preferred,resource,for,the,task;public,resource,spec,get,preferred,resources,return,preferred,resources
JobVertex -> public ResourceSpec getPreferredResources();1515177485;Gets the preferred resource for the task.__@return The preferred resource for the task.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,for,the,task,return,the,preferred,resource,for,the,task;public,resource,spec,get,preferred,resources,return,preferred,resources
JobVertex -> public ResourceSpec getPreferredResources();1547644408;Gets the preferred resource for the task.__@return The preferred resource for the task.;public ResourceSpec getPreferredResources() {_		return preferredResources__	};gets,the,preferred,resource,for,the,task,return,the,preferred,resource,for,the,task;public,resource,spec,get,preferred,resources,return,preferred,resources
JobVertex -> public int getParallelism();1434467925;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1442492509;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1452854660;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1455549373;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1460563153;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1465991918;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1472663071;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1472663401;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1472663401;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1478815184;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1481709237;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1485269495;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1489060856;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1489671807;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1493403095;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1515177485;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public int getParallelism();1547644408;Gets the parallelism of the task.__@return The parallelism of the task.;public int getParallelism() {_		return parallelism__	};gets,the,parallelism,of,the,task,return,the,parallelism,of,the,task;public,int,get,parallelism,return,parallelism
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1434467925;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}_		_		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1442492509;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}_		_		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1452854660;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}_		_		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1455549373;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1460563153;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1465991918;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1472663071;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1472663401;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1472663401;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1478815184;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1481709237;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1485269495;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1489060856;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1489671807;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1493403095;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1515177485;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public void setSlotSharingGroup(SlotSharingGroup grp);1547644408;Associates this vertex with a slot sharing group for scheduling. Different vertices in the same_slot sharing group can run one subtask each in the same slot.__@param grp The slot sharing group to associate the vertex with.;public void setSlotSharingGroup(SlotSharingGroup grp) {_		if (this.slotSharingGroup != null) {_			this.slotSharingGroup.removeVertexFromGroup(id)__		}__		this.slotSharingGroup = grp__		if (grp != null) {_			grp.addVertexToGroup(id)__		}_	};associates,this,vertex,with,a,slot,sharing,group,for,scheduling,different,vertices,in,the,same,slot,sharing,group,can,run,one,subtask,each,in,the,same,slot,param,grp,the,slot,sharing,group,to,associate,the,vertex,with;public,void,set,slot,sharing,group,slot,sharing,group,grp,if,this,slot,sharing,group,null,this,slot,sharing,group,remove,vertex,from,group,id,this,slot,sharing,group,grp,if,grp,null,grp,add,vertex,to,group,id
JobVertex -> public JobVertex(String name);1434467925;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1442492509;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1452854660;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1455549373;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1460563153;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1465991918;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1472663071;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1472663401;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1472663401;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1478815184;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1481709237;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1485269495;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1489060856;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1489671807;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1493403095;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1515177485;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public JobVertex(String name);1547644408;Constructs a new job vertex and assigns it with the given name.__@param name The name of the new job vertex.;public JobVertex(String name) {_		this(name, null)__	};constructs,a,new,job,vertex,and,assigns,it,with,the,given,name,param,name,the,name,of,the,new,job,vertex;public,job,vertex,string,name,this,name,null
JobVertex -> public List<JobVertexID> getIdAlternatives();1481709237;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
JobVertex -> public List<JobVertexID> getIdAlternatives();1485269495;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
JobVertex -> public List<JobVertexID> getIdAlternatives();1489060856;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
JobVertex -> public List<JobVertexID> getIdAlternatives();1489671807;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
JobVertex -> public List<JobVertexID> getIdAlternatives();1493403095;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
JobVertex -> public List<JobVertexID> getIdAlternatives();1515177485;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
JobVertex -> public List<JobVertexID> getIdAlternatives();1547644408;Returns a list of all alternative IDs of this job vertex.__@return List of all alternative IDs for this job vertex;public List<JobVertexID> getIdAlternatives() {_		return idAlternatives__	};returns,a,list,of,all,alternative,ids,of,this,job,vertex,return,list,of,all,alternative,ids,for,this,job,vertex;public,list,job,vertex,id,get,id,alternatives,return,id,alternatives
