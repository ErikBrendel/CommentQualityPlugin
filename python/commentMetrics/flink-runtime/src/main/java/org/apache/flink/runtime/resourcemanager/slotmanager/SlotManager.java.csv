# id;timestamp;commentText;codeText;commentWords;codeWords
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1486637985;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1493301216;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1493307989;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1501529908;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1501580028;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1503019375;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1503580260;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1507240448;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1507653580;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1507738083;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1507879191;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1516815167;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1519305029;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1519920149;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1520254504;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1520593421;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1521641386;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1525377048;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1525934187;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1530472121;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1530503760;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1531900495;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1534938698;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1537262283;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1537448260;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1537538032;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException;1542290209;Requests a slot with the respective resource profile.__@param slotRequest specifying the requested slot specs_@return true if the slot request was registered_ false if the request is a duplicate_@throws SlotManagerException if the slot request failed (e.g. not enough resources left);public boolean registerSlotRequest(SlotRequest slotRequest) throws SlotManagerException {_		checkInit()___		if (checkDuplicateRequest(slotRequest.getAllocationId())) {_			LOG.debug("Ignoring a duplicate slot request with allocation id {}.", slotRequest.getAllocationId())___			return false__		} else {_			PendingSlotRequest pendingSlotRequest = new PendingSlotRequest(slotRequest)___			pendingSlotRequests.put(slotRequest.getAllocationId(), pendingSlotRequest)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				_				pendingSlotRequests.remove(slotRequest.getAllocationId())___				throw new SlotManagerException("Could not fulfill slot request " + slotRequest.getAllocationId() + '.', e)__			}__			return true__		}_	};requests,a,slot,with,the,respective,resource,profile,param,slot,request,specifying,the,requested,slot,specs,return,true,if,the,slot,request,was,registered,false,if,the,request,is,a,duplicate,throws,slot,manager,exception,if,the,slot,request,failed,e,g,not,enough,resources,left;public,boolean,register,slot,request,slot,request,slot,request,throws,slot,manager,exception,check,init,if,check,duplicate,request,slot,request,get,allocation,id,log,debug,ignoring,a,duplicate,slot,request,with,allocation,id,slot,request,get,allocation,id,return,false,else,pending,slot,request,pending,slot,request,new,pending,slot,request,slot,request,pending,slot,requests,put,slot,request,get,allocation,id,pending,slot,request,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,slot,request,get,allocation,id,throw,new,slot,manager,exception,could,not,fulfill,slot,request,slot,request,get,allocation,id,e,return,true
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1486637985;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1493301216;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1493307989;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1501529908;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1501580028;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1503019375;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1503580260;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1507240448;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1507653580;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1507738083;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1507879191;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1516815167;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1519305029;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1519920149;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1520254504;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1520593421;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1521641386;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1525377048;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1525934187;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1530472121;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1530503760;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1531900495;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1534938698;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1537262283;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1537448260;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1537538032;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile);1542290209;Finds a matching slot request for a given resource profile. If there is no such request,_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param slotResourceProfile defining the resources of an available slot_@return A matching slot request which can be deployed in a slot with the given resource_profile. Null if there is no such slot request pending.;protected PendingSlotRequest findMatchingRequest(ResourceProfile slotResourceProfile) {__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			if (!pendingSlotRequest.isAssigned() && slotResourceProfile.isMatching(pendingSlotRequest.getResourceProfile())) {_				return pendingSlotRequest__			}_		}__		return null__	};finds,a,matching,slot,request,for,a,given,resource,profile,if,there,is,no,such,request,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,slot,resource,profile,defining,the,resources,of,an,available,slot,return,a,matching,slot,request,which,can,be,deployed,in,a,slot,with,the,given,resource,profile,null,if,there,is,no,such,slot,request,pending;protected,pending,slot,request,find,matching,request,resource,profile,slot,resource,profile,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,if,pending,slot,request,is,assigned,slot,resource,profile,is,matching,pending,slot,request,get,resource,profile,return,pending,slot,request,return,null
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1493301216;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1493307989;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1501529908;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1501580028;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1503019375;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1503580260;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1507240448;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1507653580;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1507738083;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection,_			allocationId)___		slots.put(slotId, slot)___		if (slot.isFree()) {_			handleFreeSlot(slot)__		}__		if (slot.isAllocated()) {_			fulfilledSlotRequests.put(slot.getAllocationId(), slotId)__		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,allocation,id,slots,put,slot,id,slot,if,slot,is,free,handle,free,slot,slot,if,slot,is,allocated,fulfilled,slot,requests,put,slot,get,allocation,id,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1507879191;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1516815167;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1519305029;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1519920149;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1520254504;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1520593421;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1521641386;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1525377048;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1472741611;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1474459992;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1474471581;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1474482025;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1474965482;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1475154512;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1475679726;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> AllocationMap -> void removeAllocation(final AllocationID allocationId);1476113770;De-allocation with allocation id__@param allocationId The allocation id;void removeAllocation(final AllocationID allocationId) {_			if (allocatedSlotsByAllocationId.containsKey(allocationId)) {_				SlotID slotId = allocatedSlotsByAllocationId.get(allocationId)__				allocatedSlotsByAllocationId.remove(allocationId)__				allocatedSlots.remove(slotId)__			}_		};de,allocation,with,allocation,id,param,allocation,id,the,allocation,id;void,remove,allocation,final,allocation,id,allocation,id,if,allocated,slots,by,allocation,id,contains,key,allocation,id,slot,id,slot,id,allocated,slots,by,allocation,id,get,allocation,id,allocated,slots,by,allocation,id,remove,allocation,id,allocated,slots,remove,slot,id
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1503580260;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceManagerActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1507738083;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceManagerActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1507879191;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceManagerActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> private void registerNewSlot(final ResourceSlot slot);1475154512;Registers a new slot with the SlotManager.__@param slot The ResourceSlot which will be registered;private void registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slotId, slot)__	};registers,a,new,slot,with,the,slot,manager,param,slot,the,resource,slot,which,will,be,registered;private,void,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,id,slot
SlotManager -> private void registerNewSlot(final ResourceSlot slot);1475679726;Registers a new slot with the SlotManager.__@param slot The ResourceSlot which will be registered;private void registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slotId, slot)__	};registers,a,new,slot,with,the,slot,manager,param,slot,the,resource,slot,which,will,be,registered;private,void,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,id,slot
SlotManager -> private void registerNewSlot(final ResourceSlot slot);1476113770;Registers a new slot with the SlotManager.__@param slot The ResourceSlot which will be registered;private void registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slotId, slot)__	};registers,a,new,slot,with,the,slot,manager,param,slot,the,resource,slot,which,will,be,registered;private,void,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,id,slot
SlotManager -> public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1472741611;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		_		if (freeSlots.containsKey(slotId)) {_			_			LOG.info("Original slot is somehow empty, retrying this request")___			_			if (!allocationMap.isAllocated(originalAllocationId)) {_				requestSlot(originalRequest)__			} else {_				LOG.info("The failed request has somehow been allocated, SlotID:{}",_					allocationMap.getSlotID(originalAllocationId))__			}_		} else if (allocationMap.isAllocated(slotId)) {_			final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(currentAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(currentAllocationId)___				_				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				freeSlots.put(slotId, slot)___				_				requestSlot(originalRequest)__			} else {_				_				LOG.info("Original slot is taken by someone else, current AllocationID:{}", currentAllocationId)___				_				if (!allocationMap.isAllocated(originalAllocationId)) {_					requestSlot(originalRequest)__				} else {_					LOG.info("The failed request is somehow been allocated, SlotID:{}",_						allocationMap.getSlotID(originalAllocationId))__				}_			}_		} else {_			LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;public,void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,free,slots,contains,key,slot,id,log,info,original,slot,is,somehow,empty,retrying,this,request,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,has,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,current,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,current,allocation,id,resource,slot,slot,check,not,null,get,registered,slot,slot,id,free,slots,put,slot,id,slot,request,slot,original,request,else,log,info,original,slot,is,taken,by,someone,else,current,allocation,id,current,allocation,id,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,is,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1474459992;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		_		if (freeSlots.containsKey(slotId)) {_			_			LOG.info("Original slot is somehow empty, retrying this request")___			_			if (!allocationMap.isAllocated(originalAllocationId)) {_				requestSlot(originalRequest)__			} else {_				LOG.info("The failed request has somehow been allocated, SlotID:{}",_					allocationMap.getSlotID(originalAllocationId))__			}_		} else if (allocationMap.isAllocated(slotId)) {_			final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(currentAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(currentAllocationId)___				_				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				freeSlots.put(slotId, slot)___				_				requestSlot(originalRequest)__			} else {_				_				LOG.info("Original slot is taken by someone else, current AllocationID:{}", currentAllocationId)___				_				if (!allocationMap.isAllocated(originalAllocationId)) {_					requestSlot(originalRequest)__				} else {_					LOG.info("The failed request is somehow been allocated, SlotID:{}",_						allocationMap.getSlotID(originalAllocationId))__				}_			}_		} else {_			LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;public,void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,free,slots,contains,key,slot,id,log,info,original,slot,is,somehow,empty,retrying,this,request,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,has,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,current,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,current,allocation,id,resource,slot,slot,check,not,null,get,registered,slot,slot,id,free,slots,put,slot,id,slot,request,slot,original,request,else,log,info,original,slot,is,taken,by,someone,else,current,allocation,id,current,allocation,id,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,is,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1474471581;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		_		if (freeSlots.containsKey(slotId)) {_			_			LOG.info("Original slot is somehow empty, retrying this request")___			_			if (!allocationMap.isAllocated(originalAllocationId)) {_				requestSlot(originalRequest)__			} else {_				LOG.info("The failed request has somehow been allocated, SlotID:{}",_					allocationMap.getSlotID(originalAllocationId))__			}_		} else if (allocationMap.isAllocated(slotId)) {_			final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(currentAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(currentAllocationId)___				_				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				freeSlots.put(slotId, slot)___				_				requestSlot(originalRequest)__			} else {_				_				LOG.info("Original slot is taken by someone else, current AllocationID:{}", currentAllocationId)___				_				if (!allocationMap.isAllocated(originalAllocationId)) {_					requestSlot(originalRequest)__				} else {_					LOG.info("The failed request is somehow been allocated, SlotID:{}",_						allocationMap.getSlotID(originalAllocationId))__				}_			}_		} else {_			LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;public,void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,free,slots,contains,key,slot,id,log,info,original,slot,is,somehow,empty,retrying,this,request,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,has,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,current,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,current,allocation,id,resource,slot,slot,check,not,null,get,registered,slot,slot,id,free,slots,put,slot,id,slot,request,slot,original,request,else,log,info,original,slot,is,taken,by,someone,else,current,allocation,id,current,allocation,id,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,is,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1474482025;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		_		if (freeSlots.containsKey(slotId)) {_			_			LOG.info("Original slot is somehow empty, retrying this request")___			_			if (!allocationMap.isAllocated(originalAllocationId)) {_				requestSlot(originalRequest)__			} else {_				LOG.info("The failed request has somehow been allocated, SlotID:{}",_					allocationMap.getSlotID(originalAllocationId))__			}_		} else if (allocationMap.isAllocated(slotId)) {_			final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(currentAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(currentAllocationId)___				_				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				freeSlots.put(slotId, slot)___				_				requestSlot(originalRequest)__			} else {_				_				LOG.info("Original slot is taken by someone else, current AllocationID:{}", currentAllocationId)___				_				if (!allocationMap.isAllocated(originalAllocationId)) {_					requestSlot(originalRequest)__				} else {_					LOG.info("The failed request is somehow been allocated, SlotID:{}",_						allocationMap.getSlotID(originalAllocationId))__				}_			}_		} else {_			LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;public,void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,free,slots,contains,key,slot,id,log,info,original,slot,is,somehow,empty,retrying,this,request,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,has,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,current,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,current,allocation,id,resource,slot,slot,check,not,null,get,registered,slot,slot,id,free,slots,put,slot,id,slot,request,slot,original,request,else,log,info,original,slot,is,taken,by,someone,else,current,allocation,id,current,allocation,id,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,is,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1474965482;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;public void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		_		if (freeSlots.containsKey(slotId)) {_			_			LOG.info("Original slot is somehow empty, retrying this request")___			_			if (!allocationMap.isAllocated(originalAllocationId)) {_				requestSlot(originalRequest)__			} else {_				LOG.info("The failed request has somehow been allocated, SlotID:{}",_					allocationMap.getSlotID(originalAllocationId))__			}_		} else if (allocationMap.isAllocated(slotId)) {_			final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(currentAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(currentAllocationId)___				_				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				freeSlots.put(slotId, slot)___				_				requestSlot(originalRequest)__			} else {_				_				LOG.info("Original slot is taken by someone else, current AllocationID:{}", currentAllocationId)___				_				if (!allocationMap.isAllocated(originalAllocationId)) {_					requestSlot(originalRequest)__				} else {_					LOG.info("The failed request is somehow been allocated, SlotID:{}",_						allocationMap.getSlotID(originalAllocationId))__				}_			}_		} else {_			LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;public,void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,free,slots,contains,key,slot,id,log,info,original,slot,is,somehow,empty,retrying,this,request,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,has,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,current,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,current,allocation,id,resource,slot,slot,check,not,null,get,registered,slot,slot,id,free,slots,put,slot,id,slot,request,slot,original,request,else,log,info,original,slot,is,taken,by,someone,else,current,allocation,id,current,allocation,id,if,allocation,map,is,allocated,original,allocation,id,request,slot,original,request,else,log,info,the,failed,request,is,somehow,been,allocated,slot,id,allocation,map,get,slot,id,original,allocation,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1525934187;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId, jobId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id,job,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1530472121;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId, jobId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id,job,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1530503760;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId, jobId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id,job,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1531900495;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId, jobId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id,job,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1534938698;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		final TaskManagerSlot slot = createAndRegisterTaskManagerSlot(slotId, resourceProfile, taskManagerConnection)___		final PendingTaskManagerSlot pendingTaskManagerSlot___		if (allocationId == null) {_			pendingTaskManagerSlot = findExactlyMatchingPendingTaskManagerSlot(resourceProfile)__		} else {_			pendingTaskManagerSlot = null__		}__		if (pendingTaskManagerSlot == null) {_			updateSlot(slotId, allocationId, jobId)__		} else {_			pendingSlots.remove(pendingTaskManagerSlot.getTaskManagerSlotId())__			final PendingSlotRequest assignedPendingSlotRequest = pendingTaskManagerSlot.getAssignedPendingSlotRequest()___			if (assignedPendingSlotRequest == null) {_				handleFreeSlot(slot)__			} else {_				assignedPendingSlotRequest.unassignPendingTaskManagerSlot()__				allocateSlot(slot, assignedPendingSlotRequest)__			}_		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,final,task,manager,slot,slot,create,and,register,task,manager,slot,slot,id,resource,profile,task,manager,connection,final,pending,task,manager,slot,pending,task,manager,slot,if,allocation,id,null,pending,task,manager,slot,find,exactly,matching,pending,task,manager,slot,resource,profile,else,pending,task,manager,slot,null,if,pending,task,manager,slot,null,update,slot,slot,id,allocation,id,job,id,else,pending,slots,remove,pending,task,manager,slot,get,task,manager,slot,id,final,pending,slot,request,assigned,pending,slot,request,pending,task,manager,slot,get,assigned,pending,slot,request,if,assigned,pending,slot,request,null,handle,free,slot,slot,else,assigned,pending,slot,request,unassign,pending,task,manager,slot,allocate,slot,slot,assigned,pending,slot,request
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1537262283;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId, jobId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id,job,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1537448260;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		TaskManagerSlot slot = new TaskManagerSlot(_			slotId,_			resourceProfile,_			taskManagerConnection)___		slots.put(slotId, slot)___		updateSlot(slotId, allocationId, jobId)__	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,task,manager,slot,slot,new,task,manager,slot,slot,id,resource,profile,task,manager,connection,slots,put,slot,id,slot,update,slot,slot,id,allocation,id,job,id
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1537538032;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		final TaskManagerSlot slot = createAndRegisterTaskManagerSlot(slotId, resourceProfile, taskManagerConnection)___		final PendingTaskManagerSlot pendingTaskManagerSlot___		if (allocationId == null) {_			pendingTaskManagerSlot = findExactlyMatchingPendingTaskManagerSlot(resourceProfile)__		} else {_			pendingTaskManagerSlot = null__		}__		if (pendingTaskManagerSlot == null) {_			updateSlot(slotId, allocationId, jobId)__		} else {_			pendingSlots.remove(pendingTaskManagerSlot.getTaskManagerSlotId())__			final PendingSlotRequest assignedPendingSlotRequest = pendingTaskManagerSlot.getAssignedPendingSlotRequest()___			if (assignedPendingSlotRequest == null) {_				handleFreeSlot(slot)__			} else {_				assignedPendingSlotRequest.unassignPendingTaskManagerSlot()__				allocateSlot(slot, assignedPendingSlotRequest)__			}_		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,final,task,manager,slot,slot,create,and,register,task,manager,slot,slot,id,resource,profile,task,manager,connection,final,pending,task,manager,slot,pending,task,manager,slot,if,allocation,id,null,pending,task,manager,slot,find,exactly,matching,pending,task,manager,slot,resource,profile,else,pending,task,manager,slot,null,if,pending,task,manager,slot,null,update,slot,slot,id,allocation,id,job,id,else,pending,slots,remove,pending,task,manager,slot,get,task,manager,slot,id,final,pending,slot,request,assigned,pending,slot,request,pending,task,manager,slot,get,assigned,pending,slot,request,if,assigned,pending,slot,request,null,handle,free,slot,slot,else,assigned,pending,slot,request,unassign,pending,task,manager,slot,allocate,slot,slot,assigned,pending,slot,request
SlotManager -> private void registerSlot( 			SlotID slotId, 			AllocationID allocationId, 			JobID jobId, 			ResourceProfile resourceProfile, 			TaskExecutorConnection taskManagerConnection);1542290209;Registers a slot for the given task manager at the slot manager. The slot is identified by_the given slot id. The given resource profile defines the available resources for the slot._The task manager connection can be used to communicate with the task manager.__@param slotId identifying the slot on the task manager_@param allocationId which is currently deployed in the slot_@param resourceProfile of the slot_@param taskManagerConnection to communicate with the remote task manager;private void registerSlot(_			SlotID slotId,_			AllocationID allocationId,_			JobID jobId,_			ResourceProfile resourceProfile,_			TaskExecutorConnection taskManagerConnection) {__		if (slots.containsKey(slotId)) {_			_			removeSlot(slotId)__		}__		final TaskManagerSlot slot = createAndRegisterTaskManagerSlot(slotId, resourceProfile, taskManagerConnection)___		final PendingTaskManagerSlot pendingTaskManagerSlot___		if (allocationId == null) {_			pendingTaskManagerSlot = findExactlyMatchingPendingTaskManagerSlot(resourceProfile)__		} else {_			pendingTaskManagerSlot = null__		}__		if (pendingTaskManagerSlot == null) {_			updateSlot(slotId, allocationId, jobId)__		} else {_			pendingSlots.remove(pendingTaskManagerSlot.getTaskManagerSlotId())__			final PendingSlotRequest assignedPendingSlotRequest = pendingTaskManagerSlot.getAssignedPendingSlotRequest()___			if (assignedPendingSlotRequest == null) {_				handleFreeSlot(slot)__			} else {_				assignedPendingSlotRequest.unassignPendingTaskManagerSlot()__				allocateSlot(slot, assignedPendingSlotRequest)__			}_		}_	};registers,a,slot,for,the,given,task,manager,at,the,slot,manager,the,slot,is,identified,by,the,given,slot,id,the,given,resource,profile,defines,the,available,resources,for,the,slot,the,task,manager,connection,can,be,used,to,communicate,with,the,task,manager,param,slot,id,identifying,the,slot,on,the,task,manager,param,allocation,id,which,is,currently,deployed,in,the,slot,param,resource,profile,of,the,slot,param,task,manager,connection,to,communicate,with,the,remote,task,manager;private,void,register,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,resource,profile,resource,profile,task,executor,connection,task,manager,connection,if,slots,contains,key,slot,id,remove,slot,slot,id,final,task,manager,slot,slot,create,and,register,task,manager,slot,slot,id,resource,profile,task,manager,connection,final,pending,task,manager,slot,pending,task,manager,slot,if,allocation,id,null,pending,task,manager,slot,find,exactly,matching,pending,task,manager,slot,resource,profile,else,pending,task,manager,slot,null,if,pending,task,manager,slot,null,update,slot,slot,id,allocation,id,job,id,else,pending,slots,remove,pending,task,manager,slot,get,task,manager,slot,id,final,pending,slot,request,assigned,pending,slot,request,pending,task,manager,slot,get,assigned,pending,slot,request,if,assigned,pending,slot,request,null,handle,free,slot,slot,else,assigned,pending,slot,request,unassign,pending,task,manager,slot,allocate,slot,slot,assigned,pending,slot,request
SlotManager -> public void notifySlotAvailable(ResourceID resourceID, SlotID slotID);1475154512;Notifies the SlotManager that a slot is available again after being allocated._@param slotID slot id of available slot;public void notifySlotAvailable(ResourceID resourceID, SlotID slotID) {_		if (!allocationMap.isAllocated(slotID)) {_			throw new IllegalStateException("Slot was not previously allocated but " +_				"TaskManager reports it as available again")__		}_		allocationMap.removeAllocation(slotID)__		final Map<SlotID, ResourceSlot> slots = registeredSlots.get(resourceID)__		ResourceSlot freeSlot = slots.get(slotID)__		if (freeSlot == null) {_			throw new IllegalStateException("Slot was not registered with SlotManager but " +_				"TaskManager reported it to be available.")__		}_		handleFreeSlot(freeSlot)__	};notifies,the,slot,manager,that,a,slot,is,available,again,after,being,allocated,param,slot,id,slot,id,of,available,slot;public,void,notify,slot,available,resource,id,resource,id,slot,id,slot,id,if,allocation,map,is,allocated,slot,id,throw,new,illegal,state,exception,slot,was,not,previously,allocated,but,task,manager,reports,it,as,available,again,allocation,map,remove,allocation,slot,id,final,map,slot,id,resource,slot,slots,registered,slots,get,resource,id,resource,slot,free,slot,slots,get,slot,id,if,free,slot,null,throw,new,illegal,state,exception,slot,was,not,registered,with,slot,manager,but,task,manager,reported,it,to,be,available,handle,free,slot,free,slot
SlotManager -> public void notifySlotAvailable(ResourceID resourceID, SlotID slotID);1475679726;Notifies the SlotManager that a slot is available again after being allocated._@param slotID slot id of available slot;public void notifySlotAvailable(ResourceID resourceID, SlotID slotID) {_		if (!allocationMap.isAllocated(slotID)) {_			throw new IllegalStateException("Slot was not previously allocated but " +_				"TaskManager reports it as available again")__		}_		allocationMap.removeAllocation(slotID)__		final Map<SlotID, ResourceSlot> slots = registeredSlots.get(resourceID)__		ResourceSlot freeSlot = slots.get(slotID)__		if (freeSlot == null) {_			throw new IllegalStateException("Slot was not registered with SlotManager but " +_				"TaskManager reported it to be available.")__		}_		handleFreeSlot(freeSlot)__	};notifies,the,slot,manager,that,a,slot,is,available,again,after,being,allocated,param,slot,id,slot,id,of,available,slot;public,void,notify,slot,available,resource,id,resource,id,slot,id,slot,id,if,allocation,map,is,allocated,slot,id,throw,new,illegal,state,exception,slot,was,not,previously,allocated,but,task,manager,reports,it,as,available,again,allocation,map,remove,allocation,slot,id,final,map,slot,id,resource,slot,slots,registered,slots,get,resource,id,resource,slot,free,slot,slots,get,slot,id,if,free,slot,null,throw,new,illegal,state,exception,slot,was,not,registered,with,slot,manager,but,task,manager,reported,it,to,be,available,handle,free,slot,free,slot
SlotManager -> public void notifySlotAvailable(ResourceID resourceID, SlotID slotID);1476113770;Notifies the SlotManager that a slot is available again after being allocated._@param slotID slot id of available slot;public void notifySlotAvailable(ResourceID resourceID, SlotID slotID) {_		if (!allocationMap.isAllocated(slotID)) {_			throw new IllegalStateException("Slot was not previously allocated but " +_				"TaskManager reports it as available again")__		}_		allocationMap.removeAllocation(slotID)__		final Map<SlotID, ResourceSlot> slots = registeredSlots.get(resourceID)__		ResourceSlot freeSlot = slots.get(slotID)__		if (freeSlot == null) {_			throw new IllegalStateException("Slot was not registered with SlotManager but " +_				"TaskManager reported it to be available.")__		}_		handleFreeSlot(freeSlot)__	};notifies,the,slot,manager,that,a,slot,is,available,again,after,being,allocated,param,slot,id,slot,id,of,available,slot;public,void,notify,slot,available,resource,id,resource,id,slot,id,slot,id,if,allocation,map,is,allocated,slot,id,throw,new,illegal,state,exception,slot,was,not,previously,allocated,but,task,manager,reports,it,as,available,again,allocation,map,remove,allocation,slot,id,final,map,slot,id,resource,slot,slots,registered,slots,get,resource,id,resource,slot,free,slot,slots,get,slot,id,if,free,slot,null,throw,new,illegal,state,exception,slot,was,not,registered,with,slot,manager,but,task,manager,reported,it,to,be,available,handle,free,slot,free,slot
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1486637985;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1493301216;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1493307989;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1501529908;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1501580028;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1503019375;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1503580260;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1507240448;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1507653580;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1507738083;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1507879191;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1516815167;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1519305029;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1519920149;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1520254504;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1520593421;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1521641386;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1525377048;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1525934187;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1530472121;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1530503760;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1531900495;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1534938698;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1537262283;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1537448260;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1537538032;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> private void removeSlots(Iterable<SlotID> slotsToRemove);1542290209;Removes the given set of slots from the slot manager.__@param slotsToRemove identifying the slots to remove from the slot manager;private void removeSlots(Iterable<SlotID> slotsToRemove) {_		for (SlotID slotId : slotsToRemove) {_			removeSlot(slotId)__		}_	};removes,the,given,set,of,slots,from,the,slot,manager,param,slots,to,remove,identifying,the,slots,to,remove,from,the,slot,manager;private,void,remove,slots,iterable,slot,id,slots,to,remove,for,slot,id,slot,id,slots,to,remove,remove,slot,slot,id
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1486637985;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		_		if (!taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)__		}__		reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1493301216;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			if (!anySlotUsed(taskManagerRegistration.getSlots())) {_				registerTaskManagerTimeout(taskManagerRegistration)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,if,any,slot,used,task,manager,registration,get,slots,register,task,manager,timeout,task,manager,registration
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1493307989;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			_			boolean idle = !anySlotUsed(taskManagerRegistration.getSlots())___			if (idle) {_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,boolean,idle,any,slot,used,task,manager,registration,get,slots,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1501529908;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			_			boolean idle = !anySlotUsed(taskManagerRegistration.getSlots())___			if (idle) {_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,boolean,idle,any,slot,used,task,manager,registration,get,slots,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1501580028;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			_			boolean idle = !anySlotUsed(taskManagerRegistration.getSlots())___			if (idle) {_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,boolean,idle,any,slot,used,task,manager,registration,get,slots,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1503019375;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			_			boolean idle = !anySlotUsed(taskManagerRegistration.getSlots())___			if (idle) {_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,boolean,idle,any,slot,used,task,manager,registration,get,slots,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1503580260;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			_			boolean idle = !anySlotUsed(taskManagerRegistration.getSlots())___			if (idle) {_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,boolean,idle,any,slot,used,task,manager,registration,get,slots,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1507240448;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1507653580;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1507738083;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(taskExecutorConnection, reportedSlots)__			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}__			_			boolean idle = !anySlotUsed(taskManagerRegistration.getSlots())___			if (idle) {_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection,boolean,idle,any,slot,used,task,manager,registration,get,slots,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1507879191;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1516815167;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1519305029;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1519920149;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1520254504;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1520593421;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1521641386;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Register TaskManager {} at the SlotManager.", taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,register,task,manager,at,the,slot,manager,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1525377048;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1525934187;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1530472121;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1530503760;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1531900495;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1534938698;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.debug("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,debug,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1537262283;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.info("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,info,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1537448260;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.debug("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,debug,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1537538032;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.debug("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,debug,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport);1542290209;Registers a new task manager at the slot manager. This will make the task managers slots_known and, thus, available for allocation.__@param taskExecutorConnection for the new task manager_@param initialSlotReport for the new task manager;public void registerTaskManager(final TaskExecutorConnection taskExecutorConnection, SlotReport initialSlotReport) {_		checkInit()___		LOG.debug("Registering TaskManager {} under {} at the SlotManager.", taskExecutorConnection.getResourceID(), taskExecutorConnection.getInstanceID())___		_		if (taskManagerRegistrations.containsKey(taskExecutorConnection.getInstanceID())) {_			reportSlotStatus(taskExecutorConnection.getInstanceID(), initialSlotReport)__		} else {_			_			ArrayList<SlotID> reportedSlots = new ArrayList<>()___			for (SlotStatus slotStatus : initialSlotReport) {_				reportedSlots.add(slotStatus.getSlotID())__			}__			TaskManagerRegistration taskManagerRegistration = new TaskManagerRegistration(_				taskExecutorConnection,_				reportedSlots)___			taskManagerRegistrations.put(taskExecutorConnection.getInstanceID(), taskManagerRegistration)___			_			for (SlotStatus slotStatus : initialSlotReport) {_				registerSlot(_					slotStatus.getSlotID(),_					slotStatus.getAllocationID(),_					slotStatus.getJobID(),_					slotStatus.getResourceProfile(),_					taskExecutorConnection)__			}_		}__	};registers,a,new,task,manager,at,the,slot,manager,this,will,make,the,task,managers,slots,known,and,thus,available,for,allocation,param,task,executor,connection,for,the,new,task,manager,param,initial,slot,report,for,the,new,task,manager;public,void,register,task,manager,final,task,executor,connection,task,executor,connection,slot,report,initial,slot,report,check,init,log,debug,registering,task,manager,under,at,the,slot,manager,task,executor,connection,get,resource,id,task,executor,connection,get,instance,id,if,task,manager,registrations,contains,key,task,executor,connection,get,instance,id,report,slot,status,task,executor,connection,get,instance,id,initial,slot,report,else,array,list,slot,id,reported,slots,new,array,list,for,slot,status,slot,status,initial,slot,report,reported,slots,add,slot,status,get,slot,id,task,manager,registration,task,manager,registration,new,task,manager,registration,task,executor,connection,reported,slots,task,manager,registrations,put,task,executor,connection,get,instance,id,task,manager,registration,for,slot,status,slot,status,initial,slot,report,register,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,slot,status,get,resource,profile,task,executor,connection
SlotManager -> public void registerTaskExecutor( 			ResourceID resourceID, 			TaskExecutorRegistration registration, 			SlotReport slotReport);1475154512;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param registration TaskExecutor's registration_@param slotReport TaskExecutor's free and allocated slots;public void registerTaskExecutor(_			ResourceID resourceID,_			TaskExecutorRegistration registration,_			SlotReport slotReport) {__		if (taskManagers.get(resourceID) != null) {_			notifyTaskManagerFailure(resourceID)__		}__		this.taskManagers.put(resourceID, registration)___		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			final SlotID slotId = slotStatus.getSlotID()___			final TaskExecutorRegistration taskExecutorRegistration = taskManagers.get(slotId.getResourceID())__			if (taskExecutorRegistration == null) {_				LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_					slotId.getResourceID())__				return__			}__			final ResourceSlot slot = new ResourceSlot(slotId, slotStatus.getProfiler(), taskExecutorRegistration)___			registerNewSlot(slot)__			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, slotStatus.getAllocationID())___			if (slotStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, slotStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		}_	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,registration,task,executor,s,registration,param,slot,report,task,executor,s,free,and,allocated,slots;public,void,register,task,executor,resource,id,resource,id,task,executor,registration,registration,slot,report,slot,report,if,task,managers,get,resource,id,null,notify,task,manager,failure,resource,id,this,task,managers,put,resource,id,registration,for,slot,status,slot,status,slot,report,get,slots,status,final,slot,id,slot,id,slot,status,get,slot,id,final,task,executor,registration,task,executor,registration,task,managers,get,slot,id,get,resource,id,if,task,executor,registration,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,slot,status,get,profiler,task,executor,registration,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,slot,status,get,allocation,id,if,slot,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,slot,status,get,allocation,id,else,handle,free,slot,slot
SlotManager -> public void registerTaskExecutor( 			ResourceID resourceID, 			TaskExecutorRegistration registration, 			SlotReport slotReport);1475679726;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param registration TaskExecutor's registration_@param slotReport TaskExecutor's free and allocated slots;public void registerTaskExecutor(_			ResourceID resourceID,_			TaskExecutorRegistration registration,_			SlotReport slotReport) {__		if (taskManagers.get(resourceID) != null) {_			notifyTaskManagerFailure(resourceID)__		}__		this.taskManagers.put(resourceID, registration)___		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			final SlotID slotId = slotStatus.getSlotID()___			final TaskExecutorRegistration taskExecutorRegistration = taskManagers.get(slotId.getResourceID())__			if (taskExecutorRegistration == null) {_				LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_					slotId.getResourceID())__				return__			}__			final ResourceSlot slot = new ResourceSlot(slotId, slotStatus.getProfiler(), taskExecutorRegistration)___			registerNewSlot(slot)__			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, slotStatus.getAllocationID())___			if (slotStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, slotStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		}_	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,registration,task,executor,s,registration,param,slot,report,task,executor,s,free,and,allocated,slots;public,void,register,task,executor,resource,id,resource,id,task,executor,registration,registration,slot,report,slot,report,if,task,managers,get,resource,id,null,notify,task,manager,failure,resource,id,this,task,managers,put,resource,id,registration,for,slot,status,slot,status,slot,report,get,slots,status,final,slot,id,slot,id,slot,status,get,slot,id,final,task,executor,registration,task,executor,registration,task,managers,get,slot,id,get,resource,id,if,task,executor,registration,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,slot,status,get,profiler,task,executor,registration,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,slot,status,get,allocation,id,if,slot,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,slot,status,get,allocation,id,else,handle,free,slot,slot
SlotManager -> public void registerTaskExecutor( 			ResourceID resourceID, 			TaskExecutorRegistration registration, 			SlotReport slotReport);1476113770;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param registration TaskExecutor's registration_@param slotReport TaskExecutor's free and allocated slots;public void registerTaskExecutor(_			ResourceID resourceID,_			TaskExecutorRegistration registration,_			SlotReport slotReport) {__		if (taskManagers.get(resourceID) != null) {_			notifyTaskManagerFailure(resourceID)__		}__		this.taskManagers.put(resourceID, registration)___		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			final SlotID slotId = slotStatus.getSlotID()___			final TaskExecutorRegistration taskExecutorRegistration = taskManagers.get(slotId.getResourceID())__			if (taskExecutorRegistration == null) {_				LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_					slotId.getResourceID())__				return__			}__			final ResourceSlot slot = new ResourceSlot(slotId, slotStatus.getProfiler(), taskExecutorRegistration)___			registerNewSlot(slot)__			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, slotStatus.getAllocationID())___			if (slotStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, slotStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		}_	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,registration,task,executor,s,registration,param,slot,report,task,executor,s,free,and,allocated,slots;public,void,register,task,executor,resource,id,resource,id,task,executor,registration,registration,slot,report,slot,report,if,task,managers,get,resource,id,null,notify,task,manager,failure,resource,id,this,task,managers,put,resource,id,registration,for,slot,status,slot,status,slot,report,get,slots,status,final,slot,id,slot,id,slot,status,get,slot,id,final,task,executor,registration,task,executor,registration,task,managers,get,slot,id,get,resource,id,if,task,executor,registration,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,slot,status,get,profiler,task,executor,registration,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,slot,status,get,allocation,id,if,slot,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,slot,status,get,allocation,id,else,handle,free,slot,slot
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1486637985;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1493301216;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1493307989;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1501529908;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1501580028;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1503019375;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1503580260;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1507240448;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1507653580;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1507738083;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.isFree())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,is,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1507879191;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1516815167;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1519305029;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1519920149;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1520254504;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1520593421;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1521641386;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1525377048;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1525934187;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1530472121;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1530503760;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1531900495;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1534938698;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1537262283;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1537448260;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1537538032;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile);1542290209;Finds a matching slot for a given resource profile. A matching slot has at least as many_resources available as the given resource profile. If there is no such slot available, then_the method returns null.__<p>Note: If you want to change the behaviour of the slot manager wrt slot allocation and_request fulfillment, then you should override this method.__@param requestResourceProfile specifying the resource requirements for the a slot request_@return A matching slot which fulfills the given resource profile. Null if there is no such_slot available.;protected TaskManagerSlot findMatchingSlot(ResourceProfile requestResourceProfile) {_		Iterator<Map.Entry<SlotID, TaskManagerSlot>> iterator = freeSlots.entrySet().iterator()___		while (iterator.hasNext()) {_			TaskManagerSlot taskManagerSlot = iterator.next().getValue()___			_			Preconditions.checkState(_				taskManagerSlot.getState() == TaskManagerSlot.State.FREE,_				"TaskManagerSlot %s is not in state FREE but %s.",_				taskManagerSlot.getSlotId(), taskManagerSlot.getState())___			if (taskManagerSlot.getResourceProfile().isMatching(requestResourceProfile)) {_				iterator.remove()__				return taskManagerSlot__			}_		}__		return null__	};finds,a,matching,slot,for,a,given,resource,profile,a,matching,slot,has,at,least,as,many,resources,available,as,the,given,resource,profile,if,there,is,no,such,slot,available,then,the,method,returns,null,p,note,if,you,want,to,change,the,behaviour,of,the,slot,manager,wrt,slot,allocation,and,request,fulfillment,then,you,should,override,this,method,param,request,resource,profile,specifying,the,resource,requirements,for,the,a,slot,request,return,a,matching,slot,which,fulfills,the,given,resource,profile,null,if,there,is,no,such,slot,available;protected,task,manager,slot,find,matching,slot,resource,profile,request,resource,profile,iterator,map,entry,slot,id,task,manager,slot,iterator,free,slots,entry,set,iterator,while,iterator,has,next,task,manager,slot,task,manager,slot,iterator,next,get,value,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,manager,slot,s,is,not,in,state,free,but,s,task,manager,slot,get,slot,id,task,manager,slot,get,state,if,task,manager,slot,get,resource,profile,is,matching,request,resource,profile,iterator,remove,return,task,manager,slot,return,null
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1486637985;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				registerTaskManagerTimeout(taskManagerRegistration)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,register,task,manager,timeout,task,manager,registration,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1493301216;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				registerTaskManagerTimeout(taskManagerRegistration)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,register,task,manager,timeout,task,manager,registration,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1493307989;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				taskManagerRegistration.markIdle()__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,idle,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1501529908;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				taskManagerRegistration.markIdle()__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,idle,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1501580028;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				taskManagerRegistration.markIdle()__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,idle,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1503019375;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				taskManagerRegistration.markIdle()__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,idle,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1503580260;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				taskManagerRegistration.markIdle()__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,idle,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1507240448;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1507653580;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1507738083;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.hasPendingSlotRequest() && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {_				taskManagerSlot.setAssignedSlotRequest(null)__			}__			if (taskManagerSlot.isFree()) {_				handleFreeSlot(taskManagerSlot)__			}__			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___			if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_				taskManagerRegistration.markIdle()__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,has,pending,slot,request,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,slot,set,assigned,slot,request,null,if,task,manager,slot,is,free,handle,free,slot,task,manager,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,idle,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1507879191;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1516815167;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1519305029;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1519920149;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1520254504;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1520593421;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1521641386;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1525377048;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1525934187;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1530472121;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1530503760;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1531900495;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1534938698;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1537262283;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1537448260;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1537538032;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId);1542290209;Removes a pending slot request identified by the given allocation id from a slot identified_by the given slot id.__@param slotId identifying the slot_@param allocationId identifying the presumable assigned pending slot request;private void removeSlotRequestFromSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot taskManagerSlot = slots.get(slotId)___		if (null != taskManagerSlot) {_			if (taskManagerSlot.getState() == TaskManagerSlot.State.PENDING && Objects.equals(allocationId, taskManagerSlot.getAssignedSlotRequest().getAllocationId())) {__				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___				if (taskManagerRegistration == null) {_					throw new IllegalStateException("Trying to remove slot request from slot for which there is no TaskManager " + taskManagerSlot.getInstanceId() + " is registered.")__				}__				_				taskManagerSlot.clearPendingSlotRequest()___				updateSlotState(taskManagerSlot, taskManagerRegistration, null, null)__			} else {_				LOG.debug("Ignore slot request removal for slot {}.", slotId)__			}_		} else {_			LOG.debug("There was no slot with {} registered. Probably this slot has been already freed.", slotId)__		}_	};removes,a,pending,slot,request,identified,by,the,given,allocation,id,from,a,slot,identified,by,the,given,slot,id,param,slot,id,identifying,the,slot,param,allocation,id,identifying,the,presumable,assigned,pending,slot,request;private,void,remove,slot,request,from,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,task,manager,slot,slots,get,slot,id,if,null,task,manager,slot,if,task,manager,slot,get,state,task,manager,slot,state,pending,objects,equals,allocation,id,task,manager,slot,get,assigned,slot,request,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,remove,slot,request,from,slot,for,which,there,is,no,task,manager,task,manager,slot,get,instance,id,is,registered,task,manager,slot,clear,pending,slot,request,update,slot,state,task,manager,slot,task,manager,registration,null,null,else,log,debug,ignore,slot,request,removal,for,slot,slot,id,else,log,debug,there,was,no,slot,with,registered,probably,this,slot,has,been,already,freed,slot,id
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1507240448;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1507653580;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1516815167;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1519305029;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1519920149;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1520254504;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1520593421;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1521641386;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1525377048;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1525934187;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1530472121;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1530503760;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1531900495;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1534938698;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1537262283;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1537448260;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1537538032;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions);1542290209;Starts the slot manager with the given leader id and resource manager actions.__@param newResourceManagerId to use for communication with the task managers_@param newMainThreadExecutor to use to run code in the ResourceManager's main thread_@param newResourceActions to use for resource (de-)allocations;public void start(ResourceManagerId newResourceManagerId, Executor newMainThreadExecutor, ResourceActions newResourceActions) {_		LOG.info("Starting the SlotManager.")___		this.resourceManagerId = Preconditions.checkNotNull(newResourceManagerId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceActions = Preconditions.checkNotNull(newResourceActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkTaskManagerTimeouts()),_			0L,_			taskManagerTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(_			() -> mainThreadExecutor.execute(_				() -> checkSlotRequestTimeouts()),_			0L,_			slotRequestTimeout.toMilliseconds(),_			TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,resource,manager,id,to,use,for,communication,with,the,task,managers,param,new,main,thread,executor,to,use,to,run,code,in,the,resource,manager,s,main,thread,param,new,resource,actions,to,use,for,resource,de,allocations;public,void,start,resource,manager,id,new,resource,manager,id,executor,new,main,thread,executor,resource,actions,new,resource,actions,log,info,starting,the,slot,manager,this,resource,manager,id,preconditions,check,not,null,new,resource,manager,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,actions,preconditions,check,not,null,new,resource,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,main,thread,executor,execute,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1472741611;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1474459992;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1474471581;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1474482025;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1474965482;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1475154512;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1475679726;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> private boolean isRequestDuplicated(final SlotRequest request);1476113770;Check whether the request is duplicated. We use AllocationID to identify slot request, for each_formerly received slot request, it is either in pending list or already been allocated.__@param request The slot request_@return <tt>true</tt> if the request is duplicated;private boolean isRequestDuplicated(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		return pendingSlotRequests.containsKey(allocationId)_			|| allocationMap.isAllocated(allocationId)__	};check,whether,the,request,is,duplicated,we,use,allocation,id,to,identify,slot,request,for,each,formerly,received,slot,request,it,is,either,in,pending,list,or,already,been,allocated,param,request,the,slot,request,return,tt,true,tt,if,the,request,is,duplicated;private,boolean,is,request,duplicated,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,return,pending,slot,requests,contains,key,allocation,id,allocation,map,is,allocated,allocation,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1472741611;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagerGateways.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,manager,gateways,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1474459992;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagerGateways.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,manager,gateways,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1474471581;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagerGateways.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,manager,gateways,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1474482025;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagerGateways.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,manager,gateways,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1474965482;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagerGateways.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,manager,gateways,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1475154512;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagers.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,managers,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1475679726;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagers.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,managers,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public void notifyTaskManagerFailure(final ResourceID resourceId);1476113770;Callback for TaskManager failures. In case that a TaskManager fails, we have to clean up all its slots.__@param resourceId The ResourceID of the TaskManager;public void notifyTaskManagerFailure(final ResourceID resourceId) {_		LOG.info("Resource:{} been notified failure", resourceId)__		taskManagers.remove(resourceId)__		final Map<SlotID, ResourceSlot> slotIdsToRemove = registeredSlots.remove(resourceId)__		if (slotIdsToRemove != null) {_			for (SlotID slotId : slotIdsToRemove.keySet()) {_				LOG.info("Removing Slot: {} upon resource failure", slotId)__				if (freeSlots.containsKey(slotId)) {_					freeSlots.remove(slotId)__				} else if (allocationMap.isAllocated(slotId)) {_					allocationMap.removeAllocation(slotId)__				} else {_					LOG.error("BUG! {} is neither in free pool nor in allocated pool", slotId)__				}_			}_		}_	};callback,for,task,manager,failures,in,case,that,a,task,manager,fails,we,have,to,clean,up,all,its,slots,param,resource,id,the,resource,id,of,the,task,manager;public,void,notify,task,manager,failure,final,resource,id,resource,id,log,info,resource,been,notified,failure,resource,id,task,managers,remove,resource,id,final,map,slot,id,resource,slot,slot,ids,to,remove,registered,slots,remove,resource,id,if,slot,ids,to,remove,null,for,slot,id,slot,id,slot,ids,to,remove,key,set,log,info,removing,slot,upon,resource,failure,slot,id,if,free,slots,contains,key,slot,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,allocation,map,remove,allocation,slot,id,else,log,error,bug,is,neither,in,free,pool,nor,in,allocated,pool,slot,id
SlotManager -> public SlotRequestRegistered requestSlot(final SlotRequest request);1472741611;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return SlotRequestRegistered The confirmation message to be send to the caller;public SlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return null__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)___			_			freeSlots.remove(slot.getSlotId())___			final Future<SlotRequestReply> slotRequestReplyFuture =_				slot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			allocateContainer(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new SlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,slot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,slot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,null,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,final,future,slot,request,reply,slot,request,reply,future,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,allocate,container,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,slot,request,registered,allocation,id
SlotManager -> public SlotRequestRegistered requestSlot(final SlotRequest request);1474459992;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return SlotRequestRegistered The confirmation message to be send to the caller;public SlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return null__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)___			_			freeSlots.remove(slot.getSlotId())___			final Future<SlotRequestReply> slotRequestReplyFuture =_				slot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			allocateContainer(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new SlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,slot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,slot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,null,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,final,future,slot,request,reply,slot,request,reply,future,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,allocate,container,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,slot,request,registered,allocation,id
SlotManager -> public SlotRequestRegistered requestSlot(final SlotRequest request);1474471581;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return SlotRequestRegistered The confirmation message to be send to the caller;public SlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return null__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)___			_			freeSlots.remove(slot.getSlotId())___			final Future<SlotRequestReply> slotRequestReplyFuture =_				slot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			allocateContainer(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new SlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,slot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,slot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,null,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,final,future,slot,request,reply,slot,request,reply,future,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,allocate,container,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,slot,request,registered,allocation,id
SlotManager -> public SlotRequestRegistered requestSlot(final SlotRequest request);1474482025;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return SlotRequestRegistered The confirmation message to be send to the caller;public SlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return null__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)___			_			freeSlots.remove(slot.getSlotId())___			final Future<SlotRequestReply> slotRequestReplyFuture =_				slot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			allocateContainer(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new SlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,slot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,slot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,null,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,final,future,slot,request,reply,slot,request,reply,future,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,allocate,container,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,slot,request,registered,allocation,id
SlotManager -> public SlotRequestRegistered requestSlot(final SlotRequest request);1474965482;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return SlotRequestRegistered The confirmation message to be send to the caller;public SlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return null__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)__			_			final ResourceSlot removedSlot = freeSlots.remove(slot.getSlotId())___			final Future<SlotRequestReply> slotRequestReplyFuture =_				slot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)___			slotRequestReplyFuture.handleAsync(new BiFunction<SlotRequestReply, Throwable, Object>() {_				@Override_				public Object apply(SlotRequestReply slotRequestReply, Throwable throwable) {_					if (throwable != null) {_						_						if (allocationMap.isAllocated(slot.getSlotId())) {_							_							freeSlots.put(slot.getSlotId(), removedSlot)__						}_						pendingSlotRequests.put(allocationId, request)__					}_					return null__				}_			}, resourceManagerServices.getExecutor())__		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			Preconditions.checkState(resourceManagerServices != null,_				"Attempted to allocate resources but no ResourceManagerServices set.")__			resourceManagerServices.allocateResource(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new SlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,slot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,slot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,null,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,final,resource,slot,removed,slot,free,slots,remove,slot,get,slot,id,final,future,slot,request,reply,slot,request,reply,future,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,slot,request,reply,future,handle,async,new,bi,function,slot,request,reply,throwable,object,override,public,object,apply,slot,request,reply,slot,request,reply,throwable,throwable,if,throwable,null,if,allocation,map,is,allocated,slot,get,slot,id,free,slots,put,slot,get,slot,id,removed,slot,pending,slot,requests,put,allocation,id,request,return,null,resource,manager,services,get,executor,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,preconditions,check,state,resource,manager,services,null,attempted,to,allocate,resources,but,no,resource,manager,services,set,resource,manager,services,allocate,resource,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,slot,request,registered,allocation,id
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1472741611;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1474459992;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1474471581;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1474482025;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1474965482;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1475154512;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1475679726;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> @VisibleForTesting 	void addFreeSlot(final ResourceSlot slot);1476113770;Add free slots directly to the free pool, this will not trigger pending requests allocation__@param slot The resource slot;@VisibleForTesting_	void addFreeSlot(final ResourceSlot slot) {_		final ResourceID resourceId = slot.getResourceID()__		final SlotID slotId = slot.getSlotId()___		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		registeredSlots.get(resourceId).put(slot.getSlotId(), slot)__		freeSlots.put(slotId, slot)__	};add,free,slots,directly,to,the,free,pool,this,will,not,trigger,pending,requests,allocation,param,slot,the,resource,slot;visible,for,testing,void,add,free,slot,final,resource,slot,slot,final,resource,id,resource,id,slot,get,resource,id,final,slot,id,slot,id,slot,get,slot,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,registered,slots,get,resource,id,put,slot,get,slot,id,slot,free,slots,put,slot,id,slot
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1472741611;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1474459992;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1474471581;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1474482025;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1474965482;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1475154512;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1475679726;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> AllocationMap -> void addAllocation(final SlotID slotId, final AllocationID allocationId);1476113770;Add a allocation__@param slotId       The slot id_@param allocationId The allocation id;void addAllocation(final SlotID slotId, final AllocationID allocationId) {_			allocatedSlots.put(slotId, allocationId)__			allocatedSlotsByAllocationId.put(allocationId, slotId)__		};add,a,allocation,param,slot,id,the,slot,id,param,allocation,id,the,allocation,id;void,add,allocation,final,slot,id,slot,id,final,allocation,id,allocation,id,allocated,slots,put,slot,id,allocation,id,allocated,slots,by,allocation,id,put,allocation,id,slot,id
SlotManager -> public void clearState();1474459992;Clears the state of the SlotManager after leadership revokal;public void clearState() {_		taskManagerGateways.clear()__		registeredSlots.clear()__		pendingSlotRequests.clear()__		freeSlots.clear()__		allocationMap.clear()__		leaderID = null__	};clears,the,state,of,the,slot,manager,after,leadership,revokal;public,void,clear,state,task,manager,gateways,clear,registered,slots,clear,pending,slot,requests,clear,free,slots,clear,allocation,map,clear,leader,id,null
SlotManager -> public void clearState();1474482025;Clears the state of the SlotManager after leadership revokal;public void clearState() {_		taskManagerGateways.clear()__		registeredSlots.clear()__		pendingSlotRequests.clear()__		freeSlots.clear()__		allocationMap.clear()__		leaderID = null__	};clears,the,state,of,the,slot,manager,after,leadership,revokal;public,void,clear,state,task,manager,gateways,clear,registered,slots,clear,pending,slot,requests,clear,free,slots,clear,allocation,map,clear,leader,id,null
SlotManager -> public void clearState();1474965482;Clears the state of the SlotManager after leadership revokal;public void clearState() {_		taskManagerGateways.clear()__		registeredSlots.clear()__		pendingSlotRequests.clear()__		freeSlots.clear()__		allocationMap.clear()__		leaderID = null__	};clears,the,state,of,the,slot,manager,after,leadership,revokal;public,void,clear,state,task,manager,gateways,clear,registered,slots,clear,pending,slot,requests,clear,free,slots,clear,allocation,map,clear,leader,id,null
SlotManager -> public void clearState();1475154512;Clears the state of the SlotManager after leadership revokal;public void clearState() {_		taskManagers.clear()__		registeredSlots.clear()__		pendingSlotRequests.clear()__		freeSlots.clear()__		allocationMap.clear()__		leaderID = new UUID(0, 0)__	};clears,the,state,of,the,slot,manager,after,leadership,revokal;public,void,clear,state,task,managers,clear,registered,slots,clear,pending,slot,requests,clear,free,slots,clear,allocation,map,clear,leader,id,new,uuid,0,0
SlotManager -> public void clearState();1475679726;Clears the state of the SlotManager after leadership revokal;public void clearState() {_		taskManagers.clear()__		registeredSlots.clear()__		pendingSlotRequests.clear()__		freeSlots.clear()__		allocationMap.clear()__	};clears,the,state,of,the,slot,manager,after,leadership,revokal;public,void,clear,state,task,managers,clear,registered,slots,clear,pending,slot,requests,clear,free,slots,clear,allocation,map,clear
SlotManager -> public void clearState();1476113770;Clears the state of the SlotManager after leadership revokal;public void clearState() {_		taskManagers.clear()__		registeredSlots.clear()__		pendingSlotRequests.clear()__		freeSlots.clear()__		allocationMap.clear()__	};clears,the,state,of,the,slot,manager,after,leadership,revokal;public,void,clear,state,task,managers,clear,registered,slots,clear,pending,slot,requests,clear,free,slots,clear,allocation,map,clear
SlotManager -> protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;1472741611;The framework specific code for allocating a container for specified resource profile.__@param resourceProfile The resource profile;protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;the,framework,specific,code,for,allocating,a,container,for,specified,resource,profile,param,resource,profile,the,resource,profile;protected,abstract,void,allocate,container,final,resource,profile,resource,profile
SlotManager -> protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;1474459992;The framework specific code for allocating a container for specified resource profile.__@param resourceProfile The resource profile;protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;the,framework,specific,code,for,allocating,a,container,for,specified,resource,profile,param,resource,profile,the,resource,profile;protected,abstract,void,allocate,container,final,resource,profile,resource,profile
SlotManager -> protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;1474471581;The framework specific code for allocating a container for specified resource profile.__@param resourceProfile The resource profile;protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;the,framework,specific,code,for,allocating,a,container,for,specified,resource,profile,param,resource,profile,the,resource,profile;protected,abstract,void,allocate,container,final,resource,profile,resource,profile
SlotManager -> protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;1474482025;The framework specific code for allocating a container for specified resource profile.__@param resourceProfile The resource profile;protected abstract void allocateContainer(final ResourceProfile resourceProfile)_;the,framework,specific,code,for,allocating,a,container,for,specified,resource,profile,param,resource,profile,the,resource,profile;protected,abstract,void,allocate,container,final,resource,profile,resource,profile
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1486637985;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_						registerTaskManagerTimeout(taskManagerRegistration)__					}_				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,register,task,manager,timeout,task,manager,registration,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1493301216;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration && !anySlotUsed(taskManagerRegistration.getSlots())) {_						registerTaskManagerTimeout(taskManagerRegistration)__					}_				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,any,slot,used,task,manager,registration,get,slots,register,task,manager,timeout,task,manager,registration,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1493307989;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration) {_						if (anySlotUsed(taskManagerRegistration.getSlots())) {_							taskManagerRegistration.markUsed()__						} else {_							taskManagerRegistration.markIdle()__						}_					}__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,if,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,used,else,task,manager,registration,mark,idle,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1501529908;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration) {_						if (anySlotUsed(taskManagerRegistration.getSlots())) {_							taskManagerRegistration.markUsed()__						} else {_							taskManagerRegistration.markIdle()__						}_					}__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,if,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,used,else,task,manager,registration,mark,idle,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1501580028;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration) {_						if (anySlotUsed(taskManagerRegistration.getSlots())) {_							taskManagerRegistration.markUsed()__						} else {_							taskManagerRegistration.markIdle()__						}_					}__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,if,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,used,else,task,manager,registration,mark,idle,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1503019375;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration) {_						if (anySlotUsed(taskManagerRegistration.getSlots())) {_							taskManagerRegistration.markUsed()__						} else {_							taskManagerRegistration.markIdle()__						}_					}__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,if,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,used,else,task,manager,registration,mark,idle,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1503580260;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration) {_						if (anySlotUsed(taskManagerRegistration.getSlots())) {_							taskManagerRegistration.markUsed()__						} else {_							taskManagerRegistration.markIdle()__						}_					}__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,if,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,used,else,task,manager,registration,mark,idle,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1507240448;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1507653580;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1507738083;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.isAllocated()) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {_					_					slot.setAllocationId(null)__					fulfilledSlotRequests.remove(allocationId)___					if (slot.isFree()) {_						handleFreeSlot(slot)__					}__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (null != taskManagerRegistration) {_						if (anySlotUsed(taskManagerRegistration.getSlots())) {_							taskManagerRegistration.markUsed()__						} else {_							taskManagerRegistration.markIdle()__						}_					}__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,is,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,slot,set,allocation,id,null,fulfilled,slot,requests,remove,allocation,id,if,slot,is,free,handle,free,slot,slot,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,if,any,slot,used,task,manager,registration,get,slots,task,manager,registration,mark,used,else,task,manager,registration,mark,idle,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1507879191;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1516815167;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1519305029;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1519920149;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1520254504;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1520593421;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1521641386;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1525377048;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1525934187;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1530472121;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1530503760;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1531900495;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1534938698;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1537262283;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1537448260;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1537538032;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> public void freeSlot(SlotID slotId, AllocationID allocationId);1542290209;Free the given slot from the given allocation. If the slot is still allocated by the given_allocation id, then the slot will be marked as free and will be subject to new slot requests.__@param slotId identifying the slot to free_@param allocationId with which the slot is presumably allocated;public void freeSlot(SlotID slotId, AllocationID allocationId) {_		checkInit()___		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			if (slot.getState() == TaskManagerSlot.State.ALLOCATED) {_				if (Objects.equals(allocationId, slot.getAllocationId())) {__					TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___					if (taskManagerRegistration == null) {_						throw new IllegalStateException("Trying to free a slot from a TaskManager " +_							slot.getInstanceId() + " which has not been registered.")__					}__					updateSlotState(slot, taskManagerRegistration, null, null)__				} else {_					LOG.debug("Received request to free slot {} with expected allocation id {}, " +_						"but actual allocation id {} differs. Ignoring the request.", slotId, allocationId, slot.getAllocationId())__				}_			} else {_				LOG.debug("Slot {} has not been allocated.", allocationId)__			}_		} else {_			LOG.debug("Trying to free a slot {} which has not been registered. Ignoring this message.", slotId)__		}_	};free,the,given,slot,from,the,given,allocation,if,the,slot,is,still,allocated,by,the,given,allocation,id,then,the,slot,will,be,marked,as,free,and,will,be,subject,to,new,slot,requests,param,slot,id,identifying,the,slot,to,free,param,allocation,id,with,which,the,slot,is,presumably,allocated;public,void,free,slot,slot,id,slot,id,allocation,id,allocation,id,check,init,task,manager,slot,slot,slots,get,slot,id,if,null,slot,if,slot,get,state,task,manager,slot,state,allocated,if,objects,equals,allocation,id,slot,get,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,trying,to,free,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,update,slot,state,slot,task,manager,registration,null,null,else,log,debug,received,request,to,free,slot,with,expected,allocation,id,but,actual,allocation,id,differs,ignoring,the,request,slot,id,allocation,id,slot,get,allocation,id,else,log,debug,slot,has,not,been,allocated,allocation,id,else,log,debug,trying,to,free,a,slot,which,has,not,been,registered,ignoring,this,message,slot,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1486637985;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1493301216;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1493307989;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1501529908;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1501580028;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1503019375;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1503580260;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1507240448;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1507653580;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1507738083;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1507879191;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1516815167;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1519305029;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1519920149;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1520254504;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1520593421;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1521641386;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1525377048;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1525934187;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1530472121;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1530503760;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1531900495;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1534938698;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1537262283;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1537448260;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1537538032;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause);1542290209;Rejects the pending slot request by failing the request future with a_{@link SlotAllocationException}.__@param pendingSlotRequest to reject_@param cause of the rejection;private void rejectPendingSlotRequest(PendingSlotRequest pendingSlotRequest, Exception cause) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.completeExceptionally(new SlotAllocationException(cause))__		} else {_			LOG.debug("Cannot reject pending slot request {}, since no request has been sent.", pendingSlotRequest.getAllocationId())__		}_	};rejects,the,pending,slot,request,by,failing,the,request,future,with,a,link,slot,allocation,exception,param,pending,slot,request,to,reject,param,cause,of,the,rejection;private,void,reject,pending,slot,request,pending,slot,request,pending,slot,request,exception,cause,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,complete,exceptionally,new,slot,allocation,exception,cause,else,log,debug,cannot,reject,pending,slot,request,since,no,request,has,been,sent,pending,slot,request,get,allocation,id
SlotManager -> void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1475154512;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		if (allocationMap.isAllocated(slotId)) {_			final AllocationID expectedAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(expectedAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(expectedAllocationId)__				pendingSlotRequests.put(originalRequest.getAllocationId(), originalRequest)__				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				_				handleFreeSlot(slot)__			} else {_				LOG.error("Slot request failed for slot {} with allocation id {}:" +_						" Allocation id did not match the expected allocation id {}.",_					slotId, originalAllocationId, expectedAllocationId)__			}_		} else {_			LOG.error("Slot request failed for slot {} with allocation id {}: " +_					"Slot was not previously registered.",_				slotId, originalAllocationId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,expected,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,expected,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,expected,allocation,id,pending,slot,requests,put,original,request,get,allocation,id,original,request,resource,slot,slot,check,not,null,get,registered,slot,slot,id,handle,free,slot,slot,else,log,error,slot,request,failed,for,slot,with,allocation,id,allocation,id,did,not,match,the,expected,allocation,id,slot,id,original,allocation,id,expected,allocation,id,else,log,error,slot,request,failed,for,slot,with,allocation,id,slot,was,not,previously,registered,slot,id,original,allocation,id
SlotManager -> void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1475679726;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		if (allocationMap.isAllocated(slotId)) {_			final AllocationID expectedAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(expectedAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(expectedAllocationId)__				pendingSlotRequests.put(originalRequest.getAllocationId(), originalRequest)__				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				_				handleFreeSlot(slot)__			} else {_				LOG.error("Slot request failed for slot {} with allocation id {}:" +_						" Allocation id did not match the expected allocation id {}.",_					slotId, originalAllocationId, expectedAllocationId)__			}_		} else {_			LOG.error("Slot request failed for slot {} with allocation id {}: " +_					"Slot was not previously registered.",_				slotId, originalAllocationId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,expected,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,expected,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,expected,allocation,id,pending,slot,requests,put,original,request,get,allocation,id,original,request,resource,slot,slot,check,not,null,get,registered,slot,slot,id,handle,free,slot,slot,else,log,error,slot,request,failed,for,slot,with,allocation,id,allocation,id,did,not,match,the,expected,allocation,id,slot,id,original,allocation,id,expected,allocation,id,else,log,error,slot,request,failed,for,slot,with,allocation,id,slot,was,not,previously,registered,slot,id,original,allocation,id
SlotManager -> void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId);1476113770;The slot request to TaskManager may be either failed by rpc communication (timeout, network error, etc.)_or really rejected by TaskManager. We shall retry this request by:_<ul>_<li>1. verify and clear all the previous allocate information for this request_<li>2. try to request slot again_</ul>_<p>_This may cause some duplicate allocation, e.g. the slot request to TaskManager is successful but the response_is lost somehow, so we may request a slot in another TaskManager, this causes two slots assigned to one request,_but it can be taken care of by rejecting registration at JobManager.__@param originalRequest The original slot request_@param slotId          The target SlotID;void handleSlotRequestFailedAtTaskManager(final SlotRequest originalRequest, final SlotID slotId) {_		final AllocationID originalAllocationId = originalRequest.getAllocationId()__		LOG.info("Slot request failed at TaskManager, SlotID:{}, AllocationID:{}, JobID:{}",_			slotId, originalAllocationId, originalRequest.getJobId())___		if (allocationMap.isAllocated(slotId)) {_			final AllocationID expectedAllocationId = allocationMap.getAllocationID(slotId)___			_			if (originalAllocationId.equals(expectedAllocationId)) {_				LOG.info("De-allocate this request and retry")__				allocationMap.removeAllocation(expectedAllocationId)__				pendingSlotRequests.put(originalRequest.getAllocationId(), originalRequest)__				ResourceSlot slot = checkNotNull(getRegisteredSlot(slotId))__				_				handleFreeSlot(slot)__			} else {_				LOG.error("Slot request failed for slot {} with allocation id {}:" +_						" Allocation id did not match the expected allocation id {}.",_					slotId, originalAllocationId, expectedAllocationId)__			}_		} else {_			LOG.error("Slot request failed for slot {} with allocation id {}: " +_					"Slot was not previously registered.",_				slotId, originalAllocationId)__		}_	};the,slot,request,to,task,manager,may,be,either,failed,by,rpc,communication,timeout,network,error,etc,or,really,rejected,by,task,manager,we,shall,retry,this,request,by,ul,li,1,verify,and,clear,all,the,previous,allocate,information,for,this,request,li,2,try,to,request,slot,again,ul,p,this,may,cause,some,duplicate,allocation,e,g,the,slot,request,to,task,manager,is,successful,but,the,response,is,lost,somehow,so,we,may,request,a,slot,in,another,task,manager,this,causes,two,slots,assigned,to,one,request,but,it,can,be,taken,care,of,by,rejecting,registration,at,job,manager,param,original,request,the,original,slot,request,param,slot,id,the,target,slot,id;void,handle,slot,request,failed,at,task,manager,final,slot,request,original,request,final,slot,id,slot,id,final,allocation,id,original,allocation,id,original,request,get,allocation,id,log,info,slot,request,failed,at,task,manager,slot,id,allocation,id,job,id,slot,id,original,allocation,id,original,request,get,job,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,expected,allocation,id,allocation,map,get,allocation,id,slot,id,if,original,allocation,id,equals,expected,allocation,id,log,info,de,allocate,this,request,and,retry,allocation,map,remove,allocation,expected,allocation,id,pending,slot,requests,put,original,request,get,allocation,id,original,request,resource,slot,slot,check,not,null,get,registered,slot,slot,id,handle,free,slot,slot,else,log,error,slot,request,failed,for,slot,with,allocation,id,allocation,id,did,not,match,the,expected,allocation,id,slot,id,original,allocation,id,expected,allocation,id,else,log,error,slot,request,failed,for,slot,with,allocation,id,slot,was,not,previously,registered,slot,id,original,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1472741611;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1474459992;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1474471581;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1474482025;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1474965482;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1475154512;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1475679726;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final AllocationID allocationId);1476113770;Check whether allocation exists by allocation id__@param allocationId The allocation id_@return true if the allocation exists;boolean isAllocated(final AllocationID allocationId) {_			return allocatedSlotsByAllocationId.containsKey(allocationId)__		};check,whether,allocation,exists,by,allocation,id,param,allocation,id,the,allocation,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,allocation,id,allocation,id,return,allocated,slots,by,allocation,id,contains,key,allocation,id
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1486637985;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			final UUID timeoutIdentifier = UUID.randomUUID()__			final AllocationID allocationId = pendingSlotRequest.getAllocationId()___			_			ScheduledFuture<?> timeoutFuture = scheduledExecutor.schedule(new Runnable() {_				@Override_				public void run() {_					mainThreadExecutor.execute(new Runnable() {_						@Override_						public void run() {_							timeoutSlotRequest(allocationId, timeoutIdentifier)__						}_					})__				}_			}, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			pendingSlotRequest.registerTimeout(timeoutFuture, timeoutIdentifier)___			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,final,uuid,timeout,identifier,uuid,random,uuid,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,scheduled,future,timeout,future,scheduled,executor,schedule,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,timeout,slot,request,allocation,id,timeout,identifier,slot,request,timeout,to,milliseconds,time,unit,milliseconds,pending,slot,request,register,timeout,timeout,future,timeout,identifier,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1493301216;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			final UUID timeoutIdentifier = UUID.randomUUID()__			final AllocationID allocationId = pendingSlotRequest.getAllocationId()___			_			ScheduledFuture<?> timeoutFuture = scheduledExecutor.schedule(new Runnable() {_				@Override_				public void run() {_					mainThreadExecutor.execute(new Runnable() {_						@Override_						public void run() {_							timeoutSlotRequest(allocationId, timeoutIdentifier)__						}_					})__				}_			}, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___			pendingSlotRequest.registerTimeout(timeoutFuture, timeoutIdentifier)___			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,final,uuid,timeout,identifier,uuid,random,uuid,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,scheduled,future,timeout,future,scheduled,executor,schedule,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,timeout,slot,request,allocation,id,timeout,identifier,slot,request,timeout,to,milliseconds,time,unit,milliseconds,pending,slot,request,register,timeout,timeout,future,timeout,identifier,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1493307989;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1501529908;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1501580028;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1503019375;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1503580260;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1507240448;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1507653580;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1507738083;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1507879191;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceManagerActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,manager,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1516815167;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1519305029;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1519920149;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1520254504;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1520593421;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1521641386;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1525377048;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1525934187;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1530472121;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1530503760;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1531900495;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1534938698;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		final ResourceProfile resourceProfile = pendingSlotRequest.getResourceProfile()__		TaskManagerSlot taskManagerSlot = findMatchingSlot(resourceProfile)___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			Optional<PendingTaskManagerSlot> pendingTaskManagerSlotOptional = findFreeMatchingPendingTaskManagerSlot(resourceProfile)___			if (!pendingTaskManagerSlotOptional.isPresent()) {_				pendingTaskManagerSlotOptional = allocateResource(resourceProfile)__			}__			pendingTaskManagerSlotOptional.ifPresent(pendingTaskManagerSlot -> assignPendingTaskManagerSlot(pendingSlotRequest, pendingTaskManagerSlot))__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,final,resource,profile,resource,profile,pending,slot,request,get,resource,profile,task,manager,slot,task,manager,slot,find,matching,slot,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,optional,pending,task,manager,slot,pending,task,manager,slot,optional,find,free,matching,pending,task,manager,slot,resource,profile,if,pending,task,manager,slot,optional,is,present,pending,task,manager,slot,optional,allocate,resource,resource,profile,pending,task,manager,slot,optional,if,present,pending,task,manager,slot,assign,pending,task,manager,slot,pending,slot,request,pending,task,manager,slot
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1537262283;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1537448260;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		TaskManagerSlot taskManagerSlot = findMatchingSlot(pendingSlotRequest.getResourceProfile())___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			resourceActions.allocateResource(pendingSlotRequest.getResourceProfile())__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,task,manager,slot,task,manager,slot,find,matching,slot,pending,slot,request,get,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,resource,actions,allocate,resource,pending,slot,request,get,resource,profile
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1537538032;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		final ResourceProfile resourceProfile = pendingSlotRequest.getResourceProfile()__		TaskManagerSlot taskManagerSlot = findMatchingSlot(resourceProfile)___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			Optional<PendingTaskManagerSlot> pendingTaskManagerSlotOptional = findFreeMatchingPendingTaskManagerSlot(resourceProfile)___			if (!pendingTaskManagerSlotOptional.isPresent()) {_				pendingTaskManagerSlotOptional = allocateResource(resourceProfile)__			}__			pendingTaskManagerSlotOptional.ifPresent(pendingTaskManagerSlot -> assignPendingTaskManagerSlot(pendingSlotRequest, pendingTaskManagerSlot))__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,final,resource,profile,resource,profile,pending,slot,request,get,resource,profile,task,manager,slot,task,manager,slot,find,matching,slot,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,optional,pending,task,manager,slot,pending,task,manager,slot,optional,find,free,matching,pending,task,manager,slot,resource,profile,if,pending,task,manager,slot,optional,is,present,pending,task,manager,slot,optional,allocate,resource,resource,profile,pending,task,manager,slot,optional,if,present,pending,task,manager,slot,assign,pending,task,manager,slot,pending,slot,request,pending,task,manager,slot
SlotManager -> private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException;1542290209;Tries to allocate a slot for the given slot request. If there is no slot available, the_resource manager is informed to allocate more resources and a timeout for the request is_registered.__@param pendingSlotRequest to allocate a slot for_@throws ResourceManagerException if the resource manager cannot allocate more resource;private void internalRequestSlot(PendingSlotRequest pendingSlotRequest) throws ResourceManagerException {_		final ResourceProfile resourceProfile = pendingSlotRequest.getResourceProfile()__		TaskManagerSlot taskManagerSlot = findMatchingSlot(resourceProfile)___		if (taskManagerSlot != null) {_			allocateSlot(taskManagerSlot, pendingSlotRequest)__		} else {_			Optional<PendingTaskManagerSlot> pendingTaskManagerSlotOptional = findFreeMatchingPendingTaskManagerSlot(resourceProfile)___			if (!pendingTaskManagerSlotOptional.isPresent()) {_				pendingTaskManagerSlotOptional = allocateResource(resourceProfile)__			}__			pendingTaskManagerSlotOptional.ifPresent(pendingTaskManagerSlot -> assignPendingTaskManagerSlot(pendingSlotRequest, pendingTaskManagerSlot))__		}_	};tries,to,allocate,a,slot,for,the,given,slot,request,if,there,is,no,slot,available,the,resource,manager,is,informed,to,allocate,more,resources,and,a,timeout,for,the,request,is,registered,param,pending,slot,request,to,allocate,a,slot,for,throws,resource,manager,exception,if,the,resource,manager,cannot,allocate,more,resource;private,void,internal,request,slot,pending,slot,request,pending,slot,request,throws,resource,manager,exception,final,resource,profile,resource,profile,pending,slot,request,get,resource,profile,task,manager,slot,task,manager,slot,find,matching,slot,resource,profile,if,task,manager,slot,null,allocate,slot,task,manager,slot,pending,slot,request,else,optional,pending,task,manager,slot,pending,task,manager,slot,optional,find,free,matching,pending,task,manager,slot,resource,profile,if,pending,task,manager,slot,optional,is,present,pending,task,manager,slot,optional,allocate,resource,resource,profile,pending,task,manager,slot,optional,if,present,pending,task,manager,slot,assign,pending,task,manager,slot,pending,slot,request,pending,task,manager,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1472741611;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			final Future<SlotRequestReply> slotRequestReplyFuture =_				freeSlot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,final,future,slot,request,reply,slot,request,reply,future,free,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1474459992;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			final Future<SlotRequestReply> slotRequestReplyFuture =_				freeSlot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,final,future,slot,request,reply,slot,request,reply,future,free,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1474471581;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			final Future<SlotRequestReply> slotRequestReplyFuture =_				freeSlot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,final,future,slot,request,reply,slot,request,reply,future,free,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1474482025;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			final Future<SlotRequestReply> slotRequestReplyFuture =_				freeSlot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)__			_		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,final,future,slot,request,reply,slot,request,reply,future,free,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1474965482;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			final SlotRequest removedSlotRequest = pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			final Future<SlotRequestReply> slotRequestReplyFuture =_				freeSlot.getTaskExecutorGateway().requestSlot(allocationId, leaderID, timeout)___			slotRequestReplyFuture.handleAsync(new BiFunction<SlotRequestReply, Throwable, Object>() {_				@Override_				public Object apply(SlotRequestReply slotRequestReply, Throwable throwable) {_					if (throwable != null) {_						_						if (allocationMap.isAllocated(freeSlot.getSlotId())) {_							pendingSlotRequests.put(allocationId, removedSlotRequest)__						}_					}_					return null__				}_			}, resourceManagerServices.getExecutor())__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,final,slot,request,removed,slot,request,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,final,future,slot,request,reply,slot,request,reply,future,free,slot,get,task,executor,gateway,request,slot,allocation,id,leader,id,timeout,slot,request,reply,future,handle,async,new,bi,function,slot,request,reply,throwable,object,override,public,object,apply,slot,request,reply,slot,request,reply,throwable,throwable,if,throwable,null,if,allocation,map,is,allocated,free,slot,get,slot,id,pending,slot,requests,put,allocation,id,removed,slot,request,return,null,resource,manager,services,get,executor,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1475154512;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			final SlotRequest slotRequest = pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			sendSlotRequest(freeSlot, slotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,final,slot,request,slot,request,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,send,slot,request,free,slot,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1475679726;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			final SlotRequest slotRequest = pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			sendSlotRequest(freeSlot, slotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,final,slot,request,slot,request,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,send,slot,request,free,slot,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(final ResourceSlot freeSlot);1476113770;When we have a free slot, try to fulfill the pending request first. If any request can be fulfilled,_record this allocation in bookkeeping and send slot request to TaskManager, else we just add this slot_to the free pool.__@param freeSlot The free slot;private void handleFreeSlot(final ResourceSlot freeSlot) {_		SlotRequest chosenRequest = chooseRequestToFulfill(freeSlot, pendingSlotRequests)___		if (chosenRequest != null) {_			final AllocationID allocationId = chosenRequest.getAllocationId()__			final SlotRequest slotRequest = pendingSlotRequests.remove(allocationId)___			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", freeSlot.getSlotId(),_				allocationId, chosenRequest.getJobId())__			allocationMap.addAllocation(freeSlot.getSlotId(), allocationId)___			sendSlotRequest(freeSlot, slotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};when,we,have,a,free,slot,try,to,fulfill,the,pending,request,first,if,any,request,can,be,fulfilled,record,this,allocation,in,bookkeeping,and,send,slot,request,to,task,manager,else,we,just,add,this,slot,to,the,free,pool,param,free,slot,the,free,slot;private,void,handle,free,slot,final,resource,slot,free,slot,slot,request,chosen,request,choose,request,to,fulfill,free,slot,pending,slot,requests,if,chosen,request,null,final,allocation,id,allocation,id,chosen,request,get,allocation,id,final,slot,request,slot,request,pending,slot,requests,remove,allocation,id,log,info,assigning,slot,id,to,allocation,id,job,id,free,slot,get,slot,id,allocation,id,chosen,request,get,job,id,allocation,map,add,allocation,free,slot,get,slot,id,allocation,id,send,slot,request,free,slot,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> public RMSlotRequestRegistered requestSlot(final SlotRequest request);1475154512;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return RMSlotRequestRegistered The confirmation message to be send to the caller;public RMSlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return new RMSlotRequestRegistered(allocationId)__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)__			_			freeSlots.remove(slot.getSlotId())___			sendSlotRequest(slot, request)__		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			Preconditions.checkState(rmServices != null,_				"Attempted to allocate resources but no ResourceManagerServices set.")__			rmServices.allocateResource(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new RMSlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,rmslot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,rmslot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,new,rmslot,request,registered,allocation,id,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,send,slot,request,slot,request,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,preconditions,check,state,rm,services,null,attempted,to,allocate,resources,but,no,resource,manager,services,set,rm,services,allocate,resource,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,rmslot,request,registered,allocation,id
SlotManager -> public RMSlotRequestRegistered requestSlot(final SlotRequest request);1475679726;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return RMSlotRequestRegistered The confirmation message to be send to the caller;public RMSlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return new RMSlotRequestRegistered(allocationId)__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)__			_			freeSlots.remove(slot.getSlotId())___			sendSlotRequest(slot, request)__		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			Preconditions.checkState(rmServices != null,_				"Attempted to allocate resources but no ResourceManagerServices set.")__			rmServices.allocateResource(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new RMSlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,rmslot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,rmslot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,new,rmslot,request,registered,allocation,id,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,send,slot,request,slot,request,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,preconditions,check,state,rm,services,null,attempted,to,allocate,resources,but,no,resource,manager,services,set,rm,services,allocate,resource,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,rmslot,request,registered,allocation,id
SlotManager -> public RMSlotRequestRegistered requestSlot(final SlotRequest request);1476113770;Request a slot with requirements, we may either fulfill the request or pending it. Trigger container_allocation if we don't have enough resource. If we have free slot which can match the request, record_this allocation and forward the request to TaskManager through ResourceManager (we want this done by_RPC's main thread to avoid race condition).__@param request The detailed request of the slot_@return RMSlotRequestRegistered The confirmation message to be send to the caller;public RMSlotRequestRegistered requestSlot(final SlotRequest request) {_		final AllocationID allocationId = request.getAllocationId()__		if (isRequestDuplicated(request)) {_			LOG.warn("Duplicated slot request, AllocationID:{}", allocationId)__			return new RMSlotRequestRegistered(allocationId)__		}__		_		final ResourceSlot slot = chooseSlotToUse(request, freeSlots)__		if (slot != null) {_			LOG.info("Assigning SlotID({}) to AllocationID({}), JobID:{}", slot.getSlotId(),_				allocationId, request.getJobId())___			_			allocationMap.addAllocation(slot.getSlotId(), allocationId)__			_			freeSlots.remove(slot.getSlotId())___			sendSlotRequest(slot, request)__		} else {_			LOG.info("Cannot fulfil slot request, try to allocate a new container for it, " +_				"AllocationID:{}, JobID:{}", allocationId, request.getJobId())__			Preconditions.checkState(rmServices != null,_				"Attempted to allocate resources but no ResourceManagerServices set.")__			rmServices.allocateResource(request.getResourceProfile())__			pendingSlotRequests.put(allocationId, request)__		}__		return new RMSlotRequestRegistered(allocationId)__	};request,a,slot,with,requirements,we,may,either,fulfill,the,request,or,pending,it,trigger,container,allocation,if,we,don,t,have,enough,resource,if,we,have,free,slot,which,can,match,the,request,record,this,allocation,and,forward,the,request,to,task,manager,through,resource,manager,we,want,this,done,by,rpc,s,main,thread,to,avoid,race,condition,param,request,the,detailed,request,of,the,slot,return,rmslot,request,registered,the,confirmation,message,to,be,send,to,the,caller;public,rmslot,request,registered,request,slot,final,slot,request,request,final,allocation,id,allocation,id,request,get,allocation,id,if,is,request,duplicated,request,log,warn,duplicated,slot,request,allocation,id,allocation,id,return,new,rmslot,request,registered,allocation,id,final,resource,slot,slot,choose,slot,to,use,request,free,slots,if,slot,null,log,info,assigning,slot,id,to,allocation,id,job,id,slot,get,slot,id,allocation,id,request,get,job,id,allocation,map,add,allocation,slot,get,slot,id,allocation,id,free,slots,remove,slot,get,slot,id,send,slot,request,slot,request,else,log,info,cannot,fulfil,slot,request,try,to,allocate,a,new,container,for,it,allocation,id,job,id,allocation,id,request,get,job,id,preconditions,check,state,rm,services,null,attempted,to,allocate,resources,but,no,resource,manager,services,set,rm,services,allocate,resource,request,get,resource,profile,pending,slot,requests,put,allocation,id,request,return,new,rmslot,request,registered,allocation,id
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1493301216;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.cancelTimeout()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,cancel,timeout,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1493307989;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.markUsed()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,mark,used,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1501529908;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.markUsed()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,mark,used,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1501580028;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.markUsed()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,mark,used,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1503019375;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.markUsed()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,mark,used,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1503580260;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.markUsed()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,mark,used,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1507240448;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1507653580;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1507738083;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		TaskManagerSlot slot = slots.get(slotId)___		if (null != slot) {_			_			slot.setAllocationId(allocationId)___			if (null != allocationId) {_				if (slot.hasPendingSlotRequest()){_					_					PendingSlotRequest pendingSlotRequest = slot.getAssignedSlotRequest()___					if (Objects.equals(pendingSlotRequest.getAllocationId(), allocationId)) {_						_						cancelPendingSlotRequest(pendingSlotRequest)___						_						pendingSlotRequests.remove(pendingSlotRequest.getAllocationId())__					} else {_						_						rejectPendingSlotRequest(_							pendingSlotRequest,_							new Exception("Task manager reported slot " + slotId + " being already allocated."))__					}__					slot.setAssignedSlotRequest(null)__				}__				fulfilledSlotRequests.put(allocationId, slotId)___				TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___				if (null != taskManagerRegistration) {_					_					taskManagerRegistration.markUsed()__				}_			}__			return true__		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,task,manager,slot,slot,slots,get,slot,id,if,null,slot,slot,set,allocation,id,allocation,id,if,null,allocation,id,if,slot,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,get,assigned,slot,request,if,objects,equals,pending,slot,request,get,allocation,id,allocation,id,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,remove,pending,slot,request,get,allocation,id,else,reject,pending,slot,request,pending,slot,request,new,exception,task,manager,reported,slot,slot,id,being,already,allocated,slot,set,assigned,slot,request,null,fulfilled,slot,requests,put,allocation,id,slot,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,mark,used,return,true,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1507879191;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1516815167;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1519305029;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1519920149;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1520254504;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1520593421;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1521641386;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId);1525377048;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1525934187;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1530472121;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1530503760;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1531900495;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1534938698;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1537262283;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1537448260;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1537538032;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId);1542290209;Updates a slot with the given allocation id.__@param slotId to update_@param allocationId specifying the current allocation of the slot_@param jobId specifying the job to which the slot is allocated_@return True if the slot could be updated_ otherwise false;private boolean updateSlot(SlotID slotId, AllocationID allocationId, JobID jobId) {_		final TaskManagerSlot slot = slots.get(slotId)___		if (slot != null) {_			final TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (taskManagerRegistration != null) {_				updateSlotState(slot, taskManagerRegistration, allocationId, jobId)___				return true__			} else {_				throw new IllegalStateException("Trying to update a slot from a TaskManager " +_					slot.getInstanceId() + " which has not been registered.")__			}_		} else {_			LOG.debug("Trying to update unknown slot with slot id {}.", slotId)___			return false__		}_	};updates,a,slot,with,the,given,allocation,id,param,slot,id,to,update,param,allocation,id,specifying,the,current,allocation,of,the,slot,param,job,id,specifying,the,job,to,which,the,slot,is,allocated,return,true,if,the,slot,could,be,updated,otherwise,false;private,boolean,update,slot,slot,id,slot,id,allocation,id,allocation,id,job,id,job,id,final,task,manager,slot,slot,slots,get,slot,id,if,slot,null,final,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,task,manager,registration,null,update,slot,state,slot,task,manager,registration,allocation,id,job,id,return,true,else,throw,new,illegal,state,exception,trying,to,update,a,slot,from,a,task,manager,slot,get,instance,id,which,has,not,been,registered,else,log,debug,trying,to,update,unknown,slot,with,slot,id,slot,id,return,false
SlotManager -> @Override 	public void close() throws Exception;1486637985;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,suspend
SlotManager -> @Override 	public void close() throws Exception;1493301216;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,suspend
SlotManager -> @Override 	public void close() throws Exception;1493307989;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1501529908;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1501580028;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1503019375;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1503580260;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1507240448;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1507653580;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1507738083;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1507879191;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1516815167;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1519305029;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1519920149;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1520254504;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1520593421;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1521641386;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1525377048;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1525934187;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1530472121;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1530503760;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1531900495;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1534938698;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1537262283;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1537448260;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1537538032;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> @Override 	public void close() throws Exception;1542290209;Closes the slot manager.__@throws Exception if the close operation fails;@Override_	public void close() throws Exception {_		LOG.info("Closing the SlotManager.")___		suspend()__	};closes,the,slot,manager,throws,exception,if,the,close,operation,fails;override,public,void,close,throws,exception,log,info,closing,the,slot,manager,suspend
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1486637985;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		pendingSlotRequest.cancelTimeout()___		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,pending,slot,request,cancel,timeout,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1493301216;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		pendingSlotRequest.cancelTimeout()___		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,pending,slot,request,cancel,timeout,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1493307989;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1501529908;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1501580028;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1503019375;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1503580260;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1507240448;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1507653580;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1507738083;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1507879191;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1516815167;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1519305029;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1519920149;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1520254504;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1520593421;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1521641386;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1525377048;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1525934187;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1530472121;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1530503760;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1531900495;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1534938698;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		returnPendingTaskManagerSlotIfAssigned(pendingSlotRequest)___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,return,pending,task,manager,slot,if,assigned,pending,slot,request,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1537262283;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1537448260;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1537538032;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		returnPendingTaskManagerSlotIfAssigned(pendingSlotRequest)___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,return,pending,task,manager,slot,if,assigned,pending,slot,request,if,null,request,request,cancel,false
SlotManager -> private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest);1542290209;Cancels the given slot request.__@param pendingSlotRequest to cancel;private void cancelPendingSlotRequest(PendingSlotRequest pendingSlotRequest) {_		CompletableFuture<Acknowledge> request = pendingSlotRequest.getRequestFuture()___		returnPendingTaskManagerSlotIfAssigned(pendingSlotRequest)___		if (null != request) {_			request.cancel(false)__		}_	};cancels,the,given,slot,request,param,pending,slot,request,to,cancel;private,void,cancel,pending,slot,request,pending,slot,request,pending,slot,request,completable,future,acknowledge,request,pending,slot,request,get,request,future,return,pending,task,manager,slot,if,assigned,pending,slot,request,if,null,request,request,cancel,false
SlotManager -> public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway);1472741611;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param gateway TaskExcutor's gateway;public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway) {_		this.taskManagerGateways.put(resourceID, gateway)__	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,gateway,task,excutor,s,gateway;public,void,register,task,executor,resource,id,resource,id,task,executor,gateway,gateway,this,task,manager,gateways,put,resource,id,gateway
SlotManager -> public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway);1474459992;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param gateway TaskExcutor's gateway;public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway) {_		this.taskManagerGateways.put(resourceID, gateway)__	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,gateway,task,excutor,s,gateway;public,void,register,task,executor,resource,id,resource,id,task,executor,gateway,gateway,this,task,manager,gateways,put,resource,id,gateway
SlotManager -> public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway);1474471581;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param gateway TaskExcutor's gateway;public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway) {_		this.taskManagerGateways.put(resourceID, gateway)__	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,gateway,task,excutor,s,gateway;public,void,register,task,executor,resource,id,resource,id,task,executor,gateway,gateway,this,task,manager,gateways,put,resource,id,gateway
SlotManager -> public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway);1474482025;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param gateway TaskExcutor's gateway;public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway) {_		this.taskManagerGateways.put(resourceID, gateway)__	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,gateway,task,excutor,s,gateway;public,void,register,task,executor,resource,id,resource,id,task,executor,gateway,gateway,this,task,manager,gateways,put,resource,id,gateway
SlotManager -> public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway);1474965482;Registers a TaskExecutor_@param resourceID TaskExecutor's ResourceID_@param gateway TaskExcutor's gateway;public void registerTaskExecutor(ResourceID resourceID, TaskExecutorGateway gateway) {_		this.taskManagerGateways.put(resourceID, gateway)__	};registers,a,task,executor,param,resource,id,task,executor,s,resource,id,param,gateway,task,excutor,s,gateway;public,void,register,task,executor,resource,id,resource,id,task,executor,gateway,gateway,this,task,manager,gateways,put,resource,id,gateway
SlotManager -> public void updateSlotStatus(final SlotReport slotReport);1472741611;Sync slot status with TaskManager's SlotReport.;public void updateSlotStatus(final SlotReport slotReport) {_		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			updateSlotStatus(slotStatus)__		}_	};sync,slot,status,with,task,manager,s,slot,report;public,void,update,slot,status,final,slot,report,slot,report,for,slot,status,slot,status,slot,report,get,slots,status,update,slot,status,slot,status
SlotManager -> public void updateSlotStatus(final SlotReport slotReport);1474459992;Sync slot status with TaskManager's SlotReport.;public void updateSlotStatus(final SlotReport slotReport) {_		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			updateSlotStatus(slotStatus)__		}_	};sync,slot,status,with,task,manager,s,slot,report;public,void,update,slot,status,final,slot,report,slot,report,for,slot,status,slot,status,slot,report,get,slots,status,update,slot,status,slot,status
SlotManager -> public void updateSlotStatus(final SlotReport slotReport);1474471581;Sync slot status with TaskManager's SlotReport.;public void updateSlotStatus(final SlotReport slotReport) {_		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			updateSlotStatus(slotStatus)__		}_	};sync,slot,status,with,task,manager,s,slot,report;public,void,update,slot,status,final,slot,report,slot,report,for,slot,status,slot,status,slot,report,get,slots,status,update,slot,status,slot,status
SlotManager -> public void updateSlotStatus(final SlotReport slotReport);1474482025;Sync slot status with TaskManager's SlotReport.;public void updateSlotStatus(final SlotReport slotReport) {_		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			updateSlotStatus(slotStatus)__		}_	};sync,slot,status,with,task,manager,s,slot,report;public,void,update,slot,status,final,slot,report,slot,report,for,slot,status,slot,status,slot,report,get,slots,status,update,slot,status,slot,status
SlotManager -> public void updateSlotStatus(final SlotReport slotReport);1474965482;Sync slot status with TaskManager's SlotReport.;public void updateSlotStatus(final SlotReport slotReport) {_		for (SlotStatus slotStatus : slotReport.getSlotsStatus()) {_			updateSlotStatus(slotStatus)__		}_	};sync,slot,status,with,task,manager,s,slot,report;public,void,update,slot,status,final,slot,report,slot,report,for,slot,status,slot,status,slot,report,get,slots,status,update,slot,status,slot,status
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1486637985;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new FlinkCompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		_		Future<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			leaderId,_			taskManagerRequestTimeout)___		requestFuture.handle(new BiFunction<Acknowledge, Throwable, Void>() {_			@Override_			public Void apply(Acknowledge acknowledge, Throwable throwable) {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}__				return null__			}_		})___		completableFuture.handleAsync(new BiFunction<Acknowledge, Throwable, Void>() {_			@Override_			public Void apply(Acknowledge acknowledge, Throwable throwable) {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}__				return null__			}_		}, mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,flink,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,leader,id,task,manager,request,timeout,request,future,handle,new,bi,function,acknowledge,throwable,void,override,public,void,apply,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,return,null,completable,future,handle,async,new,bi,function,acknowledge,throwable,void,override,public,void,apply,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,return,null,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1493301216;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new FlinkCompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		_		Future<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			leaderId,_			taskManagerRequestTimeout)___		requestFuture.handle(new BiFunction<Acknowledge, Throwable, Void>() {_			@Override_			public Void apply(Acknowledge acknowledge, Throwable throwable) {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}__				return null__			}_		})___		completableFuture.handleAsync(new BiFunction<Acknowledge, Throwable, Void>() {_			@Override_			public Void apply(Acknowledge acknowledge, Throwable throwable) {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}__				return null__			}_		}, mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,flink,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,leader,id,task,manager,request,timeout,request,future,handle,new,bi,function,acknowledge,throwable,void,override,public,void,apply,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,return,null,completable,future,handle,async,new,bi,function,acknowledge,throwable,void,override,public,void,apply,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,return,null,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1493307989;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new FlinkCompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration != null) {_			_			taskManagerRegistration.markUsed()__		} else {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		_		Future<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			leaderId,_			taskManagerRequestTimeout)___		requestFuture.handle(new BiFunction<Acknowledge, Throwable, Void>() {_			@Override_			public Void apply(Acknowledge acknowledge, Throwable throwable) {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}__				return null__			}_		})___		completableFuture.handleAsync(new BiFunction<Acknowledge, Throwable, Void>() {_			@Override_			public Void apply(Acknowledge acknowledge, Throwable throwable) {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}__				return null__			}_		}, mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,flink,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,task,manager,registration,mark,used,else,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,leader,id,task,manager,request,timeout,request,future,handle,new,bi,function,acknowledge,throwable,void,override,public,void,apply,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,return,null,completable,future,handle,async,new,bi,function,acknowledge,throwable,void,override,public,void,apply,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,return,null,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1501529908;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration != null) {_			_			taskManagerRegistration.markUsed()__		} else {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		_		CompletableFuture<Acknowledge> requestFuture = FutureUtils.toJava(_			gateway.requestSlot(_				slotId,_				pendingSlotRequest.getJobId(),_				allocationId,_				pendingSlotRequest.getTargetAddress(),_				leaderId,_				taskManagerRequestTimeout))___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,task,manager,registration,mark,used,else,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,completable,future,acknowledge,request,future,future,utils,to,java,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,leader,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1501580028;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration != null) {_			_			taskManagerRegistration.markUsed()__		} else {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			leaderId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,task,manager,registration,mark,used,else,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,leader,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1503019375;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration != null) {_			_			taskManagerRegistration.markUsed()__		} else {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			leaderId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,task,manager,registration,mark,used,else,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,leader,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1503580260;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration != null) {_			_			taskManagerRegistration.markUsed()__		} else {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,task,manager,registration,mark,used,else,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1507240448;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1507653580;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1507738083;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.setAssignedSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration != null) {_			_			taskManagerRegistration.markUsed()__		} else {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					updateSlot(slotId, allocationId)__				} else {_					if (throwable instanceof SlotOccupiedException) {_						SlotOccupiedException exception = (SlotOccupiedException) throwable__						updateSlot(slotId, exception.getAllocationId())__					} else {_						removeSlotRequestFromSlot(slotId, allocationId)__					}__					if (!(throwable instanceof CancellationException)) {_						handleFailedSlotRequest(slotId, allocationId, throwable)__					} else {_						LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__					}_				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,set,assigned,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,task,manager,registration,mark,used,else,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1507879191;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1516815167;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1519305029;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1519920149;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1520254504;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1520593421;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1521641386;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1525377048;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(taskManagerSlot.getInstanceId())___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				taskManagerSlot.getInstanceId() + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId)__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,task,manager,slot,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,task,manager,slot,get,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1525934187;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1530472121;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1530503760;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1531900495;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1534938698;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		returnPendingTaskManagerSlotIfAssigned(pendingSlotRequest)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,return,pending,task,manager,slot,if,assigned,pending,slot,request,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1537262283;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1537448260;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1537538032;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		returnPendingTaskManagerSlotIfAssigned(pendingSlotRequest)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,return,pending,task,manager,slot,if,assigned,pending,slot,request,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest);1542290209;Allocates the given slot for the given slot request. This entails sending a registration_message to the task manager and treating failures.__@param taskManagerSlot to allocate for the given slot request_@param pendingSlotRequest to allocate the given slot for;private void allocateSlot(TaskManagerSlot taskManagerSlot, PendingSlotRequest pendingSlotRequest) {_		Preconditions.checkState(taskManagerSlot.getState() == TaskManagerSlot.State.FREE)___		TaskExecutorConnection taskExecutorConnection = taskManagerSlot.getTaskManagerConnection()__		TaskExecutorGateway gateway = taskExecutorConnection.getTaskExecutorGateway()___		final CompletableFuture<Acknowledge> completableFuture = new CompletableFuture<>()__		final AllocationID allocationId = pendingSlotRequest.getAllocationId()__		final SlotID slotId = taskManagerSlot.getSlotId()__		final InstanceID instanceID = taskManagerSlot.getInstanceId()___		taskManagerSlot.assignPendingSlotRequest(pendingSlotRequest)__		pendingSlotRequest.setRequestFuture(completableFuture)___		returnPendingTaskManagerSlotIfAssigned(pendingSlotRequest)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceID)___		if (taskManagerRegistration == null) {_			throw new IllegalStateException("Could not find a registered task manager for instance id " +_				instanceID + '.')__		}__		taskManagerRegistration.markUsed()___		_		CompletableFuture<Acknowledge> requestFuture = gateway.requestSlot(_			slotId,_			pendingSlotRequest.getJobId(),_			allocationId,_			pendingSlotRequest.getTargetAddress(),_			resourceManagerId,_			taskManagerRequestTimeout)___		requestFuture.whenComplete(_			(Acknowledge acknowledge, Throwable throwable) -> {_				if (acknowledge != null) {_					completableFuture.complete(acknowledge)__				} else {_					completableFuture.completeExceptionally(throwable)__				}_			})___		completableFuture.whenCompleteAsync(_			(Acknowledge acknowledge, Throwable throwable) -> {_				try {_					if (acknowledge != null) {_						updateSlot(slotId, allocationId, pendingSlotRequest.getJobId())__					} else {_						if (throwable instanceof SlotOccupiedException) {_							SlotOccupiedException exception = (SlotOccupiedException) throwable__							updateSlot(slotId, exception.getAllocationId(), exception.getJobId())__						} else {_							removeSlotRequestFromSlot(slotId, allocationId)__						}__						if (!(throwable instanceof CancellationException)) {_							handleFailedSlotRequest(slotId, allocationId, throwable)__						} else {_							LOG.debug("Slot allocation request {} has been cancelled.", allocationId, throwable)__						}_					}_				} catch (Exception e) {_					LOG.error("Error while completing the slot allocation.", e)__				}_			},_			mainThreadExecutor)__	};allocates,the,given,slot,for,the,given,slot,request,this,entails,sending,a,registration,message,to,the,task,manager,and,treating,failures,param,task,manager,slot,to,allocate,for,the,given,slot,request,param,pending,slot,request,to,allocate,the,given,slot,for;private,void,allocate,slot,task,manager,slot,task,manager,slot,pending,slot,request,pending,slot,request,preconditions,check,state,task,manager,slot,get,state,task,manager,slot,state,free,task,executor,connection,task,executor,connection,task,manager,slot,get,task,manager,connection,task,executor,gateway,gateway,task,executor,connection,get,task,executor,gateway,final,completable,future,acknowledge,completable,future,new,completable,future,final,allocation,id,allocation,id,pending,slot,request,get,allocation,id,final,slot,id,slot,id,task,manager,slot,get,slot,id,final,instance,id,instance,id,task,manager,slot,get,instance,id,task,manager,slot,assign,pending,slot,request,pending,slot,request,pending,slot,request,set,request,future,completable,future,return,pending,task,manager,slot,if,assigned,pending,slot,request,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,task,manager,registration,null,throw,new,illegal,state,exception,could,not,find,a,registered,task,manager,for,instance,id,instance,id,task,manager,registration,mark,used,completable,future,acknowledge,request,future,gateway,request,slot,slot,id,pending,slot,request,get,job,id,allocation,id,pending,slot,request,get,target,address,resource,manager,id,task,manager,request,timeout,request,future,when,complete,acknowledge,acknowledge,throwable,throwable,if,acknowledge,null,completable,future,complete,acknowledge,else,completable,future,complete,exceptionally,throwable,completable,future,when,complete,async,acknowledge,acknowledge,throwable,throwable,try,if,acknowledge,null,update,slot,slot,id,allocation,id,pending,slot,request,get,job,id,else,if,throwable,instanceof,slot,occupied,exception,slot,occupied,exception,exception,slot,occupied,exception,throwable,update,slot,slot,id,exception,get,allocation,id,exception,get,job,id,else,remove,slot,request,from,slot,slot,id,allocation,id,if,throwable,instanceof,cancellation,exception,handle,failed,slot,request,slot,id,allocation,id,throwable,else,log,debug,slot,allocation,request,has,been,cancelled,allocation,id,throwable,catch,exception,e,log,error,error,while,completing,the,slot,allocation,e,main,thread,executor
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1472741611;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1474459992;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1474471581;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1474482025;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1474965482;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1475154512;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1475679726;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot, 		final Map<AllocationID, SlotRequest> pendingRequests)_;1476113770;Choose a pending request to fulfill when we have a free slot, the behavior is framework specified.__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen SlotRequest, <tt>null</tt> if we did not find a match;protected abstract SlotRequest chooseRequestToFulfill(final ResourceSlot offeredSlot,_		final Map<AllocationID, SlotRequest> pendingRequests)_;choose,a,pending,request,to,fulfill,when,we,have,a,free,slot,the,behavior,is,framework,specified,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,slot,request,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,slot,request,choose,request,to,fulfill,final,resource,slot,offered,slot,final,map,allocation,id,slot,request,pending,requests
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1472741611;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1474459992;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1474471581;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1474482025;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1474965482;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1475154512;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1475679726;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request, 		final Map<SlotID, ResourceSlot> freeSlots)_;1476113770;Choose a slot to use among all free slots, the behavior is framework specified.__@param request   The slot request_@param freeSlots All slots which can be used_@return The slot we choose to use, <tt>null</tt> if we did not find a match;protected abstract ResourceSlot chooseSlotToUse(final SlotRequest request,_		final Map<SlotID, ResourceSlot> freeSlots)_;choose,a,slot,to,use,among,all,free,slots,the,behavior,is,framework,specified,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,slot,we,choose,to,use,tt,null,tt,if,we,did,not,find,a,match;protected,abstract,resource,slot,choose,slot,to,use,final,slot,request,request,final,map,slot,id,resource,slot,free,slots
SlotManager -> void updateSlotStatus(final SlotStatus reportedStatus);1472741611;Update slot status based on TaskManager's report. There are mainly two situations when we receive the report:_<ul>_<li>1. The slot is newly registered.</li>_<li>2. The slot has registered, it contains its current status.</li>_</ul>_<p>_Regarding 1: It's fairly simple, we just record this slot's status, and trigger schedule if slot is empty._<p>_Regarding 2: It will cause some weird situation since we may have some time-gap on how the slot's status really_is. We may have some updates on the slot's allocation, but it doesn't reflected by TaskManager's heartbeat yet,_and we may make some wrong decision if we cannot guarantee we have the exact status about all the slots. So_the principle here is: We always trust TaskManager's heartbeat, we will correct our information based on that_and take next action based on the diff between our information and heartbeat status.__@param reportedStatus Reported slot status;void updateSlotStatus(final SlotStatus reportedStatus) {_		final SlotID slotId = reportedStatus.getSlotID()___		final TaskExecutorGateway taskExecutorGateway = taskManagerGateways.get(slotId.getResourceID())__		if (taskExecutorGateway == null) {_			LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_				slotId.getResourceID())__			return__		}__		final ResourceSlot slot = new ResourceSlot(slotId, reportedStatus.getProfiler(), taskExecutorGateway)___		if (registerNewSlot(slot)) {_			_			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, reportedStatus.getAllocationID())___			if (reportedStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		} else {_			_			if (reportedStatus.getAllocationID() != null) {_				_				final AllocationID reportedAllocationId = reportedStatus.getAllocationID()___				_				if (allocationMap.isAllocated(slotId)) {_					_					final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___					if (!reportedAllocationId.equals(currentAllocationId)) {_						LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:{}",_							slotId, currentAllocationId, reportedAllocationId)___						_						allocationMap.removeAllocation(slotId)__						allocationMap.addAllocation(slotId, reportedAllocationId)__					}_				} else {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:null, reported:{}",_						slotId, reportedAllocationId)___					_					allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())___					_					freeSlots.remove(slotId)__				}_			} else {_				__				_				if (allocationMap.isAllocated(slotId)) {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:null",_						slotId, allocationMap.getAllocationID(slotId))___					_					allocationMap.removeAllocation(slotId)___					_					handleFreeSlot(slot)__				}_			}_		}_	};update,slot,status,based,on,task,manager,s,report,there,are,mainly,two,situations,when,we,receive,the,report,ul,li,1,the,slot,is,newly,registered,li,li,2,the,slot,has,registered,it,contains,its,current,status,li,ul,p,regarding,1,it,s,fairly,simple,we,just,record,this,slot,s,status,and,trigger,schedule,if,slot,is,empty,p,regarding,2,it,will,cause,some,weird,situation,since,we,may,have,some,time,gap,on,how,the,slot,s,status,really,is,we,may,have,some,updates,on,the,slot,s,allocation,but,it,doesn,t,reflected,by,task,manager,s,heartbeat,yet,and,we,may,make,some,wrong,decision,if,we,cannot,guarantee,we,have,the,exact,status,about,all,the,slots,so,the,principle,here,is,we,always,trust,task,manager,s,heartbeat,we,will,correct,our,information,based,on,that,and,take,next,action,based,on,the,diff,between,our,information,and,heartbeat,status,param,reported,status,reported,slot,status;void,update,slot,status,final,slot,status,reported,status,final,slot,id,slot,id,reported,status,get,slot,id,final,task,executor,gateway,task,executor,gateway,task,manager,gateways,get,slot,id,get,resource,id,if,task,executor,gateway,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,reported,status,get,profiler,task,executor,gateway,if,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,reported,status,get,allocation,id,if,reported,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,else,handle,free,slot,slot,else,if,reported,status,get,allocation,id,null,final,allocation,id,reported,allocation,id,reported,status,get,allocation,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,reported,allocation,id,equals,current,allocation,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,slot,id,current,allocation,id,reported,allocation,id,allocation,map,remove,allocation,slot,id,allocation,map,add,allocation,slot,id,reported,allocation,id,else,log,info,slot,allocation,info,mismatch,slot,id,current,null,reported,slot,id,reported,allocation,id,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,null,slot,id,allocation,map,get,allocation,id,slot,id,allocation,map,remove,allocation,slot,id,handle,free,slot,slot
SlotManager -> void updateSlotStatus(final SlotStatus reportedStatus);1474459992;Update slot status based on TaskManager's report. There are mainly two situations when we receive the report:_<ul>_<li>1. The slot is newly registered.</li>_<li>2. The slot has registered, it contains its current status.</li>_</ul>_<p>_Regarding 1: It's fairly simple, we just record this slot's status, and trigger schedule if slot is empty._<p>_Regarding 2: It will cause some weird situation since we may have some time-gap on how the slot's status really_is. We may have some updates on the slot's allocation, but it doesn't reflected by TaskManager's heartbeat yet,_and we may make some wrong decision if we cannot guarantee we have the exact status about all the slots. So_the principle here is: We always trust TaskManager's heartbeat, we will correct our information based on that_and take next action based on the diff between our information and heartbeat status.__@param reportedStatus Reported slot status;void updateSlotStatus(final SlotStatus reportedStatus) {_		final SlotID slotId = reportedStatus.getSlotID()___		final TaskExecutorGateway taskExecutorGateway = taskManagerGateways.get(slotId.getResourceID())__		if (taskExecutorGateway == null) {_			LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_				slotId.getResourceID())__			return__		}__		final ResourceSlot slot = new ResourceSlot(slotId, reportedStatus.getProfiler(), taskExecutorGateway)___		if (registerNewSlot(slot)) {_			_			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, reportedStatus.getAllocationID())___			if (reportedStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		} else {_			_			if (reportedStatus.getAllocationID() != null) {_				_				final AllocationID reportedAllocationId = reportedStatus.getAllocationID()___				_				if (allocationMap.isAllocated(slotId)) {_					_					final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___					if (!reportedAllocationId.equals(currentAllocationId)) {_						LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:{}",_							slotId, currentAllocationId, reportedAllocationId)___						_						allocationMap.removeAllocation(slotId)__						allocationMap.addAllocation(slotId, reportedAllocationId)__					}_				} else {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:null, reported:{}",_						slotId, reportedAllocationId)___					_					allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())___					_					freeSlots.remove(slotId)__				}_			} else {_				__				_				if (allocationMap.isAllocated(slotId)) {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:null",_						slotId, allocationMap.getAllocationID(slotId))___					_					allocationMap.removeAllocation(slotId)___					_					handleFreeSlot(slot)__				}_			}_		}_	};update,slot,status,based,on,task,manager,s,report,there,are,mainly,two,situations,when,we,receive,the,report,ul,li,1,the,slot,is,newly,registered,li,li,2,the,slot,has,registered,it,contains,its,current,status,li,ul,p,regarding,1,it,s,fairly,simple,we,just,record,this,slot,s,status,and,trigger,schedule,if,slot,is,empty,p,regarding,2,it,will,cause,some,weird,situation,since,we,may,have,some,time,gap,on,how,the,slot,s,status,really,is,we,may,have,some,updates,on,the,slot,s,allocation,but,it,doesn,t,reflected,by,task,manager,s,heartbeat,yet,and,we,may,make,some,wrong,decision,if,we,cannot,guarantee,we,have,the,exact,status,about,all,the,slots,so,the,principle,here,is,we,always,trust,task,manager,s,heartbeat,we,will,correct,our,information,based,on,that,and,take,next,action,based,on,the,diff,between,our,information,and,heartbeat,status,param,reported,status,reported,slot,status;void,update,slot,status,final,slot,status,reported,status,final,slot,id,slot,id,reported,status,get,slot,id,final,task,executor,gateway,task,executor,gateway,task,manager,gateways,get,slot,id,get,resource,id,if,task,executor,gateway,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,reported,status,get,profiler,task,executor,gateway,if,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,reported,status,get,allocation,id,if,reported,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,else,handle,free,slot,slot,else,if,reported,status,get,allocation,id,null,final,allocation,id,reported,allocation,id,reported,status,get,allocation,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,reported,allocation,id,equals,current,allocation,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,slot,id,current,allocation,id,reported,allocation,id,allocation,map,remove,allocation,slot,id,allocation,map,add,allocation,slot,id,reported,allocation,id,else,log,info,slot,allocation,info,mismatch,slot,id,current,null,reported,slot,id,reported,allocation,id,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,null,slot,id,allocation,map,get,allocation,id,slot,id,allocation,map,remove,allocation,slot,id,handle,free,slot,slot
SlotManager -> void updateSlotStatus(final SlotStatus reportedStatus);1474471581;Update slot status based on TaskManager's report. There are mainly two situations when we receive the report:_<ul>_<li>1. The slot is newly registered.</li>_<li>2. The slot has registered, it contains its current status.</li>_</ul>_<p>_Regarding 1: It's fairly simple, we just record this slot's status, and trigger schedule if slot is empty._<p>_Regarding 2: It will cause some weird situation since we may have some time-gap on how the slot's status really_is. We may have some updates on the slot's allocation, but it doesn't reflected by TaskManager's heartbeat yet,_and we may make some wrong decision if we cannot guarantee we have the exact status about all the slots. So_the principle here is: We always trust TaskManager's heartbeat, we will correct our information based on that_and take next action based on the diff between our information and heartbeat status.__@param reportedStatus Reported slot status;void updateSlotStatus(final SlotStatus reportedStatus) {_		final SlotID slotId = reportedStatus.getSlotID()___		final TaskExecutorGateway taskExecutorGateway = taskManagerGateways.get(slotId.getResourceID())__		if (taskExecutorGateway == null) {_			LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_				slotId.getResourceID())__			return__		}__		final ResourceSlot slot = new ResourceSlot(slotId, reportedStatus.getProfiler(), taskExecutorGateway)___		if (registerNewSlot(slot)) {_			_			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, reportedStatus.getAllocationID())___			if (reportedStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		} else {_			_			if (reportedStatus.getAllocationID() != null) {_				_				final AllocationID reportedAllocationId = reportedStatus.getAllocationID()___				_				if (allocationMap.isAllocated(slotId)) {_					_					final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___					if (!reportedAllocationId.equals(currentAllocationId)) {_						LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:{}",_							slotId, currentAllocationId, reportedAllocationId)___						_						allocationMap.removeAllocation(slotId)__						allocationMap.addAllocation(slotId, reportedAllocationId)__					}_				} else {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:null, reported:{}",_						slotId, reportedAllocationId)___					_					allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())___					_					freeSlots.remove(slotId)__				}_			} else {_				__				_				if (allocationMap.isAllocated(slotId)) {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:null",_						slotId, allocationMap.getAllocationID(slotId))___					_					allocationMap.removeAllocation(slotId)___					_					handleFreeSlot(slot)__				}_			}_		}_	};update,slot,status,based,on,task,manager,s,report,there,are,mainly,two,situations,when,we,receive,the,report,ul,li,1,the,slot,is,newly,registered,li,li,2,the,slot,has,registered,it,contains,its,current,status,li,ul,p,regarding,1,it,s,fairly,simple,we,just,record,this,slot,s,status,and,trigger,schedule,if,slot,is,empty,p,regarding,2,it,will,cause,some,weird,situation,since,we,may,have,some,time,gap,on,how,the,slot,s,status,really,is,we,may,have,some,updates,on,the,slot,s,allocation,but,it,doesn,t,reflected,by,task,manager,s,heartbeat,yet,and,we,may,make,some,wrong,decision,if,we,cannot,guarantee,we,have,the,exact,status,about,all,the,slots,so,the,principle,here,is,we,always,trust,task,manager,s,heartbeat,we,will,correct,our,information,based,on,that,and,take,next,action,based,on,the,diff,between,our,information,and,heartbeat,status,param,reported,status,reported,slot,status;void,update,slot,status,final,slot,status,reported,status,final,slot,id,slot,id,reported,status,get,slot,id,final,task,executor,gateway,task,executor,gateway,task,manager,gateways,get,slot,id,get,resource,id,if,task,executor,gateway,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,reported,status,get,profiler,task,executor,gateway,if,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,reported,status,get,allocation,id,if,reported,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,else,handle,free,slot,slot,else,if,reported,status,get,allocation,id,null,final,allocation,id,reported,allocation,id,reported,status,get,allocation,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,reported,allocation,id,equals,current,allocation,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,slot,id,current,allocation,id,reported,allocation,id,allocation,map,remove,allocation,slot,id,allocation,map,add,allocation,slot,id,reported,allocation,id,else,log,info,slot,allocation,info,mismatch,slot,id,current,null,reported,slot,id,reported,allocation,id,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,null,slot,id,allocation,map,get,allocation,id,slot,id,allocation,map,remove,allocation,slot,id,handle,free,slot,slot
SlotManager -> void updateSlotStatus(final SlotStatus reportedStatus);1474482025;Update slot status based on TaskManager's report. There are mainly two situations when we receive the report:_<ul>_<li>1. The slot is newly registered.</li>_<li>2. The slot has registered, it contains its current status.</li>_</ul>_<p>_Regarding 1: It's fairly simple, we just record this slot's status, and trigger schedule if slot is empty._<p>_Regarding 2: It will cause some weird situation since we may have some time-gap on how the slot's status really_is. We may have some updates on the slot's allocation, but it doesn't reflected by TaskManager's heartbeat yet,_and we may make some wrong decision if we cannot guarantee we have the exact status about all the slots. So_the principle here is: We always trust TaskManager's heartbeat, we will correct our information based on that_and take next action based on the diff between our information and heartbeat status.__@param reportedStatus Reported slot status;void updateSlotStatus(final SlotStatus reportedStatus) {_		final SlotID slotId = reportedStatus.getSlotID()___		final TaskExecutorGateway taskExecutorGateway = taskManagerGateways.get(slotId.getResourceID())__		if (taskExecutorGateway == null) {_			LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_				slotId.getResourceID())__			return__		}__		final ResourceSlot slot = new ResourceSlot(slotId, reportedStatus.getProfiler(), taskExecutorGateway)___		if (registerNewSlot(slot)) {_			_			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, reportedStatus.getAllocationID())___			if (reportedStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		} else {_			_			if (reportedStatus.getAllocationID() != null) {_				_				final AllocationID reportedAllocationId = reportedStatus.getAllocationID()___				_				if (allocationMap.isAllocated(slotId)) {_					_					final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___					if (!reportedAllocationId.equals(currentAllocationId)) {_						LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:{}",_							slotId, currentAllocationId, reportedAllocationId)___						_						allocationMap.removeAllocation(slotId)__						allocationMap.addAllocation(slotId, reportedAllocationId)__					}_				} else {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:null, reported:{}",_						slotId, reportedAllocationId)___					_					allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())___					_					freeSlots.remove(slotId)__				}_			} else {_				__				_				if (allocationMap.isAllocated(slotId)) {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:null",_						slotId, allocationMap.getAllocationID(slotId))___					_					allocationMap.removeAllocation(slotId)___					_					handleFreeSlot(slot)__				}_			}_		}_	};update,slot,status,based,on,task,manager,s,report,there,are,mainly,two,situations,when,we,receive,the,report,ul,li,1,the,slot,is,newly,registered,li,li,2,the,slot,has,registered,it,contains,its,current,status,li,ul,p,regarding,1,it,s,fairly,simple,we,just,record,this,slot,s,status,and,trigger,schedule,if,slot,is,empty,p,regarding,2,it,will,cause,some,weird,situation,since,we,may,have,some,time,gap,on,how,the,slot,s,status,really,is,we,may,have,some,updates,on,the,slot,s,allocation,but,it,doesn,t,reflected,by,task,manager,s,heartbeat,yet,and,we,may,make,some,wrong,decision,if,we,cannot,guarantee,we,have,the,exact,status,about,all,the,slots,so,the,principle,here,is,we,always,trust,task,manager,s,heartbeat,we,will,correct,our,information,based,on,that,and,take,next,action,based,on,the,diff,between,our,information,and,heartbeat,status,param,reported,status,reported,slot,status;void,update,slot,status,final,slot,status,reported,status,final,slot,id,slot,id,reported,status,get,slot,id,final,task,executor,gateway,task,executor,gateway,task,manager,gateways,get,slot,id,get,resource,id,if,task,executor,gateway,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,reported,status,get,profiler,task,executor,gateway,if,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,reported,status,get,allocation,id,if,reported,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,else,handle,free,slot,slot,else,if,reported,status,get,allocation,id,null,final,allocation,id,reported,allocation,id,reported,status,get,allocation,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,reported,allocation,id,equals,current,allocation,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,slot,id,current,allocation,id,reported,allocation,id,allocation,map,remove,allocation,slot,id,allocation,map,add,allocation,slot,id,reported,allocation,id,else,log,info,slot,allocation,info,mismatch,slot,id,current,null,reported,slot,id,reported,allocation,id,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,null,slot,id,allocation,map,get,allocation,id,slot,id,allocation,map,remove,allocation,slot,id,handle,free,slot,slot
SlotManager -> void updateSlotStatus(final SlotStatus reportedStatus);1474965482;Update slot status based on TaskManager's report. There are mainly two situations when we receive the report:_<ul>_<li>1. The slot is newly registered.</li>_<li>2. The slot has registered, it contains its current status.</li>_</ul>_<p>_Regarding 1: It's fairly simple, we just record this slot's status, and trigger schedule if slot is empty._<p>_Regarding 2: It will cause some weird situation since we may have some time-gap on how the slot's status really_is. We may have some updates on the slot's allocation, but it doesn't reflected by TaskManager's heartbeat yet,_and we may make some wrong decision if we cannot guarantee we have the exact status about all the slots. So_the principle here is: We always trust TaskManager's heartbeat, we will correct our information based on that_and take next action based on the diff between our information and heartbeat status.__@param reportedStatus Reported slot status;void updateSlotStatus(final SlotStatus reportedStatus) {_		final SlotID slotId = reportedStatus.getSlotID()___		final TaskExecutorGateway taskExecutorGateway = taskManagerGateways.get(slotId.getResourceID())__		if (taskExecutorGateway == null) {_			LOG.info("Received SlotStatus but ResourceID {} is unknown to the SlotManager",_				slotId.getResourceID())__			return__		}__		final ResourceSlot slot = new ResourceSlot(slotId, reportedStatus.getProfiler(), taskExecutorGateway)___		if (registerNewSlot(slot)) {_			_			LOG.info("New slot appeared, SlotID:{}, AllocationID:{}", slotId, reportedStatus.getAllocationID())___			if (reportedStatus.getAllocationID() != null) {_				_				allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())__			} else {_				handleFreeSlot(slot)__			}_		} else {_			_			if (reportedStatus.getAllocationID() != null) {_				_				final AllocationID reportedAllocationId = reportedStatus.getAllocationID()___				_				if (allocationMap.isAllocated(slotId)) {_					_					final AllocationID currentAllocationId = allocationMap.getAllocationID(slotId)___					if (!reportedAllocationId.equals(currentAllocationId)) {_						LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:{}",_							slotId, currentAllocationId, reportedAllocationId)___						_						allocationMap.removeAllocation(slotId)__						allocationMap.addAllocation(slotId, reportedAllocationId)__					}_				} else {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:null, reported:{}",_						slotId, reportedAllocationId)___					_					allocationMap.addAllocation(slotId, reportedStatus.getAllocationID())___					_					freeSlots.remove(slotId)__				}_			} else {_				__				_				if (allocationMap.isAllocated(slotId)) {_					LOG.info("Slot allocation info mismatch! SlotID:{}, current:{}, reported:null",_						slotId, allocationMap.getAllocationID(slotId))___					_					allocationMap.removeAllocation(slotId)___					_					handleFreeSlot(slot)__				}_			}_		}_	};update,slot,status,based,on,task,manager,s,report,there,are,mainly,two,situations,when,we,receive,the,report,ul,li,1,the,slot,is,newly,registered,li,li,2,the,slot,has,registered,it,contains,its,current,status,li,ul,p,regarding,1,it,s,fairly,simple,we,just,record,this,slot,s,status,and,trigger,schedule,if,slot,is,empty,p,regarding,2,it,will,cause,some,weird,situation,since,we,may,have,some,time,gap,on,how,the,slot,s,status,really,is,we,may,have,some,updates,on,the,slot,s,allocation,but,it,doesn,t,reflected,by,task,manager,s,heartbeat,yet,and,we,may,make,some,wrong,decision,if,we,cannot,guarantee,we,have,the,exact,status,about,all,the,slots,so,the,principle,here,is,we,always,trust,task,manager,s,heartbeat,we,will,correct,our,information,based,on,that,and,take,next,action,based,on,the,diff,between,our,information,and,heartbeat,status,param,reported,status,reported,slot,status;void,update,slot,status,final,slot,status,reported,status,final,slot,id,slot,id,reported,status,get,slot,id,final,task,executor,gateway,task,executor,gateway,task,manager,gateways,get,slot,id,get,resource,id,if,task,executor,gateway,null,log,info,received,slot,status,but,resource,id,is,unknown,to,the,slot,manager,slot,id,get,resource,id,return,final,resource,slot,slot,new,resource,slot,slot,id,reported,status,get,profiler,task,executor,gateway,if,register,new,slot,slot,log,info,new,slot,appeared,slot,id,allocation,id,slot,id,reported,status,get,allocation,id,if,reported,status,get,allocation,id,null,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,else,handle,free,slot,slot,else,if,reported,status,get,allocation,id,null,final,allocation,id,reported,allocation,id,reported,status,get,allocation,id,if,allocation,map,is,allocated,slot,id,final,allocation,id,current,allocation,id,allocation,map,get,allocation,id,slot,id,if,reported,allocation,id,equals,current,allocation,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,slot,id,current,allocation,id,reported,allocation,id,allocation,map,remove,allocation,slot,id,allocation,map,add,allocation,slot,id,reported,allocation,id,else,log,info,slot,allocation,info,mismatch,slot,id,current,null,reported,slot,id,reported,allocation,id,allocation,map,add,allocation,slot,id,reported,status,get,allocation,id,free,slots,remove,slot,id,else,if,allocation,map,is,allocated,slot,id,log,info,slot,allocation,info,mismatch,slot,id,current,reported,null,slot,id,allocation,map,get,allocation,id,slot,id,allocation,map,remove,allocation,slot,id,handle,free,slot,slot
SlotManager -> private boolean registerNewSlot(final ResourceSlot slot);1472741611;Try to register slot, and tell if this slot is newly registered.__@param slot The ResourceSlot which will be checked and registered_@return <tt>true</tt> if we meet a new slot;private boolean registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		return registeredSlots.get(resourceId).put(slotId, slot) == null__	};try,to,register,slot,and,tell,if,this,slot,is,newly,registered,param,slot,the,resource,slot,which,will,be,checked,and,registered,return,tt,true,tt,if,we,meet,a,new,slot;private,boolean,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,return,registered,slots,get,resource,id,put,slot,id,slot,null
SlotManager -> private boolean registerNewSlot(final ResourceSlot slot);1474459992;Try to register slot, and tell if this slot is newly registered.__@param slot The ResourceSlot which will be checked and registered_@return <tt>true</tt> if we meet a new slot;private boolean registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		return registeredSlots.get(resourceId).put(slotId, slot) == null__	};try,to,register,slot,and,tell,if,this,slot,is,newly,registered,param,slot,the,resource,slot,which,will,be,checked,and,registered,return,tt,true,tt,if,we,meet,a,new,slot;private,boolean,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,return,registered,slots,get,resource,id,put,slot,id,slot,null
SlotManager -> private boolean registerNewSlot(final ResourceSlot slot);1474471581;Try to register slot, and tell if this slot is newly registered.__@param slot The ResourceSlot which will be checked and registered_@return <tt>true</tt> if we meet a new slot;private boolean registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		return registeredSlots.get(resourceId).put(slotId, slot) == null__	};try,to,register,slot,and,tell,if,this,slot,is,newly,registered,param,slot,the,resource,slot,which,will,be,checked,and,registered,return,tt,true,tt,if,we,meet,a,new,slot;private,boolean,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,return,registered,slots,get,resource,id,put,slot,id,slot,null
SlotManager -> private boolean registerNewSlot(final ResourceSlot slot);1474482025;Try to register slot, and tell if this slot is newly registered.__@param slot The ResourceSlot which will be checked and registered_@return <tt>true</tt> if we meet a new slot;private boolean registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		return registeredSlots.get(resourceId).put(slotId, slot) == null__	};try,to,register,slot,and,tell,if,this,slot,is,newly,registered,param,slot,the,resource,slot,which,will,be,checked,and,registered,return,tt,true,tt,if,we,meet,a,new,slot;private,boolean,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,return,registered,slots,get,resource,id,put,slot,id,slot,null
SlotManager -> private boolean registerNewSlot(final ResourceSlot slot);1474965482;Try to register slot, and tell if this slot is newly registered.__@param slot The ResourceSlot which will be checked and registered_@return <tt>true</tt> if we meet a new slot;private boolean registerNewSlot(final ResourceSlot slot) {_		final SlotID slotId = slot.getSlotId()__		final ResourceID resourceId = slotId.getResourceID()__		if (!registeredSlots.containsKey(resourceId)) {_			registeredSlots.put(resourceId, new HashMap<SlotID, ResourceSlot>())__		}_		return registeredSlots.get(resourceId).put(slotId, slot) == null__	};try,to,register,slot,and,tell,if,this,slot,is,newly,registered,param,slot,the,resource,slot,which,will,be,checked,and,registered,return,tt,true,tt,if,we,meet,a,new,slot;private,boolean,register,new,slot,final,resource,slot,slot,final,slot,id,slot,id,slot,get,slot,id,final,resource,id,resource,id,slot,id,get,resource,id,if,registered,slots,contains,key,resource,id,registered,slots,put,resource,id,new,hash,map,slot,id,resource,slot,return,registered,slots,get,resource,id,put,slot,id,slot,null
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1472741611;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1474459992;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1474471581;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1474482025;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1474965482;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1475154512;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1475679726;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> AllocationMap -> void removeAllocation(final SlotID slotId);1476113770;De-allocation with slot id__@param slotId The slot id;void removeAllocation(final SlotID slotId) {_			if (allocatedSlots.containsKey(slotId)) {_				final AllocationID allocationId = allocatedSlots.get(slotId)__				allocatedSlots.remove(slotId)__				allocatedSlotsByAllocationId.remove(allocationId)__			}_		};de,allocation,with,slot,id,param,slot,id,the,slot,id;void,remove,allocation,final,slot,id,slot,id,if,allocated,slots,contains,key,slot,id,final,allocation,id,allocation,id,allocated,slots,get,slot,id,allocated,slots,remove,slot,id,allocated,slots,by,allocation,id,remove,allocation,id
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1486637985;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			ArrayList<SlotID> slotsToRemove = new ArrayList<>(taskManagerRegistration.getSlots())__			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {_				if (slotsToRemove.remove(slotStatus.getSlotID())) {_					_					updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__				} else {_					_					registerSlot(_						taskManagerRegistration,_						slotStatus.getSlotID(),_						slotStatus.getAllocationID(),_						slotStatus.getResourceProfile(),_						taskManagerRegistration.getTaskManagerConnection())__				}__				TaskManagerSlot slot = slots.get(slotStatus.getSlotID())___				idle &= slot.isFree()__			}__			_			removeSlots(slotsToRemove)___			if (idle) {_				_				registerTaskManagerTimeout(taskManagerRegistration)__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,array,list,slot,id,slots,to,remove,new,array,list,task,manager,registration,get,slots,boolean,idle,true,for,slot,status,slot,status,slot,report,if,slots,to,remove,remove,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,else,register,slot,task,manager,registration,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,resource,profile,task,manager,registration,get,task,manager,connection,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,remove,slots,slots,to,remove,if,idle,register,task,manager,timeout,task,manager,registration,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1493301216;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				registerTaskManagerTimeout(taskManagerRegistration)__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,register,task,manager,timeout,task,manager,registration,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1493307989;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1501529908;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1501580028;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1503019375;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1503580260;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1507240448;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1507653580;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1507738083;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {_			boolean idle = true___			for (SlotStatus slotStatus : slotReport) {__				_				_				if (taskManagerRegistration.containsSlot(slotStatus.getSlotID()) && updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())) {_					TaskManagerSlot slot = slots.get(slotStatus.getSlotID())__					idle &= slot.isFree()__				} else {_					_					throw new IllegalStateException("Reported a slot status for slot " +  slotStatus.getSlotID() +_						" which has not been registered.")__				}_			}__			if (idle) {_				_				_				taskManagerRegistration.markIdle()__			} else {_				taskManagerRegistration.markUsed()__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,boolean,idle,true,for,slot,status,slot,status,slot,report,if,task,manager,registration,contains,slot,slot,status,get,slot,id,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,task,manager,slot,slot,slots,get,slot,status,get,slot,id,idle,slot,is,free,else,throw,new,illegal,state,exception,reported,a,slot,status,for,slot,slot,status,get,slot,id,which,has,not,been,registered,if,idle,task,manager,registration,mark,idle,else,task,manager,registration,mark,used,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1507879191;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1516815167;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.info("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,info,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1519305029;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.info("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,info,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1519920149;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.info("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,info,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1520254504;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.trace("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,trace,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1520593421;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1521641386;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1525377048;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1525934187;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1530472121;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1530503760;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1531900495;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1534938698;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1537262283;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1537448260;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1537538032;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport);1542290209;Reports the current slot allocations for a task manager identified by the given instance id.__@param instanceId identifying the task manager for which to report the slot status_@param slotReport containing the status for all of its slots_@return true if the slot status has been updated successfully, otherwise false;public boolean reportSlotStatus(InstanceID instanceId, SlotReport slotReport) {_		checkInit()___		LOG.debug("Received slot report from instance {}: {}.", instanceId, slotReport)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(instanceId)___		if (null != taskManagerRegistration) {__			for (SlotStatus slotStatus : slotReport) {_				updateSlot(slotStatus.getSlotID(), slotStatus.getAllocationID(), slotStatus.getJobID())__			}__			return true__		} else {_			LOG.debug("Received slot report for unknown task manager with instance id {}. Ignoring this report.", instanceId)___			return false__		}_	};reports,the,current,slot,allocations,for,a,task,manager,identified,by,the,given,instance,id,param,instance,id,identifying,the,task,manager,for,which,to,report,the,slot,status,param,slot,report,containing,the,status,for,all,of,its,slots,return,true,if,the,slot,status,has,been,updated,successfully,otherwise,false;public,boolean,report,slot,status,instance,id,instance,id,slot,report,slot,report,check,init,log,debug,received,slot,report,from,instance,instance,id,slot,report,task,manager,registration,task,manager,registration,task,manager,registrations,get,instance,id,if,null,task,manager,registration,for,slot,status,slot,status,slot,report,update,slot,slot,status,get,slot,id,slot,status,get,allocation,id,slot,status,get,job,id,return,true,else,log,debug,received,slot,report,for,unknown,task,manager,with,instance,id,ignoring,this,report,instance,id,return,false
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1486637985;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1493301216;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1493307989;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1501529908;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1501580028;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1503019375;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1503580260;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1507240448;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1507653580;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1507738083;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1507879191;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1516815167;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1519305029;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1519920149;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1520254504;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1520593421;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1521641386;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1525377048;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1525934187;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1530472121;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1530503760;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1531900495;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1534938698;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1537262283;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1537448260;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1537538032;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFreeSlot(TaskManagerSlot freeSlot);1542290209;Handles a free slot. It first tries to find a pending slot request which can be fulfilled._If there is no such request, then it will add the slot to the set of free slots.__@param freeSlot to find a new slot request for;private void handleFreeSlot(TaskManagerSlot freeSlot) {_		Preconditions.checkState(freeSlot.getState() == TaskManagerSlot.State.FREE)___		PendingSlotRequest pendingSlotRequest = findMatchingRequest(freeSlot.getResourceProfile())___		if (null != pendingSlotRequest) {_			allocateSlot(freeSlot, pendingSlotRequest)__		} else {_			freeSlots.put(freeSlot.getSlotId(), freeSlot)__		}_	};handles,a,free,slot,it,first,tries,to,find,a,pending,slot,request,which,can,be,fulfilled,if,there,is,no,such,request,then,it,will,add,the,slot,to,the,set,of,free,slots,param,free,slot,to,find,a,new,slot,request,for;private,void,handle,free,slot,task,manager,slot,free,slot,preconditions,check,state,free,slot,get,state,task,manager,slot,state,free,pending,slot,request,pending,slot,request,find,matching,request,free,slot,get,resource,profile,if,null,pending,slot,request,allocate,slot,free,slot,pending,slot,request,else,free,slots,put,free,slot,get,slot,id,free,slot
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1486637985;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1493301216;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1493307989;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1501529908;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1501580028;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1503019375;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1503580260;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1507240448;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1507653580;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1507738083;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1507879191;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceManagerActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,manager,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1516815167;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1519305029;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1519920149;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1520254504;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1520593421;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1521641386;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1525377048;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1525934187;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1530472121;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1530503760;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1531900495;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1534938698;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1537262283;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1537448260;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1537538032;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause);1542290209;Handles a failed slot request. The slot manager tries to find a new slot fulfilling_the resource requirements for the failed slot request.__@param slotId identifying the slot which was assigned to the slot request before_@param allocationId identifying the failed slot request_@param cause of the failure;private void handleFailedSlotRequest(SlotID slotId, AllocationID allocationId, Throwable cause) {_		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.get(allocationId)___		LOG.debug("Slot request with allocation id {} failed for slot {}.", allocationId, slotId, cause)___		if (null != pendingSlotRequest) {_			pendingSlotRequest.setRequestFuture(null)___			try {_				internalRequestSlot(pendingSlotRequest)__			} catch (ResourceManagerException e) {_				pendingSlotRequests.remove(allocationId)___				resourceActions.notifyAllocationFailure(_					pendingSlotRequest.getJobId(),_					allocationId,_					e)__			}_		} else {_			LOG.debug("There was not pending slot request with allocation id {}. Probably the request has been fulfilled or cancelled.", allocationId)__		}_	};handles,a,failed,slot,request,the,slot,manager,tries,to,find,a,new,slot,fulfilling,the,resource,requirements,for,the,failed,slot,request,param,slot,id,identifying,the,slot,which,was,assigned,to,the,slot,request,before,param,allocation,id,identifying,the,failed,slot,request,param,cause,of,the,failure;private,void,handle,failed,slot,request,slot,id,slot,id,allocation,id,allocation,id,throwable,cause,pending,slot,request,pending,slot,request,pending,slot,requests,get,allocation,id,log,debug,slot,request,with,allocation,id,failed,for,slot,allocation,id,slot,id,cause,if,null,pending,slot,request,pending,slot,request,set,request,future,null,try,internal,request,slot,pending,slot,request,catch,resource,manager,exception,e,pending,slot,requests,remove,allocation,id,resource,actions,notify,allocation,failure,pending,slot,request,get,job,id,allocation,id,e,else,log,debug,there,was,not,pending,slot,request,with,allocation,id,probably,the,request,has,been,fulfilled,or,cancelled,allocation,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1472741611;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1474459992;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1474471581;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1474482025;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1474965482;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1475154512;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1475679726;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> AllocationMap -> boolean isAllocated(final SlotID slotId);1476113770;Check whether allocation exists by slot id__@param slotId The slot id_@return true if the allocation exists;boolean isAllocated(final SlotID slotId) {_			return allocatedSlots.containsKey(slotId)__		};check,whether,allocation,exists,by,slot,id,param,slot,id,the,slot,id,return,true,if,the,allocation,exists;boolean,is,allocated,final,slot,id,slot,id,return,allocated,slots,contains,key,slot,id
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1486637985;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			removeSlots(taskManagerRegistration.getSlots())___			taskManagerRegistration.cancelTimeout()___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,remove,slots,task,manager,registration,get,slots,task,manager,registration,cancel,timeout,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1493301216;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			removeSlots(taskManagerRegistration.getSlots())___			taskManagerRegistration.cancelTimeout()___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,remove,slots,task,manager,registration,get,slots,task,manager,registration,cancel,timeout,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1493307989;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1501529908;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1501580028;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1503019375;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1503580260;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1507240448;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1507653580;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1507738083;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1507879191;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1516815167;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1519305029;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1519920149;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1520254504;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1520593421;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1521641386;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1525377048;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1525934187;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1530472121;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1530503760;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1531900495;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1534938698;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.debug("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,debug,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1537262283;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.info("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,info,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1537448260;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.debug("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,debug,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1537538032;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.debug("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,debug,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> public boolean unregisterTaskManager(InstanceID instanceId);1542290209;Unregisters the task manager identified by the given instance id and its associated slots_from the slot manager.__@param instanceId identifying the task manager to unregister_@return True if there existed a registered task manager with the given instance id;public boolean unregisterTaskManager(InstanceID instanceId) {_		checkInit()___		LOG.debug("Unregister TaskManager {} from the SlotManager.", instanceId)___		TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.remove(instanceId)___		if (null != taskManagerRegistration) {_			internalUnregisterTaskManager(taskManagerRegistration)___			return true__		} else {_			LOG.debug("There is no task manager registered with instance ID {}. Ignoring this message.", instanceId)___			return false__		}_	};unregisters,the,task,manager,identified,by,the,given,instance,id,and,its,associated,slots,from,the,slot,manager,param,instance,id,identifying,the,task,manager,to,unregister,return,true,if,there,existed,a,registered,task,manager,with,the,given,instance,id;public,boolean,unregister,task,manager,instance,id,instance,id,check,init,log,debug,unregister,task,manager,from,the,slot,manager,instance,id,task,manager,registration,task,manager,registration,task,manager,registrations,remove,instance,id,if,null,task,manager,registration,internal,unregister,task,manager,task,manager,registration,return,true,else,log,debug,there,is,no,task,manager,registered,with,instance,id,ignoring,this,message,instance,id,return,false
SlotManager -> private void removeSlot(SlotID slotId);1486637985;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)___			TaskManagerRegistration taskManagerRegistration = taskManagerRegistrations.get(slot.getInstanceId())___			if (null != taskManagerRegistration) {_				taskManagerRegistration.removeSlot(slotId)__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,task,manager,registration,task,manager,registration,task,manager,registrations,get,slot,get,instance,id,if,null,task,manager,registration,task,manager,registration,remove,slot,slot,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1493301216;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1493307989;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1501529908;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1501580028;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1503019375;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1503580260;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1507240448;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1507653580;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1507738083;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.hasPendingSlotRequest()) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,has,pending,slot,request,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1507879191;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1516815167;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1519305029;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1519920149;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1520254504;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1520593421;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1521641386;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1525377048;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			fulfilledSlotRequests.remove(oldAllocationId)__		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,fulfilled,slot,requests,remove,old,allocation,id,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1525934187;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()__			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)__				resourceActions.notifyAllocationFailure(_					slot.getJobId(), oldAllocationId, new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1530472121;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1530503760;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1531900495;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1534938698;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1537262283;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1537448260;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1537538032;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> private void removeSlot(SlotID slotId);1542290209;Removes the given slot from the slot manager.__@param slotId identifying the slot to remove;private void removeSlot(SlotID slotId) {_		TaskManagerSlot slot = slots.remove(slotId)___		if (null != slot) {_			freeSlots.remove(slotId)___			if (slot.getState() == TaskManagerSlot.State.PENDING) {_				_				rejectPendingSlotRequest(_					slot.getAssignedSlotRequest(),_					new Exception("The assigned slot " + slot.getSlotId() + " was removed."))__			}__			AllocationID oldAllocationId = slot.getAllocationId()___			if (oldAllocationId != null) {_				fulfilledSlotRequests.remove(oldAllocationId)___				resourceActions.notifyAllocationFailure(_					slot.getJobId(),_					oldAllocationId,_					new FlinkException("The assigned slot " + slot.getSlotId() + " was removed."))__			}_		} else {_			LOG.debug("There was no slot registered with slot id {}.", slotId)__		}_	};removes,the,given,slot,from,the,slot,manager,param,slot,id,identifying,the,slot,to,remove;private,void,remove,slot,slot,id,slot,id,task,manager,slot,slot,slots,remove,slot,id,if,null,slot,free,slots,remove,slot,id,if,slot,get,state,task,manager,slot,state,pending,reject,pending,slot,request,slot,get,assigned,slot,request,new,exception,the,assigned,slot,slot,get,slot,id,was,removed,allocation,id,old,allocation,id,slot,get,allocation,id,if,old,allocation,id,null,fulfilled,slot,requests,remove,old,allocation,id,resource,actions,notify,allocation,failure,slot,get,job,id,old,allocation,id,new,flink,exception,the,assigned,slot,slot,get,slot,id,was,removed,else,log,debug,there,was,no,slot,registered,with,slot,id,slot,id
SlotManager -> public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1486637985;Starts the slot manager with the given leader id and resource manager actions.__@param newLeaderId to use for communication with the task managers_@param newResourceManagerActions to use for resource (de-)allocations;public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		leaderId = Preconditions.checkNotNull(newLeaderId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,leader,id,to,use,for,communication,with,the,task,managers,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,uuid,new,leader,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,leader,id,preconditions,check,not,null,new,leader,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true
SlotManager -> public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1493301216;Starts the slot manager with the given leader id and resource manager actions.__@param newLeaderId to use for communication with the task managers_@param newResourceManagerActions to use for resource (de-)allocations;public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		leaderId = Preconditions.checkNotNull(newLeaderId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,leader,id,to,use,for,communication,with,the,task,managers,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,uuid,new,leader,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,leader,id,preconditions,check,not,null,new,leader,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true
SlotManager -> public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1493307989;Starts the slot manager with the given leader id and resource manager actions.__@param newLeaderId to use for communication with the task managers_@param newResourceManagerActions to use for resource (de-)allocations;public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		leaderId = Preconditions.checkNotNull(newLeaderId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,leader,id,to,use,for,communication,with,the,task,managers,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,uuid,new,leader,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,leader,id,preconditions,check,not,null,new,leader,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1501529908;Starts the slot manager with the given leader id and resource manager actions.__@param newLeaderId to use for communication with the task managers_@param newResourceManagerActions to use for resource (de-)allocations;public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		leaderId = Preconditions.checkNotNull(newLeaderId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,leader,id,to,use,for,communication,with,the,task,managers,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,uuid,new,leader,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,leader,id,preconditions,check,not,null,new,leader,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1501580028;Starts the slot manager with the given leader id and resource manager actions.__@param newLeaderId to use for communication with the task managers_@param newResourceManagerActions to use for resource (de-)allocations;public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		leaderId = Preconditions.checkNotNull(newLeaderId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,leader,id,to,use,for,communication,with,the,task,managers,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,uuid,new,leader,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,leader,id,preconditions,check,not,null,new,leader,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions);1503019375;Starts the slot manager with the given leader id and resource manager actions.__@param newLeaderId to use for communication with the task managers_@param newResourceManagerActions to use for resource (de-)allocations;public void start(UUID newLeaderId, Executor newMainThreadExecutor, ResourceManagerActions newResourceManagerActions) {_		LOG.info("Starting the SlotManager.")___		leaderId = Preconditions.checkNotNull(newLeaderId)__		mainThreadExecutor = Preconditions.checkNotNull(newMainThreadExecutor)__		resourceManagerActions = Preconditions.checkNotNull(newResourceManagerActions)___		started = true___		taskManagerTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkTaskManagerTimeouts()__					}_				})__			}_		}, 0L, taskManagerTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		slotRequestTimeoutCheck = scheduledExecutor.scheduleWithFixedDelay(new Runnable() {_			@Override_			public void run() {_				mainThreadExecutor.execute(new Runnable() {_					@Override_					public void run() {_						checkSlotRequestTimeouts()__					}_				})__			}_		}, 0L, slotRequestTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};starts,the,slot,manager,with,the,given,leader,id,and,resource,manager,actions,param,new,leader,id,to,use,for,communication,with,the,task,managers,param,new,resource,manager,actions,to,use,for,resource,de,allocations;public,void,start,uuid,new,leader,id,executor,new,main,thread,executor,resource,manager,actions,new,resource,manager,actions,log,info,starting,the,slot,manager,leader,id,preconditions,check,not,null,new,leader,id,main,thread,executor,preconditions,check,not,null,new,main,thread,executor,resource,manager,actions,preconditions,check,not,null,new,resource,manager,actions,started,true,task,manager,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,task,manager,timeouts,0l,task,manager,timeout,to,milliseconds,time,unit,milliseconds,slot,request,timeout,check,scheduled,executor,schedule,with,fixed,delay,new,runnable,override,public,void,run,main,thread,executor,execute,new,runnable,override,public,void,run,check,slot,request,timeouts,0l,slot,request,timeout,to,milliseconds,time,unit,milliseconds
SlotManager -> public void suspend();1486637985;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		leaderId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,leader,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1493301216;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		leaderId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,leader,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1493307989;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		leaderId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,leader,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1501529908;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		leaderId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,leader,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1501580028;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		leaderId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,leader,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1503019375;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		leaderId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,leader,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1503580260;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1507240448;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1507653580;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1507738083;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1507879191;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceManagerActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,manager,actions,null,started,false
SlotManager -> public void suspend();1516815167;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1519305029;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		taskManagerTimeoutCheck.cancel(false)__		slotRequestTimeoutCheck.cancel(false)___		taskManagerTimeoutCheck = null__		slotRequestTimeoutCheck = null___		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,task,manager,timeout,check,cancel,false,slot,request,timeout,check,cancel,false,task,manager,timeout,check,null,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1519920149;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1520254504;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1520593421;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1521641386;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1525377048;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1525934187;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1530472121;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1530503760;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1531900495;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1534938698;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1537262283;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1537448260;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1537538032;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public void suspend();1542290209;Suspends the component. This clears the internal state of the slot manager.;public void suspend() {_		LOG.info("Suspending the SlotManager.")___		_		if (taskManagerTimeoutCheck != null) {_			taskManagerTimeoutCheck.cancel(false)__			taskManagerTimeoutCheck = null__		}__		if (slotRequestTimeoutCheck != null) {_			slotRequestTimeoutCheck.cancel(false)__			slotRequestTimeoutCheck = null__		}__		for (PendingSlotRequest pendingSlotRequest : pendingSlotRequests.values()) {_			cancelPendingSlotRequest(pendingSlotRequest)__		}__		pendingSlotRequests.clear()___		ArrayList<InstanceID> registeredTaskManagers = new ArrayList<>(taskManagerRegistrations.keySet())___		for (InstanceID registeredTaskManager : registeredTaskManagers) {_			unregisterTaskManager(registeredTaskManager)__		}__		resourceManagerId = null__		resourceActions = null__		started = false__	};suspends,the,component,this,clears,the,internal,state,of,the,slot,manager;public,void,suspend,log,info,suspending,the,slot,manager,if,task,manager,timeout,check,null,task,manager,timeout,check,cancel,false,task,manager,timeout,check,null,if,slot,request,timeout,check,null,slot,request,timeout,check,cancel,false,slot,request,timeout,check,null,for,pending,slot,request,pending,slot,request,pending,slot,requests,values,cancel,pending,slot,request,pending,slot,request,pending,slot,requests,clear,array,list,instance,id,registered,task,managers,new,array,list,task,manager,registrations,key,set,for,instance,id,registered,task,manager,registered,task,managers,unregister,task,manager,registered,task,manager,resource,manager,id,null,resource,actions,null,started,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1486637985;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1493301216;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1493307989;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1501529908;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1501580028;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1503019375;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1503580260;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1507240448;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1507653580;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1507738083;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1507879191;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1516815167;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1519305029;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1519920149;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1520254504;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1520593421;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1521641386;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1525377048;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1525934187;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1530472121;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1530503760;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1531900495;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1534938698;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1537262283;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1537448260;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1537538032;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
SlotManager -> public boolean unregisterSlotRequest(AllocationID allocationId);1542290209;Cancels and removes a pending slot request with the given allocation id. If there is no such_pending request, then nothing is done.__@param allocationId identifying the pending slot request_@return True if a pending slot request was found_ otherwise false;public boolean unregisterSlotRequest(AllocationID allocationId) {_		checkInit()___		PendingSlotRequest pendingSlotRequest = pendingSlotRequests.remove(allocationId)___		if (null != pendingSlotRequest) {_			LOG.debug("Cancel slot request {}.", allocationId)___			cancelPendingSlotRequest(pendingSlotRequest)___			return true__		} else {_			LOG.debug("No pending slot request with allocation id {} found. Ignoring unregistration request.", allocationId)___			return false__		}_	};cancels,and,removes,a,pending,slot,request,with,the,given,allocation,id,if,there,is,no,such,pending,request,then,nothing,is,done,param,allocation,id,identifying,the,pending,slot,request,return,true,if,a,pending,slot,request,was,found,otherwise,false;public,boolean,unregister,slot,request,allocation,id,allocation,id,check,init,pending,slot,request,pending,slot,request,pending,slot,requests,remove,allocation,id,if,null,pending,slot,request,log,debug,cancel,slot,request,allocation,id,cancel,pending,slot,request,pending,slot,request,return,true,else,log,debug,no,pending,slot,request,with,allocation,id,found,ignoring,unregistration,request,allocation,id,return,false
