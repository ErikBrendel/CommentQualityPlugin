# id;timestamp;commentText;codeText;commentWords;codeWords
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1449509010;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1449509010;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1450712612;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1456936114;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1460741894;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1461185749;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1543403062;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1543403062;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup);1548853005;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied task index perform a round robin distribution.__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy, int indexInSubtaskGroup) {_		this(strategy, indexInSubtaskGroup, null, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,task,index,perform,a,round,robin,distribution,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,int,index,in,subtask,group,this,strategy,index,in,subtask,group,null,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1405024514;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		if (strategy == null) { _			throw new NullPointerException()__		}_		_		this.strategy = strategy__		this.comparator = comparator__		_		switch (strategy) {_		case FORWARD:_		case PARTITION_HASH:_		case PARTITION_RANGE:_		case PARTITION_RANDOM:_		case BROADCAST:_			break__		default:_			throw new IllegalArgumentException("Invalid shipping strategy for OutputEmitter: " + strategy.name())__		}_		_		if ((strategy == ShipStrategyType.PARTITION_RANGE) && distr == null) {_			throw new NullPointerException("Data distribution must not be null when the ship strategy is range partitioning.")__		}_	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,if,strategy,null,throw,new,null,pointer,exception,this,strategy,strategy,this,comparator,comparator,switch,strategy,case,forward,case,case,case,case,broadcast,break,default,throw,new,illegal,argument,exception,invalid,shipping,strategy,for,output,emitter,strategy,name,if,strategy,ship,strategy,type,distr,null,throw,new,null,pointer,exception,data,distribution,must,not,be,null,when,the,ship,strategy,is,range,partitioning
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1405090423;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		if (strategy == null) { _			throw new NullPointerException()__		}_		_		this.strategy = strategy__		this.comparator = comparator__		_		switch (strategy) {_		case FORWARD:_		case PARTITION_HASH:_		case PARTITION_RANGE:_		case PARTITION_RANDOM:_		case BROADCAST:_			break__		default:_			throw new IllegalArgumentException("Invalid shipping strategy for OutputEmitter: " + strategy.name())__		}_		_		if ((strategy == ShipStrategyType.PARTITION_RANGE) && distr == null) {_			throw new NullPointerException("Data distribution must not be null when the ship strategy is range partitioning.")__		}_	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,if,strategy,null,throw,new,null,pointer,exception,this,strategy,strategy,this,comparator,comparator,switch,strategy,case,forward,case,case,case,case,broadcast,break,default,throw,new,illegal,argument,exception,invalid,shipping,strategy,for,output,emitter,strategy,name,if,strategy,ship,strategy,type,distr,null,throw,new,null,pointer,exception,data,distribution,must,not,be,null,when,the,ship,strategy,is,range,partitioning
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1411473593;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		if (strategy == null) { _			throw new NullPointerException()__		}_		_		this.strategy = strategy__		this.comparator = comparator__		_		switch (strategy) {_		case FORWARD:_		case PARTITION_HASH:_		case PARTITION_RANGE:_		case PARTITION_RANDOM:_		case BROADCAST:_			break__		default:_			throw new IllegalArgumentException("Invalid shipping strategy for OutputEmitter: " + strategy.name())__		}_		_		if ((strategy == ShipStrategyType.PARTITION_RANGE) && distr == null) {_			throw new NullPointerException("Data distribution must not be null when the ship strategy is range partitioning.")__		}_	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,if,strategy,null,throw,new,null,pointer,exception,this,strategy,strategy,this,comparator,comparator,switch,strategy,case,forward,case,case,case,case,broadcast,break,default,throw,new,illegal,argument,exception,invalid,shipping,strategy,for,output,emitter,strategy,name,if,strategy,ship,strategy,type,distr,null,throw,new,null,pointer,exception,data,distribution,must,not,be,null,when,the,ship,strategy,is,range,partitioning
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1411548247;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		if (strategy == null) { _			throw new NullPointerException()__		}_		_		this.strategy = strategy__		this.comparator = comparator__		_		switch (strategy) {_		case FORWARD:_		case PARTITION_HASH:_		case PARTITION_RANGE:_		case PARTITION_RANDOM:_		case PARTITION_FORCED_REBALANCE:_		case BROADCAST:_			break__		default:_			throw new IllegalArgumentException("Invalid shipping strategy for OutputEmitter: " + strategy.name())__		}_		_		if ((strategy == ShipStrategyType.PARTITION_RANGE) && distr == null) {_			throw new NullPointerException("Data distribution must not be null when the ship strategy is range partitioning.")__		}_	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,if,strategy,null,throw,new,null,pointer,exception,this,strategy,strategy,this,comparator,comparator,switch,strategy,case,forward,case,case,case,case,case,broadcast,break,default,throw,new,illegal,argument,exception,invalid,shipping,strategy,for,output,emitter,strategy,name,if,strategy,ship,strategy,type,distr,null,throw,new,null,pointer,exception,data,distribution,must,not,be,null,when,the,ship,strategy,is,range,partitioning
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1416309577;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		this(strategy, comparator, null, distr)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,this,strategy,comparator,null,distr
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1421050512;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		this(strategy, comparator, null, distr)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,this,strategy,comparator,null,distr
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1425601895;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		this(strategy, comparator, null, distr)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,this,strategy,comparator,null,distr
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr);1449509010;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records._@param distr The distribution pattern used in the case of a range partitioning.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator, DataDistribution distr) {_		this(strategy, 0, comparator, null, distr)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records,param,distr,the,distribution,pattern,used,in,the,case,of,a,range,partitioning;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,data,distribution,distr,this,strategy,0,comparator,null,distr
OutputEmitter -> public OutputEmitter();1405024514;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1405090423;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1411473593;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1411548247;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1416309577;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1421050512;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1425601895;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none
OutputEmitter -> public OutputEmitter();1449509010;Creates a new channel selector that distributes data round robin.;public OutputEmitter() {_		this(ShipStrategyType.NONE, 0)__	};creates,a,new,channel,selector,that,distributes,data,round,robin;public,output,emitter,this,ship,strategy,type,none,0
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1405024514;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1405090423;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1411473593;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1411548247;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1416309577;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1421050512;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy);1425601895;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...).__@param strategy The distribution strategy to be used.;public OutputEmitter(ShipStrategyType strategy) {_		this(strategy, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,param,strategy,the,distribution,strategy,to,be,used;public,output,emitter,ship,strategy,type,strategy,this,strategy,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1405024514;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1405090423;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1411473593;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1411548247;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1416309577;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1421050512;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1425601895;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1449509010;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1449509010;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1450712612;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1456936114;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1460741894;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1461185749;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1543403062;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1543403062;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
OutputEmitter -> public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator);1548853005;Creates a new channel selector that uses the given strategy (broadcasting, partitioning, ...)_and uses the supplied comparator to hash / compare records for partitioning them deterministically.__@param strategy The distribution strategy to be used._@param comparator The comparator used to hash / compare the records.;public OutputEmitter(ShipStrategyType strategy, TypeComparator<T> comparator) {_		this(strategy, 0, comparator, null, null)__	};creates,a,new,channel,selector,that,uses,the,given,strategy,broadcasting,partitioning,and,uses,the,supplied,comparator,to,hash,compare,records,for,partitioning,them,deterministically,param,strategy,the,distribution,strategy,to,be,used,param,comparator,the,comparator,used,to,hash,compare,the,records;public,output,emitter,ship,strategy,type,strategy,type,comparator,t,comparator,this,strategy,0,comparator,null,null
