# id;timestamp;commentText;codeText;commentWords;codeWords
MetricDumpSerialization -> MetricDumpSerializer -> public MetricSerializationResult serialize( 			Map<Counter, Tuple2<QueryScopeInfo, String>> counters, 			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges, 			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms, 			Map<Meter, Tuple2<QueryScopeInfo, String>> meters);1484221346;Serializes the given metrics and returns the resulting byte array.__Should a {@link Metric} accessed in this method throw an exception it will be omitted from the returned_{@link MetricSerializationResult}.__If the serialization of any primitive or String fails then the returned {@link MetricSerializationResult}_is partially corrupted. Such a result can be deserialized safely by_{@link MetricDumpDeserializer#deserialize(MetricSerializationResult)}_ however only metrics that were_fully serialized before the failure will be returned.__@param counters   counters to serialize_@param gauges     gauges to serialize_@param histograms histograms to serialize_@return MetricSerializationResult containing the serialized metrics and the count of each metric type;public MetricSerializationResult serialize(_			Map<Counter, Tuple2<QueryScopeInfo, String>> counters,_			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges,_			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms,_			Map<Meter, Tuple2<QueryScopeInfo, String>> meters) {__			buffer.clear()___			int numCounters = 0__			for (Map.Entry<Counter, Tuple2<QueryScopeInfo, String>> entry : counters.entrySet()) {_				try {_					serializeCounter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numCounters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize counter.", e)__				}_			}__			int numGauges = 0__			for (Map.Entry<Gauge<?>, Tuple2<QueryScopeInfo, String>> entry : gauges.entrySet()) {_				try {_					serializeGauge(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numGauges++__				} catch (Exception e) {_					LOG.debug("Failed to serialize gauge.", e)__				}_			}__			int numHistograms = 0__			for (Map.Entry<Histogram, Tuple2<QueryScopeInfo, String>> entry : histograms.entrySet()) {_				try {_					serializeHistogram(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numHistograms++__				} catch (Exception e) {_					LOG.debug("Failed to serialize histogram.", e)__				}_			}__			int numMeters = 0__			for (Map.Entry<Meter, Tuple2<QueryScopeInfo, String>> entry : meters.entrySet()) {_				try {_					serializeMeter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numMeters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize meter.", e)__				}_			}__			return new MetricSerializationResult(buffer.getCopyOfBuffer(), numCounters, numGauges, numMeters, numHistograms)__		};serializes,the,given,metrics,and,returns,the,resulting,byte,array,should,a,link,metric,accessed,in,this,method,throw,an,exception,it,will,be,omitted,from,the,returned,link,metric,serialization,result,if,the,serialization,of,any,primitive,or,string,fails,then,the,returned,link,metric,serialization,result,is,partially,corrupted,such,a,result,can,be,deserialized,safely,by,link,metric,dump,deserializer,deserialize,metric,serialization,result,however,only,metrics,that,were,fully,serialized,before,the,failure,will,be,returned,param,counters,counters,to,serialize,param,gauges,gauges,to,serialize,param,histograms,histograms,to,serialize,return,metric,serialization,result,containing,the,serialized,metrics,and,the,count,of,each,metric,type;public,metric,serialization,result,serialize,map,counter,tuple2,query,scope,info,string,counters,map,gauge,tuple2,query,scope,info,string,gauges,map,histogram,tuple2,query,scope,info,string,histograms,map,meter,tuple2,query,scope,info,string,meters,buffer,clear,int,num,counters,0,for,map,entry,counter,tuple2,query,scope,info,string,entry,counters,entry,set,try,serialize,counter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,counters,catch,exception,e,log,debug,failed,to,serialize,counter,e,int,num,gauges,0,for,map,entry,gauge,tuple2,query,scope,info,string,entry,gauges,entry,set,try,serialize,gauge,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,gauges,catch,exception,e,log,debug,failed,to,serialize,gauge,e,int,num,histograms,0,for,map,entry,histogram,tuple2,query,scope,info,string,entry,histograms,entry,set,try,serialize,histogram,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,histograms,catch,exception,e,log,debug,failed,to,serialize,histogram,e,int,num,meters,0,for,map,entry,meter,tuple2,query,scope,info,string,entry,meters,entry,set,try,serialize,meter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,meters,catch,exception,e,log,debug,failed,to,serialize,meter,e,return,new,metric,serialization,result,buffer,get,copy,of,buffer,num,counters,num,gauges,num,meters,num,histograms
MetricDumpSerialization -> MetricDumpSerializer -> public MetricSerializationResult serialize( 			Map<Counter, Tuple2<QueryScopeInfo, String>> counters, 			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges, 			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms, 			Map<Meter, Tuple2<QueryScopeInfo, String>> meters);1496241592;Serializes the given metrics and returns the resulting byte array.__<p>Should a {@link Metric} accessed in this method throw an exception it will be omitted from the returned_{@link MetricSerializationResult}.__<p>If the serialization of any primitive or String fails then the returned {@link MetricSerializationResult}_is partially corrupted. Such a result can be deserialized safely by_{@link MetricDumpDeserializer#deserialize(MetricSerializationResult)}_ however only metrics that were_fully serialized before the failure will be returned.__@param counters   counters to serialize_@param gauges     gauges to serialize_@param histograms histograms to serialize_@return MetricSerializationResult containing the serialized metrics and the count of each metric type;public MetricSerializationResult serialize(_			Map<Counter, Tuple2<QueryScopeInfo, String>> counters,_			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges,_			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms,_			Map<Meter, Tuple2<QueryScopeInfo, String>> meters) {__			buffer.clear()___			int numCounters = 0__			for (Map.Entry<Counter, Tuple2<QueryScopeInfo, String>> entry : counters.entrySet()) {_				try {_					serializeCounter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numCounters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize counter.", e)__				}_			}__			int numGauges = 0__			for (Map.Entry<Gauge<?>, Tuple2<QueryScopeInfo, String>> entry : gauges.entrySet()) {_				try {_					serializeGauge(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numGauges++__				} catch (Exception e) {_					LOG.debug("Failed to serialize gauge.", e)__				}_			}__			int numHistograms = 0__			for (Map.Entry<Histogram, Tuple2<QueryScopeInfo, String>> entry : histograms.entrySet()) {_				try {_					serializeHistogram(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numHistograms++__				} catch (Exception e) {_					LOG.debug("Failed to serialize histogram.", e)__				}_			}__			int numMeters = 0__			for (Map.Entry<Meter, Tuple2<QueryScopeInfo, String>> entry : meters.entrySet()) {_				try {_					serializeMeter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numMeters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize meter.", e)__				}_			}__			return new MetricSerializationResult(buffer.getCopyOfBuffer(), numCounters, numGauges, numMeters, numHistograms)__		};serializes,the,given,metrics,and,returns,the,resulting,byte,array,p,should,a,link,metric,accessed,in,this,method,throw,an,exception,it,will,be,omitted,from,the,returned,link,metric,serialization,result,p,if,the,serialization,of,any,primitive,or,string,fails,then,the,returned,link,metric,serialization,result,is,partially,corrupted,such,a,result,can,be,deserialized,safely,by,link,metric,dump,deserializer,deserialize,metric,serialization,result,however,only,metrics,that,were,fully,serialized,before,the,failure,will,be,returned,param,counters,counters,to,serialize,param,gauges,gauges,to,serialize,param,histograms,histograms,to,serialize,return,metric,serialization,result,containing,the,serialized,metrics,and,the,count,of,each,metric,type;public,metric,serialization,result,serialize,map,counter,tuple2,query,scope,info,string,counters,map,gauge,tuple2,query,scope,info,string,gauges,map,histogram,tuple2,query,scope,info,string,histograms,map,meter,tuple2,query,scope,info,string,meters,buffer,clear,int,num,counters,0,for,map,entry,counter,tuple2,query,scope,info,string,entry,counters,entry,set,try,serialize,counter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,counters,catch,exception,e,log,debug,failed,to,serialize,counter,e,int,num,gauges,0,for,map,entry,gauge,tuple2,query,scope,info,string,entry,gauges,entry,set,try,serialize,gauge,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,gauges,catch,exception,e,log,debug,failed,to,serialize,gauge,e,int,num,histograms,0,for,map,entry,histogram,tuple2,query,scope,info,string,entry,histograms,entry,set,try,serialize,histogram,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,histograms,catch,exception,e,log,debug,failed,to,serialize,histogram,e,int,num,meters,0,for,map,entry,meter,tuple2,query,scope,info,string,entry,meters,entry,set,try,serialize,meter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,meters,catch,exception,e,log,debug,failed,to,serialize,meter,e,return,new,metric,serialization,result,buffer,get,copy,of,buffer,num,counters,num,gauges,num,meters,num,histograms
MetricDumpSerialization -> MetricDumpSerializer -> public MetricSerializationResult serialize( 			Map<Counter, Tuple2<QueryScopeInfo, String>> counters, 			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges, 			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms, 			Map<Meter, Tuple2<QueryScopeInfo, String>> meters);1501692180;Serializes the given metrics and returns the resulting byte array.__<p>Should a {@link Metric} accessed in this method throw an exception it will be omitted from the returned_{@link MetricSerializationResult}.__<p>If the serialization of any primitive or String fails then the returned {@link MetricSerializationResult}_is partially corrupted. Such a result can be deserialized safely by_{@link MetricDumpDeserializer#deserialize(MetricSerializationResult)}_ however only metrics that were_fully serialized before the failure will be returned.__@param counters   counters to serialize_@param gauges     gauges to serialize_@param histograms histograms to serialize_@return MetricSerializationResult containing the serialized metrics and the count of each metric type;public MetricSerializationResult serialize(_			Map<Counter, Tuple2<QueryScopeInfo, String>> counters,_			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges,_			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms,_			Map<Meter, Tuple2<QueryScopeInfo, String>> meters) {__			buffer.clear()___			int numCounters = 0__			for (Map.Entry<Counter, Tuple2<QueryScopeInfo, String>> entry : counters.entrySet()) {_				try {_					serializeCounter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numCounters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize counter.", e)__				}_			}__			int numGauges = 0__			for (Map.Entry<Gauge<?>, Tuple2<QueryScopeInfo, String>> entry : gauges.entrySet()) {_				try {_					serializeGauge(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numGauges++__				} catch (Exception e) {_					LOG.debug("Failed to serialize gauge.", e)__				}_			}__			int numHistograms = 0__			for (Map.Entry<Histogram, Tuple2<QueryScopeInfo, String>> entry : histograms.entrySet()) {_				try {_					serializeHistogram(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numHistograms++__				} catch (Exception e) {_					LOG.debug("Failed to serialize histogram.", e)__				}_			}__			int numMeters = 0__			for (Map.Entry<Meter, Tuple2<QueryScopeInfo, String>> entry : meters.entrySet()) {_				try {_					serializeMeter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numMeters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize meter.", e)__				}_			}__			return new MetricSerializationResult(buffer.getCopyOfBuffer(), numCounters, numGauges, numMeters, numHistograms)__		};serializes,the,given,metrics,and,returns,the,resulting,byte,array,p,should,a,link,metric,accessed,in,this,method,throw,an,exception,it,will,be,omitted,from,the,returned,link,metric,serialization,result,p,if,the,serialization,of,any,primitive,or,string,fails,then,the,returned,link,metric,serialization,result,is,partially,corrupted,such,a,result,can,be,deserialized,safely,by,link,metric,dump,deserializer,deserialize,metric,serialization,result,however,only,metrics,that,were,fully,serialized,before,the,failure,will,be,returned,param,counters,counters,to,serialize,param,gauges,gauges,to,serialize,param,histograms,histograms,to,serialize,return,metric,serialization,result,containing,the,serialized,metrics,and,the,count,of,each,metric,type;public,metric,serialization,result,serialize,map,counter,tuple2,query,scope,info,string,counters,map,gauge,tuple2,query,scope,info,string,gauges,map,histogram,tuple2,query,scope,info,string,histograms,map,meter,tuple2,query,scope,info,string,meters,buffer,clear,int,num,counters,0,for,map,entry,counter,tuple2,query,scope,info,string,entry,counters,entry,set,try,serialize,counter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,counters,catch,exception,e,log,debug,failed,to,serialize,counter,e,int,num,gauges,0,for,map,entry,gauge,tuple2,query,scope,info,string,entry,gauges,entry,set,try,serialize,gauge,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,gauges,catch,exception,e,log,debug,failed,to,serialize,gauge,e,int,num,histograms,0,for,map,entry,histogram,tuple2,query,scope,info,string,entry,histograms,entry,set,try,serialize,histogram,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,histograms,catch,exception,e,log,debug,failed,to,serialize,histogram,e,int,num,meters,0,for,map,entry,meter,tuple2,query,scope,info,string,entry,meters,entry,set,try,serialize,meter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,meters,catch,exception,e,log,debug,failed,to,serialize,meter,e,return,new,metric,serialization,result,buffer,get,copy,of,buffer,num,counters,num,gauges,num,meters,num,histograms
MetricDumpSerialization -> MetricDumpSerializer -> public MetricSerializationResult serialize( 			Map<Counter, Tuple2<QueryScopeInfo, String>> counters, 			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges, 			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms, 			Map<Meter, Tuple2<QueryScopeInfo, String>> meters);1509643643;Serializes the given metrics and returns the resulting byte array.__<p>Should a {@link Metric} accessed in this method throw an exception it will be omitted from the returned_{@link MetricSerializationResult}.__<p>If the serialization of any primitive or String fails then the returned {@link MetricSerializationResult}_is partially corrupted. Such a result can be deserialized safely by_{@link MetricDumpDeserializer#deserialize(MetricSerializationResult)}_ however only metrics that were_fully serialized before the failure will be returned.__@param counters   counters to serialize_@param gauges     gauges to serialize_@param histograms histograms to serialize_@return MetricSerializationResult containing the serialized metrics and the count of each metric type;public MetricSerializationResult serialize(_			Map<Counter, Tuple2<QueryScopeInfo, String>> counters,_			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges,_			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms,_			Map<Meter, Tuple2<QueryScopeInfo, String>> meters) {__			buffer.clear()___			int numCounters = 0__			for (Map.Entry<Counter, Tuple2<QueryScopeInfo, String>> entry : counters.entrySet()) {_				try {_					serializeCounter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numCounters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize counter.", e)__				}_			}__			int numGauges = 0__			for (Map.Entry<Gauge<?>, Tuple2<QueryScopeInfo, String>> entry : gauges.entrySet()) {_				try {_					serializeGauge(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numGauges++__				} catch (Exception e) {_					LOG.debug("Failed to serialize gauge.", e)__				}_			}__			int numHistograms = 0__			for (Map.Entry<Histogram, Tuple2<QueryScopeInfo, String>> entry : histograms.entrySet()) {_				try {_					serializeHistogram(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numHistograms++__				} catch (Exception e) {_					LOG.debug("Failed to serialize histogram.", e)__				}_			}__			int numMeters = 0__			for (Map.Entry<Meter, Tuple2<QueryScopeInfo, String>> entry : meters.entrySet()) {_				try {_					serializeMeter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numMeters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize meter.", e)__				}_			}__			return new MetricSerializationResult(buffer.getCopyOfBuffer(), numCounters, numGauges, numMeters, numHistograms)__		};serializes,the,given,metrics,and,returns,the,resulting,byte,array,p,should,a,link,metric,accessed,in,this,method,throw,an,exception,it,will,be,omitted,from,the,returned,link,metric,serialization,result,p,if,the,serialization,of,any,primitive,or,string,fails,then,the,returned,link,metric,serialization,result,is,partially,corrupted,such,a,result,can,be,deserialized,safely,by,link,metric,dump,deserializer,deserialize,metric,serialization,result,however,only,metrics,that,were,fully,serialized,before,the,failure,will,be,returned,param,counters,counters,to,serialize,param,gauges,gauges,to,serialize,param,histograms,histograms,to,serialize,return,metric,serialization,result,containing,the,serialized,metrics,and,the,count,of,each,metric,type;public,metric,serialization,result,serialize,map,counter,tuple2,query,scope,info,string,counters,map,gauge,tuple2,query,scope,info,string,gauges,map,histogram,tuple2,query,scope,info,string,histograms,map,meter,tuple2,query,scope,info,string,meters,buffer,clear,int,num,counters,0,for,map,entry,counter,tuple2,query,scope,info,string,entry,counters,entry,set,try,serialize,counter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,counters,catch,exception,e,log,debug,failed,to,serialize,counter,e,int,num,gauges,0,for,map,entry,gauge,tuple2,query,scope,info,string,entry,gauges,entry,set,try,serialize,gauge,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,gauges,catch,exception,e,log,debug,failed,to,serialize,gauge,e,int,num,histograms,0,for,map,entry,histogram,tuple2,query,scope,info,string,entry,histograms,entry,set,try,serialize,histogram,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,histograms,catch,exception,e,log,debug,failed,to,serialize,histogram,e,int,num,meters,0,for,map,entry,meter,tuple2,query,scope,info,string,entry,meters,entry,set,try,serialize,meter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,meters,catch,exception,e,log,debug,failed,to,serialize,meter,e,return,new,metric,serialization,result,buffer,get,copy,of,buffer,num,counters,num,gauges,num,meters,num,histograms
MetricDumpSerialization -> MetricDumpSerializer -> public MetricSerializationResult serialize( 			Map<Counter, Tuple2<QueryScopeInfo, String>> counters, 			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges, 			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms, 			Map<Meter, Tuple2<QueryScopeInfo, String>> meters);1524068201;Serializes the given metrics and returns the resulting byte array.__<p>Should a {@link Metric} accessed in this method throw an exception it will be omitted from the returned_{@link MetricSerializationResult}.__<p>If the serialization of any primitive or String fails then the returned {@link MetricSerializationResult}_is partially corrupted. Such a result can be deserialized safely by_{@link MetricDumpDeserializer#deserialize(MetricSerializationResult)}_ however only metrics that were_fully serialized before the failure will be returned.__@param counters   counters to serialize_@param gauges     gauges to serialize_@param histograms histograms to serialize_@return MetricSerializationResult containing the serialized metrics and the count of each metric type;public MetricSerializationResult serialize(_			Map<Counter, Tuple2<QueryScopeInfo, String>> counters,_			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges,_			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms,_			Map<Meter, Tuple2<QueryScopeInfo, String>> meters) {__			buffer.clear()___			int numCounters = 0__			for (Map.Entry<Counter, Tuple2<QueryScopeInfo, String>> entry : counters.entrySet()) {_				try {_					serializeCounter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numCounters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize counter.", e)__				}_			}__			int numGauges = 0__			for (Map.Entry<Gauge<?>, Tuple2<QueryScopeInfo, String>> entry : gauges.entrySet()) {_				try {_					serializeGauge(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numGauges++__				} catch (Exception e) {_					LOG.debug("Failed to serialize gauge.", e)__				}_			}__			int numHistograms = 0__			for (Map.Entry<Histogram, Tuple2<QueryScopeInfo, String>> entry : histograms.entrySet()) {_				try {_					serializeHistogram(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numHistograms++__				} catch (Exception e) {_					LOG.debug("Failed to serialize histogram.", e)__				}_			}__			int numMeters = 0__			for (Map.Entry<Meter, Tuple2<QueryScopeInfo, String>> entry : meters.entrySet()) {_				try {_					serializeMeter(buffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numMeters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize meter.", e)__				}_			}__			return new MetricSerializationResult(buffer.getCopyOfBuffer(), numCounters, numGauges, numMeters, numHistograms)__		};serializes,the,given,metrics,and,returns,the,resulting,byte,array,p,should,a,link,metric,accessed,in,this,method,throw,an,exception,it,will,be,omitted,from,the,returned,link,metric,serialization,result,p,if,the,serialization,of,any,primitive,or,string,fails,then,the,returned,link,metric,serialization,result,is,partially,corrupted,such,a,result,can,be,deserialized,safely,by,link,metric,dump,deserializer,deserialize,metric,serialization,result,however,only,metrics,that,were,fully,serialized,before,the,failure,will,be,returned,param,counters,counters,to,serialize,param,gauges,gauges,to,serialize,param,histograms,histograms,to,serialize,return,metric,serialization,result,containing,the,serialized,metrics,and,the,count,of,each,metric,type;public,metric,serialization,result,serialize,map,counter,tuple2,query,scope,info,string,counters,map,gauge,tuple2,query,scope,info,string,gauges,map,histogram,tuple2,query,scope,info,string,histograms,map,meter,tuple2,query,scope,info,string,meters,buffer,clear,int,num,counters,0,for,map,entry,counter,tuple2,query,scope,info,string,entry,counters,entry,set,try,serialize,counter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,counters,catch,exception,e,log,debug,failed,to,serialize,counter,e,int,num,gauges,0,for,map,entry,gauge,tuple2,query,scope,info,string,entry,gauges,entry,set,try,serialize,gauge,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,gauges,catch,exception,e,log,debug,failed,to,serialize,gauge,e,int,num,histograms,0,for,map,entry,histogram,tuple2,query,scope,info,string,entry,histograms,entry,set,try,serialize,histogram,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,histograms,catch,exception,e,log,debug,failed,to,serialize,histogram,e,int,num,meters,0,for,map,entry,meter,tuple2,query,scope,info,string,entry,meters,entry,set,try,serialize,meter,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,meters,catch,exception,e,log,debug,failed,to,serialize,meter,e,return,new,metric,serialization,result,buffer,get,copy,of,buffer,num,counters,num,gauges,num,meters,num,histograms
MetricDumpSerialization -> MetricDumpSerializer -> public MetricSerializationResult serialize( 			Map<Counter, Tuple2<QueryScopeInfo, String>> counters, 			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges, 			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms, 			Map<Meter, Tuple2<QueryScopeInfo, String>> meters);1539839273;Serializes the given metrics and returns the resulting byte array.__<p>Should a {@link Metric} accessed in this method throw an exception it will be omitted from the returned_{@link MetricSerializationResult}.__<p>If the serialization of any primitive or String fails then the returned {@link MetricSerializationResult}_is partially corrupted. Such a result can be deserialized safely by_{@link MetricDumpDeserializer#deserialize(MetricSerializationResult)}_ however only metrics that were_fully serialized before the failure will be returned.__@param counters   counters to serialize_@param gauges     gauges to serialize_@param histograms histograms to serialize_@return MetricSerializationResult containing the serialized metrics and the count of each metric type;public MetricSerializationResult serialize(_			Map<Counter, Tuple2<QueryScopeInfo, String>> counters,_			Map<Gauge<?>, Tuple2<QueryScopeInfo, String>> gauges,_			Map<Histogram, Tuple2<QueryScopeInfo, String>> histograms,_			Map<Meter, Tuple2<QueryScopeInfo, String>> meters) {__			countersBuffer.clear()__			int numCounters = 0__			for (Map.Entry<Counter, Tuple2<QueryScopeInfo, String>> entry : counters.entrySet()) {_				try {_					serializeCounter(countersBuffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numCounters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize counter.", e)__				}_			}__			gaugesBuffer.clear()__			int numGauges = 0__			for (Map.Entry<Gauge<?>, Tuple2<QueryScopeInfo, String>> entry : gauges.entrySet()) {_				try {_					serializeGauge(gaugesBuffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numGauges++__				} catch (Exception e) {_					LOG.debug("Failed to serialize gauge.", e)__				}_			}__			histogramsBuffer.clear()__			int numHistograms = 0__			for (Map.Entry<Histogram, Tuple2<QueryScopeInfo, String>> entry : histograms.entrySet()) {_				try {_					serializeHistogram(histogramsBuffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numHistograms++__				} catch (Exception e) {_					LOG.debug("Failed to serialize histogram.", e)__				}_			}__			metersBuffer.clear()__			int numMeters = 0__			for (Map.Entry<Meter, Tuple2<QueryScopeInfo, String>> entry : meters.entrySet()) {_				try {_					serializeMeter(metersBuffer, entry.getValue().f0, entry.getValue().f1, entry.getKey())__					numMeters++__				} catch (Exception e) {_					LOG.debug("Failed to serialize meter.", e)__				}_			}__			return new MetricSerializationResult(_				countersBuffer.getCopyOfBuffer(),_				gaugesBuffer.getCopyOfBuffer(),_				metersBuffer.getCopyOfBuffer(),_				histogramsBuffer.getCopyOfBuffer(),_				numCounters,_				numGauges,_				numMeters,_				numHistograms)__		};serializes,the,given,metrics,and,returns,the,resulting,byte,array,p,should,a,link,metric,accessed,in,this,method,throw,an,exception,it,will,be,omitted,from,the,returned,link,metric,serialization,result,p,if,the,serialization,of,any,primitive,or,string,fails,then,the,returned,link,metric,serialization,result,is,partially,corrupted,such,a,result,can,be,deserialized,safely,by,link,metric,dump,deserializer,deserialize,metric,serialization,result,however,only,metrics,that,were,fully,serialized,before,the,failure,will,be,returned,param,counters,counters,to,serialize,param,gauges,gauges,to,serialize,param,histograms,histograms,to,serialize,return,metric,serialization,result,containing,the,serialized,metrics,and,the,count,of,each,metric,type;public,metric,serialization,result,serialize,map,counter,tuple2,query,scope,info,string,counters,map,gauge,tuple2,query,scope,info,string,gauges,map,histogram,tuple2,query,scope,info,string,histograms,map,meter,tuple2,query,scope,info,string,meters,counters,buffer,clear,int,num,counters,0,for,map,entry,counter,tuple2,query,scope,info,string,entry,counters,entry,set,try,serialize,counter,counters,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,counters,catch,exception,e,log,debug,failed,to,serialize,counter,e,gauges,buffer,clear,int,num,gauges,0,for,map,entry,gauge,tuple2,query,scope,info,string,entry,gauges,entry,set,try,serialize,gauge,gauges,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,gauges,catch,exception,e,log,debug,failed,to,serialize,gauge,e,histograms,buffer,clear,int,num,histograms,0,for,map,entry,histogram,tuple2,query,scope,info,string,entry,histograms,entry,set,try,serialize,histogram,histograms,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,histograms,catch,exception,e,log,debug,failed,to,serialize,histogram,e,meters,buffer,clear,int,num,meters,0,for,map,entry,meter,tuple2,query,scope,info,string,entry,meters,entry,set,try,serialize,meter,meters,buffer,entry,get,value,f0,entry,get,value,f1,entry,get,key,num,meters,catch,exception,e,log,debug,failed,to,serialize,meter,e,return,new,metric,serialization,result,counters,buffer,get,copy,of,buffer,gauges,buffer,get,copy,of,buffer,meters,buffer,get,copy,of,buffer,histograms,buffer,get,copy,of,buffer,num,counters,num,gauges,num,meters,num,histograms
MetricDumpSerialization -> MetricDumpDeserializer -> public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data);1484221346;De-serializes metrics from the given byte array and returns them as a list of {@link MetricDump}.__@param data serialized metrics_@return A list containing the deserialized metrics.;public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data) {_			DataInputView in = new DataInputDeserializer(data.serializedMetrics, 0, data.serializedMetrics.length)___			List<MetricDump> metrics = new ArrayList<>(data.numCounters + data.numGauges + data.numHistograms + data.numMeters)___			for (int x = 0_ x < data.numCounters_ x++) {_				try {_					metrics.add(deserializeCounter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize counter.", e)__				}_			}__			for (int x = 0_ x < data.numGauges_ x++) {_				try {_					metrics.add(deserializeGauge(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize gauge.", e)__				}_			}__			for (int x = 0_ x < data.numHistograms_ x++) {_				try {_					metrics.add(deserializeHistogram(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize histogram.", e)__				}_			}__			for (int x = 0_ x < data.numMeters_ x++) {_				try {_					metrics.add(deserializeMeter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize meter.", e)__				}_			}__			return metrics__		};de,serializes,metrics,from,the,given,byte,array,and,returns,them,as,a,list,of,link,metric,dump,param,data,serialized,metrics,return,a,list,containing,the,deserialized,metrics;public,list,metric,dump,deserialize,metric,dump,serialization,metric,serialization,result,data,data,input,view,in,new,data,input,deserializer,data,serialized,metrics,0,data,serialized,metrics,length,list,metric,dump,metrics,new,array,list,data,num,counters,data,num,gauges,data,num,histograms,data,num,meters,for,int,x,0,x,data,num,counters,x,try,metrics,add,deserialize,counter,in,catch,exception,e,log,debug,failed,to,deserialize,counter,e,for,int,x,0,x,data,num,gauges,x,try,metrics,add,deserialize,gauge,in,catch,exception,e,log,debug,failed,to,deserialize,gauge,e,for,int,x,0,x,data,num,histograms,x,try,metrics,add,deserialize,histogram,in,catch,exception,e,log,debug,failed,to,deserialize,histogram,e,for,int,x,0,x,data,num,meters,x,try,metrics,add,deserialize,meter,in,catch,exception,e,log,debug,failed,to,deserialize,meter,e,return,metrics
MetricDumpSerialization -> MetricDumpDeserializer -> public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data);1496241592;De-serializes metrics from the given byte array and returns them as a list of {@link MetricDump}.__@param data serialized metrics_@return A list containing the deserialized metrics.;public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data) {_			DataInputView in = new DataInputDeserializer(data.serializedMetrics, 0, data.serializedMetrics.length)___			List<MetricDump> metrics = new ArrayList<>(data.numCounters + data.numGauges + data.numHistograms + data.numMeters)___			for (int x = 0_ x < data.numCounters_ x++) {_				try {_					metrics.add(deserializeCounter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize counter.", e)__				}_			}__			for (int x = 0_ x < data.numGauges_ x++) {_				try {_					metrics.add(deserializeGauge(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize gauge.", e)__				}_			}__			for (int x = 0_ x < data.numHistograms_ x++) {_				try {_					metrics.add(deserializeHistogram(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize histogram.", e)__				}_			}__			for (int x = 0_ x < data.numMeters_ x++) {_				try {_					metrics.add(deserializeMeter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize meter.", e)__				}_			}__			return metrics__		};de,serializes,metrics,from,the,given,byte,array,and,returns,them,as,a,list,of,link,metric,dump,param,data,serialized,metrics,return,a,list,containing,the,deserialized,metrics;public,list,metric,dump,deserialize,metric,dump,serialization,metric,serialization,result,data,data,input,view,in,new,data,input,deserializer,data,serialized,metrics,0,data,serialized,metrics,length,list,metric,dump,metrics,new,array,list,data,num,counters,data,num,gauges,data,num,histograms,data,num,meters,for,int,x,0,x,data,num,counters,x,try,metrics,add,deserialize,counter,in,catch,exception,e,log,debug,failed,to,deserialize,counter,e,for,int,x,0,x,data,num,gauges,x,try,metrics,add,deserialize,gauge,in,catch,exception,e,log,debug,failed,to,deserialize,gauge,e,for,int,x,0,x,data,num,histograms,x,try,metrics,add,deserialize,histogram,in,catch,exception,e,log,debug,failed,to,deserialize,histogram,e,for,int,x,0,x,data,num,meters,x,try,metrics,add,deserialize,meter,in,catch,exception,e,log,debug,failed,to,deserialize,meter,e,return,metrics
MetricDumpSerialization -> MetricDumpDeserializer -> public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data);1501692180;De-serializes metrics from the given byte array and returns them as a list of {@link MetricDump}.__@param data serialized metrics_@return A list containing the deserialized metrics.;public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data) {_			DataInputView in = new DataInputDeserializer(data.serializedMetrics, 0, data.serializedMetrics.length)___			List<MetricDump> metrics = new ArrayList<>(data.numCounters + data.numGauges + data.numHistograms + data.numMeters)___			for (int x = 0_ x < data.numCounters_ x++) {_				try {_					metrics.add(deserializeCounter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize counter.", e)__				}_			}__			for (int x = 0_ x < data.numGauges_ x++) {_				try {_					metrics.add(deserializeGauge(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize gauge.", e)__				}_			}__			for (int x = 0_ x < data.numHistograms_ x++) {_				try {_					metrics.add(deserializeHistogram(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize histogram.", e)__				}_			}__			for (int x = 0_ x < data.numMeters_ x++) {_				try {_					metrics.add(deserializeMeter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize meter.", e)__				}_			}__			return metrics__		};de,serializes,metrics,from,the,given,byte,array,and,returns,them,as,a,list,of,link,metric,dump,param,data,serialized,metrics,return,a,list,containing,the,deserialized,metrics;public,list,metric,dump,deserialize,metric,dump,serialization,metric,serialization,result,data,data,input,view,in,new,data,input,deserializer,data,serialized,metrics,0,data,serialized,metrics,length,list,metric,dump,metrics,new,array,list,data,num,counters,data,num,gauges,data,num,histograms,data,num,meters,for,int,x,0,x,data,num,counters,x,try,metrics,add,deserialize,counter,in,catch,exception,e,log,debug,failed,to,deserialize,counter,e,for,int,x,0,x,data,num,gauges,x,try,metrics,add,deserialize,gauge,in,catch,exception,e,log,debug,failed,to,deserialize,gauge,e,for,int,x,0,x,data,num,histograms,x,try,metrics,add,deserialize,histogram,in,catch,exception,e,log,debug,failed,to,deserialize,histogram,e,for,int,x,0,x,data,num,meters,x,try,metrics,add,deserialize,meter,in,catch,exception,e,log,debug,failed,to,deserialize,meter,e,return,metrics
MetricDumpSerialization -> MetricDumpDeserializer -> public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data);1509643643;De-serializes metrics from the given byte array and returns them as a list of {@link MetricDump}.__@param data serialized metrics_@return A list containing the deserialized metrics.;public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data) {_			DataInputView in = new DataInputDeserializer(data.serializedMetrics, 0, data.serializedMetrics.length)___			List<MetricDump> metrics = new ArrayList<>(data.numCounters + data.numGauges + data.numHistograms + data.numMeters)___			for (int x = 0_ x < data.numCounters_ x++) {_				try {_					metrics.add(deserializeCounter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize counter.", e)__				}_			}__			for (int x = 0_ x < data.numGauges_ x++) {_				try {_					metrics.add(deserializeGauge(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize gauge.", e)__				}_			}__			for (int x = 0_ x < data.numHistograms_ x++) {_				try {_					metrics.add(deserializeHistogram(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize histogram.", e)__				}_			}__			for (int x = 0_ x < data.numMeters_ x++) {_				try {_					metrics.add(deserializeMeter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize meter.", e)__				}_			}__			return metrics__		};de,serializes,metrics,from,the,given,byte,array,and,returns,them,as,a,list,of,link,metric,dump,param,data,serialized,metrics,return,a,list,containing,the,deserialized,metrics;public,list,metric,dump,deserialize,metric,dump,serialization,metric,serialization,result,data,data,input,view,in,new,data,input,deserializer,data,serialized,metrics,0,data,serialized,metrics,length,list,metric,dump,metrics,new,array,list,data,num,counters,data,num,gauges,data,num,histograms,data,num,meters,for,int,x,0,x,data,num,counters,x,try,metrics,add,deserialize,counter,in,catch,exception,e,log,debug,failed,to,deserialize,counter,e,for,int,x,0,x,data,num,gauges,x,try,metrics,add,deserialize,gauge,in,catch,exception,e,log,debug,failed,to,deserialize,gauge,e,for,int,x,0,x,data,num,histograms,x,try,metrics,add,deserialize,histogram,in,catch,exception,e,log,debug,failed,to,deserialize,histogram,e,for,int,x,0,x,data,num,meters,x,try,metrics,add,deserialize,meter,in,catch,exception,e,log,debug,failed,to,deserialize,meter,e,return,metrics
MetricDumpSerialization -> MetricDumpDeserializer -> public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data);1524068201;De-serializes metrics from the given byte array and returns them as a list of {@link MetricDump}.__@param data serialized metrics_@return A list containing the deserialized metrics.;public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data) {_			DataInputView in = new DataInputDeserializer(data.serializedMetrics, 0, data.serializedMetrics.length)___			List<MetricDump> metrics = new ArrayList<>(data.numCounters + data.numGauges + data.numHistograms + data.numMeters)___			for (int x = 0_ x < data.numCounters_ x++) {_				try {_					metrics.add(deserializeCounter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize counter.", e)__				}_			}__			for (int x = 0_ x < data.numGauges_ x++) {_				try {_					metrics.add(deserializeGauge(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize gauge.", e)__				}_			}__			for (int x = 0_ x < data.numHistograms_ x++) {_				try {_					metrics.add(deserializeHistogram(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize histogram.", e)__				}_			}__			for (int x = 0_ x < data.numMeters_ x++) {_				try {_					metrics.add(deserializeMeter(in))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize meter.", e)__				}_			}__			return metrics__		};de,serializes,metrics,from,the,given,byte,array,and,returns,them,as,a,list,of,link,metric,dump,param,data,serialized,metrics,return,a,list,containing,the,deserialized,metrics;public,list,metric,dump,deserialize,metric,dump,serialization,metric,serialization,result,data,data,input,view,in,new,data,input,deserializer,data,serialized,metrics,0,data,serialized,metrics,length,list,metric,dump,metrics,new,array,list,data,num,counters,data,num,gauges,data,num,histograms,data,num,meters,for,int,x,0,x,data,num,counters,x,try,metrics,add,deserialize,counter,in,catch,exception,e,log,debug,failed,to,deserialize,counter,e,for,int,x,0,x,data,num,gauges,x,try,metrics,add,deserialize,gauge,in,catch,exception,e,log,debug,failed,to,deserialize,gauge,e,for,int,x,0,x,data,num,histograms,x,try,metrics,add,deserialize,histogram,in,catch,exception,e,log,debug,failed,to,deserialize,histogram,e,for,int,x,0,x,data,num,meters,x,try,metrics,add,deserialize,meter,in,catch,exception,e,log,debug,failed,to,deserialize,meter,e,return,metrics
MetricDumpSerialization -> MetricDumpDeserializer -> public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data);1539839273;De-serializes metrics from the given byte array and returns them as a list of {@link MetricDump}.__@param data serialized metrics_@return A list containing the deserialized metrics.;public List<MetricDump> deserialize(MetricDumpSerialization.MetricSerializationResult data) {_			DataInputView countersInputView = new DataInputDeserializer(data.serializedCounters, 0, data.serializedCounters.length)__			DataInputView gaugesInputView = new DataInputDeserializer(data.serializedGauges, 0, data.serializedGauges.length)__			DataInputView metersInputView = new DataInputDeserializer(data.serializedMeters, 0, data.serializedMeters.length)__			DataInputView histogramsInputView = new DataInputDeserializer(data.serializedHistograms, 0, data.serializedHistograms.length)___			List<MetricDump> metrics = new ArrayList<>(data.numCounters + data.numGauges + data.numMeters + data.numHistograms)___			for (int x = 0_ x < data.numCounters_ x++) {_				try {_					metrics.add(deserializeCounter(countersInputView))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize counter.", e)__				}_			}__			for (int x = 0_ x < data.numGauges_ x++) {_				try {_					metrics.add(deserializeGauge(gaugesInputView))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize gauge.", e)__				}_			}__			for (int x = 0_ x < data.numMeters_ x++) {_				try {_					metrics.add(deserializeMeter(metersInputView))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize meter.", e)__				}_			}__			for (int x = 0_ x < data.numHistograms_ x++) {_				try {_					metrics.add(deserializeHistogram(histogramsInputView))__				} catch (Exception e) {_					LOG.debug("Failed to deserialize histogram.", e)__				}_			}__			return metrics__		};de,serializes,metrics,from,the,given,byte,array,and,returns,them,as,a,list,of,link,metric,dump,param,data,serialized,metrics,return,a,list,containing,the,deserialized,metrics;public,list,metric,dump,deserialize,metric,dump,serialization,metric,serialization,result,data,data,input,view,counters,input,view,new,data,input,deserializer,data,serialized,counters,0,data,serialized,counters,length,data,input,view,gauges,input,view,new,data,input,deserializer,data,serialized,gauges,0,data,serialized,gauges,length,data,input,view,meters,input,view,new,data,input,deserializer,data,serialized,meters,0,data,serialized,meters,length,data,input,view,histograms,input,view,new,data,input,deserializer,data,serialized,histograms,0,data,serialized,histograms,length,list,metric,dump,metrics,new,array,list,data,num,counters,data,num,gauges,data,num,meters,data,num,histograms,for,int,x,0,x,data,num,counters,x,try,metrics,add,deserialize,counter,counters,input,view,catch,exception,e,log,debug,failed,to,deserialize,counter,e,for,int,x,0,x,data,num,gauges,x,try,metrics,add,deserialize,gauge,gauges,input,view,catch,exception,e,log,debug,failed,to,deserialize,gauge,e,for,int,x,0,x,data,num,meters,x,try,metrics,add,deserialize,meter,meters,input,view,catch,exception,e,log,debug,failed,to,deserialize,meter,e,for,int,x,0,x,data,num,histograms,x,try,metrics,add,deserialize,histogram,histograms,input,view,catch,exception,e,log,debug,failed,to,deserialize,histogram,e,return,metrics
