# id;timestamp;commentText;codeText;commentWords;codeWords
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1501156573;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1505901925;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			blobKey = BlobKey.createKey(blobType, md.digest())___			_			moveTempFileToStore(incomingFile, jobId, blobKey)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,blob,key,create,key,blob,type,md,digest,move,temp,file,to,store,incoming,file,job,id,blob,key,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1507188807;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1507209538;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1507284174;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508535554;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1508581881;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1513599733;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1513603142;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)___			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1516793657;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1519384290;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1526540287;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1531387737;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType) 			throws IOException;1531408830;Uploads the data of the given byte array for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;private BlobKey putBuffer(@Nullable JobID jobId, byte[] value, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			md.update(value)__			fos.write(value)__		} catch (IOException ioe) {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for job {}.",_					incomingFile, jobId)__			}_			throw ioe__		}__		try {_			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,buffer,nullable,job,id,job,id,byte,value,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,md,update,value,fos,write,value,catch,ioexception,ioe,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,job,incoming,file,job,id,throw,ioe,try,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException;1498061083;Deletes the file associated with the blob key in both the local storage as well as in the HA_store of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@throws IOException;void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(jobId, key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;void,delete,internal,nullable,job,id,job,id,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,blob,store,delete,job,id,key,finally,read,write,lock,write,lock,unlock
BlobServer -> void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException;1498580984;Deletes the file associated with the blob key in both the local storage as well as in the HA_store of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@throws IOException;void deleteInternal(@Nullable JobID jobId, BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(jobId, key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;void,delete,internal,nullable,job,id,job,id,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,blob,store,delete,job,id,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1411563658;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1416240373;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423133296;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423154315;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423158142;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423478687;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423678101;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if(localFile.exists()){_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> @Override 	public void delete(BlobKey blobKey) throws IOException;1423847366;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param blobKey associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey blobKey) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, blobKey)___		if (localFile.exists()) {_			localFile.delete()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,blob,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,blob,key,if,local,file,exists,local,file,delete
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1411563658;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1416240373;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423133296;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423154315;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423158142;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423478687;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423678101;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> static void readFully(final InputStream inputStream, 						final byte[] buf, final int off, final int len) throws IOException;1423847366;Auxiliary method to read a particular number of bytes from an input stream. This method blocks until the_requested number of bytes have been read from the stream. If the stream cannot offer enough data, an_{@link EOFException} is thrown.__@param inputStream_the input stream to read the data from_@param buf_the buffer to store the read data_@param off_the offset inside the buffer_@param len_the number of bytes to read from the stream_@throws IOException_thrown if I/O error occurs while reading from the stream or the stream cannot offer enough data;static void readFully(final InputStream inputStream,_						final byte[] buf, final int off, final int len) throws IOException {__		int bytesRead = 0__		while (bytesRead < len) {__			final int read = inputStream.read(buf, off + bytesRead, len_					- bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}_	};auxiliary,method,to,read,a,particular,number,of,bytes,from,an,input,stream,this,method,blocks,until,the,requested,number,of,bytes,have,been,read,from,the,stream,if,the,stream,cannot,offer,enough,data,an,link,eofexception,is,thrown,param,input,stream,the,input,stream,to,read,the,data,from,param,buf,the,buffer,to,store,the,read,data,param,off,the,offset,inside,the,buffer,param,len,the,number,of,bytes,to,read,from,the,stream,throws,ioexception,thrown,if,i,o,error,occurs,while,reading,from,the,stream,or,the,stream,cannot,offer,enough,data;static,void,read,fully,final,input,stream,input,stream,final,byte,buf,final,int,off,final,int,len,throws,ioexception,int,bytes,read,0,while,bytes,read,len,final,int,read,input,stream,read,buf,off,bytes,read,len,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read
BlobServer -> public BlobServer(Configuration config) throws IOException;1423678101;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}_		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer(Configuration config) throws IOException;1423847366;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}_		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer(Configuration config) throws IOException;1424258195;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1426258431;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1427213093;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1435313259;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {__		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		_		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1444048246;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.STATE_BACKEND_FS_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1445511506;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.ZOOKEEPER_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		_		try {_			this.serverSocket = new ServerSocket(0, backlog)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with automatic port choice.", e)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,try,this,server,socket,new,server,socket,0,backlog,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,automatic,port,choice,e,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1448294150;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.ZOOKEEPER_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)__		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange).iterator()___		ServerSocket socketAttempt = null__		while(ports.hasNext()) {_			int port = ports.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				socketAttempt = new ServerSocket(port, backlog)__				break_ _			} catch (IOException | IllegalArgumentException e) {_				if(LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,iterator,server,socket,socket,attempt,null,while,ports,has,next,int,port,ports,next,log,debug,trying,to,open,socket,on,port,port,try,socket,attempt,new,server,socket,port,backlog,break,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1448555925;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		_		else if (config.containsKey(ConfigConstants.STATE_BACKEND) &&_				config.containsKey(ConfigConstants.ZOOKEEPER_RECOVERY_PATH)) {__			this.blobStore = new FileSystemBlobStore(config)__		}_		_		else {_			this.blobStore = new VoidBlobStore()__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,config,contains,key,config,constants,config,contains,key,config,constants,this,blob,store,new,file,system,blob,store,config,else,this,blob,store,new,void,blob,store,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1456831411;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1459870195;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1465376364;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1465394479;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1468506589;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		RecoveryMode recoveryMode = RecoveryMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (recoveryMode == RecoveryMode.STANDALONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (recoveryMode == RecoveryMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + recoveryMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (recoveryMode == RecoveryMode.STANDALONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,recovery,mode,recovery,mode,recovery,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,recovery,mode,recovery,mode,standalone,this,blob,store,new,void,blob,store,else,if,recovery,mode,recovery,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,recovery,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,recovery,mode,recovery,mode,standalone,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1470734292;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			this.blobStore = new VoidBlobStore()__		}_		_		else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected recovery mode '" + highAvailabilityMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,high,availability,mode,high,availability,mode,none,this,blob,store,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,recovery,mode,high,availability,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,high,availability,mode,high,availability,mode,none,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1471870754;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			this.blobStore = new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				return new ServerSocket(port, finalBacklog)__			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,high,availability,mode,high,availability,mode,none,this,blob,store,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,high,availability,mode,high,availability,mode,none,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,return,new,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1476307516;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		this(config, createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,this,config,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1476631755;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		checkNotNull(config, "Configuration")___		HighAvailabilityMode highAvailabilityMode = HighAvailabilityMode.fromConfig(config)___		this.blobServiceConfiguration = config___		_		String storageDirectory = config.getString(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			this.blobStore = new VoidBlobStore()__		} else if (highAvailabilityMode == HighAvailabilityMode.ZOOKEEPER) {_			this.blobStore = new FileSystemBlobStore(config)__		} else {_			throw new IllegalConfigurationException("Unexpected high availability mode '" + highAvailabilityMode + ".")__		}__		_		final int maxConnections = config.getInteger(_				ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT)__			this.maxConnections = ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT__		}__		_		int backlog = config.getInteger(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG)__			backlog = ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG__		}__		if (highAvailabilityMode == HighAvailabilityMode.NONE) {_			_			this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		else {_			this.shutdownHook = null__		}__		if (config.getBoolean(ConfigConstants.BLOB_SERVICE_SSL_ENABLED,_				ConfigConstants.DEFAULT_BLOB_SERVICE_SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(ConfigConstants.BLOB_SERVER_PORT, ConfigConstants.DEFAULT_BLOB_SERVER_PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,check,not,null,config,configuration,high,availability,mode,high,availability,mode,high,availability,mode,from,config,config,this,blob,service,configuration,config,string,storage,directory,config,get,string,config,constants,null,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,if,high,availability,mode,high,availability,mode,none,this,blob,store,new,void,blob,store,else,if,high,availability,mode,high,availability,mode,zookeeper,this,blob,store,new,file,system,blob,store,config,else,throw,new,illegal,configuration,exception,unexpected,high,availability,mode,high,availability,mode,final,int,max,connections,config,get,integer,config,constants,config,constants,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,config,constants,this,max,connections,config,constants,int,backlog,config,get,integer,config,constants,config,constants,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,config,constants,backlog,config,constants,if,high,availability,mode,high,availability,mode,none,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,else,this,shutdown,hook,null,if,config,get,boolean,config,constants,config,constants,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,config,constants,config,constants,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config) throws IOException;1479815343;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config) throws IOException {_		this(config, BlobUtils.createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,throws,ioexception,this,config,blob,utils,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1484214553;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer(Configuration config) throws IOException {_		this(config, createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,configuration,config,throws,ioexception,this,config,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1488888321;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config) throws IOException {_		this(config, BlobUtils.createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,throws,ioexception,this,config,blob,utils,create,blob,store,from,config,config
BlobServer -> public BlobServer(Configuration config) throws IOException;1494404779;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config) throws IOException {_		this(config, BlobUtils.createBlobStoreFromConfig(config))__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,throws,ioexception,this,config,blob,utils,create,blob,store,from,config,config
BlobServer -> File getTemporaryFilename();1411563658;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1416240373;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423133296;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423154315;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423158142;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423478687;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir), String.format("temp-%08d",_				tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423678101;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File getTemporaryFilename();1423847366;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File getTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,get,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> public File getStorageLocation(BlobKey key);1411563658;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1416240373;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423133296;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423154315;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423158142;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423478687;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key){_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423678101;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1423847366;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1424258195;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1426258431;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1427213093;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> public File getStorageLocation(BlobKey key);1435313259;Returns a file handle to the file associated with the given blob key on the blob_server.__@param key identifying the file_@return file handle to the file;public File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,param,key,identifying,the,file,return,file,handle,to,the,file;public,file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1411563658;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1416240373;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423133296;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423154315;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423158142;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423478687;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423678101;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if(requiredBlob == null){_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if(!localFile.exists()){_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		}else{_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1423847366;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does " +_					"not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1424258195;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1426258431;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1427213093;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1435313259;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (!localFile.exists()) {_			throw new FileNotFoundException("File " + localFile.getCanonicalPath() + " does not exist.")__		} else {_			return localFile.toURI().toURL()__		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,throw,new,file,not,found,exception,file,local,file,get,canonical,path,does,not,exist,else,return,local,file,to,uri,to,url
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1444048246;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1445511506;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1448294150;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1448555925;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1456831411;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1459870195;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1465376364;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1465394479;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1468506589;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1470734292;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1471870754;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1476307516;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1476631755;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1479815343;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1483724578;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1484214553;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		if (requiredBlob == null) {_			throw new IllegalArgumentException("Required BLOB cannot be null.")__		}__		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,if,required,blob,null,throw,new,illegal,argument,exception,required,blob,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1488888321;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1494318397;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1494404779;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1494430729;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> @Override 	public URL getURL(BlobKey requiredBlob) throws IOException;1497603064;Method which retrieves the URL of a file associated with a blob key. The blob server looks_the blob key up in its local storage. If the file exists, then the URL is returned. If the_file does not exist, then a FileNotFoundException is thrown.__@param requiredBlob blob key associated with the requested file_@return URL of the file_@throws IOException;@Override_	public URL getURL(BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, requiredBlob)___		if (localFile.exists()) {_			return localFile.toURI().toURL()__		}_		else {_			try {_				_				blobStore.get(requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException("Failed to copy from blob store.", e)__			}__			if (localFile.exists()) {_				return localFile.toURI().toURL()__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};method,which,retrieves,the,url,of,a,file,associated,with,a,blob,key,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,then,the,url,is,returned,if,the,file,does,not,exist,then,a,file,not,found,exception,is,thrown,param,required,blob,blob,key,associated,with,the,requested,file,return,url,of,the,file,throws,ioexception;override,public,url,get,url,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,required,blob,if,local,file,exists,return,local,file,to,uri,to,url,else,try,blob,store,get,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,from,blob,store,e,if,local,file,exists,return,local,file,to,uri,to,url,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1501156573;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1505901925;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1507188807;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1507209538;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1507284174;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508535554;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1508581881;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1513599733;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1513603142;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1516793657;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1519384290;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1526540287;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1531387737;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException;1531408830;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey blobKey) throws IOException {_		checkArgument(blobKey != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)__		readWriteLock.readLock().lock()___		try {_			getFileInternal(jobId, blobKey, localFile)__			return localFile__		} finally {_			readWriteLock.readLock().unlock()__		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,throws,ioexception,check,argument,blob,key,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,read,lock,lock,try,get,file,internal,job,id,blob,key,local,file,return,local,file,finally,read,write,lock,read,lock,unlock
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1411563658;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1416240373;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423133296;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423154315;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423158142;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423478687;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException{_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423678101;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1423847366;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1424258195;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1426258431;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1427213093;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public void deleteJobDirectory(JobID jobID) throws IOException;1435313259;Method which deletes all files associated with the given jobID.__@param jobID all files associated to this jobID will be deleted_@throws IOException;public void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;public,void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1501156573;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1505901925;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1507188807;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1507209538;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1507284174;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException;1508535554;Uploads the data of the given byte array for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_the ID of the job the BLOB belongs to_@param value_the buffer to upload__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while writing it to a local file, or uploading it to the HA_store;public PermanentBlobKey putPermanent(JobID jobId, byte[] value) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putBuffer(jobId, value, PERMANENT_BLOB)__	};uploads,the,data,of,the,given,byte,array,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,value,the,buffer,to,upload,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,byte,value,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,buffer,job,id,value
BlobServer -> @Override 	public void shutdown();1423678101;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}_			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1423847366;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}_			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1424258195;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1426258431;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1427213093;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook
BlobServer -> @Override 	public void shutdown();1435313259;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1444048246;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1445511506;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1448294150;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1448555925;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1456831411;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1459870195;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1465376364;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1465394479;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			blobStore.cleanUp()___			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,blob,store,clean,up,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1468506589;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1470734292;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1471870754;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1476307516;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1476631755;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1479815343;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1484214553;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1488888321;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> @Override 	public void shutdown();1494404779;Shuts down the BLOB server.;@Override_	public void shutdown() {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection " + conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				LOG.error("BLOB server failed to properly clean up its storage directory.")__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.")__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,interrupt,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,log,error,blob,server,failed,to,properly,clean,up,its,storage,directory,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port
BlobServer -> File createTemporaryFilename();1424258195;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1426258431;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1427213093;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1435313259;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1444048246;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1445511506;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1448294150;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1448555925;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1456831411;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1459870195;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1465376364;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1465394479;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1468506589;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1470734292;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1471870754;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1476307516;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1476631755;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1479815343;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1483724578;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1484214553;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1488888321;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1494318397;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1494404779;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1494430729;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1497603064;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1498054455;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1498061083;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename();1498580984;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory;File createTemporaryFilename() {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory;file,create,temporary,filename,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1499764760;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1501156573;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1505901925;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1507188807;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1507209538;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1507284174;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508535554;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1508581881;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1513599733;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1513603142;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1516793657;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1519384290;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1526540287;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1531387737;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> File createTemporaryFilename() throws IOException;1531408830;Returns a temporary file inside the BLOB server's incoming directory.__@return a temporary file inside the BLOB server's incoming directory__@throws IOException_if creating the directory fails;File createTemporaryFilename() throws IOException {_		return new File(BlobUtils.getIncomingDirectory(storageDir),_				String.format("temp-%08d", tempFileCounter.getAndIncrement()))__	};returns,a,temporary,file,inside,the,blob,server,s,incoming,directory,return,a,temporary,file,inside,the,blob,server,s,incoming,directory,throws,ioexception,if,creating,the,directory,fails;file,create,temporary,filename,throws,ioexception,return,new,file,blob,utils,get,incoming,directory,storage,dir,string,format,temp,08d,temp,file,counter,get,and,increment
BlobServer -> BlobStore getBlobStore();1444048246;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1445511506;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1448294150;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1448555925;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1456831411;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1459870195;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1465376364;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1465394479;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1468506589;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1470734292;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1471870754;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1476307516;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1476631755;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1479815343;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1483724578;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1484214553;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1488888321;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1494318397;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1494404779;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1494430729;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1497603064;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1498054455;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1498061083;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> BlobStore getBlobStore();1498580984;Returns the blob store.;BlobStore getBlobStore() {_		return blobStore__	};returns,the,blob,store;blob,store,get,blob,store,return,blob,store
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1501156573;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1505901925;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1507188807;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1507209538;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1507284174;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508535554;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1508581881;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1513599733;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1513603142;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1516793657;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1519384290;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1526540287;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1531387737;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> @Override 	public boolean deleteFromCache(TransientBlobKey key);1531408830;Deletes the (job-unrelated) file associated with the blob key in the local storage of the_blob server.__@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(TransientBlobKey key) {_		return deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,transient,blob,key,key,return,delete,internal,null,key
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1501156573;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1505901925;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1507188807;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1507209538;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1507284174;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508535554;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1508581881;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1513599733;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1513603142;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1516793657;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1519384290;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1526540287;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1531387737;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key);1531408830;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;boolean deleteInternal(@Nullable JobID jobId, TransientBlobKey key) {_		final File localFile =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId, key))___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to locally delete BLOB " + key + " at " + localFile.getAbsolutePath())__				return false__			}_			_			blobExpiryTimes.remove(Tuple2.of(jobId, key))__			return true__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;boolean,delete,internal,nullable,job,id,job,id,transient,blob,key,key,final,file,local,file,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,locally,delete,blob,key,at,local,file,get,absolute,path,return,false,blob,expiry,times,remove,tuple2,of,job,id,key,return,true,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void close() throws IOException;1483724578;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1494318397;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1494430729;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1497603064;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1498054455;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1498061083;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1498580984;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1499764760;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1501156573;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1505901925;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1507188807;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1507209538;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1507284174;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508535554;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1508581881;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if(LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1513599733;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1513603142;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1516793657;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			_			if (shutdownHook != null && shutdownHook != Thread.currentThread()) {_				try {_					Runtime.getRuntime().removeShutdownHook(shutdownHook)__				}_				catch (IllegalStateException e) {_					_				}_				catch (Throwable t) {_					LOG.warn("Exception while unregistering BLOB server's cleanup shutdown hook.", t)__				}_			}__			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,if,shutdown,hook,null,shutdown,hook,thread,current,thread,try,runtime,get,runtime,remove,shutdown,hook,shutdown,hook,catch,illegal,state,exception,e,catch,throwable,t,log,warn,exception,while,unregistering,blob,server,s,cleanup,shutdown,hook,t,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1519384290;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1526540287;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1531387737;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> @Override 	public void close() throws IOException;1531408830;Shuts down the BLOB server.;@Override_	public void close() throws IOException {_		cleanupTimer.cancel()___		if (shutdownRequested.compareAndSet(false, true)) {_			Exception exception = null___			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				exception = ioe__			}__			_			interrupt()___			try {_				join()__			}_			catch (InterruptedException ie) {_				Thread.currentThread().interrupt()___				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			synchronized (activeConnections) {_				if (!activeConnections.isEmpty()) {_					for (BlobServerConnection conn : activeConnections) {_						LOG.debug("Shutting down connection {}.", conn.getName())__						conn.close()__					}_					activeConnections.clear()__				}_			}__			_			try {_				FileUtils.deleteDirectory(storageDir)__			}_			catch (IOException e) {_				exception = ExceptionUtils.firstOrSuppressed(e, exception)__			}__			_			ShutdownHookUtil.removeShutdownHook(shutdownHook, getClass().getSimpleName(), LOG)___			if (LOG.isInfoEnabled()) {_				LOG.info("Stopped BLOB server at {}:{}", serverSocket.getInetAddress().getHostAddress(), getPort())__			}__			ExceptionUtils.tryRethrowIOException(exception)__		}_	};shuts,down,the,blob,server;override,public,void,close,throws,ioexception,cleanup,timer,cancel,if,shutdown,requested,compare,and,set,false,true,exception,exception,null,try,this,server,socket,close,catch,ioexception,ioe,exception,ioe,interrupt,try,join,catch,interrupted,exception,ie,thread,current,thread,interrupt,log,debug,error,while,waiting,for,this,thread,to,die,ie,synchronized,active,connections,if,active,connections,is,empty,for,blob,server,connection,conn,active,connections,log,debug,shutting,down,connection,conn,get,name,conn,close,active,connections,clear,try,file,utils,delete,directory,storage,dir,catch,ioexception,e,exception,exception,utils,first,or,suppressed,e,exception,shutdown,hook,util,remove,shutdown,hook,shutdown,hook,get,class,get,simple,name,log,if,log,is,info,enabled,log,info,stopped,blob,server,at,server,socket,get,inet,address,get,host,address,get,port,exception,utils,try,rethrow,ioexception,exception
BlobServer -> ReadWriteLock getReadWriteLock();1499764760;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1501156573;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1505901925;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1507188807;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1507209538;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1507284174;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508535554;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1508581881;Returns the lock used to guard file accesses;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1513599733;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1513603142;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1516793657;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1519384290;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1526540287;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1531387737;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> ReadWriteLock getReadWriteLock();1531408830;Returns the lock used to guard file accesses.;ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1501156573;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1505901925;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1507188807;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1507209538;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1507284174;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508535554;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1508581881;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1513599733;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1513603142;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1516793657;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1519384290;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1526540287;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1531387737;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, TransientBlobKey key) throws IOException;1531408830;Retrieves the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, TransientBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,transient,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1501156573;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1505901925;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1507188807;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1507209538;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1507284174;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508535554;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1508581881;Returns the path to a local copy of the file associated with the provided job ID and blob_key._<p>_We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1513599733;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1513603142;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1516793657;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1519384290;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1526540287;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1531387737;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException;1531408830;Returns the path to a local copy of the file associated with the provided job ID and blob_key.__<p>We will first attempt to serve the BLOB from the local storage. If the BLOB is not in_there, we will try to download it from the HA store.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return The path to the file.__@throws java.io.FileNotFoundException_if the BLOB does not exist__@throws IOException_if any other error occurs when retrieving the file;@Override_	public File getFile(JobID jobId, PermanentBlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};returns,the,path,to,a,local,copy,of,the,file,associated,with,the,provided,job,id,and,blob,key,p,we,will,first,attempt,to,serve,the,blob,from,the,local,storage,if,the,blob,is,not,in,there,we,will,try,to,download,it,from,the,ha,store,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,the,path,to,the,file,throws,java,io,file,not,found,exception,if,the,blob,does,not,exist,throws,ioexception,if,any,other,error,occurs,when,retrieving,the,file;override,public,file,get,file,job,id,job,id,permanent,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1501156573;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1505901925;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			blobKey = BlobKey.createKey(blobType, md.digest())___			_			moveTempFileToStore(incomingFile, jobId, blobKey)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,blob,key,create,key,blob,type,md,digest,move,temp,file,to,store,incoming,file,job,id,blob,key,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1507188807;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1507209538;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1507284174;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508535554;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1508581881;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1513599733;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1513603142;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1516793657;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1519384290;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1526540287;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1531387737;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> private BlobKey putInputStream( 			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType) 			throws IOException;1531408830;Uploads the data from the given input stream for the given job to the BLOB server.__@param jobId_the ID of the job the BLOB belongs to_@param inputStream_the input stream to read the data from_@param blobType_whether to make the data permanent or transient__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;private BlobKey putInputStream(_			@Nullable JobID jobId, InputStream inputStream, BlobKey.BlobType blobType)_			throws IOException {__		if (LOG.isDebugEnabled()) {_			LOG.debug("Received PUT call for BLOB of job {}.", jobId)__		}__		File incomingFile = createTemporaryFilename()__		MessageDigest md = BlobUtils.createMessageDigest()__		BlobKey blobKey = null__		try (FileOutputStream fos = new FileOutputStream(incomingFile)) {_			_			byte[] buf = new byte[BUFFER_SIZE]__			while (true) {_				final int bytesRead = inputStream.read(buf)__				if (bytesRead == -1) {_					_					break__				}_				fos.write(buf, 0, bytesRead)__				md.update(buf, 0, bytesRead)__			}__			_			blobKey = moveTempFileToStore(incomingFile, jobId, md.digest(), blobType)___			return blobKey__		} finally {_			_			if (!incomingFile.delete() && incomingFile.exists()) {_				LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_					incomingFile, blobKey, jobId)__			}_		}_	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,param,job,id,the,id,of,the,job,the,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,param,blob,type,whether,to,make,the,data,permanent,or,transient,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;private,blob,key,put,input,stream,nullable,job,id,job,id,input,stream,input,stream,blob,key,blob,type,blob,type,throws,ioexception,if,log,is,debug,enabled,log,debug,received,put,call,for,blob,of,job,job,id,file,incoming,file,create,temporary,filename,message,digest,md,blob,utils,create,message,digest,blob,key,blob,key,null,try,file,output,stream,fos,new,file,output,stream,incoming,file,byte,buf,new,byte,while,true,final,int,bytes,read,input,stream,read,buf,if,bytes,read,1,break,fos,write,buf,0,bytes,read,md,update,buf,0,bytes,read,blob,key,move,temp,file,to,store,incoming,file,job,id,md,digest,blob,type,return,blob,key,finally,if,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id
BlobServer -> @Override 	public int getPort();1411563658;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1416240373;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423133296;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423154315;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423158142;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423478687;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423678101;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1423847366;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return getServerPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,get,server,port
BlobServer -> @Override 	public int getPort();1424258195;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1426258431;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1427213093;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1435313259;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1444048246;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1445511506;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1448294150;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1448555925;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1456831411;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1459870195;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1465376364;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1465394479;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1468506589;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1470734292;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1471870754;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1476307516;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1476631755;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1479815343;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1483724578;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1484214553;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1488888321;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1494318397;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1494404779;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1494430729;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1497603064;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1498054455;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1498061083;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1498580984;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1499764760;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1501156573;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1505901925;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1507188807;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1507209538;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1507284174;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508535554;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1508581881;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1513599733;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1513603142;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1516793657;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1519384290;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1526540287;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1531387737;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public int getPort();1531408830;Returns the port on which the server is listening.__@return port on which the server is listening;@Override_	public int getPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,port,on,which,the,server,is,listening,return,port,on,which,the,server,is,listening;override,public,int,get,port,return,this,server,socket,get,local,port
BlobServer -> ServerSocket getServerSocket();1424258195;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1426258431;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1427213093;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1435313259;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1444048246;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1445511506;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1448294150;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1448555925;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1456831411;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1459870195;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1465376364;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1465394479;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1468506589;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1470734292;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1471870754;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1476307516;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1476631755;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1479815343;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1483724578;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1484214553;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1488888321;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1494318397;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1494404779;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1494430729;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1497603064;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1498054455;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1498061083;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1498580984;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1499764760;Access to the server socket, for testing;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1501156573;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1505901925;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1507188807;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1507209538;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1507284174;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508535554;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1508581881;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1513599733;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1513603142;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1516793657;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1519384290;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1526540287;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1531387737;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> ServerSocket getServerSocket();1531408830;Access to the server socket, for testing.;ServerSocket getServerSocket() {_		return this.serverSocket__	};access,to,the,server,socket,for,testing;server,socket,get,server,socket,return,this,server,socket
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1499764760;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1501156573;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1505901925;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1507188807;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1507209538;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1507284174;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508535554;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1508581881;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1513599733;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1513603142;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1516793657;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1519384290;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1526540287;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1531387737;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException;1531408830;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from {@link BlobServerConnection} or unit tests.</strong>__@param jobId ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param key identifying the file_@return file handle to the file__@throws IOException_if creating the directory fails;@VisibleForTesting_	public File getStorageLocation(@Nullable JobID jobId, BlobKey key) throws IOException {_		return BlobUtils.getStorageLocation(storageDir, jobId, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,link,blob,server,connection,or,unit,tests,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,key,identifying,the,file,return,file,handle,to,the,file,throws,ioexception,if,creating,the,directory,fails;visible,for,testing,public,file,get,storage,location,nullable,job,id,job,id,blob,key,key,throws,ioexception,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1501156573;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1505901925;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1507188807;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1507209538;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1507284174;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508535554;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1508581881;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1513599733;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1513603142;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1516793657;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1519384290;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1526540287;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1531387737;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(TransientBlobKey key) throws IOException;1531408830;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(TransientBlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,transient,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> File getStorageLocation(BlobKey key);1444048246;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1445511506;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1448294150;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1448555925;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1456831411;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1459870195;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1465376364;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1465394479;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1468506589;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1470734292;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1471870754;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1476307516;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1476631755;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1479815343;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1483724578;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1484214553;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1488888321;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1494318397;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1494404779;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1494430729;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1497603064;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> File getStorageLocation(BlobKey key);1498054455;Returns a file handle to the file associated with the given blob key on the blob_server.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param key identifying the file_@return file handle to the file;File getStorageLocation(BlobKey key) {_		return BlobUtils.getStorageLocation(storageDir, key)__	};returns,a,file,handle,to,the,file,associated,with,the,given,blob,key,on,the,blob,server,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,key,identifying,the,file,return,file,handle,to,the,file;file,get,storage,location,blob,key,key,return,blob,utils,get,storage,location,storage,dir,key
BlobServer -> @Override 	public File getFile(BlobKey key) throws IOException;1498061083;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(BlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(BlobKey key) throws IOException;1498580984;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(BlobKey key) throws IOException {_		return getFileInternal(null, key)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,blob,key,key,throws,ioexception,return,get,file,internal,null,key
BlobServer -> @Override 	public File getFile(BlobKey key) throws IOException;1499764760;Retrieves the local path of a (job-unrelated) file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(BlobKey key) throws IOException {_		return getFileInternal(null, key, false)__	};retrieves,the,local,path,of,a,job,unrelated,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,blob,key,key,throws,ioexception,return,get,file,internal,null,key,false
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1411563658;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1416240373;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423133296;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423154315;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423158142;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423478687;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423678101;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> static void writeLength(final int length, final byte[] buf, 							final OutputStream outputStream) throws IOException;1423847366;Auxiliary method to write the length of an upcoming data chunk to an_output stream.__@param length_the length of the upcoming data chunk in bytes_@param buf_the byte buffer to use for the integer serialization_@param outputStream_the output stream to write the length to_@throws IOException_thrown if an I/O error occurs while writing to the output_stream;static void writeLength(final int length, final byte[] buf,_							final OutputStream outputStream) throws IOException {__		buf[0] = (byte) (length & 0xff)__		buf[1] = (byte) ((length >> 8) & 0xff)__		buf[2] = (byte) ((length >> 16) & 0xff)__		buf[3] = (byte) ((length >> 24) & 0xff)___		outputStream.write(buf, 0, 4)__	};auxiliary,method,to,write,the,length,of,an,upcoming,data,chunk,to,an,output,stream,param,length,the,length,of,the,upcoming,data,chunk,in,bytes,param,buf,the,byte,buffer,to,use,for,the,integer,serialization,param,output,stream,the,output,stream,to,write,the,length,to,throws,ioexception,thrown,if,an,i,o,error,occurs,while,writing,to,the,output,stream;static,void,write,length,final,int,length,final,byte,buf,final,output,stream,output,stream,throws,ioexception,buf,0,byte,length,0xff,buf,1,byte,length,8,0xff,buf,2,byte,length,16,0xff,buf,3,byte,length,24,0xff,output,stream,write,buf,0,4
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1501156573;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1505901925;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				BlobUtils.moveTempFileToStore(_					incomingFile, jobId, blobKey, localFile, readWriteLock.writeLock(), LOG, null)___				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,read,write,lock,write,lock,log,null,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1507188807;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1507209538;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1507284174;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508535554;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1508581881;Helper to retrieve the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown._<p>_<strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1513599733;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1513603142;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1516793657;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1519384290;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1526540287;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1531387737;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException;1531408830;Helper to retrieve the local path of a file associated with a job and a blob key.__<p>The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__<p><strong>Assumes the read lock has already been acquired.</strong>__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param blobKey_blob key associated with the requested file_@param localFile_(local) file where the blob is/should be stored__@throws IOException_Thrown if the file retrieval failed.;void getFileInternal(@Nullable JobID jobId, BlobKey blobKey, File localFile) throws IOException {_		__		if (localFile.exists()) {_			_			if (blobKey instanceof TransientBlobKey) {_				_				_				_				blobExpiryTimes_					.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_						System.currentTimeMillis() + cleanupInterval)__			}_			return__		} else if (blobKey instanceof PermanentBlobKey) {_			_			_			readWriteLock.readLock().unlock()___			_			File incomingFile = null__			try {_				incomingFile = createTemporaryFilename()__				blobStore.get(jobId, blobKey, incomingFile)___				readWriteLock.writeLock().lock()__				try {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, localFile, LOG, null)__				} finally {_					readWriteLock.writeLock().unlock()__				}__				return__			} finally {_				_				if (incomingFile != null && !incomingFile.delete() && incomingFile.exists()) {_					LOG.warn("Could not delete the staging file {} for blob key {} and job {}.",_						incomingFile, blobKey, jobId)__				}__				_				readWriteLock.readLock().lock()__			}_		}__		throw new FileNotFoundException("Local file " + localFile + " does not exist " +_			"and failed to copy from blob store.")__	};helper,to,retrieve,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,p,strong,assumes,the,read,lock,has,already,been,acquired,strong,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,blob,key,blob,key,associated,with,the,requested,file,param,local,file,local,file,where,the,blob,is,should,be,stored,throws,ioexception,thrown,if,the,file,retrieval,failed;void,get,file,internal,nullable,job,id,job,id,blob,key,blob,key,file,local,file,throws,ioexception,if,local,file,exists,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,else,if,blob,key,instanceof,permanent,blob,key,read,write,lock,read,lock,unlock,file,incoming,file,null,try,incoming,file,create,temporary,filename,blob,store,get,job,id,blob,key,incoming,file,read,write,lock,write,lock,lock,try,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,local,file,log,null,finally,read,write,lock,write,lock,unlock,return,finally,if,incoming,file,null,incoming,file,delete,incoming,file,exists,log,warn,could,not,delete,the,staging,file,for,blob,key,and,job,incoming,file,blob,key,job,id,read,write,lock,read,lock,lock,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException;1498061083;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param requiredBlob_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, requiredBlob)___		if (localFile.exists()) {_			return localFile__		}_		else {_			try {_				_				blobStore.get(jobId, requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException(_					"Failed to copy BLOB " + requiredBlob + " from blob store to " + localFile, e)__			}__			if (localFile.exists()) {_				return localFile__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,required,blob,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,required,blob,if,local,file,exists,return,local,file,else,try,blob,store,get,job,id,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,blob,required,blob,from,blob,store,to,local,file,e,if,local,file,exists,return,local,file,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException;1498580984;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to (or <tt>null</tt> if job-unrelated)_@param requiredBlob_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;private File getFileInternal(@Nullable JobID jobId, BlobKey requiredBlob) throws IOException {_		checkArgument(requiredBlob != null, "BLOB key cannot be null.")___		final File localFile = BlobUtils.getStorageLocation(storageDir, jobId, requiredBlob)___		if (localFile.exists()) {_			return localFile__		}_		else {_			try {_				_				blobStore.get(jobId, requiredBlob, localFile)__			}_			catch (Exception e) {_				throw new IOException(_					"Failed to copy BLOB " + requiredBlob + " from blob store to " + localFile, e)__			}__			if (localFile.exists()) {_				return localFile__			}_			else {_				throw new FileNotFoundException("Local file " + localFile + " does not exist " +_						"and failed to copy from blob store.")__			}_		}_	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,required,blob,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;private,file,get,file,internal,nullable,job,id,job,id,blob,key,required,blob,throws,ioexception,check,argument,required,blob,null,blob,key,cannot,be,null,final,file,local,file,blob,utils,get,storage,location,storage,dir,job,id,required,blob,if,local,file,exists,return,local,file,else,try,blob,store,get,job,id,required,blob,local,file,catch,exception,e,throw,new,ioexception,failed,to,copy,blob,required,blob,from,blob,store,to,local,file,e,if,local,file,exists,return,local,file,else,throw,new,file,not,found,exception,local,file,local,file,does,not,exist,and,failed,to,copy,from,blob,store
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1426258431;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1427213093;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1435313259;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1444048246;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1445511506;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1448294150;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1448555925;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1456831411;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1459870195;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1465376364;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1465394479;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1468506589;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1470734292;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1471870754;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1476307516;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1476631755;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1479815343;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1483724578;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1484214553;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1488888321;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1494318397;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1494404779;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1494430729;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1497603064;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1498054455;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1498061083;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1498580984;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<BlobServerConnection>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,blob,server,connection,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1499764760;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1501156573;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1505901925;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1507188807;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1507209538;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1507284174;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508535554;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1508581881;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1513599733;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1513603142;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1516793657;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1519384290;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1526540287;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1531387737;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> List<BlobServerConnection> getCurrentActiveConnections();1531408830;Returns all the current active connections in the BlobServer.__@return the list of all the active in current BlobServer;List<BlobServerConnection> getCurrentActiveConnections() {_		synchronized (activeConnections) {_			return new ArrayList<>(activeConnections)__		}_	};returns,all,the,current,active,connections,in,the,blob,server,return,the,list,of,all,the,active,in,current,blob,server;list,blob,server,connection,get,current,active,connections,synchronized,active,connections,return,new,array,list,active,connections
BlobServer -> public File getStorageLocation(JobID jobID, String key);1411563658;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1416240373;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423133296;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423154315;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423158142;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423478687;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key){_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423678101;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1423847366;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1424258195;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1426258431;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1427213093;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> public File getStorageLocation(JobID jobID, String key);1435313259;Returns a file handle to the file identified by the given jobID and key.__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;public File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;public,file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1501156573;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1507209538;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1507284174;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508535554;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1508581881;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1513599733;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1513603142;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1516793657;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1519384290;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1526540287;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1531387737;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> @VisibleForTesting 	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes();1531408830;Returns the blob expiry times - for testing purposes only!__@return blob expiry times (internal state!);@VisibleForTesting_	ConcurrentMap<Tuple2<JobID, TransientBlobKey>, Long> getBlobExpiryTimes() {_		return blobExpiryTimes__	};returns,the,blob,expiry,times,for,testing,purposes,only,return,blob,expiry,times,internal,state;visible,for,testing,concurrent,map,tuple2,job,id,transient,blob,key,long,get,blob,expiry,times,return,blob,expiry,times
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1501156573;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1505901925;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1507188807;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1507209538;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1507284174;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException;1508535554;Uploads the data from the given input stream for the given job to the BLOB server and makes it_a permanent BLOB.__@param jobId_ID of the job this blob belongs to_@param inputStream_the input stream to read the data from__@return the computed BLOB key identifying the BLOB on the server__@throws IOException_thrown if an I/O error occurs while reading the data from the input stream, writing it to a_local file, or uploading it to the HA store;public PermanentBlobKey putPermanent(JobID jobId, InputStream inputStream) throws IOException {_		checkNotNull(jobId)__		return (PermanentBlobKey) putInputStream(jobId, inputStream, PERMANENT_BLOB)__	};uploads,the,data,from,the,given,input,stream,for,the,given,job,to,the,blob,server,and,makes,it,a,permanent,blob,param,job,id,id,of,the,job,this,blob,belongs,to,param,input,stream,the,input,stream,to,read,the,data,from,return,the,computed,blob,key,identifying,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,the,data,from,the,input,stream,writing,it,to,a,local,file,or,uploading,it,to,the,ha,store;public,permanent,blob,key,put,permanent,job,id,job,id,input,stream,input,stream,throws,ioexception,check,not,null,job,id,return,permanent,blob,key,put,input,stream,job,id,input,stream
BlobServer -> @Override 	public final int getMinOffloadingSize();1508581881;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1513599733;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1513603142;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1516793657;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1519384290;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1526540287;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1531387737;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> @Override 	public final int getMinOffloadingSize();1531408830;Returns the configuration used by the BLOB server.__@return configuration;@Override_	public final int getMinOffloadingSize() {_		return blobServiceConfiguration.getInteger(BlobServerOptions.OFFLOAD_MINSIZE)__	};returns,the,configuration,used,by,the,blob,server,return,configuration;override,public,final,int,get,min,offloading,size,return,blob,service,configuration,get,integer,blob,server,options
BlobServer -> File getStorageLocation(JobID jobID, String key);1444048246;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1445511506;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1448294150;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1448555925;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1456831411;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1459870195;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1465376364;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1465394479;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1468506589;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1470734292;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1471870754;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1476307516;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1476631755;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1479815343;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1483724578;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1484214553;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1488888321;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1494318397;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1494404779;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> File getStorageLocation(JobID jobID, String key);1494430729;Returns a file handle to the file identified by the given jobID and key.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID to which the file is associated_@param key to identify the file within the job context_@return file handle to the file;File getStorageLocation(JobID jobID, String key) {_		return BlobUtils.getStorageLocation(storageDir, jobID, key)__	};returns,a,file,handle,to,the,file,identified,by,the,given,job,id,and,key,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,to,which,the,file,is,associated,param,key,to,identify,the,file,within,the,job,context,return,file,handle,to,the,file;file,get,storage,location,job,id,job,id,string,key,return,blob,utils,get,storage,location,storage,dir,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, BlobKey key) throws IOException;1498580984;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, BlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key
BlobServer -> @Override 	public File getFile(JobID jobId, BlobKey key) throws IOException;1499764760;Retrieves the local path of a file associated with a job and a blob key._<p>_The blob server looks the blob key up in its local storage. If the file exists, it is_returned. If the file does not exist, it is retrieved from the HA blob store (if available)_or a {@link FileNotFoundException} is thrown.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the requested file__@return file referring to the local storage location of the BLOB__@throws IOException_Thrown if the file retrieval failed.;@Override_	public File getFile(JobID jobId, BlobKey key) throws IOException {_		checkNotNull(jobId)__		return getFileInternal(jobId, key, false)__	};retrieves,the,local,path,of,a,file,associated,with,a,job,and,a,blob,key,p,the,blob,server,looks,the,blob,key,up,in,its,local,storage,if,the,file,exists,it,is,returned,if,the,file,does,not,exist,it,is,retrieved,from,the,ha,blob,store,if,available,or,a,link,file,not,found,exception,is,thrown,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,requested,file,return,file,referring,to,the,local,storage,location,of,the,blob,throws,ioexception,thrown,if,the,file,retrieval,failed;override,public,file,get,file,job,id,job,id,blob,key,key,throws,ioexception,check,not,null,job,id,return,get,file,internal,job,id,key,false
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1501156573;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1507188807;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1507209538;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1507284174;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508535554;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1508581881;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1513599733;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1513603142;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1516793657;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1519384290;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1526540287;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1531387737;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> BlobKey moveTempFileToStore( 			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType) 			throws IOException;1531408830;Moves the temporary <tt>incomingFile</tt> to its permanent location where it is available for_use.__@param incomingFile_temporary file created during transfer_@param jobId_ID of the job this blob belongs to or <tt>null</tt> if job-unrelated_@param digest_BLOB content digest, i.e. hash_@param blobType_whether this file is a permanent or transient BLOB__@return unique BLOB key that identifies the BLOB on the server__@throws IOException_thrown if an I/O error occurs while moving the file or uploading it to the HA store;BlobKey moveTempFileToStore(_			File incomingFile, @Nullable JobID jobId, byte[] digest, BlobKey.BlobType blobType)_			throws IOException {__		int retries = 10___		int attempt = 0__		while (true) {_			_			BlobKey blobKey = BlobKey.createKey(blobType, digest)__			File storageFile = BlobUtils.getStorageLocation(storageDir, jobId, blobKey)___			_			readWriteLock.writeLock().lock()__			try {_				if (!storageFile.exists()) {_					BlobUtils.moveTempFileToStore(_						incomingFile, jobId, blobKey, storageFile, LOG,_						blobKey instanceof PermanentBlobKey ? blobStore : null)__					_					if (blobKey instanceof TransientBlobKey) {_						_						blobExpiryTimes_							.put(Tuple2.of(jobId, (TransientBlobKey) blobKey),_								System.currentTimeMillis() + cleanupInterval)__					}_					return blobKey__				}_			} finally {_				readWriteLock.writeLock().unlock()__			}__			++attempt__			if (attempt >= retries) {_				String message = "Failed to find a unique key for BLOB of job " + jobId + " (last tried " + storageFile.getAbsolutePath() + "."__				LOG.error(message + " No retries left.")__				throw new IOException(message)__			} else {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Trying to find a unique key for BLOB of job {} (retry {}, last tried {})",_						jobId, attempt, storageFile.getAbsolutePath())__				}_			}_		}_	};moves,the,temporary,tt,incoming,file,tt,to,its,permanent,location,where,it,is,available,for,use,param,incoming,file,temporary,file,created,during,transfer,param,job,id,id,of,the,job,this,blob,belongs,to,or,tt,null,tt,if,job,unrelated,param,digest,blob,content,digest,i,e,hash,param,blob,type,whether,this,file,is,a,permanent,or,transient,blob,return,unique,blob,key,that,identifies,the,blob,on,the,server,throws,ioexception,thrown,if,an,i,o,error,occurs,while,moving,the,file,or,uploading,it,to,the,ha,store;blob,key,move,temp,file,to,store,file,incoming,file,nullable,job,id,job,id,byte,digest,blob,key,blob,type,blob,type,throws,ioexception,int,retries,10,int,attempt,0,while,true,blob,key,blob,key,blob,key,create,key,blob,type,digest,file,storage,file,blob,utils,get,storage,location,storage,dir,job,id,blob,key,read,write,lock,write,lock,lock,try,if,storage,file,exists,blob,utils,move,temp,file,to,store,incoming,file,job,id,blob,key,storage,file,log,blob,key,instanceof,permanent,blob,key,blob,store,null,if,blob,key,instanceof,transient,blob,key,blob,expiry,times,put,tuple2,of,job,id,transient,blob,key,blob,key,system,current,time,millis,cleanup,interval,return,blob,key,finally,read,write,lock,write,lock,unlock,attempt,if,attempt,retries,string,message,failed,to,find,a,unique,key,for,blob,of,job,job,id,last,tried,storage,file,get,absolute,path,log,error,message,no,retries,left,throw,new,ioexception,message,else,if,log,is,debug,enabled,log,debug,trying,to,find,a,unique,key,for,blob,of,job,retry,last,tried,job,id,attempt,storage,file,get,absolute,path
BlobServer -> @Override 	public void shutdown() throws IOException;1411563658;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1416240373;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423133296;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423154315;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423158142;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {__		this.shutdownRequested = true__		try {_			this.serverSocket.close()__		} catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__		}_		try {_			join()__		} catch (InterruptedException ie) {_			LOG.debug("Error while waiting for this thread to die.", ie)__		}__		_		FileUtils.deleteDirectory(storageDir)___		_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,this,shutdown,requested,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir
BlobServer -> @Override 	public void shutdown() throws IOException;1423478687;Shuts down the BLOB server.;@Override_	public void shutdown() throws IOException {_		if (shutdownRequested.compareAndSet(false, true)) {_			try {_				this.serverSocket.close()__			}_			catch (IOException ioe) {_				LOG.debug("Error while closing the server socket.", ioe)__			}_			try {_				join()__			}_			catch (InterruptedException ie) {_				LOG.debug("Error while waiting for this thread to die.", ie)__			}__			_			FileUtils.deleteDirectory(storageDir)___			_			Runtime.getRuntime().removeShutdownHook(shutdownHook)___			_		}_	};shuts,down,the,blob,server;override,public,void,shutdown,throws,ioexception,if,shutdown,requested,compare,and,set,false,true,try,this,server,socket,close,catch,ioexception,ioe,log,debug,error,while,closing,the,server,socket,ioe,try,join,catch,interrupted,exception,ie,log,debug,error,while,waiting,for,this,thread,to,die,ie,file,utils,delete,directory,storage,dir,runtime,get,runtime,remove,shutdown,hook,shutdown,hook
BlobServer -> public boolean isShutdown();1424258195;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1426258431;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1427213093;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1435313259;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1444048246;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1445511506;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1448294150;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1448555925;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1456831411;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1459870195;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1465376364;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1465394479;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1468506589;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1470734292;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1471870754;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1476307516;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1476631755;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1479815343;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1483724578;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1484214553;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1488888321;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1494318397;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1494404779;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1494430729;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1497603064;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1498054455;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1498061083;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1498580984;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1499764760;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1501156573;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1505901925;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1507188807;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1507209538;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1507284174;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508535554;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1508581881;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1513599733;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1513603142;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1516793657;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1519384290;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1526540287;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1531387737;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> public boolean isShutdown();1531408830;Tests whether the BLOB server has been requested to shut down.__@return True, if the server has been requested to shut down, false otherwise.;public boolean isShutdown() {_		return this.shutdownRequested.get()__	};tests,whether,the,blob,server,has,been,requested,to,shut,down,return,true,if,the,server,has,been,requested,to,shut,down,false,otherwise;public,boolean,is,shutdown,return,this,shutdown,requested,get
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1411563658;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1416240373;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423133296;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423154315;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423158142;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423478687;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423678101;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> static int readLength(final byte[] buf, final InputStream inputStream) 			throws IOException;1423847366;Auxiliary method to read the length of an upcoming data chunk from an_input stream.__@param buf_the byte buffer to use for the integer deserialization_@param inputStream_the input stream to read the length from_@return the length of the upcoming data chunk in bytes_@throws IOException_thrown if an I/O error occurs while reading from the input_stream;static int readLength(final byte[] buf, final InputStream inputStream)_			throws IOException {__		int bytesRead = 0__		while (bytesRead < 4) {_			final int read = inputStream.read(buf, bytesRead, 4 - bytesRead)__			if (read < 0) {_				throw new EOFException()__			}_			bytesRead += read__		}__		bytesRead = buf[0] & 0xff__		bytesRead |= (buf[1] & 0xff) << 8__		bytesRead |= (buf[2] & 0xff) << 16__		bytesRead |= (buf[3] & 0xff) << 24___		return bytesRead__	};auxiliary,method,to,read,the,length,of,an,upcoming,data,chunk,from,an,input,stream,param,buf,the,byte,buffer,to,use,for,the,integer,deserialization,param,input,stream,the,input,stream,to,read,the,length,from,return,the,length,of,the,upcoming,data,chunk,in,bytes,throws,ioexception,thrown,if,an,i,o,error,occurs,while,reading,from,the,input,stream;static,int,read,length,final,byte,buf,final,input,stream,input,stream,throws,ioexception,int,bytes,read,0,while,bytes,read,4,final,int,read,input,stream,read,buf,bytes,read,4,bytes,read,if,read,0,throw,new,eofexception,bytes,read,read,bytes,read,buf,0,0xff,bytes,read,buf,1,0xff,8,bytes,read,buf,2,0xff,16,bytes,read,buf,3,0xff,24,return,bytes,read
BlobServer -> public ReadWriteLock getReadWriteLock();1483724578;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1494430729;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1497603064;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1498054455;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1498061083;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public ReadWriteLock getReadWriteLock();1498580984;Returns the lock used to guard file accesses;public ReadWriteLock getReadWriteLock() {_		return readWriteLock__	};returns,the,lock,used,to,guard,file,accesses;public,read,write,lock,get,read,write,lock,return,read,write,lock
BlobServer -> public boolean cleanupJob(JobID jobId);1499764760;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1501156573;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1505901925;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1507188807;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1507209538;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1507284174;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508535554;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1508581881;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1513599733;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1513603142;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1516793657;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId);1519384290;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			boolean deletedHA = blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,boolean,deleted,ha,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public int getServerPort();1411563658;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1416240373;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423133296;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423154315;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423158142;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423478687;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {__		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423678101;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> public int getServerPort();1423847366;Returns the network port the BLOB server is bound to. The return value of this method is undefined after the BLOB_server has been shut down.__@return the network port the BLOB server is bound to;public int getServerPort() {_		return this.serverSocket.getLocalPort()__	};returns,the,network,port,the,blob,server,is,bound,to,the,return,value,of,this,method,is,undefined,after,the,blob,server,has,been,shut,down,return,the,network,port,the,blob,server,is,bound,to;public,int,get,server,port,return,this,server,socket,get,local,port
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1424258195;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1426258431;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1427213093;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1435313259;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1444048246;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1445511506;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1448294150;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1448555925;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1456831411;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1459870195;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1465376364;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1465394479;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1468506589;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1470734292;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1471870754;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1476307516;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1476631755;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1479815343;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1483724578;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1484214553;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1488888321;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1494318397;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1494404779;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		if (localFile.exists()) {_			if (!localFile.delete()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}_		}__		blobStore.delete(key)__	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1494430729;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (localFile.exists()) {_				if (!localFile.delete()) {_					LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__				}_			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,exists,if,local,file,delete,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1497603064;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1498054455;This method deletes the file associated to the blob key if it exists in the local storage_of the blob server.__@param key associated with the file to be deleted_@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		final File localFile = BlobUtils.getStorageLocation(storageDir, key)___		readWriteLock.writeLock().lock()___		try {_			if (!localFile.delete() && localFile.exists()) {_				LOG.warn("Failed to delete locally BLOB " + key + " at " + localFile.getAbsolutePath())__			}__			blobStore.delete(key)__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};this,method,deletes,the,file,associated,to,the,blob,key,if,it,exists,in,the,local,storage,of,the,blob,server,param,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,final,file,local,file,blob,utils,get,storage,location,storage,dir,key,read,write,lock,write,lock,lock,try,if,local,file,delete,local,file,exists,log,warn,failed,to,delete,locally,blob,key,at,local,file,get,absolute,path,blob,store,delete,key,finally,read,write,lock,write,lock,unlock
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1498061083;Deletes the (job-unrelated) file associated with the blob key in both the local storage as_well as in the HA store of the blob server.__@param key_blob key associated with the file to be deleted__@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,delete,internal,null,key
BlobServer -> @Override 	public void delete(BlobKey key) throws IOException;1498580984;Deletes the (job-unrelated) file associated with the blob key in both the local storage as_well as in the HA store of the blob server.__@param key_blob key associated with the file to be deleted__@throws IOException;@Override_	public void delete(BlobKey key) throws IOException {_		deleteInternal(null, key)__	};deletes,the,job,unrelated,file,associated,with,the,blob,key,in,both,the,local,storage,as,well,as,in,the,ha,store,of,the,blob,server,param,key,blob,key,associated,with,the,file,to,be,deleted,throws,ioexception;override,public,void,delete,blob,key,key,throws,ioexception,delete,internal,null,key
BlobServer -> public BlobServer() throws IOException;1411563658;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {__		this.serverSocket = new ServerSocket(0)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info(String.format("Started BLOB server on port %d",_				this.serverSocket.getLocalPort()))__		}__		this.storageDir = BlobUtils.initStorageDirectory()__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory
BlobServer -> public BlobServer() throws IOException;1416240373;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {__		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()__		}catch(IOException e){_			throw new IOException("Could not create BlobServer with random port.", e)__		}__	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423133296;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423154315;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)___			_			BlobUtils.addDeleteDirectoryShutdownHook(storageDir)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,blob,utils,add,delete,directory,shutdown,hook,storage,dir,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423158142;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)___			_			BlobUtils.addDeleteDirectoryShutdownHook(storageDir, LOG)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,blob,utils,add,delete,directory,shutdown,hook,storage,dir,log,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public BlobServer() throws IOException;1423478687;Instantiates a new BLOB server and binds it to a free network port.__@throws IOException_thrown if the BLOB server cannot bind to a free network port;public BlobServer() throws IOException {_		try {_			this.serverSocket = new ServerSocket(0)___			start()___			if (LOG.isInfoEnabled()) {_				LOG.info(String.format("Started BLOB server on port %d",_						this.serverSocket.getLocalPort()))__			}__			this.storageDir = BlobUtils.initStorageDirectory()___			LOG.info("Created BLOB server storage directory " + storageDir)___			shutdownHook = BlobUtils.addShutdownHook(this, LOG)__		}_		catch (IOException e) {_			throw new IOException("Could not create BlobServer with random port.", e)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port;public,blob,server,throws,ioexception,try,this,server,socket,new,server,socket,0,start,if,log,is,info,enabled,log,info,string,format,started,blob,server,on,port,d,this,server,socket,get,local,port,this,storage,dir,blob,utils,init,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,shutdown,hook,blob,utils,add,shutdown,hook,this,log,catch,ioexception,e,throw,new,ioexception,could,not,create,blob,server,with,random,port,e
BlobServer -> public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles);1526540287;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to_@param cleanupBlobStoreFiles_True if the corresponding blob store files shall be cleaned up as well. Otherwise false.__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			final boolean deletedHA = !cleanupBlobStoreFiles || blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,param,cleanup,blob,store,files,true,if,the,corresponding,blob,store,files,shall,be,cleaned,up,as,well,otherwise,false,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,boolean,cleanup,blob,store,files,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,final,boolean,deleted,ha,cleanup,blob,store,files,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles);1531387737;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to_@param cleanupBlobStoreFiles_True if the corresponding blob store files shall be cleaned up as well. Otherwise false.__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			final boolean deletedHA = !cleanupBlobStoreFiles || blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,param,cleanup,blob,store,files,true,if,the,corresponding,blob,store,files,shall,be,cleaned,up,as,well,otherwise,false,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,boolean,cleanup,blob,store,files,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,final,boolean,deleted,ha,cleanup,blob,store,files,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles);1531408830;Removes all BLOBs from local and HA store belonging to the given job ID.__@param jobId_ID of the job this blob belongs to_@param cleanupBlobStoreFiles_True if the corresponding blob store files shall be cleaned up as well. Otherwise false.__@return  <tt>true</tt> if the job directory is successfully deleted or non-existing__<tt>false</tt> otherwise;public boolean cleanupJob(JobID jobId, boolean cleanupBlobStoreFiles) {_		checkNotNull(jobId)___		final File jobDir =_			new File(BlobUtils.getStorageLocationPath(storageDir.getAbsolutePath(), jobId))___		readWriteLock.writeLock().lock()___		try {_			_			boolean deletedLocally = false__			try {_				FileUtils.deleteDirectory(jobDir)___				_				_				_				__				deletedLocally = true__			} catch (IOException e) {_				LOG.warn("Failed to locally delete BLOB storage directory at " +_					jobDir.getAbsolutePath(), e)__			}__			_			final boolean deletedHA = !cleanupBlobStoreFiles || blobStore.deleteAll(jobId)___			return deletedLocally && deletedHA__		} finally {_			readWriteLock.writeLock().unlock()__		}_	};removes,all,blobs,from,local,and,ha,store,belonging,to,the,given,job,id,param,job,id,id,of,the,job,this,blob,belongs,to,param,cleanup,blob,store,files,true,if,the,corresponding,blob,store,files,shall,be,cleaned,up,as,well,otherwise,false,return,tt,true,tt,if,the,job,directory,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;public,boolean,cleanup,job,job,id,job,id,boolean,cleanup,blob,store,files,check,not,null,job,id,final,file,job,dir,new,file,blob,utils,get,storage,location,path,storage,dir,get,absolute,path,job,id,read,write,lock,write,lock,lock,try,boolean,deleted,locally,false,try,file,utils,delete,directory,job,dir,deleted,locally,true,catch,ioexception,e,log,warn,failed,to,locally,delete,blob,storage,directory,at,job,dir,get,absolute,path,e,final,boolean,deleted,ha,cleanup,blob,store,files,blob,store,delete,all,job,id,return,deleted,locally,deleted,ha,finally,read,write,lock,write,lock,unlock
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1483724578;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1494318397;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1494430729;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1497603064;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1498054455;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1498061083;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1498580984;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)__		start()___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,start,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1499764760;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1501156573;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1505901925;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1507188807;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1507209538;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1507284174;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508535554;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1508581881;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if(socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: "+serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1513599733;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		String storageDirectory = config.getString(BlobServerOptions.STORAGE_DIRECTORY)__		this.storageDir = BlobUtils.initLocalStorageDirectory(storageDirectory)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,string,storage,directory,config,get,string,blob,server,options,this,storage,dir,blob,utils,init,local,storage,directory,storage,directory,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1513603142;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1516793657;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = BlobUtils.addShutdownHook(this, LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,blob,utils,add,shutdown,hook,this,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1519384290;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1526540287;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		if (config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				serverSSLContext = SSLUtils.createSSLServerContext(config)__			} catch (Exception e) {_				throw new IOException("Failed to initialize SSLContext for the blob server", e)__			}_		} else {_			serverSSLContext = null__		}__		__		String serverPortRange = config.getString(BlobServerOptions.PORT)___		Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final int finalBacklog = backlog__		ServerSocket socketAttempt = NetUtils.createSocketFromPorts(ports, new NetUtils.SocketFactory() {_			@Override_			public ServerSocket createSocket(int port) throws IOException {_				if (serverSSLContext == null) {_					return new ServerSocket(port, finalBacklog)__				} else {_					LOG.info("Enabling ssl for the blob server")__					return serverSSLContext.getServerSocketFactory().createServerSocket(port, finalBacklog)__				}_			}_		})___		if (socketAttempt == null) {_			throw new IOException("Unable to allocate socket for blob server in specified port range: " + serverPortRange)__		} else {_			SSLUtils.setSSLVerAndCipherSuites(socketAttempt, config)__			this.serverSocket = socketAttempt__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,if,config,get,boolean,blob,server,options,try,server,sslcontext,sslutils,create,sslserver,context,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,sslcontext,for,the,blob,server,e,else,server,sslcontext,null,string,server,port,range,config,get,string,blob,server,options,port,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,int,final,backlog,backlog,server,socket,socket,attempt,net,utils,create,socket,from,ports,ports,new,net,utils,socket,factory,override,public,server,socket,create,socket,int,port,throws,ioexception,if,server,sslcontext,null,return,new,server,socket,port,final,backlog,else,log,info,enabling,ssl,for,the,blob,server,return,server,sslcontext,get,server,socket,factory,create,server,socket,port,final,backlog,if,socket,attempt,null,throw,new,ioexception,unable,to,allocate,socket,for,blob,server,in,specified,port,range,server,port,range,else,sslutils,set,sslver,and,cipher,suites,socket,attempt,config,this,server,socket,socket,attempt,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1531387737;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		__		final String serverPortRange = config.getString(BlobServerOptions.PORT)__		final Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final ServerSocketFactory socketFactory__		if (config.getBoolean(SecurityOptions.SSL_ENABLED) && config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				socketFactory = SSLUtils.createSSLServerSocketFactory(config)__			}_			catch (Exception e) {_				throw new IOException("Failed to initialize SSL for the blob server", e)__			}_		}_		else {_			socketFactory = ServerSocketFactory.getDefault()__		}__		final int finalBacklog = backlog__		this.serverSocket = NetUtils.createSocketFromPorts(ports,_				(port) -> socketFactory.createServerSocket(port, finalBacklog))___		if (serverSocket == null) {_			throw new IOException("Unable to open BLOB Server in specified port range: " + serverPortRange)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,final,string,server,port,range,config,get,string,blob,server,options,port,final,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,server,socket,factory,socket,factory,if,config,get,boolean,security,options,config,get,boolean,blob,server,options,try,socket,factory,sslutils,create,sslserver,socket,factory,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,ssl,for,the,blob,server,e,else,socket,factory,server,socket,factory,get,default,final,int,final,backlog,backlog,this,server,socket,net,utils,create,socket,from,ports,ports,port,socket,factory,create,server,socket,port,final,backlog,if,server,socket,null,throw,new,ioexception,unable,to,open,blob,server,in,specified,port,range,server,port,range,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> public BlobServer(Configuration config, BlobStore blobStore) throws IOException;1531408830;Instantiates a new BLOB server and binds it to a free network port.__@param config Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently__@throws IOException_thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public BlobServer(Configuration config, BlobStore blobStore) throws IOException {_		this.blobServiceConfiguration = checkNotNull(config)__		this.blobStore = checkNotNull(blobStore)__		this.readWriteLock = new ReentrantReadWriteLock()___		_		this.storageDir = BlobUtils.initLocalStorageDirectory(config)__		LOG.info("Created BLOB server storage directory {}", storageDir)___		_		final int maxConnections = config.getInteger(BlobServerOptions.FETCH_CONCURRENT)__		if (maxConnections >= 1) {_			this.maxConnections = maxConnections__		}_		else {_			LOG.warn("Invalid value for maximum connections in BLOB server: {}. Using default value of {}",_					maxConnections, BlobServerOptions.FETCH_CONCURRENT.defaultValue())__			this.maxConnections = BlobServerOptions.FETCH_CONCURRENT.defaultValue()__		}__		_		int backlog = config.getInteger(BlobServerOptions.FETCH_BACKLOG)__		if (backlog < 1) {_			LOG.warn("Invalid value for BLOB connection backlog: {}. Using default value of {}",_					backlog, BlobServerOptions.FETCH_BACKLOG.defaultValue())__			backlog = BlobServerOptions.FETCH_BACKLOG.defaultValue()__		}__		_		this.cleanupTimer = new Timer(true)___		this.cleanupInterval = config.getLong(BlobServerOptions.CLEANUP_INTERVAL) * 1000__		this.cleanupTimer_			.schedule(new TransientBlobCleanupTask(blobExpiryTimes, readWriteLock.writeLock(),_				storageDir, LOG), cleanupInterval, cleanupInterval)___		this.shutdownHook = ShutdownHookUtil.addShutdownHook(this, getClass().getSimpleName(), LOG)___		__		final String serverPortRange = config.getString(BlobServerOptions.PORT)__		final Iterator<Integer> ports = NetUtils.getPortRangeFromString(serverPortRange)___		final ServerSocketFactory socketFactory__		if (SSLUtils.isInternalSSLEnabled(config) && config.getBoolean(BlobServerOptions.SSL_ENABLED)) {_			try {_				socketFactory = SSLUtils.createSSLServerSocketFactory(config)__			}_			catch (Exception e) {_				throw new IOException("Failed to initialize SSL for the blob server", e)__			}_		}_		else {_			socketFactory = ServerSocketFactory.getDefault()__		}__		final int finalBacklog = backlog__		this.serverSocket = NetUtils.createSocketFromPorts(ports,_				(port) -> socketFactory.createServerSocket(port, finalBacklog))___		if (serverSocket == null) {_			throw new IOException("Unable to open BLOB Server in specified port range: " + serverPortRange)__		}__		_		setName("BLOB Server listener at " + getPort())__		setDaemon(true)___		if (LOG.isInfoEnabled()) {_			LOG.info("Started BLOB server at {}:{} - max concurrent requests: {} - max backlog: {}",_					serverSocket.getInetAddress().getHostAddress(), getPort(), maxConnections, backlog)__		}_	};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,blob,server,configuration,config,blob,store,blob,store,throws,ioexception,this,blob,service,configuration,check,not,null,config,this,blob,store,check,not,null,blob,store,this,read,write,lock,new,reentrant,read,write,lock,this,storage,dir,blob,utils,init,local,storage,directory,config,log,info,created,blob,server,storage,directory,storage,dir,final,int,max,connections,config,get,integer,blob,server,options,if,max,connections,1,this,max,connections,max,connections,else,log,warn,invalid,value,for,maximum,connections,in,blob,server,using,default,value,of,max,connections,blob,server,options,default,value,this,max,connections,blob,server,options,default,value,int,backlog,config,get,integer,blob,server,options,if,backlog,1,log,warn,invalid,value,for,blob,connection,backlog,using,default,value,of,backlog,blob,server,options,default,value,backlog,blob,server,options,default,value,this,cleanup,timer,new,timer,true,this,cleanup,interval,config,get,long,blob,server,options,1000,this,cleanup,timer,schedule,new,transient,blob,cleanup,task,blob,expiry,times,read,write,lock,write,lock,storage,dir,log,cleanup,interval,cleanup,interval,this,shutdown,hook,shutdown,hook,util,add,shutdown,hook,this,get,class,get,simple,name,log,final,string,server,port,range,config,get,string,blob,server,options,port,final,iterator,integer,ports,net,utils,get,port,range,from,string,server,port,range,final,server,socket,factory,socket,factory,if,sslutils,is,internal,sslenabled,config,config,get,boolean,blob,server,options,try,socket,factory,sslutils,create,sslserver,socket,factory,config,catch,exception,e,throw,new,ioexception,failed,to,initialize,ssl,for,the,blob,server,e,else,socket,factory,server,socket,factory,get,default,final,int,final,backlog,backlog,this,server,socket,net,utils,create,socket,from,ports,ports,port,socket,factory,create,server,socket,port,final,backlog,if,server,socket,null,throw,new,ioexception,unable,to,open,blob,server,in,specified,port,range,server,port,range,set,name,blob,server,listener,at,get,port,set,daemon,true,if,log,is,info,enabled,log,info,started,blob,server,at,max,concurrent,requests,max,backlog,server,socket,get,inet,address,get,host,address,get,port,max,connections,backlog
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1444048246;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1445511506;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1448294150;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1448555925;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1456831411;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1459870195;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1465376364;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1465394479;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1468506589;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1470734292;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1471870754;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1476307516;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1476631755;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1479815343;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1483724578;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1484214553;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1488888321;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1494318397;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1494404779;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> void deleteJobDirectory(JobID jobID) throws IOException;1494430729;Method which deletes all files associated with the given jobID.__<p><strong>This is only called from the {@link BlobServerConnection}</strong>__@param jobID all files associated to this jobID will be deleted_@throws IOException;void deleteJobDirectory(JobID jobID) throws IOException {_		BlobUtils.deleteJobDirectory(storageDir, jobID)__	};method,which,deletes,all,files,associated,with,the,given,job,id,p,strong,this,is,only,called,from,the,link,blob,server,connection,strong,param,job,id,all,files,associated,to,this,job,id,will,be,deleted,throws,ioexception;void,delete,job,directory,job,id,job,id,throws,ioexception,blob,utils,delete,job,directory,storage,dir,job,id
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1501156573;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1505901925;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1507188807;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1507209538;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1507284174;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508535554;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1508581881;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1513599733;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1513603142;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1516793657;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1519384290;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1526540287;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1531387737;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
BlobServer -> @Override 	public boolean deleteFromCache(JobID jobId, TransientBlobKey key);1531408830;Deletes the file associated with the blob key in the local storage of the blob server.__@param jobId_ID of the job this blob belongs to_@param key_blob key associated with the file to be deleted__@return  <tt>true</tt> if the given blob is successfully deleted or non-existing__<tt>false</tt> otherwise;@Override_	public boolean deleteFromCache(JobID jobId, TransientBlobKey key) {_		checkNotNull(jobId)__		return deleteInternal(jobId, key)__	};deletes,the,file,associated,with,the,blob,key,in,the,local,storage,of,the,blob,server,param,job,id,id,of,the,job,this,blob,belongs,to,param,key,blob,key,associated,with,the,file,to,be,deleted,return,tt,true,tt,if,the,given,blob,is,successfully,deleted,or,non,existing,tt,false,tt,otherwise;override,public,boolean,delete,from,cache,job,id,job,id,transient,blob,key,key,check,not,null,job,id,return,delete,internal,job,id,key
