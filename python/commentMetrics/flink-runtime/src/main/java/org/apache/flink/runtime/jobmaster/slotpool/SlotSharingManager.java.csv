# id;timestamp;commentText;codeText;commentWords;codeWords
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences);1513261475;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param locationPreferences specifying which locations are preferred_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences) {_		Preconditions.checkNotNull(locationPreferences)___		final MultiTaskSlotLocality multiTaskSlotLocality___		if (locationPreferences.isEmpty()) {_			multiTaskSlotLocality = getResolvedRootSlotWithoutLocationPreferences(groupId)__		} else {_			multiTaskSlotLocality = getResolvedRootSlotWithLocationPreferences(groupId, locationPreferences)__		}__		return multiTaskSlotLocality__	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,location,preferences,specifying,which,locations,are,preferred,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,collection,task,manager,location,location,preferences,preconditions,check,not,null,location,preferences,final,multi,task,slot,locality,multi,task,slot,locality,if,location,preferences,is,empty,multi,task,slot,locality,get,resolved,root,slot,without,location,preferences,group,id,else,multi,task,slot,locality,get,resolved,root,slot,with,location,preferences,group,id,location,preferences,return,multi,task,slot,locality
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences);1519305029;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param locationPreferences specifying which locations are preferred_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences) {_		Preconditions.checkNotNull(locationPreferences)___		final MultiTaskSlotLocality multiTaskSlotLocality___		if (locationPreferences.isEmpty()) {_			multiTaskSlotLocality = getResolvedRootSlotWithoutLocationPreferences(groupId)__		} else {_			multiTaskSlotLocality = getResolvedRootSlotWithLocationPreferences(groupId, locationPreferences)__		}__		return multiTaskSlotLocality__	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,location,preferences,specifying,which,locations,are,preferred,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,collection,task,manager,location,location,preferences,preconditions,check,not,null,location,preferences,final,multi,task,slot,locality,multi,task,slot,locality,if,location,preferences,is,empty,multi,task,slot,locality,get,resolved,root,slot,without,location,preferences,group,id,else,multi,task,slot,locality,get,resolved,root,slot,with,location,preferences,group,id,location,preferences,return,multi,task,slot,locality
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences);1519310248;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param locationPreferences specifying which locations are preferred_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences) {_		Preconditions.checkNotNull(locationPreferences)___		final MultiTaskSlotLocality multiTaskSlotLocality___		if (locationPreferences.isEmpty()) {_			multiTaskSlotLocality = getResolvedRootSlotWithoutLocationPreferences(groupId)__		} else {_			multiTaskSlotLocality = getResolvedRootSlotWithLocationPreferences(groupId, locationPreferences)__		}__		return multiTaskSlotLocality__	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,location,preferences,specifying,which,locations,are,preferred,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,collection,task,manager,location,location,preferences,preconditions,check,not,null,location,preferences,final,multi,task,slot,locality,multi,task,slot,locality,if,location,preferences,is,empty,multi,task,slot,locality,get,resolved,root,slot,without,location,preferences,group,id,else,multi,task,slot,locality,get,resolved,root,slot,with,location,preferences,group,id,location,preferences,return,multi,task,slot,locality
SlotSharingManager -> TaskSlot -> public abstract boolean release(Throwable cause)_;1513261475;Release the task slot.__@param cause for the release_@return true if the slot could be released, otherwise false;public abstract boolean release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release,return,true,if,the,slot,could,be,released,otherwise,false;public,abstract,boolean,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract boolean release(Throwable cause)_;1517497348;Release the task slot.__@param cause for the release_@return true if the slot could be released, otherwise false;public abstract boolean release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release,return,true,if,the,slot,could,be,released,otherwise,false;public,abstract,boolean,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract boolean release(Throwable cause)_;1519305029;Release the task slot.__@param cause for the release_@return true if the slot could be released, otherwise false;public abstract boolean release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release,return,true,if,the,slot,could,be,released,otherwise,false;public,abstract,boolean,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract boolean release(Throwable cause)_;1519310248;Release the task slot.__@param cause for the release_@return true if the slot could be released, otherwise false;public abstract boolean release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release,return,true,if,the,slot,could,be,released,otherwise,false;public,abstract,boolean,release,throwable,cause
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1513261475;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1517497348;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1519305029;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1519310248;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1525533915;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1525872576;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1529678050;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1532000463;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		LOG.debug("Create multi task slot [{}] in slot [{}].", slotRequestId, allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		synchronized (lock) {_			unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)__		}__		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					synchronized (lock) {_						final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___						if (resolvedRootNode != null) {_							LOG.trace("Fulfill multi task slot [{}] with slot [{}].", slotRequestId, slotContext.getAllocationId())___							final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_								slotContext.getTaskManagerLocation(),_								taskManagerLocation -> new HashSet<>(4))___							innerCollection.add(resolvedRootNode)__						}_					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,log,debug,create,multi,task,slot,in,slot,slot,request,id,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,synchronized,lock,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,synchronized,lock,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,log,trace,fulfill,multi,task,slot,with,slot,slot,request,id,slot,context,get,allocation,id,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1532290273;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		LOG.debug("Create multi task slot [{}] in slot [{}].", slotRequestId, allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)___		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___					if (resolvedRootNode != null) {_						LOG.trace("Fulfill multi task slot [{}] with slot [{}].", slotRequestId, slotContext.getAllocationId())___						final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_							slotContext.getTaskManagerLocation(),_							taskManagerLocation -> new HashSet<>(4))___						innerCollection.add(resolvedRootNode)__					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,log,debug,create,multi,task,slot,in,slot,slot,request,id,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,log,trace,fulfill,multi,task,slot,with,slot,slot,request,id,slot,context,get,allocation,id,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot createRootSlot( 			SlotRequestId slotRequestId, 			CompletableFuture<? extends SlotContext> slotContextFuture, 			SlotRequestId allocatedSlotRequestId);1538764056;Creates a new root slot with the given {@link SlotRequestId}, {@link SlotContext} future and_the {@link SlotRequestId} of the allocated slot.__@param slotRequestId of the root slot_@param slotContextFuture with which we create the root slot_@param allocatedSlotRequestId slot request id of the underlying allocated slot which can be used_to cancel the pending slot request or release the allocated slot_@return New root slot;MultiTaskSlot createRootSlot(_			SlotRequestId slotRequestId,_			CompletableFuture<? extends SlotContext> slotContextFuture,_			SlotRequestId allocatedSlotRequestId) {_		final MultiTaskSlot rootMultiTaskSlot = new MultiTaskSlot(_			slotRequestId,_			slotContextFuture,_			allocatedSlotRequestId)___		LOG.debug("Create multi task slot [{}] in slot [{}].", slotRequestId, allocatedSlotRequestId)___		allTaskSlots.put(slotRequestId, rootMultiTaskSlot)___		unresolvedRootSlots.put(slotRequestId, rootMultiTaskSlot)___		_		_		slotContextFuture.whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (slotContext != null) {_					final MultiTaskSlot resolvedRootNode = unresolvedRootSlots.remove(slotRequestId)___					if (resolvedRootNode != null) {_						LOG.trace("Fulfill multi task slot [{}] with slot [{}].", slotRequestId, slotContext.getAllocationId())___						final Set<MultiTaskSlot> innerCollection = resolvedRootSlots.computeIfAbsent(_							slotContext.getTaskManagerLocation(),_							taskManagerLocation -> new HashSet<>(4))___						innerCollection.add(resolvedRootNode)__					}_				} else {_					rootMultiTaskSlot.release(throwable)__				}_			})___		return rootMultiTaskSlot__	};creates,a,new,root,slot,with,the,given,link,slot,request,id,link,slot,context,future,and,the,link,slot,request,id,of,the,allocated,slot,param,slot,request,id,of,the,root,slot,param,slot,context,future,with,which,we,create,the,root,slot,param,allocated,slot,request,id,slot,request,id,of,the,underlying,allocated,slot,which,can,be,used,to,cancel,the,pending,slot,request,or,release,the,allocated,slot,return,new,root,slot;multi,task,slot,create,root,slot,slot,request,id,slot,request,id,completable,future,extends,slot,context,slot,context,future,slot,request,id,allocated,slot,request,id,final,multi,task,slot,root,multi,task,slot,new,multi,task,slot,slot,request,id,slot,context,future,allocated,slot,request,id,log,debug,create,multi,task,slot,in,slot,slot,request,id,allocated,slot,request,id,all,task,slots,put,slot,request,id,root,multi,task,slot,unresolved,root,slots,put,slot,request,id,root,multi,task,slot,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,slot,context,null,final,multi,task,slot,resolved,root,node,unresolved,root,slots,remove,slot,request,id,if,resolved,root,node,null,log,trace,fulfill,multi,task,slot,with,slot,slot,request,id,slot,context,get,allocation,id,final,set,multi,task,slot,inner,collection,resolved,root,slots,compute,if,absent,slot,context,get,task,manager,location,task,manager,location,new,hash,set,4,inner,collection,add,resolved,root,node,else,root,multi,task,slot,release,throwable,return,root,multi,task,slot
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1513261475;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1517497348;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1519305029;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1519310248;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1525533915;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1525872576;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1529678050;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1532000463;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1532290273;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1538764056;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> MultiTaskSlot -> private void releaseChild(AbstractID childGroupId);1538764056;Releases the child with the given childGroupId.__@param childGroupId identifying the child to release;private void releaseChild(AbstractID childGroupId) {_			if (!releasingChildren) {_				TaskSlot child = children.remove(childGroupId)___				if (child != null) {_					allTaskSlots.remove(child.getSlotRequestId())__				}__				if (children.isEmpty()) {_					release(new FlinkException("Release multi task slot because all children have been released."))__				}_			}_		};releases,the,child,with,the,given,child,group,id,param,child,group,id,identifying,the,child,to,release;private,void,release,child,abstract,id,child,group,id,if,releasing,children,task,slot,child,children,remove,child,group,id,if,child,null,all,task,slots,remove,child,get,slot,request,id,if,children,is,empty,release,new,flink,exception,release,multi,task,slot,because,all,children,have,been,released
SlotSharingManager -> @Nullable 	private MultiTaskSlotLocality getResolvedRootSlotWithoutLocationPreferences(AbstractID groupId);1513261475;Gets a resolved slot which does not yet contain the given groupId without any location_preferences.__@param groupId which the returned slot must not contain_@return the resolved slot or null if there was no root slot with free capacities;@Nullable_	private MultiTaskSlotLocality getResolvedRootSlotWithoutLocationPreferences(AbstractID groupId) {_		Preconditions.checkNotNull(groupId)___		synchronized (lock) {_			for (Set<MultiTaskSlot> multiTaskSlots : resolvedRootSlots.values()) {_				for (MultiTaskSlot multiTaskSlot : multiTaskSlots) {_					if (!multiTaskSlot.contains(groupId)) {_						return MultiTaskSlotLocality.of(multiTaskSlot, Locality.UNCONSTRAINED)__					}_				}_			}_		}__		return null__	};gets,a,resolved,slot,which,does,not,yet,contain,the,given,group,id,without,any,location,preferences,param,group,id,which,the,returned,slot,must,not,contain,return,the,resolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,private,multi,task,slot,locality,get,resolved,root,slot,without,location,preferences,abstract,id,group,id,preconditions,check,not,null,group,id,synchronized,lock,for,set,multi,task,slot,multi,task,slots,resolved,root,slots,values,for,multi,task,slot,multi,task,slot,multi,task,slots,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,unconstrained,return,null
SlotSharingManager -> @Nullable 	private MultiTaskSlotLocality getResolvedRootSlotWithoutLocationPreferences(AbstractID groupId);1519305029;Gets a resolved slot which does not yet contain the given groupId without any location_preferences.__@param groupId which the returned slot must not contain_@return the resolved slot or null if there was no root slot with free capacities;@Nullable_	private MultiTaskSlotLocality getResolvedRootSlotWithoutLocationPreferences(AbstractID groupId) {_		Preconditions.checkNotNull(groupId)___		synchronized (lock) {_			for (Set<MultiTaskSlot> multiTaskSlots : resolvedRootSlots.values()) {_				for (MultiTaskSlot multiTaskSlot : multiTaskSlots) {_					if (!multiTaskSlot.contains(groupId)) {_						return MultiTaskSlotLocality.of(multiTaskSlot, Locality.UNCONSTRAINED)__					}_				}_			}_		}__		return null__	};gets,a,resolved,slot,which,does,not,yet,contain,the,given,group,id,without,any,location,preferences,param,group,id,which,the,returned,slot,must,not,contain,return,the,resolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,private,multi,task,slot,locality,get,resolved,root,slot,without,location,preferences,abstract,id,group,id,preconditions,check,not,null,group,id,synchronized,lock,for,set,multi,task,slot,multi,task,slots,resolved,root,slots,values,for,multi,task,slot,multi,task,slot,multi,task,slots,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,unconstrained,return,null
SlotSharingManager -> @Nullable 	private MultiTaskSlotLocality getResolvedRootSlotWithoutLocationPreferences(AbstractID groupId);1519310248;Gets a resolved slot which does not yet contain the given groupId without any location_preferences.__@param groupId which the returned slot must not contain_@return the resolved slot or null if there was no root slot with free capacities;@Nullable_	private MultiTaskSlotLocality getResolvedRootSlotWithoutLocationPreferences(AbstractID groupId) {_		Preconditions.checkNotNull(groupId)___		synchronized (lock) {_			for (Set<MultiTaskSlot> multiTaskSlots : resolvedRootSlots.values()) {_				for (MultiTaskSlot multiTaskSlot : multiTaskSlots) {_					if (!multiTaskSlot.contains(groupId)) {_						return MultiTaskSlotLocality.of(multiTaskSlot, Locality.UNCONSTRAINED)__					}_				}_			}_		}__		return null__	};gets,a,resolved,slot,which,does,not,yet,contain,the,given,group,id,without,any,location,preferences,param,group,id,which,the,returned,slot,must,not,contain,return,the,resolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,private,multi,task,slot,locality,get,resolved,root,slot,without,location,preferences,abstract,id,group,id,preconditions,check,not,null,group,id,synchronized,lock,for,set,multi,task,slot,multi,task,slots,resolved,root,slots,values,for,multi,task,slot,multi,task,slot,multi,task,slots,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,unconstrained,return,null
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1513261475;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1517497348;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1519305029;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1519310248;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1525533915;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1525872576;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1529678050;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1532000463;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create nested multi task slot [{}] in parent multi task slot [{}] for group [{}].", slotRequestId, getSlotRequestId(), groupId)___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,log,debug,create,nested,multi,task,slot,in,parent,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1532290273;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create nested multi task slot [{}] in parent multi task slot [{}] for group [{}].", slotRequestId, getSlotRequestId(), groupId)___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,log,debug,create,nested,multi,task,slot,in,parent,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1538764056;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create nested multi task slot [{}] in parent multi task slot [{}] for group [{}].", slotRequestId, getSlotRequestId(), groupId)___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,log,debug,create,nested,multi,task,slot,in,parent,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> MultiTaskSlot -> MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId);1538764056;Allocates a MultiTaskSlot and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new multi task slot_@param groupId under which the new multi task slot is registered_@return the newly allocated MultiTaskSlot;MultiTaskSlot allocateMultiTaskSlot(SlotRequestId slotRequestId, AbstractID groupId) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create nested multi task slot [{}] in parent multi task slot [{}] for group [{}].", slotRequestId, getSlotRequestId(), groupId)___			final MultiTaskSlot inner = new MultiTaskSlot(_				slotRequestId,_				groupId,_				this)___			children.put(groupId, inner)___			_			allTaskSlots.put(slotRequestId, inner)___			return inner__		};allocates,a,multi,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,multi,task,slot,param,group,id,under,which,the,new,multi,task,slot,is,registered,return,the,newly,allocated,multi,task,slot;multi,task,slot,allocate,multi,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,preconditions,check,state,super,contains,group,id,log,debug,create,nested,multi,task,slot,in,parent,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,multi,task,slot,inner,new,multi,task,slot,slot,request,id,group,id,this,children,put,group,id,inner,all,task,slots,put,slot,request,id,inner,return,inner
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1513261475;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1517497348;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1519305029;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1519310248;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1525533915;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1525872576;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1529678050;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1532000463;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		synchronized (lock) {_			for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_				if (!multiTaskSlot.contains(groupId)) {_					return multiTaskSlot__				}_			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,synchronized,lock,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1532290273;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_			if (!multiTaskSlot.contains(groupId)) {_				return multiTaskSlot__			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1538764056;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_			if (!multiTaskSlot.contains(groupId)) {_				return multiTaskSlot__			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> @Nullable 	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId);1538764056;Gets an unresolved slot which does not yet contain the given groupId. An unresolved_slot is a slot whose underlying allocated slot has not been allocated yet.__@param groupId which the returned slot must not contain_@return the unresolved slot or null if there was no root slot with free capacities;@Nullable_	MultiTaskSlot getUnresolvedRootSlot(AbstractID groupId) {_		for (MultiTaskSlot multiTaskSlot : unresolvedRootSlots.values()) {_			if (!multiTaskSlot.contains(groupId)) {_				return multiTaskSlot__			}_		}__		return null__	};gets,an,unresolved,slot,which,does,not,yet,contain,the,given,group,id,an,unresolved,slot,is,a,slot,whose,underlying,allocated,slot,has,not,been,allocated,yet,param,group,id,which,the,returned,slot,must,not,contain,return,the,unresolved,slot,or,null,if,there,was,no,root,slot,with,free,capacities;nullable,multi,task,slot,get,unresolved,root,slot,abstract,id,group,id,for,multi,task,slot,multi,task,slot,unresolved,root,slots,values,if,multi,task,slot,contains,group,id,return,multi,task,slot,return,null
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1525533915;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1525872576;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1529678050;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1532000463;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1532290273;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1538764056;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> TaskSlot -> public abstract void release(Throwable cause)_;1538764056;Release the task slot.__@param cause for the release;public abstract void release(Throwable cause)_;release,the,task,slot,param,cause,for,the,release;public,abstract,void,release,throwable,cause
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile);1529678050;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile) {_		synchronized (lock) {_			Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__			return matcher.findMatchWithLocality(_				slotProfile,_				resolvedRootSlotsValues.stream().flatMap(Collection::stream),_				(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_				(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_				MultiTaskSlotLocality::of)__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,scheduling,strategy,matcher,slot,profile,slot,profile,synchronized,lock,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,slot,profile,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile);1532000463;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile) {_		synchronized (lock) {_			Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__			return matcher.findMatchWithLocality(_				slotProfile,_				resolvedRootSlotsValues.stream().flatMap(Collection::stream),_				(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_				(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_				MultiTaskSlotLocality::of)__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,scheduling,strategy,matcher,slot,profile,slot,profile,synchronized,lock,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,slot,profile,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile);1532290273;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile) {_		Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__		return matcher.findMatchWithLocality(_			slotProfile,_			resolvedRootSlotsValues.stream().flatMap(Collection::stream),_			(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_			(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_			MultiTaskSlotLocality::of)__	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,scheduling,strategy,matcher,slot,profile,slot,profile,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,slot,profile,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile);1538764056;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SchedulingStrategy matcher, SlotProfile slotProfile) {_		Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__		return matcher.findMatchWithLocality(_			slotProfile,_			() -> resolvedRootSlotsValues.stream().flatMap(Collection::stream),_			(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_			(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_			MultiTaskSlotLocality::of)__	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,scheduling,strategy,matcher,slot,profile,slot,profile,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,slot,profile,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
SlotSharingManager -> @Nullable 	private MultiTaskSlotLocality getResolvedRootSlotWithLocationPreferences(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences);1513261475;Gets a resolved root slot which does not yet contain the given groupId. The method will try to_find a slot of a TaskManager contained in the collection of preferred locations. If there is no such slot_with free capacities available, then the method will look for slots of TaskManager which run on the same_machine as the TaskManager in the collection of preferred locations. If there is no such slot, then any slot_with free capacities is returned. If there is no such slot, then null is returned.__@param groupId which the returned slot must not contain_@param locationPreferences specifying which locations are preferred_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was not root slot which did not contain the given groupId;@Nullable_	private MultiTaskSlotLocality getResolvedRootSlotWithLocationPreferences(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences) {_		Preconditions.checkNotNull(groupId)__		Preconditions.checkNotNull(locationPreferences)__		final Set<String> hostnameSet = new HashSet<>(16)__		MultiTaskSlot nonLocalMultiTaskSlot = null___		synchronized (lock) {_			for (TaskManagerLocation locationPreference : locationPreferences) {_				final Set<MultiTaskSlot> multiTaskSlots = resolvedRootSlots.get(locationPreference)___				if (multiTaskSlots != null) {_					for (MultiTaskSlot multiTaskSlot : multiTaskSlots) {_						if (!multiTaskSlot.contains(groupId)) {_							return MultiTaskSlotLocality.of(multiTaskSlot, Locality.LOCAL)__						}_					}__					hostnameSet.add(locationPreference.getHostname())__				}_			}__			for (Map.Entry<TaskManagerLocation, Set<MultiTaskSlot>> taskManagerLocationSetEntry : resolvedRootSlots.entrySet()) {_				if (hostnameSet.contains(taskManagerLocationSetEntry.getKey().getHostname())) {_					for (MultiTaskSlot multiTaskSlot : taskManagerLocationSetEntry.getValue()) {_						if (!multiTaskSlot.contains(groupId)) {_							return MultiTaskSlotLocality.of(multiTaskSlot, Locality.HOST_LOCAL)__						}_					}_				} else if (nonLocalMultiTaskSlot == null) {_					for (MultiTaskSlot multiTaskSlot : taskManagerLocationSetEntry.getValue()) {_						if (!multiTaskSlot.contains(groupId)) {_							nonLocalMultiTaskSlot = multiTaskSlot__						}_					}_				}_			}_		}__		if (nonLocalMultiTaskSlot != null) {_			return MultiTaskSlotLocality.of(nonLocalMultiTaskSlot, Locality.NON_LOCAL)__		} else {_			return null__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,the,method,will,try,to,find,a,slot,of,a,task,manager,contained,in,the,collection,of,preferred,locations,if,there,is,no,such,slot,with,free,capacities,available,then,the,method,will,look,for,slots,of,task,manager,which,run,on,the,same,machine,as,the,task,manager,in,the,collection,of,preferred,locations,if,there,is,no,such,slot,then,any,slot,with,free,capacities,is,returned,if,there,is,no,such,slot,then,null,is,returned,param,group,id,which,the,returned,slot,must,not,contain,param,location,preferences,specifying,which,locations,are,preferred,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,not,root,slot,which,did,not,contain,the,given,group,id;nullable,private,multi,task,slot,locality,get,resolved,root,slot,with,location,preferences,abstract,id,group,id,collection,task,manager,location,location,preferences,preconditions,check,not,null,group,id,preconditions,check,not,null,location,preferences,final,set,string,hostname,set,new,hash,set,16,multi,task,slot,non,local,multi,task,slot,null,synchronized,lock,for,task,manager,location,location,preference,location,preferences,final,set,multi,task,slot,multi,task,slots,resolved,root,slots,get,location,preference,if,multi,task,slots,null,for,multi,task,slot,multi,task,slot,multi,task,slots,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,local,hostname,set,add,location,preference,get,hostname,for,map,entry,task,manager,location,set,multi,task,slot,task,manager,location,set,entry,resolved,root,slots,entry,set,if,hostname,set,contains,task,manager,location,set,entry,get,key,get,hostname,for,multi,task,slot,multi,task,slot,task,manager,location,set,entry,get,value,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,else,if,non,local,multi,task,slot,null,for,multi,task,slot,multi,task,slot,task,manager,location,set,entry,get,value,if,multi,task,slot,contains,group,id,non,local,multi,task,slot,multi,task,slot,if,non,local,multi,task,slot,null,return,multi,task,slot,locality,of,non,local,multi,task,slot,locality,else,return,null
SlotSharingManager -> @Nullable 	private MultiTaskSlotLocality getResolvedRootSlotWithLocationPreferences(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences);1519305029;Gets a resolved root slot which does not yet contain the given groupId. The method will try to_find a slot of a TaskManager contained in the collection of preferred locations. If there is no such slot_with free capacities available, then the method will look for slots of TaskManager which run on the same_machine as the TaskManager in the collection of preferred locations. If there is no such slot, then any slot_with free capacities is returned. If there is no such slot, then null is returned.__@param groupId which the returned slot must not contain_@param locationPreferences specifying which locations are preferred_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was not root slot which did not contain the given groupId;@Nullable_	private MultiTaskSlotLocality getResolvedRootSlotWithLocationPreferences(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences) {_		Preconditions.checkNotNull(groupId)__		Preconditions.checkNotNull(locationPreferences)__		final Set<String> hostnameSet = new HashSet<>(16)__		MultiTaskSlot nonLocalMultiTaskSlot = null___		synchronized (lock) {_			for (TaskManagerLocation locationPreference : locationPreferences) {_				final Set<MultiTaskSlot> multiTaskSlots = resolvedRootSlots.get(locationPreference)___				if (multiTaskSlots != null) {_					for (MultiTaskSlot multiTaskSlot : multiTaskSlots) {_						if (!multiTaskSlot.contains(groupId)) {_							return MultiTaskSlotLocality.of(multiTaskSlot, Locality.LOCAL)__						}_					}__					hostnameSet.add(locationPreference.getHostname())__				}_			}__			for (Map.Entry<TaskManagerLocation, Set<MultiTaskSlot>> taskManagerLocationSetEntry : resolvedRootSlots.entrySet()) {_				if (hostnameSet.contains(taskManagerLocationSetEntry.getKey().getHostname())) {_					for (MultiTaskSlot multiTaskSlot : taskManagerLocationSetEntry.getValue()) {_						if (!multiTaskSlot.contains(groupId)) {_							return MultiTaskSlotLocality.of(multiTaskSlot, Locality.HOST_LOCAL)__						}_					}_				} else if (nonLocalMultiTaskSlot == null) {_					for (MultiTaskSlot multiTaskSlot : taskManagerLocationSetEntry.getValue()) {_						if (!multiTaskSlot.contains(groupId)) {_							nonLocalMultiTaskSlot = multiTaskSlot__						}_					}_				}_			}_		}__		if (nonLocalMultiTaskSlot != null) {_			return MultiTaskSlotLocality.of(nonLocalMultiTaskSlot, Locality.NON_LOCAL)__		} else {_			return null__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,the,method,will,try,to,find,a,slot,of,a,task,manager,contained,in,the,collection,of,preferred,locations,if,there,is,no,such,slot,with,free,capacities,available,then,the,method,will,look,for,slots,of,task,manager,which,run,on,the,same,machine,as,the,task,manager,in,the,collection,of,preferred,locations,if,there,is,no,such,slot,then,any,slot,with,free,capacities,is,returned,if,there,is,no,such,slot,then,null,is,returned,param,group,id,which,the,returned,slot,must,not,contain,param,location,preferences,specifying,which,locations,are,preferred,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,not,root,slot,which,did,not,contain,the,given,group,id;nullable,private,multi,task,slot,locality,get,resolved,root,slot,with,location,preferences,abstract,id,group,id,collection,task,manager,location,location,preferences,preconditions,check,not,null,group,id,preconditions,check,not,null,location,preferences,final,set,string,hostname,set,new,hash,set,16,multi,task,slot,non,local,multi,task,slot,null,synchronized,lock,for,task,manager,location,location,preference,location,preferences,final,set,multi,task,slot,multi,task,slots,resolved,root,slots,get,location,preference,if,multi,task,slots,null,for,multi,task,slot,multi,task,slot,multi,task,slots,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,local,hostname,set,add,location,preference,get,hostname,for,map,entry,task,manager,location,set,multi,task,slot,task,manager,location,set,entry,resolved,root,slots,entry,set,if,hostname,set,contains,task,manager,location,set,entry,get,key,get,hostname,for,multi,task,slot,multi,task,slot,task,manager,location,set,entry,get,value,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,else,if,non,local,multi,task,slot,null,for,multi,task,slot,multi,task,slot,task,manager,location,set,entry,get,value,if,multi,task,slot,contains,group,id,non,local,multi,task,slot,multi,task,slot,if,non,local,multi,task,slot,null,return,multi,task,slot,locality,of,non,local,multi,task,slot,locality,else,return,null
SlotSharingManager -> @Nullable 	private MultiTaskSlotLocality getResolvedRootSlotWithLocationPreferences(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences);1519310248;Gets a resolved root slot which does not yet contain the given groupId. The method will try to_find a slot of a TaskManager contained in the collection of preferred locations. If there is no such slot_with free capacities available, then the method will look for slots of TaskManager which run on the same_machine as the TaskManager in the collection of preferred locations. If there is no such slot, then any slot_with free capacities is returned. If there is no such slot, then null is returned.__@param groupId which the returned slot must not contain_@param locationPreferences specifying which locations are preferred_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was not root slot which did not contain the given groupId;@Nullable_	private MultiTaskSlotLocality getResolvedRootSlotWithLocationPreferences(AbstractID groupId, Collection<TaskManagerLocation> locationPreferences) {_		Preconditions.checkNotNull(groupId)__		Preconditions.checkNotNull(locationPreferences)__		final Set<String> hostnameSet = new HashSet<>(16)__		MultiTaskSlot nonLocalMultiTaskSlot = null___		synchronized (lock) {_			for (TaskManagerLocation locationPreference : locationPreferences) {_				final Set<MultiTaskSlot> multiTaskSlots = resolvedRootSlots.get(locationPreference)___				if (multiTaskSlots != null) {_					for (MultiTaskSlot multiTaskSlot : multiTaskSlots) {_						if (!multiTaskSlot.contains(groupId)) {_							return MultiTaskSlotLocality.of(multiTaskSlot, Locality.LOCAL)__						}_					}__					hostnameSet.add(locationPreference.getHostname())__				}_			}__			for (Map.Entry<TaskManagerLocation, Set<MultiTaskSlot>> taskManagerLocationSetEntry : resolvedRootSlots.entrySet()) {_				if (hostnameSet.contains(taskManagerLocationSetEntry.getKey().getHostname())) {_					for (MultiTaskSlot multiTaskSlot : taskManagerLocationSetEntry.getValue()) {_						if (!multiTaskSlot.contains(groupId)) {_							return MultiTaskSlotLocality.of(multiTaskSlot, Locality.HOST_LOCAL)__						}_					}_				} else if (nonLocalMultiTaskSlot == null) {_					for (MultiTaskSlot multiTaskSlot : taskManagerLocationSetEntry.getValue()) {_						if (!multiTaskSlot.contains(groupId)) {_							nonLocalMultiTaskSlot = multiTaskSlot__						}_					}_				}_			}_		}__		if (nonLocalMultiTaskSlot != null) {_			return MultiTaskSlotLocality.of(nonLocalMultiTaskSlot, Locality.NON_LOCAL)__		} else {_			return null__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,the,method,will,try,to,find,a,slot,of,a,task,manager,contained,in,the,collection,of,preferred,locations,if,there,is,no,such,slot,with,free,capacities,available,then,the,method,will,look,for,slots,of,task,manager,which,run,on,the,same,machine,as,the,task,manager,in,the,collection,of,preferred,locations,if,there,is,no,such,slot,then,any,slot,with,free,capacities,is,returned,if,there,is,no,such,slot,then,null,is,returned,param,group,id,which,the,returned,slot,must,not,contain,param,location,preferences,specifying,which,locations,are,preferred,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,not,root,slot,which,did,not,contain,the,given,group,id;nullable,private,multi,task,slot,locality,get,resolved,root,slot,with,location,preferences,abstract,id,group,id,collection,task,manager,location,location,preferences,preconditions,check,not,null,group,id,preconditions,check,not,null,location,preferences,final,set,string,hostname,set,new,hash,set,16,multi,task,slot,non,local,multi,task,slot,null,synchronized,lock,for,task,manager,location,location,preference,location,preferences,final,set,multi,task,slot,multi,task,slots,resolved,root,slots,get,location,preference,if,multi,task,slots,null,for,multi,task,slot,multi,task,slot,multi,task,slots,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,local,hostname,set,add,location,preference,get,hostname,for,map,entry,task,manager,location,set,multi,task,slot,task,manager,location,set,entry,resolved,root,slots,entry,set,if,hostname,set,contains,task,manager,location,set,entry,get,key,get,hostname,for,multi,task,slot,multi,task,slot,task,manager,location,set,entry,get,value,if,multi,task,slot,contains,group,id,return,multi,task,slot,locality,of,multi,task,slot,locality,else,if,non,local,multi,task,slot,null,for,multi,task,slot,multi,task,slot,task,manager,location,set,entry,get,value,if,multi,task,slot,contains,group,id,non,local,multi,task,slot,multi,task,slot,if,non,local,multi,task,slot,null,return,multi,task,slot,locality,of,non,local,multi,task,slot,locality,else,return,null
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1513261475;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1517497348;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1519305029;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1519310248;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1525533915;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1525872576;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1529678050;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1532000463;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create single task slot [{}] in multi task slot [{}] for group {}.", slotRequestId, getSlotRequestId(), groupId)___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,log,debug,create,single,task,slot,in,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1532290273;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create single task slot [{}] in multi task slot [{}] for group {}.", slotRequestId, getSlotRequestId(), groupId)___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,log,debug,create,single,task,slot,in,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1538764056;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create single task slot [{}] in multi task slot [{}] for group {}.", slotRequestId, getSlotRequestId(), groupId)___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,log,debug,create,single,task,slot,in,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> SingleTaskSlot allocateSingleTaskSlot( 				SlotRequestId slotRequestId, 				AbstractID groupId, 				Locality locality);1538764056;Allocates a {@link SingleTaskSlot} and registers it under the given groupId at_this MultiTaskSlot.__@param slotRequestId of the new single task slot_@param groupId under which the new single task slot is registered_@param locality of the allocation_@return the newly allocated {@link SingleTaskSlot};SingleTaskSlot allocateSingleTaskSlot(_				SlotRequestId slotRequestId,_				AbstractID groupId,_				Locality locality) {_			Preconditions.checkState(!super.contains(groupId))___			LOG.debug("Create single task slot [{}] in multi task slot [{}] for group {}.", slotRequestId, getSlotRequestId(), groupId)___			final SingleTaskSlot leaf = new SingleTaskSlot(_				slotRequestId,_				groupId,_				this,_				locality)___			children.put(groupId, leaf)___			_			allTaskSlots.put(slotRequestId, leaf)___			return leaf__		};allocates,a,link,single,task,slot,and,registers,it,under,the,given,group,id,at,this,multi,task,slot,param,slot,request,id,of,the,new,single,task,slot,param,group,id,under,which,the,new,single,task,slot,is,registered,param,locality,of,the,allocation,return,the,newly,allocated,link,single,task,slot;single,task,slot,allocate,single,task,slot,slot,request,id,slot,request,id,abstract,id,group,id,locality,locality,preconditions,check,state,super,contains,group,id,log,debug,create,single,task,slot,in,multi,task,slot,for,group,slot,request,id,get,slot,request,id,group,id,final,single,task,slot,leaf,new,single,task,slot,slot,request,id,group,id,this,locality,children,put,group,id,leaf,all,task,slots,put,slot,request,id,leaf,return,leaf
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1513261475;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1517497348;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1519305029;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1519310248;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1525533915;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1525872576;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1529678050;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1532000463;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1532290273;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1538764056;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> MultiTaskSlot -> @Override 		public boolean contains(AbstractID groupId);1538764056;Checks whether this slot or any of its children contains the given groupId.__@param groupId which to check whether it is contained_@return true if this or any of its children contains the given groupId, otherwise false;@Override_		public boolean contains(AbstractID groupId) {_			if (super.contains(groupId)) {_				return true__			} else {_				for (TaskSlot taskSlot : children.values()) {_					if (taskSlot.contains(groupId)) {_						return true__					}_				}__				return false__			}_		};checks,whether,this,slot,or,any,of,its,children,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,this,or,any,of,its,children,contains,the,given,group,id,otherwise,false;override,public,boolean,contains,abstract,id,group,id,if,super,contains,group,id,return,true,else,for,task,slot,task,slot,children,values,if,task,slot,contains,group,id,return,true,return,false
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1513261475;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1517497348;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1519305029;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1519310248;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1525533915;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1525872576;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1529678050;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1532000463;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1532290273;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1538764056;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> TaskSlot -> public boolean contains(AbstractID groupId);1538764056;Check whether the task slot contains the given groupId.__@param groupId which to check whether it is contained_@return true if the task slot contains the given groupId, otherwise false;public boolean contains(AbstractID groupId) {_			return Objects.equals(this.groupId, groupId)__		};check,whether,the,task,slot,contains,the,given,group,id,param,group,id,which,to,check,whether,it,is,contained,return,true,if,the,task,slot,contains,the,given,group,id,otherwise,false;public,boolean,contains,abstract,id,group,id,return,objects,equals,this,group,id,group,id
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1513261475;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1517497348;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1519305029;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1519310248;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1525533915;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1525872576;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1529678050;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1532000463;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1532290273;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1538764056;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @VisibleForTesting 	public Collection<MultiTaskSlot> getResolvedRootSlots();1538764056;Returns a collection of all resolved root slots.__@return Collection of all resolved root slots;@VisibleForTesting_	public Collection<MultiTaskSlot> getResolvedRootSlots() {_		return new ResolvedRootSlotValues()__	};returns,a,collection,of,all,resolved,root,slots,return,collection,of,all,resolved,root,slots;visible,for,testing,public,collection,multi,task,slot,get,resolved,root,slots,return,new,resolved,root,slot,values
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SlotProfile.ProfileToSlotContextMatcher matcher);1517497348;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SlotProfile.ProfileToSlotContextMatcher matcher) {_		synchronized (lock) {_			Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__			return matcher.findMatchWithLocality(_				resolvedRootSlotsValues.stream().flatMap(Collection::stream),_				(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_				(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_				MultiTaskSlotLocality::of)__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,slot,profile,profile,to,slot,context,matcher,matcher,synchronized,lock,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SlotProfile.ProfileToSlotContextMatcher matcher);1525533915;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SlotProfile.ProfileToSlotContextMatcher matcher) {_		synchronized (lock) {_			Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__			return matcher.findMatchWithLocality(_				resolvedRootSlotsValues.stream().flatMap(Collection::stream),_				(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_				(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_				MultiTaskSlotLocality::of)__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,slot,profile,profile,to,slot,context,matcher,matcher,synchronized,lock,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
SlotSharingManager -> @Nullable 	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SlotProfile.ProfileToSlotContextMatcher matcher);1525872576;Gets a resolved root slot which does not yet contain the given groupId. First the given set of_preferred locations is checked.__@param groupId which the returned slot must not contain_@param matcher slot profile matcher to match slot with the profile requirements_@return the resolved root slot and its locality wrt to the specified location preferences_or null if there was no root slot which did not contain the given groupId;@Nullable_	MultiTaskSlotLocality getResolvedRootSlot(AbstractID groupId, SlotProfile.ProfileToSlotContextMatcher matcher) {_		synchronized (lock) {_			Collection<Set<MultiTaskSlot>> resolvedRootSlotsValues = this.resolvedRootSlots.values()__			return matcher.findMatchWithLocality(_				resolvedRootSlotsValues.stream().flatMap(Collection::stream),_				(MultiTaskSlot multiTaskSlot) -> multiTaskSlot.getSlotContextFuture().join(),_				(MultiTaskSlot multiTaskSlot) -> !multiTaskSlot.contains(groupId),_				MultiTaskSlotLocality::of)__		}_	};gets,a,resolved,root,slot,which,does,not,yet,contain,the,given,group,id,first,the,given,set,of,preferred,locations,is,checked,param,group,id,which,the,returned,slot,must,not,contain,param,matcher,slot,profile,matcher,to,match,slot,with,the,profile,requirements,return,the,resolved,root,slot,and,its,locality,wrt,to,the,specified,location,preferences,or,null,if,there,was,no,root,slot,which,did,not,contain,the,given,group,id;nullable,multi,task,slot,locality,get,resolved,root,slot,abstract,id,group,id,slot,profile,profile,to,slot,context,matcher,matcher,synchronized,lock,collection,set,multi,task,slot,resolved,root,slots,values,this,resolved,root,slots,values,return,matcher,find,match,with,locality,resolved,root,slots,values,stream,flat,map,collection,stream,multi,task,slot,multi,task,slot,multi,task,slot,get,slot,context,future,join,multi,task,slot,multi,task,slot,multi,task,slot,contains,group,id,multi,task,slot,locality,of
