# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractReader -> protected boolean handleEvent(AbstractEvent event) throws IOException;1423577144;Handles the event and returns whether the reader reached an end-of-stream event (either the_end of the whole stream or the end of an superstep).;protected boolean handleEvent(AbstractEvent event) throws IOException {_		final Class<?> eventType = event.getClass()___		try {_			_			_			__			_			_			if (eventType == EndOfPartitionEvent.class) {_				return true__			}_			else if (eventType == EndOfSuperstepEvent.class) {_				return incrementEndOfSuperstepEventAndCheck()__			}__			_			_			_			else if (event instanceof TaskEvent) {_				taskEventHandler.publish((TaskEvent) event)___				return false__			}_			else {_				throw new IllegalStateException("Received unexpected event of type " + eventType + " at reader.")__			}_		}_		catch (Throwable t) {_			throw new IOException("Error while handling event of type " + eventType + ": " + t.getMessage(), t)__		}_	};handles,the,event,and,returns,whether,the,reader,reached,an,end,of,stream,event,either,the,end,of,the,whole,stream,or,the,end,of,an,superstep;protected,boolean,handle,event,abstract,event,event,throws,ioexception,final,class,event,type,event,get,class,try,if,event,type,end,of,partition,event,class,return,true,else,if,event,type,end,of,superstep,event,class,return,increment,end,of,superstep,event,and,check,else,if,event,instanceof,task,event,task,event,handler,publish,task,event,event,return,false,else,throw,new,illegal,state,exception,received,unexpected,event,of,type,event,type,at,reader,catch,throwable,t,throw,new,ioexception,error,while,handling,event,of,type,event,type,t,get,message,t
AbstractReader -> protected boolean handleEvent(AbstractEvent event) throws IOException;1424467467;Handles the event and returns whether the reader reached an end-of-stream event (either the_end of the whole stream or the end of an superstep).;protected boolean handleEvent(AbstractEvent event) throws IOException {_		final Class<?> eventType = event.getClass()___		try {_			_			_			__			_			_			if (eventType == EndOfPartitionEvent.class) {_				return true__			}_			else if (eventType == EndOfSuperstepEvent.class) {_				return incrementEndOfSuperstepEventAndCheck()__			}__			_			_			_			else if (event instanceof TaskEvent) {_				taskEventHandler.publish((TaskEvent) event)___				return false__			}_			else {_				throw new IllegalStateException("Received unexpected event of type " + eventType + " at reader.")__			}_		}_		catch (Throwable t) {_			throw new IOException("Error while handling event of type " + eventType + ": " + t.getMessage(), t)__		}_	};handles,the,event,and,returns,whether,the,reader,reached,an,end,of,stream,event,either,the,end,of,the,whole,stream,or,the,end,of,an,superstep;protected,boolean,handle,event,abstract,event,event,throws,ioexception,final,class,event,type,event,get,class,try,if,event,type,end,of,partition,event,class,return,true,else,if,event,type,end,of,superstep,event,class,return,increment,end,of,superstep,event,and,check,else,if,event,instanceof,task,event,task,event,handler,publish,task,event,event,return,false,else,throw,new,illegal,state,exception,received,unexpected,event,of,type,event,type,at,reader,catch,throwable,t,throw,new,ioexception,error,while,handling,event,of,type,event,type,t,get,message,t
AbstractReader -> protected boolean handleEvent(AbstractEvent event) throws IOException;1436340222;Handles the event and returns whether the reader reached an end-of-stream event (either the_end of the whole stream or the end of an superstep).;protected boolean handleEvent(AbstractEvent event) throws IOException {_		final Class<?> eventType = event.getClass()___		try {_			_			_			__			_			_			if (eventType == EndOfPartitionEvent.class) {_				return true__			}_			else if (eventType == EndOfSuperstepEvent.class) {_				return incrementEndOfSuperstepEventAndCheck()__			}__			_			_			_			else if (event instanceof TaskEvent) {_				taskEventHandler.publish((TaskEvent) event)___				return false__			}_			else {_				throw new IllegalStateException("Received unexpected event of type " + eventType + " at reader.")__			}_		}_		catch (Throwable t) {_			throw new IOException("Error while handling event of type " + eventType + ": " + t.getMessage(), t)__		}_	};handles,the,event,and,returns,whether,the,reader,reached,an,end,of,stream,event,either,the,end,of,the,whole,stream,or,the,end,of,an,superstep;protected,boolean,handle,event,abstract,event,event,throws,ioexception,final,class,event,type,event,get,class,try,if,event,type,end,of,partition,event,class,return,true,else,if,event,type,end,of,superstep,event,class,return,increment,end,of,superstep,event,and,check,else,if,event,instanceof,task,event,task,event,handler,publish,task,event,event,return,false,else,throw,new,illegal,state,exception,received,unexpected,event,of,type,event,type,at,reader,catch,throwable,t,throw,new,ioexception,error,while,handling,event,of,type,event,type,t,get,message,t
AbstractReader -> protected boolean handleEvent(AbstractEvent event) throws IOException;1438275734;Handles the event and returns whether the reader reached an end-of-stream event (either the_end of the whole stream or the end of an superstep).;protected boolean handleEvent(AbstractEvent event) throws IOException {_		final Class<?> eventType = event.getClass()___		try {_			_			_			__			_			_			if (eventType == EndOfPartitionEvent.class) {_				return true__			}_			else if (eventType == EndOfSuperstepEvent.class) {_				return incrementEndOfSuperstepEventAndCheck()__			}__			_			_			_			else if (event instanceof TaskEvent) {_				taskEventHandler.publish((TaskEvent) event)___				return false__			}_			else {_				throw new IllegalStateException("Received unexpected event of type " + eventType + " at reader.")__			}_		}_		catch (Throwable t) {_			throw new IOException("Error while handling event of type " + eventType + ": " + t.getMessage(), t)__		}_	};handles,the,event,and,returns,whether,the,reader,reached,an,end,of,stream,event,either,the,end,of,the,whole,stream,or,the,end,of,an,superstep;protected,boolean,handle,event,abstract,event,event,throws,ioexception,final,class,event,type,event,get,class,try,if,event,type,end,of,partition,event,class,return,true,else,if,event,type,end,of,superstep,event,class,return,increment,end,of,superstep,event,and,check,else,if,event,instanceof,task,event,task,event,handler,publish,task,event,event,return,false,else,throw,new,illegal,state,exception,received,unexpected,event,of,type,event,type,at,reader,catch,throwable,t,throw,new,ioexception,error,while,handling,event,of,type,event,type,t,get,message,t
AbstractReader -> protected boolean handleEvent(AbstractEvent event) throws IOException;1465394479;Handles the event and returns whether the reader reached an end-of-stream event (either the_end of the whole stream or the end of an superstep).;protected boolean handleEvent(AbstractEvent event) throws IOException {_		final Class<?> eventType = event.getClass()___		try {_			_			_			__			_			_			if (eventType == EndOfPartitionEvent.class) {_				return true__			}_			else if (eventType == EndOfSuperstepEvent.class) {_				return incrementEndOfSuperstepEventAndCheck()__			}__			_			_			_			else if (event instanceof TaskEvent) {_				taskEventHandler.publish((TaskEvent) event)___				return false__			}_			else {_				throw new IllegalStateException("Received unexpected event of type " + eventType + " at reader.")__			}_		}_		catch (Throwable t) {_			throw new IOException("Error while handling event of type " + eventType + ": " + t.getMessage(), t)__		}_	};handles,the,event,and,returns,whether,the,reader,reached,an,end,of,stream,event,either,the,end,of,the,whole,stream,or,the,end,of,an,superstep;protected,boolean,handle,event,abstract,event,event,throws,ioexception,final,class,event,type,event,get,class,try,if,event,type,end,of,partition,event,class,return,true,else,if,event,type,end,of,superstep,event,class,return,increment,end,of,superstep,event,and,check,else,if,event,instanceof,task,event,task,event,handler,publish,task,event,event,return,false,else,throw,new,illegal,state,exception,received,unexpected,event,of,type,event,type,at,reader,catch,throwable,t,throw,new,ioexception,error,while,handling,event,of,type,event,type,t,get,message,t
AbstractReader -> protected boolean handleEvent(AbstractEvent event) throws IOException;1516959754;Handles the event and returns whether the reader reached an end-of-stream event (either the_end of the whole stream or the end of an superstep).;protected boolean handleEvent(AbstractEvent event) throws IOException {_		final Class<?> eventType = event.getClass()___		try {_			_			_			__			_			_			if (eventType == EndOfPartitionEvent.class) {_				return true__			}_			else if (eventType == EndOfSuperstepEvent.class) {_				return incrementEndOfSuperstepEventAndCheck()__			}__			_			_			_			else if (event instanceof TaskEvent) {_				taskEventHandler.publish((TaskEvent) event)___				return false__			}_			else {_				throw new IllegalStateException("Received unexpected event of type " + eventType + " at reader.")__			}_		}_		catch (Throwable t) {_			throw new IOException("Error while handling event of type " + eventType + ": " + t.getMessage(), t)__		}_	};handles,the,event,and,returns,whether,the,reader,reached,an,end,of,stream,event,either,the,end,of,the,whole,stream,or,the,end,of,an,superstep;protected,boolean,handle,event,abstract,event,event,throws,ioexception,final,class,event,type,event,get,class,try,if,event,type,end,of,partition,event,class,return,true,else,if,event,type,end,of,superstep,event,class,return,increment,end,of,superstep,event,and,check,else,if,event,instanceof,task,event,task,event,handler,publish,task,event,event,return,false,else,throw,new,illegal,state,exception,received,unexpected,event,of,type,event,type,at,reader,catch,throwable,t,throw,new,ioexception,error,while,handling,event,of,type,event,type,t,get,message,t
