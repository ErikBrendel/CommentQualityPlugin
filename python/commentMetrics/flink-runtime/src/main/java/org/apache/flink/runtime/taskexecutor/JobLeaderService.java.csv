# id;timestamp;commentText;codeText;commentWords;codeWords
JobLeaderService -> public void start( 		final String initialOwnerAddress, 		final RpcService initialRpcService, 		final HighAvailabilityServices initialHighAvailabilityServices, 		final JobLeaderListener initialJobLeaderListener);1482522862;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_		final String initialOwnerAddress,_		final RpcService initialRpcService,_		final HighAvailabilityServices initialHighAvailabilityServices,_		final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 		final String initialOwnerAddress, 		final RpcService initialRpcService, 		final HighAvailabilityServices initialHighAvailabilityServices, 		final JobLeaderListener initialJobLeaderListener);1482522863;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_		final String initialOwnerAddress,_		final RpcService initialRpcService,_		final HighAvailabilityServices initialHighAvailabilityServices,_		final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public boolean containsJob(JobID jobId);1482522862;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1482522863;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1482522863;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1482522863;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1499381502;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1501588834;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1501760738;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1504472905;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1504525441;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1504608225;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1515588319;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public boolean containsJob(JobID jobId);1515600854;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1482522862;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1482522863;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1482522863;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1482522863;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1499381502;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1501588834;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1501760738;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1504472905;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1504525441;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1504608225;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1515588319;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1515600854;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1517333417;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1519977155;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1525452496;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> public void removeJob(JobID jobId) throws Exception;1549360056;Remove the given job from being monitored by the job leader service.__@param jobId identifying the job to remove from monitoring_@throws Exception if an error occurred while stopping the leader retrieval service and listener;public void removeJob(JobID jobId) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> entry = jobLeaderServices.remove(jobId)___		if (entry != null) {_			LOG.info("Remove job {} from job leader monitoring.", jobId)___			LeaderRetrievalService leaderRetrievalService = entry.f0__			JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = entry.f1___			leaderRetrievalService.stop()__			jobManagerLeaderListener.stop()__		}_	};remove,the,given,job,from,being,monitored,by,the,job,leader,service,param,job,id,identifying,the,job,to,remove,from,monitoring,throws,exception,if,an,error,occurred,while,stopping,the,leader,retrieval,service,and,listener;public,void,remove,job,job,id,job,id,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,entry,job,leader,services,remove,job,id,if,entry,null,log,info,remove,job,from,job,leader,monitoring,job,id,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,entry,f1,leader,retrieval,service,stop,job,manager,leader,listener,stop
JobLeaderService -> @VisibleForTesting 	public boolean containsJob(JobID jobId);1517333417;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;@VisibleForTesting_	public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;visible,for,testing,public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> @VisibleForTesting 	public boolean containsJob(JobID jobId);1519977155;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;@VisibleForTesting_	public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;visible,for,testing,public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> @VisibleForTesting 	public boolean containsJob(JobID jobId);1525452496;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;@VisibleForTesting_	public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;visible,for,testing,public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> @VisibleForTesting 	public boolean containsJob(JobID jobId);1549360056;Check whether the service monitors the given job.__@param jobId identifying the job_@return True if the given job is monitored_ otherwise false;@VisibleForTesting_	public boolean containsJob(JobID jobId) {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		return jobLeaderServices.containsKey(jobId)__	};check,whether,the,service,monitors,the,given,job,param,job,id,identifying,the,job,return,true,if,the,given,job,is,monitored,otherwise,false;visible,for,testing,public,boolean,contains,job,job,id,job,id,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,return,job,leader,services,contains,key,job,id
JobLeaderService -> public void reconnect(final JobID jobId);1515600854;Triggers reconnection to the last known leader of the given job.__@param jobId specifying the job for which to trigger reconnection;public void reconnect(final JobID jobId) {_		Preconditions.checkNotNull(jobId, "JobID must not be null.")___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> jobLeaderService = jobLeaderServices.get(jobId)___		if (jobLeaderService != null) {_			jobLeaderService.f1.reconnect()__		} else {_			LOG.info("Cannot reconnect to job {} because it is not registered.", jobId)__		}_	};triggers,reconnection,to,the,last,known,leader,of,the,given,job,param,job,id,specifying,the,job,for,which,to,trigger,reconnection;public,void,reconnect,final,job,id,job,id,preconditions,check,not,null,job,id,job,id,must,not,be,null,final,tuple2,leader,retrieval,service,job,manager,leader,listener,job,leader,service,job,leader,services,get,job,id,if,job,leader,service,null,job,leader,service,f1,reconnect,else,log,info,cannot,reconnect,to,job,because,it,is,not,registered,job,id
JobLeaderService -> public void reconnect(final JobID jobId);1517333417;Triggers reconnection to the last known leader of the given job.__@param jobId specifying the job for which to trigger reconnection;public void reconnect(final JobID jobId) {_		Preconditions.checkNotNull(jobId, "JobID must not be null.")___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> jobLeaderService = jobLeaderServices.get(jobId)___		if (jobLeaderService != null) {_			jobLeaderService.f1.reconnect()__		} else {_			LOG.info("Cannot reconnect to job {} because it is not registered.", jobId)__		}_	};triggers,reconnection,to,the,last,known,leader,of,the,given,job,param,job,id,specifying,the,job,for,which,to,trigger,reconnection;public,void,reconnect,final,job,id,job,id,preconditions,check,not,null,job,id,job,id,must,not,be,null,final,tuple2,leader,retrieval,service,job,manager,leader,listener,job,leader,service,job,leader,services,get,job,id,if,job,leader,service,null,job,leader,service,f1,reconnect,else,log,info,cannot,reconnect,to,job,because,it,is,not,registered,job,id
JobLeaderService -> public void reconnect(final JobID jobId);1519977155;Triggers reconnection to the last known leader of the given job.__@param jobId specifying the job for which to trigger reconnection;public void reconnect(final JobID jobId) {_		Preconditions.checkNotNull(jobId, "JobID must not be null.")___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> jobLeaderService = jobLeaderServices.get(jobId)___		if (jobLeaderService != null) {_			jobLeaderService.f1.reconnect()__		} else {_			LOG.info("Cannot reconnect to job {} because it is not registered.", jobId)__		}_	};triggers,reconnection,to,the,last,known,leader,of,the,given,job,param,job,id,specifying,the,job,for,which,to,trigger,reconnection;public,void,reconnect,final,job,id,job,id,preconditions,check,not,null,job,id,job,id,must,not,be,null,final,tuple2,leader,retrieval,service,job,manager,leader,listener,job,leader,service,job,leader,services,get,job,id,if,job,leader,service,null,job,leader,service,f1,reconnect,else,log,info,cannot,reconnect,to,job,because,it,is,not,registered,job,id
JobLeaderService -> public void reconnect(final JobID jobId);1525452496;Triggers reconnection to the last known leader of the given job.__@param jobId specifying the job for which to trigger reconnection;public void reconnect(final JobID jobId) {_		Preconditions.checkNotNull(jobId, "JobID must not be null.")___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> jobLeaderService = jobLeaderServices.get(jobId)___		if (jobLeaderService != null) {_			jobLeaderService.f1.reconnect()__		} else {_			LOG.info("Cannot reconnect to job {} because it is not registered.", jobId)__		}_	};triggers,reconnection,to,the,last,known,leader,of,the,given,job,param,job,id,specifying,the,job,for,which,to,trigger,reconnection;public,void,reconnect,final,job,id,job,id,preconditions,check,not,null,job,id,job,id,must,not,be,null,final,tuple2,leader,retrieval,service,job,manager,leader,listener,job,leader,service,job,leader,services,get,job,id,if,job,leader,service,null,job,leader,service,f1,reconnect,else,log,info,cannot,reconnect,to,job,because,it,is,not,registered,job,id
JobLeaderService -> public void reconnect(final JobID jobId);1549360056;Triggers reconnection to the last known leader of the given job.__@param jobId specifying the job for which to trigger reconnection;public void reconnect(final JobID jobId) {_		Preconditions.checkNotNull(jobId, "JobID must not be null.")___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> jobLeaderService = jobLeaderServices.get(jobId)___		if (jobLeaderService != null) {_			jobLeaderService.f1.reconnect()__		} else {_			LOG.info("Cannot reconnect to job {} because it is not registered.", jobId)__		}_	};triggers,reconnection,to,the,last,known,leader,of,the,given,job,param,job,id,specifying,the,job,for,which,to,trigger,reconnection;public,void,reconnect,final,job,id,job,id,preconditions,check,not,null,job,id,job,id,must,not,be,null,final,tuple2,leader,retrieval,service,job,manager,leader,listener,job,leader,service,job,leader,services,get,job,id,if,job,leader,service,null,job,leader,service,f1,reconnect,else,log,info,cannot,reconnect,to,job,because,it,is,not,registered,job,id
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1482522862;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1482522863;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1482522863;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1482522863;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1499381502;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1501588834;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1501760738;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1504472905;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1504525441;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1504608225;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1515588319;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1515600854;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		leaderRetrievalService.start(jobManagerLeaderListener)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,leader,retrieval,service,start,job,manager,leader,listener,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1517333417;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))___		leaderRetrievalService.start(jobManagerLeaderListener)__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener,leader,retrieval,service,start,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1519977155;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> oldEntry = jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))___		if (oldEntry != null) {_			oldEntry.f0.stop()__			oldEntry.f1.stop()__		}__		leaderRetrievalService.start(jobManagerLeaderListener)__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,final,tuple2,leader,retrieval,service,job,manager,leader,listener,old,entry,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener,if,old,entry,null,old,entry,f0,stop,old,entry,f1,stop,leader,retrieval,service,start,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1525452496;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> oldEntry = jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))___		if (oldEntry != null) {_			oldEntry.f0.stop()__			oldEntry.f1.stop()__		}__		leaderRetrievalService.start(jobManagerLeaderListener)__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,final,tuple2,leader,retrieval,service,job,manager,leader,listener,old,entry,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener,if,old,entry,null,old,entry,f0,stop,old,entry,f1,stop,leader,retrieval,service,start,job,manager,leader,listener
JobLeaderService -> public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception;1549360056;Add the given job to be monitored. This means that the service tries to detect leaders for_this job and then tries to establish a connection to it.__@param jobId identifying the job to monitor_@param defaultTargetAddress of the job leader_@throws Exception if an error occurs while starting the leader retrieval service;public void addJob(final JobID jobId, final String defaultTargetAddress) throws Exception {_		Preconditions.checkState(JobLeaderService.State.STARTED == state, "The service is currently not running.")___		LOG.info("Add job {} for job leader monitoring.", jobId)___		final LeaderRetrievalService leaderRetrievalService = highAvailabilityServices.getJobManagerLeaderRetriever(_			jobId,_			defaultTargetAddress)___		JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = new JobManagerLeaderListener(jobId)___		final Tuple2<LeaderRetrievalService, JobManagerLeaderListener> oldEntry = jobLeaderServices.put(jobId, Tuple2.of(leaderRetrievalService, jobManagerLeaderListener))___		if (oldEntry != null) {_			oldEntry.f0.stop()__			oldEntry.f1.stop()__		}__		leaderRetrievalService.start(jobManagerLeaderListener)__	};add,the,given,job,to,be,monitored,this,means,that,the,service,tries,to,detect,leaders,for,this,job,and,then,tries,to,establish,a,connection,to,it,param,job,id,identifying,the,job,to,monitor,param,default,target,address,of,the,job,leader,throws,exception,if,an,error,occurs,while,starting,the,leader,retrieval,service;public,void,add,job,final,job,id,job,id,final,string,default,target,address,throws,exception,preconditions,check,state,job,leader,service,state,started,state,the,service,is,currently,not,running,log,info,add,job,for,job,leader,monitoring,job,id,final,leader,retrieval,service,leader,retrieval,service,high,availability,services,get,job,manager,leader,retriever,job,id,default,target,address,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,new,job,manager,leader,listener,job,id,final,tuple2,leader,retrieval,service,job,manager,leader,listener,old,entry,job,leader,services,put,job,id,tuple2,of,leader,retrieval,service,job,manager,leader,listener,if,old,entry,null,old,entry,f0,stop,old,entry,f1,stop,leader,retrieval,service,start,job,manager,leader,listener
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1482522863;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1499381502;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1501588834;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1501760738;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1504472905;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1504525441;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1504608225;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1515588319;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1515600854;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1517333417;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1519977155;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1525452496;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void start( 			final String initialOwnerAddress, 			final RpcService initialRpcService, 			final HighAvailabilityServices initialHighAvailabilityServices, 			final JobLeaderListener initialJobLeaderListener);1549360056;Start the job leader service with the given services.__@param initialOwnerAddress to be used for establishing connections (source address)_@param initialRpcService to be used to create rpc connections_@param initialHighAvailabilityServices to create leader retrieval services for the different jobs_@param initialJobLeaderListener listening for job leader changes;public void start(_			final String initialOwnerAddress,_			final RpcService initialRpcService,_			final HighAvailabilityServices initialHighAvailabilityServices,_			final JobLeaderListener initialJobLeaderListener) {__		if (JobLeaderService.State.CREATED != state) {_			throw new IllegalStateException("The service has already been started.")__		} else {_			LOG.info("Start job leader service.")___			this.ownerAddress = Preconditions.checkNotNull(initialOwnerAddress)__			this.rpcService = Preconditions.checkNotNull(initialRpcService)__			this.highAvailabilityServices = Preconditions.checkNotNull(initialHighAvailabilityServices)__			this.jobLeaderListener = Preconditions.checkNotNull(initialJobLeaderListener)__			state = JobLeaderService.State.STARTED__		}_	};start,the,job,leader,service,with,the,given,services,param,initial,owner,address,to,be,used,for,establishing,connections,source,address,param,initial,rpc,service,to,be,used,to,create,rpc,connections,param,initial,high,availability,services,to,create,leader,retrieval,services,for,the,different,jobs,param,initial,job,leader,listener,listening,for,job,leader,changes;public,void,start,final,string,initial,owner,address,final,rpc,service,initial,rpc,service,final,high,availability,services,initial,high,availability,services,final,job,leader,listener,initial,job,leader,listener,if,job,leader,service,state,created,state,throw,new,illegal,state,exception,the,service,has,already,been,started,else,log,info,start,job,leader,service,this,owner,address,preconditions,check,not,null,initial,owner,address,this,rpc,service,preconditions,check,not,null,initial,rpc,service,this,high,availability,services,preconditions,check,not,null,initial,high,availability,services,this,job,leader,listener,preconditions,check,not,null,initial,job,leader,listener,state,job,leader,service,state,started
JobLeaderService -> public void stop() throws Exception;1482522862;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1482522863;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1482522863;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1482522863;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1499381502;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1501588834;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1501760738;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1504472905;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1504525441;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1504608225;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1515588319;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1515600854;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1517333417;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1519977155;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1525452496;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
JobLeaderService -> public void stop() throws Exception;1549360056;Stop the job leader services. This implies stopping all leader retrieval services for the_different jobs and their leader retrieval listeners.__@throws Exception if an error occurs while stopping the service;public void stop() throws Exception {_		LOG.info("Stop job leader service.")___		if (JobLeaderService.State.STARTED == state) {__			for (Tuple2<LeaderRetrievalService, JobLeaderService.JobManagerLeaderListener> leaderRetrievalServiceEntry: jobLeaderServices.values()) {_				LeaderRetrievalService leaderRetrievalService = leaderRetrievalServiceEntry.f0__				JobLeaderService.JobManagerLeaderListener jobManagerLeaderListener = leaderRetrievalServiceEntry.f1___				jobManagerLeaderListener.stop()__				leaderRetrievalService.stop()__			}__			jobLeaderServices.clear()__		}__		state = JobLeaderService.State.STOPPED__	};stop,the,job,leader,services,this,implies,stopping,all,leader,retrieval,services,for,the,different,jobs,and,their,leader,retrieval,listeners,throws,exception,if,an,error,occurs,while,stopping,the,service;public,void,stop,throws,exception,log,info,stop,job,leader,service,if,job,leader,service,state,started,state,for,tuple2,leader,retrieval,service,job,leader,service,job,manager,leader,listener,leader,retrieval,service,entry,job,leader,services,values,leader,retrieval,service,leader,retrieval,service,leader,retrieval,service,entry,f0,job,leader,service,job,manager,leader,listener,job,manager,leader,listener,leader,retrieval,service,entry,f1,job,manager,leader,listener,stop,leader,retrieval,service,stop,job,leader,services,clear,state,job,leader,service,state,stopped
