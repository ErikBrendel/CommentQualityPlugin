# id;timestamp;commentText;codeText;commentWords;codeWords
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1479407816;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1479827704;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1480266940;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1480323569;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1486734789;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1502098277;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1506753379;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1516801403;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1517328194;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1517490822;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1519227053;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1519381221;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1519724340;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1524673728;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1533041338;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("{}: Created {} input channels (local: {}, remote: {}, unknown: {}).",_			owningTaskName,_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,owning,task,name,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1533041356;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("{}: Created {} input channels (local: {}, remote: {}, unknown: {}).",_			owningTaskName,_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,owning,task,name,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1533215687;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("{}: Created {} input channels (local: {}, remote: {}, unknown: {}).",_			owningTaskName,_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,owning,task,name,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1534864589;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("{}: Created {} input channels (local: {}, remote: {}, unknown: {}).",_			owningTaskName,_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,owning,task,name,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1540912649;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("{}: Created {} input channels (local: {}, remote: {}, unknown: {}).",_			owningTaskName,_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,owning,task,name,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public static SingleInputGate create( 		String owningTaskName, 		JobID jobId, 		ExecutionAttemptID executionId, 		InputGateDeploymentDescriptor igdd, 		NetworkEnvironment networkEnvironment, 		TaskActions taskActions, 		TaskIOMetricGroup metrics);1541162913;Creates an input gate and all of its input channels.;public static SingleInputGate create(_		String owningTaskName,_		JobID jobId,_		ExecutionAttemptID executionId,_		InputGateDeploymentDescriptor igdd,_		NetworkEnvironment networkEnvironment,_		TaskActions taskActions,_		TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())__		final ResultPartitionType consumedPartitionType = checkNotNull(igdd.getConsumedPartitionType())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_			owningTaskName, jobId, consumedResultId, consumedPartitionType, consumedSubpartitionIndex,_			icdd.length, taskActions, metrics, networkEnvironment.isCreditBased())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("{}: Created {} input channels (local: {}, remote: {}, unknown: {}).",_			owningTaskName,_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,result,partition,type,consumed,partition,type,check,not,null,igdd,get,consumed,partition,type,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,consumed,result,id,consumed,partition,type,consumed,subpartition,index,icdd,length,task,actions,metrics,network,environment,is,credit,based,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,owning,task,name,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1502098277;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel__		_		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1506753379;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel__		_		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1516801403;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1517328194;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1517490822;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1519227053;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1519381221;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1519724340;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1524673728;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1533041338;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1533041356;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1533215687;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1534864589;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1540912649;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException;1541162913;Assign the exclusive buffers to all remote input channels directly for credit-based mode.__@param networkBufferPool The global pool to request and recycle exclusive buffers_@param networkBuffersPerChannel The number of exclusive buffers for each channel;public void assignExclusiveSegments(NetworkBufferPool networkBufferPool, int networkBuffersPerChannel) throws IOException {_		checkState(this.isCreditBased, "Bug in input gate setup logic: exclusive buffers only exist with credit-based flow control.")__		checkState(this.networkBufferPool == null, "Bug in input gate setup logic: global buffer pool has" +_			"already been set for this input gate.")___		this.networkBufferPool = checkNotNull(networkBufferPool)__		this.networkBuffersPerChannel = networkBuffersPerChannel___		synchronized (requestLock) {_			for (InputChannel inputChannel : inputChannels.values()) {_				if (inputChannel instanceof RemoteInputChannel) {_					((RemoteInputChannel) inputChannel).assignExclusiveSegments(_						networkBufferPool.requestMemorySegments(networkBuffersPerChannel))__				}_			}_		}_	};assign,the,exclusive,buffers,to,all,remote,input,channels,directly,for,credit,based,mode,param,network,buffer,pool,the,global,pool,to,request,and,recycle,exclusive,buffers,param,network,buffers,per,channel,the,number,of,exclusive,buffers,for,each,channel;public,void,assign,exclusive,segments,network,buffer,pool,network,buffer,pool,int,network,buffers,per,channel,throws,ioexception,check,state,this,is,credit,based,bug,in,input,gate,setup,logic,exclusive,buffers,only,exist,with,credit,based,flow,control,check,state,this,network,buffer,pool,null,bug,in,input,gate,setup,logic,global,buffer,pool,has,already,been,set,for,this,input,gate,this,network,buffer,pool,check,not,null,network,buffer,pool,this,network,buffers,per,channel,network,buffers,per,channel,synchronized,request,lock,for,input,channel,input,channel,input,channels,values,if,input,channel,instanceof,remote,input,channel,remote,input,channel,input,channel,assign,exclusive,segments,network,buffer,pool,request,memory,segments,network,buffers,per,channel
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1431354895;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				if (ch.getClass() != RemoteInputChannel.class) {_					throw new IllegalArgumentException("Channel identified by " + partitionId_							+ " is not a remote channel.")__				}__				final RemoteInputChannel rch = (RemoteInputChannel) ch___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,if,ch,get,class,remote,input,channel,class,throw,new,illegal,argument,exception,channel,identified,by,partition,id,is,not,a,remote,channel,final,remote,input,channel,rch,remote,input,channel,ch,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,rch,retrigger,subpartition,request,consumed,subpartition,index
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1432647455;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1437929917;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1438168143;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1438275734;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1445550685;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1453281354;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1457607745;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1464773080;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1465394479;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1469183596;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1472628826;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1475158770;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1475838130;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1477468111;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1478772947;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1479407816;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1479827704;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1480266940;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1480323569;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1480431888;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1486734789;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1502098277;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1506753379;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1516801403;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1517328194;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1517490822;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1519227053;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1519381221;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1519724340;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1524673728;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("Retriggering partition request {}:{}.", ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1533041338;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("{}: Retriggering partition request {}:{}.", owningTaskName, ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,owning,task,name,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1533041356;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("{}: Retriggering partition request {}:{}.", owningTaskName, ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,owning,task,name,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1533215687;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("{}: Retriggering partition request {}:{}.", owningTaskName, ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,owning,task,name,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1534864589;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("{}: Retriggering partition request {}:{}.", owningTaskName, ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,owning,task,name,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1540912649;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("{}: Retriggering partition request {}:{}.", owningTaskName, ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,owning,task,name,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException;1541162913;Retriggers a partition request.;public void retriggerPartitionRequest(IntermediateResultPartitionID partitionId) throws IOException, InterruptedException {_		synchronized (requestLock) {_			if (!isReleased) {_				final InputChannel ch = inputChannels.get(partitionId)___				checkNotNull(ch, "Unknown input channel with ID " + partitionId)___				LOG.debug("{}: Retriggering partition request {}:{}.", owningTaskName, ch.partitionId, consumedSubpartitionIndex)___				if (ch.getClass() == RemoteInputChannel.class) {_					final RemoteInputChannel rch = (RemoteInputChannel) ch__					rch.retriggerSubpartitionRequest(consumedSubpartitionIndex)__				}_				else if (ch.getClass() == LocalInputChannel.class) {_					final LocalInputChannel ich = (LocalInputChannel) ch___					if (retriggerLocalRequestTimer == null) {_						retriggerLocalRequestTimer = new Timer(true)__					}__					ich.retriggerSubpartitionRequest(retriggerLocalRequestTimer, consumedSubpartitionIndex)__				}_				else {_					throw new IllegalStateException(_							"Unexpected type of channel to retrigger partition: " + ch.getClass())__				}_			}_		}_	};retriggers,a,partition,request;public,void,retrigger,partition,request,intermediate,result,partition,id,partition,id,throws,ioexception,interrupted,exception,synchronized,request,lock,if,is,released,final,input,channel,ch,input,channels,get,partition,id,check,not,null,ch,unknown,input,channel,with,id,partition,id,log,debug,retriggering,partition,request,owning,task,name,ch,partition,id,consumed,subpartition,index,if,ch,get,class,remote,input,channel,class,final,remote,input,channel,rch,remote,input,channel,ch,rch,retrigger,subpartition,request,consumed,subpartition,index,else,if,ch,get,class,local,input,channel,class,final,local,input,channel,ich,local,input,channel,ch,if,retrigger,local,request,timer,null,retrigger,local,request,timer,new,timer,true,ich,retrigger,subpartition,request,retrigger,local,request,timer,consumed,subpartition,index,else,throw,new,illegal,state,exception,unexpected,type,of,channel,to,retrigger,partition,ch,get,class
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment, 			IOMetricGroup metrics);1464773080;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment,_			IOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_				icdd.length, networkEnvironment.getPartitionStateChecker(), metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff(),_						metrics_				)__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff(),_						metrics_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff(),_						metrics_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,metrics,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,metrics,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,metrics,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment, 			IOMetricGroup metrics);1469183596;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment,_			IOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_				icdd.length, networkEnvironment.getPartitionStateChecker(), metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff(),_						metrics_				)__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff(),_						metrics_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff(),_						metrics_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,metrics,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,metrics,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,metrics,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1479407816;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1486734789;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1502098277;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1506753379;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1516801403;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1517328194;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1517490822;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1519227053;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1519381221;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1519724340;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1524673728;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1533041338;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1533041356;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1533215687;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1534864589;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1540912649;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public ResultPartitionType getConsumedPartitionType();1541162913;Returns the type of this input channel's consumed result partition.__@return consumed result partition type;public ResultPartitionType getConsumedPartitionType() {_		return consumedPartitionType__	};returns,the,type,of,this,input,channel,s,consumed,result,partition,return,consumed,result,partition,type;public,result,partition,type,get,consumed,partition,type,return,consumed,partition,type
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1431354895;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1432647455;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1437929917;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1438168143;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1438275734;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1445550685;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1453281354;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1457607745;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1465394479;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex, icdd.length, networkEnvironment.getPartitionStateChecker())___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager(),_						networkEnvironment.getPartitionRequestInitialAndMaxBackoff()_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,network,environment,get,partition,state,checker,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,and,max,backoff,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1502098277;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1506753379;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1516801403;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1517328194;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1517490822;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1519227053;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1519381221;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1519724340;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1524673728;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1533041338;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1533041356;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1533215687;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1534864589;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1540912649;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException;1541162913;The exclusive segments are recycled to network buffer pool directly when input channel is released.__@param segments The exclusive segments need to be recycled;public void returnExclusiveSegments(List<MemorySegment> segments) throws IOException {_		networkBufferPool.recycleMemorySegments(segments)__	};the,exclusive,segments,are,recycled,to,network,buffer,pool,directly,when,input,channel,is,released,param,segments,the,exclusive,segments,need,to,be,recycled;public,void,return,exclusive,segments,list,memory,segment,segments,throws,ioexception,network,buffer,pool,recycle,memory,segments,segments
SingleInputGate -> public static SingleInputGate create( 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1420560668;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				consumedResultId, consumedSubpartitionIndex, icdd.length)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager())__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager())__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,consumed,result,id,consumed,subpartition,index,icdd,length,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment);1427192006;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				consumedResultId, consumedSubpartitionIndex, icdd.length)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher())__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_						partitionLocation.getConnectionId(),_						networkEnvironment.getConnectionManager())__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_						networkEnvironment.getPartitionManager(),_						networkEnvironment.getTaskEventDispatcher(),_						networkEnvironment.getConnectionManager())__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,input,gate,deployment,descriptor,igdd,network,environment,network,environment,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,consumed,result,id,consumed,subpartition,index,icdd,length,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment, 			TaskActions taskActions, 			TaskIOMetricGroup metrics);1475838130;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment,_			TaskActions taskActions,_			TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_				icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					metrics_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,initial,backoff,metrics,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment, 			TaskActions taskActions, 			TaskIOMetricGroup metrics);1477468111;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment,_			TaskActions taskActions,_			TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_				icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					metrics_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,initial,backoff,metrics,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment, 			TaskActions taskActions, 			TaskIOMetricGroup metrics);1478772947;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment,_			TaskActions taskActions,_			TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_				icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		for (int i = 0_ i < inputChannels.length_ i++) {__			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created input channels {} from {}.", Arrays.toString(inputChannels), igdd)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,from,arrays,to,string,input,channels,igdd,return,input,gate
SingleInputGate -> public static SingleInputGate create( 			String owningTaskName, 			JobID jobId, 			ExecutionAttemptID executionId, 			InputGateDeploymentDescriptor igdd, 			NetworkEnvironment networkEnvironment, 			TaskActions taskActions, 			TaskIOMetricGroup metrics);1480431888;Creates an input gate and all of its input channels.;public static SingleInputGate create(_			String owningTaskName,_			JobID jobId,_			ExecutionAttemptID executionId,_			InputGateDeploymentDescriptor igdd,_			NetworkEnvironment networkEnvironment,_			TaskActions taskActions,_			TaskIOMetricGroup metrics) {__		final IntermediateDataSetID consumedResultId = checkNotNull(igdd.getConsumedResultId())___		final int consumedSubpartitionIndex = igdd.getConsumedSubpartitionIndex()__		checkArgument(consumedSubpartitionIndex >= 0)___		final InputChannelDeploymentDescriptor[] icdd = checkNotNull(igdd.getInputChannelDeploymentDescriptors())___		final SingleInputGate inputGate = new SingleInputGate(_				owningTaskName, jobId, executionId, consumedResultId, consumedSubpartitionIndex,_				icdd.length, taskActions, metrics)___		_		final InputChannel[] inputChannels = new InputChannel[icdd.length]___		int numLocalChannels = 0__		int numRemoteChannels = 0__		int numUnknownChannels = 0___		for (int i = 0_ i < inputChannels.length_ i++) {_			final ResultPartitionID partitionId = icdd[i].getConsumedPartitionId()__			final ResultPartitionLocation partitionLocation = icdd[i].getConsumedPartitionLocation()___			if (partitionLocation.isLocal()) {_				inputChannels[i] = new LocalInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numLocalChannels++__			}_			else if (partitionLocation.isRemote()) {_				inputChannels[i] = new RemoteInputChannel(inputGate, i, partitionId,_					partitionLocation.getConnectionId(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numRemoteChannels++__			}_			else if (partitionLocation.isUnknown()) {_				inputChannels[i] = new UnknownInputChannel(inputGate, i, partitionId,_					networkEnvironment.getResultPartitionManager(),_					networkEnvironment.getTaskEventDispatcher(),_					networkEnvironment.getConnectionManager(),_					networkEnvironment.getPartitionRequestInitialBackoff(),_					networkEnvironment.getPartitionRequestMaxBackoff(),_					metrics_				)___				numUnknownChannels++__			}_			else {_				throw new IllegalStateException("Unexpected partition location.")__			}__			inputGate.setInputChannel(partitionId.getPartitionId(), inputChannels[i])__		}__		LOG.debug("Created {} input channels (local: {}, remote: {}, unknown: {}).",_			inputChannels.length,_			numLocalChannels,_			numRemoteChannels,_			numUnknownChannels)___		return inputGate__	};creates,an,input,gate,and,all,of,its,input,channels;public,static,single,input,gate,create,string,owning,task,name,job,id,job,id,execution,attempt,id,execution,id,input,gate,deployment,descriptor,igdd,network,environment,network,environment,task,actions,task,actions,task,iometric,group,metrics,final,intermediate,data,set,id,consumed,result,id,check,not,null,igdd,get,consumed,result,id,final,int,consumed,subpartition,index,igdd,get,consumed,subpartition,index,check,argument,consumed,subpartition,index,0,final,input,channel,deployment,descriptor,icdd,check,not,null,igdd,get,input,channel,deployment,descriptors,final,single,input,gate,input,gate,new,single,input,gate,owning,task,name,job,id,execution,id,consumed,result,id,consumed,subpartition,index,icdd,length,task,actions,metrics,final,input,channel,input,channels,new,input,channel,icdd,length,int,num,local,channels,0,int,num,remote,channels,0,int,num,unknown,channels,0,for,int,i,0,i,input,channels,length,i,final,result,partition,id,partition,id,icdd,i,get,consumed,partition,id,final,result,partition,location,partition,location,icdd,i,get,consumed,partition,location,if,partition,location,is,local,input,channels,i,new,local,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,local,channels,else,if,partition,location,is,remote,input,channels,i,new,remote,input,channel,input,gate,i,partition,id,partition,location,get,connection,id,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,remote,channels,else,if,partition,location,is,unknown,input,channels,i,new,unknown,input,channel,input,gate,i,partition,id,network,environment,get,result,partition,manager,network,environment,get,task,event,dispatcher,network,environment,get,connection,manager,network,environment,get,partition,request,initial,backoff,network,environment,get,partition,request,max,backoff,metrics,num,unknown,channels,else,throw,new,illegal,state,exception,unexpected,partition,location,input,gate,set,input,channel,partition,id,get,partition,id,input,channels,i,log,debug,created,input,channels,local,remote,unknown,input,channels,length,num,local,channels,num,remote,channels,num,unknown,channels,return,input,gate
