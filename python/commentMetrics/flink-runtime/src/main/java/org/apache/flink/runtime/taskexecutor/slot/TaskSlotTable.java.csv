# id;timestamp;commentText;codeText;commentWords;codeWords
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1482522862;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1482522863;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1482522865;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1493386068;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1502706197;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1504507095;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1515177485;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1515588319;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1515600854;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1517317681;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1517333417;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1518680659;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1539634004;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false___@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout);1548941584;Allocate the slot with the given index for the given job and allocation id. Returns true if_the slot could be allocated. Otherwise it returns false.__@param index of the task slot to allocate_@param jobId to allocate the task slot for_@param allocationId identifying the allocation_@param slotTimeout until the slot times out_@return True if the task slot could be allocated_ otherwise false;public boolean allocateSlot(int index, JobID jobId, AllocationID allocationId, Time slotTimeout) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		boolean result = taskSlot.allocate(jobId, allocationId)___		if (result) {_			_			allocationIDTaskSlotMap.put(allocationId, taskSlot)___			_			timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___			_			Set<AllocationID> slots = slotsPerJob.get(jobId)___			if (slots == null) {_				slots = new HashSet<>(4)__				slotsPerJob.put(jobId, slots)__			}__			slots.add(allocationId)__		}__		return result__	};allocate,the,slot,with,the,given,index,for,the,given,job,and,allocation,id,returns,true,if,the,slot,could,be,allocated,otherwise,it,returns,false,param,index,of,the,task,slot,to,allocate,param,job,id,to,allocate,the,task,slot,for,param,allocation,id,identifying,the,allocation,param,slot,timeout,until,the,slot,times,out,return,true,if,the,task,slot,could,be,allocated,otherwise,false;public,boolean,allocate,slot,int,index,job,id,job,id,allocation,id,allocation,id,time,slot,timeout,check,init,task,slot,task,slot,task,slots,get,index,boolean,result,task,slot,allocate,job,id,allocation,id,if,result,allocation,idtask,slot,map,put,allocation,id,task,slot,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,slots,new,hash,set,4,slots,per,job,put,job,id,slots,slots,add,allocation,id,return,result
TaskSlotTable -> public void start(SlotActions initialSlotActions);1482522862;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1482522863;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1482522865;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1493386068;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1502706197;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1504507095;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1515177485;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1515588319;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1515600854;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1517317681;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1517333417;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1518680659;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1539634004;Start the task slot table with the given slot actions and slot timeout value.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,and,slot,timeout,value,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public void start(SlotActions initialSlotActions);1548941584;Start the task slot table with the given slot actions.__@param initialSlotActions to use for slot actions;public void start(SlotActions initialSlotActions) {_		this.slotActions = Preconditions.checkNotNull(initialSlotActions)___		timerService.start(this)___		started = true__	};start,the,task,slot,table,with,the,given,slot,actions,param,initial,slot,actions,to,use,for,slot,actions;public,void,start,slot,actions,initial,slot,actions,this,slot,actions,preconditions,check,not,null,initial,slot,actions,timer,service,start,this,started,true
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1493386068;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1502706197;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1504507095;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1515177485;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1515588319;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1515600854;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1517317681;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1517333417;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1518680659;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1539634004;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public AllocationID getCurrentAllocation(int index);1548941584;Get the current allocation for the task slot with the given index.__@param index identifying the slot for which the allocation id shall be retrieved_@return Allocation id of the specified slot if allocated_ otherwise null;public AllocationID getCurrentAllocation(int index) {_		return taskSlots.get(index).getAllocationId()__	};get,the,current,allocation,for,the,task,slot,with,the,given,index,param,index,identifying,the,slot,for,which,the,allocation,id,shall,be,retrieved,return,allocation,id,of,the,specified,slot,if,allocated,otherwise,null;public,allocation,id,get,current,allocation,int,index,return,task,slots,get,index,get,allocation,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1482522862;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1482522862;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1482522863;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1482522865;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1493386068;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1502706197;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1504507095;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1515177485;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1515588319;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1515600854;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1517317681;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1517333417;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1518680659;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1539634004;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public Iterator<Task> getTasks(JobID jobId);1548941584;Return an iterator over all tasks for a given job.__@param jobId identifying the job of the requested tasks_@return Iterator over all task for a given job;public Iterator<Task> getTasks(JobID jobId) {_		return new TaskIterator(jobId)__	};return,an,iterator,over,all,tasks,for,a,given,job,param,job,id,identifying,the,job,of,the,requested,tasks,return,iterator,over,all,task,for,a,given,job;public,iterator,task,get,tasks,job,id,job,id,return,new,task,iterator,job,id
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1482522862;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1482522863;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1482522865;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1493386068;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1502706197;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1504507095;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1515177485;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1515588319;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1515600854;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1517317681;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1517333417;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public boolean existsActiveSlot(JobID jobId, AllocationID allocationId);1518680659;Check whether there exists an active slot for the given job and allocation id.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if there exists a task slot which is active for the given job and allocation id.;public boolean existsActiveSlot(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.isActive(jobId, allocationId)__		} else {_			return false__		}_	};check,whether,there,exists,an,active,slot,for,the,given,job,and,allocation,id,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,there,exists,a,task,slot,which,is,active,for,the,given,job,and,allocation,id;public,boolean,exists,active,slot,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,is,active,job,id,allocation,id,else,return,false
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1482522862;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1482522862;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1482522863;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1482522865;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1493386068;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1502706197;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1504507095;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1515177485;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1515588319;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1515600854;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1517317681;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1517333417;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1518680659;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1539634004;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Task removeTask(ExecutionAttemptID executionAttemptID);1548941584;Remove the task with the given execution attempt id from its task slot. If the owning task_slot is in state releasing and empty after removing the task, the slot is freed via the_slot actions.__@param executionAttemptID identifying the task to remove_@return The removed task if there is any for the given execution attempt id_ otherwise null;public Task removeTask(ExecutionAttemptID executionAttemptID) {_		checkInit()___		TaskSlotMapping taskSlotMapping = taskSlotMappings.remove(executionAttemptID)___		if (taskSlotMapping != null) {_			Task task = taskSlotMapping.getTask()__			TaskSlot taskSlot = taskSlotMapping.getTaskSlot()___			taskSlot.remove(task.getExecutionId())___			if (taskSlot.isReleasing() && taskSlot.isEmpty()) {_				slotActions.freeSlot(taskSlot.getAllocationId())__			}__			return task__		} else {_			return null__		}_	};remove,the,task,with,the,given,execution,attempt,id,from,its,task,slot,if,the,owning,task,slot,is,in,state,releasing,and,empty,after,removing,the,task,the,slot,is,freed,via,the,slot,actions,param,execution,attempt,id,identifying,the,task,to,remove,return,the,removed,task,if,there,is,any,for,the,given,execution,attempt,id,otherwise,null;public,task,remove,task,execution,attempt,id,execution,attempt,id,check,init,task,slot,mapping,task,slot,mapping,task,slot,mappings,remove,execution,attempt,id,if,task,slot,mapping,null,task,task,task,slot,mapping,get,task,task,slot,task,slot,task,slot,mapping,get,task,slot,task,slot,remove,task,get,execution,id,if,task,slot,is,releasing,task,slot,is,empty,slot,actions,free,slot,task,slot,get,allocation,id,return,task,else,return,null
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1482522863;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1482522865;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1493386068;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1502706197;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1504507095;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1515177485;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1515588319;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1515600854;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1517317681;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1517333417;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1518680659;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1539634004;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<TaskSlot> getAllocatedSlots(JobID jobId);1548941584;Return an iterator of allocated slots for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocated slots.;public Iterator<TaskSlot> getAllocatedSlots(JobID jobId) {_		return new TaskSlotIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocated,slots;public,iterator,task,slot,get,allocated,slots,job,id,job,id,return,new,task,slot,iterator,job,id,task,slot,state,allocated
TaskSlotTable -> public Set<AllocationID> getAllocationIdsPerJob(JobID jobId);1517333417;Returns the all {@link AllocationID} for the given job.__@param jobId for which to return the set of {@link AllocationID}._@return Set of {@link AllocationID} for the given job;public Set<AllocationID> getAllocationIdsPerJob(JobID jobId) {_		final Set<AllocationID> allocationIds = slotsPerJob.get(jobId)___		if (allocationIds == null) {_			return Collections.emptySet()__		} else {_			return Collections.unmodifiableSet(allocationIds)__		}_	};returns,the,all,link,allocation,id,for,the,given,job,param,job,id,for,which,to,return,the,set,of,link,allocation,id,return,set,of,link,allocation,id,for,the,given,job;public,set,allocation,id,get,allocation,ids,per,job,job,id,job,id,final,set,allocation,id,allocation,ids,slots,per,job,get,job,id,if,allocation,ids,null,return,collections,empty,set,else,return,collections,unmodifiable,set,allocation,ids
TaskSlotTable -> public Set<AllocationID> getAllocationIdsPerJob(JobID jobId);1518680659;Returns the all {@link AllocationID} for the given job.__@param jobId for which to return the set of {@link AllocationID}._@return Set of {@link AllocationID} for the given job;public Set<AllocationID> getAllocationIdsPerJob(JobID jobId) {_		final Set<AllocationID> allocationIds = slotsPerJob.get(jobId)___		if (allocationIds == null) {_			return Collections.emptySet()__		} else {_			return Collections.unmodifiableSet(allocationIds)__		}_	};returns,the,all,link,allocation,id,for,the,given,job,param,job,id,for,which,to,return,the,set,of,link,allocation,id,return,set,of,link,allocation,id,for,the,given,job;public,set,allocation,id,get,allocation,ids,per,job,job,id,job,id,final,set,allocation,id,allocation,ids,slots,per,job,get,job,id,if,allocation,ids,null,return,collections,empty,set,else,return,collections,unmodifiable,set,allocation,ids
TaskSlotTable -> public Set<AllocationID> getAllocationIdsPerJob(JobID jobId);1539634004;Returns the all {@link AllocationID} for the given job.__@param jobId for which to return the set of {@link AllocationID}._@return Set of {@link AllocationID} for the given job;public Set<AllocationID> getAllocationIdsPerJob(JobID jobId) {_		final Set<AllocationID> allocationIds = slotsPerJob.get(jobId)___		if (allocationIds == null) {_			return Collections.emptySet()__		} else {_			return Collections.unmodifiableSet(allocationIds)__		}_	};returns,the,all,link,allocation,id,for,the,given,job,param,job,id,for,which,to,return,the,set,of,link,allocation,id,return,set,of,link,allocation,id,for,the,given,job;public,set,allocation,id,get,allocation,ids,per,job,job,id,job,id,final,set,allocation,id,allocation,ids,slots,per,job,get,job,id,if,allocation,ids,null,return,collections,empty,set,else,return,collections,unmodifiable,set,allocation,ids
TaskSlotTable -> public Set<AllocationID> getAllocationIdsPerJob(JobID jobId);1548941584;Returns the all {@link AllocationID} for the given job.__@param jobId for which to return the set of {@link AllocationID}._@return Set of {@link AllocationID} for the given job;public Set<AllocationID> getAllocationIdsPerJob(JobID jobId) {_		final Set<AllocationID> allocationIds = slotsPerJob.get(jobId)___		if (allocationIds == null) {_			return Collections.emptySet()__		} else {_			return Collections.unmodifiableSet(allocationIds)__		}_	};returns,the,all,link,allocation,id,for,the,given,job,param,job,id,for,which,to,return,the,set,of,link,allocation,id,return,set,of,link,allocation,id,for,the,given,job;public,set,allocation,id,get,allocation,ids,per,job,job,id,job,id,final,set,allocation,id,allocation,ids,slots,per,job,get,job,id,if,allocation,ids,null,return,collections,empty,set,else,return,collections,unmodifiable,set,allocation,ids
TaskSlotTable -> public void stop();1482522862;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotTimeout = null__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,timeout,null,slot,actions,null
TaskSlotTable -> public void stop();1482522862;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1482522863;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1482522865;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1493386068;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1502706197;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1504507095;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1515177485;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1515588319;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1515600854;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1517317681;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1517333417;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1518680659;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1539634004;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public void stop();1548941584;Stop the task slot table.;public void stop() {_		started = false__		timerService.stop()__		slotActions = null__	};stop,the,task,slot,table;public,void,stop,started,false,timer,service,stop,slot,actions,null
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1482522862;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1482522863;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1482522865;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1493386068;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1502706197;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1504507095;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1515177485;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1515588319;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1515600854;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1517317681;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1517333417;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1518680659;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1539634004;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException;1548941584;Marks the slot under the given allocation id as inactive. If the slot could not be found,_then a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as inactive_@param slotTimeout until the slot times out_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked inactive;public boolean markSlotInactive(AllocationID allocationId, Time slotTimeout) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markInactive()) {_				_				timerService.registerTimeout(allocationId, slotTimeout.getSize(), slotTimeout.getUnit())___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,inactive,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,inactive,param,slot,timeout,until,the,slot,times,out,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,inactive;public,boolean,mark,slot,inactive,allocation,id,allocation,id,time,slot,timeout,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,inactive,timer,service,register,timeout,allocation,id,slot,timeout,get,size,slot,timeout,get,unit,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1482522862;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1482522862;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1482522863;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1482522865;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1493386068;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1502706197;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1504507095;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1515177485;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1515588319;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1515600854;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1517317681;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1517333417;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1518680659;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1539634004;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException;1548941584;Marks the slot under the given allocation id as active. If the slot could not be found, then_a {@link SlotNotFoundException} is thrown.__@param allocationId to identify the task slot to mark as active_@throws SlotNotFoundException if the slot could not be found for the given allocation id_@return True if the slot could be marked active_ otherwise false;public boolean markSlotActive(AllocationID allocationId) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (taskSlot.markActive()) {_				_				LOG.info("Activate slot {}.", allocationId)___				timerService.unregisterTimeout(allocationId)___				return true__			} else {_				return false__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};marks,the,slot,under,the,given,allocation,id,as,active,if,the,slot,could,not,be,found,then,a,link,slot,not,found,exception,is,thrown,param,allocation,id,to,identify,the,task,slot,to,mark,as,active,throws,slot,not,found,exception,if,the,slot,could,not,be,found,for,the,given,allocation,id,return,true,if,the,slot,could,be,marked,active,otherwise,false;public,boolean,mark,slot,active,allocation,id,allocation,id,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,task,slot,mark,active,log,info,activate,slot,allocation,id,timer,service,unregister,timeout,allocation,id,return,true,else,return,false,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1482522862;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1482522862;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1482522863;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1482522865;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1493386068;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1502706197;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1504507095;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1515177485;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1515588319;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1515600854;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1517317681;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1517333417;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1518680659;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1539634004;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> public boolean hasAllocatedSlots(JobID jobId);1548941584;Check whether the job has allocated (not active) slots.__@param jobId for which to check for allocated slots_@return True if there are allocated slots for the given job id.;public boolean hasAllocatedSlots(JobID jobId) {_		return getAllocatedSlots(jobId).hasNext()__	};check,whether,the,job,has,allocated,not,active,slots,param,job,id,for,which,to,check,for,allocated,slots,return,true,if,there,are,allocated,slots,for,the,given,job,id;public,boolean,has,allocated,slots,job,id,job,id,return,get,allocated,slots,job,id,has,next
TaskSlotTable -> @Nullable 	public JobID getOwningJob(AllocationID allocationId);1517333417;Returns the owning job of the {@link TaskSlot} identified by the_given {@link AllocationID}.__@param allocationId identifying the slot for which to retrieve the owning job_@return Owning job of the specified {@link TaskSlot} or null if there is no slot for_the given allocation id or if the slot has no owning job assigned;@Nullable_	public JobID getOwningJob(AllocationID allocationId) {_		final TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.getJobId()__		} else {_			return null__		}_	};returns,the,owning,job,of,the,link,task,slot,identified,by,the,given,link,allocation,id,param,allocation,id,identifying,the,slot,for,which,to,retrieve,the,owning,job,return,owning,job,of,the,specified,link,task,slot,or,null,if,there,is,no,slot,for,the,given,allocation,id,or,if,the,slot,has,no,owning,job,assigned;nullable,public,job,id,get,owning,job,allocation,id,allocation,id,final,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,get,job,id,else,return,null
TaskSlotTable -> @Nullable 	public JobID getOwningJob(AllocationID allocationId);1518680659;Returns the owning job of the {@link TaskSlot} identified by the_given {@link AllocationID}.__@param allocationId identifying the slot for which to retrieve the owning job_@return Owning job of the specified {@link TaskSlot} or null if there is no slot for_the given allocation id or if the slot has no owning job assigned;@Nullable_	public JobID getOwningJob(AllocationID allocationId) {_		final TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.getJobId()__		} else {_			return null__		}_	};returns,the,owning,job,of,the,link,task,slot,identified,by,the,given,link,allocation,id,param,allocation,id,identifying,the,slot,for,which,to,retrieve,the,owning,job,return,owning,job,of,the,specified,link,task,slot,or,null,if,there,is,no,slot,for,the,given,allocation,id,or,if,the,slot,has,no,owning,job,assigned;nullable,public,job,id,get,owning,job,allocation,id,allocation,id,final,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,get,job,id,else,return,null
TaskSlotTable -> @Nullable 	public JobID getOwningJob(AllocationID allocationId);1539634004;Returns the owning job of the {@link TaskSlot} identified by the_given {@link AllocationID}.__@param allocationId identifying the slot for which to retrieve the owning job_@return Owning job of the specified {@link TaskSlot} or null if there is no slot for_the given allocation id or if the slot has no owning job assigned;@Nullable_	public JobID getOwningJob(AllocationID allocationId) {_		final TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.getJobId()__		} else {_			return null__		}_	};returns,the,owning,job,of,the,link,task,slot,identified,by,the,given,link,allocation,id,param,allocation,id,identifying,the,slot,for,which,to,retrieve,the,owning,job,return,owning,job,of,the,specified,link,task,slot,or,null,if,there,is,no,slot,for,the,given,allocation,id,or,if,the,slot,has,no,owning,job,assigned;nullable,public,job,id,get,owning,job,allocation,id,allocation,id,final,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,get,job,id,else,return,null
TaskSlotTable -> @Nullable 	public JobID getOwningJob(AllocationID allocationId);1548941584;Returns the owning job of the {@link TaskSlot} identified by the_given {@link AllocationID}.__@param allocationId identifying the slot for which to retrieve the owning job_@return Owning job of the specified {@link TaskSlot} or null if there is no slot for_the given allocation id or if the slot has no owning job assigned;@Nullable_	public JobID getOwningJob(AllocationID allocationId) {_		final TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			return taskSlot.getJobId()__		} else {_			return null__		}_	};returns,the,owning,job,of,the,link,task,slot,identified,by,the,given,link,allocation,id,param,allocation,id,identifying,the,slot,for,which,to,retrieve,the,owning,job,return,owning,job,of,the,specified,link,task,slot,or,null,if,there,is,no,slot,for,the,given,allocation,id,or,if,the,slot,has,no,owning,job,assigned;nullable,public,job,id,get,owning,job,allocation,id,allocation,id,final,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,return,task,slot,get,job,id,else,return,null
TaskSlotTable -> public boolean isSlotFree(int index);1482522862;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1482522862;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1482522863;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1482522865;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1493386068;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1502706197;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1504507095;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1515177485;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1515588319;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1515600854;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1517317681;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1517333417;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1518680659;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1539634004;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public boolean isSlotFree(int index);1548941584;Check whether the task slot with the given index is free.__@param index of the task slot_@return True if the task slot is free_ otherwise false;public boolean isSlotFree(int index) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isFree()__	};check,whether,the,task,slot,with,the,given,index,is,free,param,index,of,the,task,slot,return,true,if,the,task,slot,is,free,otherwise,false;public,boolean,is,slot,free,int,index,task,slot,task,slot,task,slots,get,index,return,task,slot,is,free
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1482522862;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1482522862;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1482522863;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1482522865;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1493386068;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1502706197;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1504507095;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1515177485;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1515588319;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1515600854;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1517317681;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1517333417;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1518680659;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1539634004;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Task getTask(ExecutionAttemptID executionAttemptID);1548941584;Get the task for the given execution attempt id. If none could be found, then return null.__@param executionAttemptID identifying the requested task_@return The task for the given execution attempt id if it exist_ otherwise null;public Task getTask(ExecutionAttemptID executionAttemptID) {_		TaskSlotMapping taskSlotMapping = taskSlotMappings.get(executionAttemptID)___		if (taskSlotMapping != null) {_			return taskSlotMapping.getTask()__		} else {_			return null__		}_	};get,the,task,for,the,given,execution,attempt,id,if,none,could,be,found,then,return,null,param,execution,attempt,id,identifying,the,requested,task,return,the,task,for,the,given,execution,attempt,id,if,it,exist,otherwise,null;public,task,get,task,execution,attempt,id,execution,attempt,id,task,slot,mapping,task,slot,mapping,task,slot,mappings,get,execution,attempt,id,if,task,slot,mapping,null,return,task,slot,mapping,get,task,else,return,null
TaskSlotTable -> public Iterator<AllocationID> getAllocatedSlots(JobID jobId);1482522862;Return an iterator of allocated slots (their allocation ids) for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocation ids of allocated slots.;public Iterator<AllocationID> getAllocatedSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,their,allocation,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocation,ids,of,allocated,slots;public,iterator,allocation,id,get,allocated,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,allocated
TaskSlotTable -> public Iterator<AllocationID> getAllocatedSlots(JobID jobId);1482522862;Return an iterator of allocated slots (their allocation ids) for the given job id.__@param jobId for which to return the allocated slots_@return Iterator of allocation ids of allocated slots.;public Iterator<AllocationID> getAllocatedSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ALLOCATED)__	};return,an,iterator,of,allocated,slots,their,allocation,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,allocated,slots,return,iterator,of,allocation,ids,of,allocated,slots;public,iterator,allocation,id,get,allocated,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,allocated
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1482522862;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		checkInit()___		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,check,init,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1482522862;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1482522863;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1482522865;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1493386068;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1502706197;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1504507095;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1515177485;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1515588319;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1515600854;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1517317681;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1517333417;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1518680659;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1539634004;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean isAllocated(int index, JobID jobId, AllocationID allocationId);1548941584;Check whether the slot for the given index is allocated for the given job and allocation id.__@param index of the task slot_@param jobId for which the task slot should be allocated_@param allocationId which should match the task slot's allocation id_@return True if the given task slot is allocated for the given job and allocation id;public boolean isAllocated(int index, JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = taskSlots.get(index)___		return taskSlot.isAllocated(jobId, allocationId)__	};check,whether,the,slot,for,the,given,index,is,allocated,for,the,given,job,and,allocation,id,param,index,of,the,task,slot,param,job,id,for,which,the,task,slot,should,be,allocated,param,allocation,id,which,should,match,the,task,slot,s,allocation,id,return,true,if,the,given,task,slot,is,allocated,for,the,given,job,and,allocation,id;public,boolean,is,allocated,int,index,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,task,slots,get,index,return,task,slot,is,allocated,job,id,allocation,id
TaskSlotTable -> public boolean tryMarkSlotActive(JobID jobId, AllocationID allocationId);1539634004;Try to mark the specified slot as active if it has been allocated by the given job.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if the task slot could be marked active.;public boolean tryMarkSlotActive(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null && taskSlot.isAllocated(jobId, allocationId)) {_			return taskSlot.markActive()__		} else {_			return false__		}_	};try,to,mark,the,specified,slot,as,active,if,it,has,been,allocated,by,the,given,job,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,the,task,slot,could,be,marked,active;public,boolean,try,mark,slot,active,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,task,slot,is,allocated,job,id,allocation,id,return,task,slot,mark,active,else,return,false
TaskSlotTable -> public boolean tryMarkSlotActive(JobID jobId, AllocationID allocationId);1548941584;Try to mark the specified slot as active if it has been allocated by the given job.__@param jobId of the allocated slot_@param allocationId identifying the allocation_@return True if the task slot could be marked active.;public boolean tryMarkSlotActive(JobID jobId, AllocationID allocationId) {_		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null && taskSlot.isAllocated(jobId, allocationId)) {_			return taskSlot.markActive()__		} else {_			return false__		}_	};try,to,mark,the,specified,slot,as,active,if,it,has,been,allocated,by,the,given,job,param,job,id,of,the,allocated,slot,param,allocation,id,identifying,the,allocation,return,true,if,the,task,slot,could,be,marked,active;public,boolean,try,mark,slot,active,job,id,job,id,allocation,id,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,task,slot,is,allocated,job,id,allocation,id,return,task,slot,mark,active,else,return,false
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1482522862;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1482522862;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1482522863;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1482522865;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1493386068;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1502706197;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1504507095;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1515177485;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1515588319;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1515600854;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(taskSlot.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,slot,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1517317681;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(task.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1517333417;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(task.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1518680659;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(task.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1539634004;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(task.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,get,allocation,id
TaskSlotTable -> public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException;1548941584;Add the given task to the slot identified by the task's allocation id.__@param task to add to the task slot with the respective allocation id_@throws SlotNotFoundException if there was no slot for the given allocation id_@throws SlotNotActiveException if there was no slot active for task's job and allocation id_@return True if the task could be added to the task slot_ otherwise false;public boolean addTask(Task task) throws SlotNotFoundException, SlotNotActiveException {_		Preconditions.checkNotNull(task)___		TaskSlot taskSlot = getTaskSlot(task.getAllocationId())___		if (taskSlot != null) {_			if (taskSlot.isActive(task.getJobID(), task.getAllocationId())) {_				if (taskSlot.add(task)) {_					taskSlotMappings.put(task.getExecutionId(), new TaskSlotMapping(task, taskSlot))___					return true__				} else {_					return false__				}_			} else {_				throw new SlotNotActiveException(task.getJobID(), task.getAllocationId())__			}_		} else {_			throw new SlotNotFoundException(task.getAllocationId())__		}_	};add,the,given,task,to,the,slot,identified,by,the,task,s,allocation,id,param,task,to,add,to,the,task,slot,with,the,respective,allocation,id,throws,slot,not,found,exception,if,there,was,no,slot,for,the,given,allocation,id,throws,slot,not,active,exception,if,there,was,no,slot,active,for,task,s,job,and,allocation,id,return,true,if,the,task,could,be,added,to,the,task,slot,otherwise,false;public,boolean,add,task,task,task,throws,slot,not,found,exception,slot,not,active,exception,preconditions,check,not,null,task,task,slot,task,slot,get,task,slot,task,get,allocation,id,if,task,slot,null,if,task,slot,is,active,task,get,job,id,task,get,allocation,id,if,task,slot,add,task,task,slot,mappings,put,task,get,execution,id,new,task,slot,mapping,task,task,slot,return,true,else,return,false,else,throw,new,slot,not,active,exception,task,get,job,id,task,get,allocation,id,else,throw,new,slot,not,found,exception,task,get,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1482522862;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			LOG.info("Free slot {}.", allocationId, cause)___			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,log,info,free,slot,allocation,id,cause,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1482522862;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()__		_		if (LOG.isDebugEnabled()) {_			LOG.debug("Free slot {}.", allocationId, cause)__		} else {_			LOG.info("Free slot {}.", allocationId)__		}__		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			LOG.info("Free slot {}.", allocationId, cause)___			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,if,log,is,debug,enabled,log,debug,free,slot,allocation,id,cause,else,log,info,free,slot,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,log,info,free,slot,allocation,id,cause,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1482522863;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Free slot {}.", allocationId, cause)__		} else {_			LOG.info("Free slot {}.", allocationId)__		}__		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			LOG.info("Free slot {}.", allocationId, cause)___			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,if,log,is,debug,enabled,log,debug,free,slot,allocation,id,cause,else,log,info,free,slot,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,log,info,free,slot,allocation,id,cause,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1482522865;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Free slot {}.", allocationId, cause)__		} else {_			LOG.info("Free slot {}.", allocationId)__		}__		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			LOG.info("Free slot {}.", allocationId, cause)___			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,if,log,is,debug,enabled,log,debug,free,slot,allocation,id,cause,else,log,info,free,slot,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,log,info,free,slot,allocation,id,cause,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1493386068;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Free slot {}.", allocationId, cause)__		} else {_			LOG.info("Free slot {}.", allocationId)__		}__		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			LOG.info("Free slot {}.", allocationId, cause)___			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,if,log,is,debug,enabled,log,debug,free,slot,allocation,id,cause,else,log,info,free,slot,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,log,info,free,slot,allocation,id,cause,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1502706197;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		if (LOG.isDebugEnabled()) {_			LOG.debug("Free slot {}.", allocationId, cause)__		} else {_			LOG.info("Free slot {}.", allocationId)__		}__		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,if,log,is,debug,enabled,log,debug,free,slot,allocation,id,cause,else,log,info,free,slot,allocation,id,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1504507095;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1515177485;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1515588319;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1517333417;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return The freed TaskSlot. If the TaskSlot cannot be freed then null.;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,the,freed,task,slot,if,the,task,slot,cannot,be,freed,then,null;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1518680659;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return The freed TaskSlot. If the TaskSlot cannot be freed then null.;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,the,freed,task,slot,if,the,task,slot,cannot,be,freed,then,null;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1539634004;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return The freed TaskSlot. If the TaskSlot cannot be freed then null.;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,the,freed,task,slot,if,the,task,slot,cannot,be,freed,then,null;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1548941584;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return The freed TaskSlot. If the TaskSlot cannot be freed then null.;public int freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot.getIndex()__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return -1__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,the,freed,task,slot,if,the,task,slot,cannot,be,freed,then,null;public,int,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,get,index,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,1,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> @Nullable 	public TaskSlot freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1515600854;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return The freed TaskSlot. If the TaskSlot cannot be freed then null.;@Nullable_	public TaskSlot freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return null__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,the,freed,task,slot,if,the,task,slot,cannot,be,freed,then,null;nullable,public,task,slot,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,null,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> @Nullable 	public TaskSlot freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException;1517317681;Tries to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@param cause to fail the tasks with if slot is not empty_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return The freed TaskSlot. If the TaskSlot cannot be freed then null.;@Nullable_	public TaskSlot freeSlot(AllocationID allocationId, Throwable cause) throws SlotNotFoundException {_		checkInit()___		TaskSlot taskSlot = getTaskSlot(allocationId)___		if (taskSlot != null) {_			if (LOG.isDebugEnabled()) {_				LOG.debug("Free slot {}.", taskSlot, cause)__			} else {_				LOG.info("Free slot {}.", taskSlot)__			}__			final JobID jobId = taskSlot.getJobId()___			if (taskSlot.markFree()) {_				_				allocationIDTaskSlotMap.remove(allocationId)___				_				timerService.unregisterTimeout(allocationId)___				Set<AllocationID> slots = slotsPerJob.get(jobId)___				if (slots == null) {_					throw new IllegalStateException("There are no more slots allocated for the job " + jobId +_						". This indicates a programming bug.")__				}__				slots.remove(allocationId)___				if (slots.isEmpty()) {_					slotsPerJob.remove(jobId)__				}__				return taskSlot__			} else {_				_				_				taskSlot.markReleasing()___				Iterator<Task> taskIterator = taskSlot.getTasks()___				while (taskIterator.hasNext()) {_					taskIterator.next().failExternally(cause)__				}__				return null__			}_		} else {_			throw new SlotNotFoundException(allocationId)__		}_	};tries,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,param,cause,to,fail,the,tasks,with,if,slot,is,not,empty,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,the,freed,task,slot,if,the,task,slot,cannot,be,freed,then,null;nullable,public,task,slot,free,slot,allocation,id,allocation,id,throwable,cause,throws,slot,not,found,exception,check,init,task,slot,task,slot,get,task,slot,allocation,id,if,task,slot,null,if,log,is,debug,enabled,log,debug,free,slot,task,slot,cause,else,log,info,free,slot,task,slot,final,job,id,job,id,task,slot,get,job,id,if,task,slot,mark,free,allocation,idtask,slot,map,remove,allocation,id,timer,service,unregister,timeout,allocation,id,set,allocation,id,slots,slots,per,job,get,job,id,if,slots,null,throw,new,illegal,state,exception,there,are,no,more,slots,allocated,for,the,job,job,id,this,indicates,a,programming,bug,slots,remove,allocation,id,if,slots,is,empty,slots,per,job,remove,job,id,return,task,slot,else,task,slot,mark,releasing,iterator,task,task,iterator,task,slot,get,tasks,while,task,iterator,has,next,task,iterator,next,fail,externally,cause,return,null,else,throw,new,slot,not,found,exception,allocation,id
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1482522862;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1482522862;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1482522863;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1482522865;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1493386068;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1502706197;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1504507095;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1515177485;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1515588319;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1517333417;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1518680659;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1539634004;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public int freeSlot(AllocationID allocationId) throws SlotNotFoundException;1548941584;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public int freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,int,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1482522862;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1482522862;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1482522863;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1482522865;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1493386068;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1502706197;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1504507095;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1515177485;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1515588319;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1515600854;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1517317681;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1517333417;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1518680659;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1539634004;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public Iterator<AllocationID> getActiveSlots(JobID jobId);1548941584;Return an iterator of active slots (their application ids) for the given job id.__@param jobId for which to return the active slots_@return Iterator of allocation ids of active slots;public Iterator<AllocationID> getActiveSlots(JobID jobId) {_		return new AllocationIDIterator(jobId, TaskSlotState.ACTIVE)__	};return,an,iterator,of,active,slots,their,application,ids,for,the,given,job,id,param,job,id,for,which,to,return,the,active,slots,return,iterator,of,allocation,ids,of,active,slots;public,iterator,allocation,id,get,active,slots,job,id,job,id,return,new,allocation,iditerator,job,id,task,slot,state,active
TaskSlotTable -> public TaskSlot freeSlot(AllocationID allocationId) throws SlotNotFoundException;1515600854;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public TaskSlot freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,task,slot,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public TaskSlot freeSlot(AllocationID allocationId) throws SlotNotFoundException;1517317681;Try to free the slot. If the slot is empty it will set the state of the task slot to free_and return its index. If the slot is not empty, then it will set the state of the task slot_to releasing, fail all tasks and return -1.__@param allocationId identifying the task slot to be freed_@throws SlotNotFoundException if there is not task slot for the given allocation id_@return Index of the freed slot if the slot could be freed_ otherwise -1;public TaskSlot freeSlot(AllocationID allocationId) throws SlotNotFoundException {_		return freeSlot(allocationId, new Exception("The task slot of this task is being freed."))__	};try,to,free,the,slot,if,the,slot,is,empty,it,will,set,the,state,of,the,task,slot,to,free,and,return,its,index,if,the,slot,is,not,empty,then,it,will,set,the,state,of,the,task,slot,to,releasing,fail,all,tasks,and,return,1,param,allocation,id,identifying,the,task,slot,to,be,freed,throws,slot,not,found,exception,if,there,is,not,task,slot,for,the,given,allocation,id,return,index,of,the,freed,slot,if,the,slot,could,be,freed,otherwise,1;public,task,slot,free,slot,allocation,id,allocation,id,throws,slot,not,found,exception,return,free,slot,allocation,id,new,exception,the,task,slot,of,this,task,is,being,freed
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1482522862;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1482522862;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1482522863;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1482522865;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1493386068;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1502706197;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1504507095;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1515177485;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1515588319;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1515600854;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1517317681;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1517333417;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1518680659;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1539634004;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
TaskSlotTable -> public boolean isValidTimeout(AllocationID allocationId, UUID ticket);1548941584;Check whether the timeout with ticket is valid for the given allocation id.__@param allocationId to check against_@param ticket of the timeout_@return True if the timeout is valid_ otherwise false;public boolean isValidTimeout(AllocationID allocationId, UUID ticket) {_		checkInit()___		return timerService.isValid(allocationId, ticket)__	};check,whether,the,timeout,with,ticket,is,valid,for,the,given,allocation,id,param,allocation,id,to,check,against,param,ticket,of,the,timeout,return,true,if,the,timeout,is,valid,otherwise,false;public,boolean,is,valid,timeout,allocation,id,allocation,id,uuid,ticket,check,init,return,timer,service,is,valid,allocation,id,ticket
