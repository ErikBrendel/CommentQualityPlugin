# id;timestamp;commentText;codeText;commentWords;codeWords
KeyGroupRange -> public KeyGroupRange(int startKeyGroup, int endKeyGroup);1470847490;Defines the range [startKeyGroup, endKeyGroup]__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive);public KeyGroupRange(int startKeyGroup, int endKeyGroup) {_		Preconditions.checkArgument(startKeyGroup >= 0)__		Preconditions.checkArgument(startKeyGroup <= endKeyGroup)__		this.startKeyGroup = startKeyGroup__		this.endKeyGroup = endKeyGroup__		Preconditions.checkArgument(getNumberOfKeyGroups() >= 0, "Potential overflow detected.")__	};defines,the,range,start,key,group,end,key,group,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive;public,key,group,range,int,start,key,group,int,end,key,group,preconditions,check,argument,start,key,group,0,preconditions,check,argument,start,key,group,end,key,group,this,start,key,group,start,key,group,this,end,key,group,end,key,group,preconditions,check,argument,get,number,of,key,groups,0,potential,overflow,detected
KeyGroupRange -> public KeyGroupRange(int startKeyGroup, int endKeyGroup);1470909547;Defines the range [startKeyGroup, endKeyGroup]__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive);public KeyGroupRange(int startKeyGroup, int endKeyGroup) {_		Preconditions.checkArgument(startKeyGroup >= 0)__		Preconditions.checkArgument(startKeyGroup <= endKeyGroup)__		this.startKeyGroup = startKeyGroup__		this.endKeyGroup = endKeyGroup__		Preconditions.checkArgument(getNumberOfKeyGroups() >= 0, "Potential overflow detected.")__	};defines,the,range,start,key,group,end,key,group,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive;public,key,group,range,int,start,key,group,int,end,key,group,preconditions,check,argument,start,key,group,0,preconditions,check,argument,start,key,group,end,key,group,this,start,key,group,start,key,group,this,end,key,group,end,key,group,preconditions,check,argument,get,number,of,key,groups,0,potential,overflow,detected
KeyGroupRange -> public KeyGroupRange(int startKeyGroup, int endKeyGroup);1472464402;Defines the range [startKeyGroup, endKeyGroup]__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive);public KeyGroupRange(int startKeyGroup, int endKeyGroup) {_		Preconditions.checkArgument(startKeyGroup >= 0)__		Preconditions.checkArgument(startKeyGroup <= endKeyGroup)__		this.startKeyGroup = startKeyGroup__		this.endKeyGroup = endKeyGroup__		Preconditions.checkArgument(getNumberOfKeyGroups() >= 0, "Potential overflow detected.")__	};defines,the,range,start,key,group,end,key,group,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive;public,key,group,range,int,start,key,group,int,end,key,group,preconditions,check,argument,start,key,group,0,preconditions,check,argument,start,key,group,end,key,group,this,start,key,group,start,key,group,this,end,key,group,end,key,group,preconditions,check,argument,get,number,of,key,groups,0,potential,overflow,detected
KeyGroupRange -> public KeyGroupRange(int startKeyGroup, int endKeyGroup);1475571578;Defines the range [startKeyGroup, endKeyGroup]__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive);public KeyGroupRange(int startKeyGroup, int endKeyGroup) {_		Preconditions.checkArgument(startKeyGroup >= 0)__		Preconditions.checkArgument(startKeyGroup <= endKeyGroup)__		this.startKeyGroup = startKeyGroup__		this.endKeyGroup = endKeyGroup__		Preconditions.checkArgument(getNumberOfKeyGroups() >= 0, "Potential overflow detected.")__	};defines,the,range,start,key,group,end,key,group,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive;public,key,group,range,int,start,key,group,int,end,key,group,preconditions,check,argument,start,key,group,0,preconditions,check,argument,start,key,group,end,key,group,this,start,key,group,start,key,group,this,end,key,group,end,key,group,preconditions,check,argument,get,number,of,key,groups,0,potential,overflow,detected
KeyGroupRange -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1470847490;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must not be smaller than zero.")__		Preconditions.checkArgument(maxParallelism >= parallelism, "Maximum parallelism must not be smaller than parallelism.")__		Preconditions.checkArgument(maxParallelism <= Short.MAX_VALUE, "Maximum parallelism must be smaller than Short.MAX_VALUE.")___		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,preconditions,check,argument,parallelism,0,parallelism,must,not,be,smaller,than,zero,preconditions,check,argument,max,parallelism,parallelism,maximum,parallelism,must,not,be,smaller,than,parallelism,preconditions,check,argument,max,parallelism,short,maximum,parallelism,must,be,smaller,than,short,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRange -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1470909547;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {__		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRange -> private KeyGroupRange();1470847490;Empty KeyGroup Constructor;private KeyGroupRange() {_		this.startKeyGroup = 0__		this.endKeyGroup = -1__	};empty,key,group,constructor;private,key,group,range,this,start,key,group,0,this,end,key,group,1
KeyGroupRange -> private KeyGroupRange();1470909547;Empty KeyGroup Constructor;private KeyGroupRange() {_		this.startKeyGroup = 0__		this.endKeyGroup = -1__	};empty,key,group,constructor;private,key,group,range,this,start,key,group,0,this,end,key,group,1
KeyGroupRange -> private KeyGroupRange();1472464402;Empty KeyGroup Constructor;private KeyGroupRange() {_		this.startKeyGroup = 0__		this.endKeyGroup = -1__	};empty,key,group,constructor;private,key,group,range,this,start,key,group,0,this,end,key,group,1
KeyGroupRange -> private KeyGroupRange();1475571578;Empty KeyGroup Constructor;private KeyGroupRange() {_		this.startKeyGroup = 0__		this.endKeyGroup = -1__	};empty,key,group,constructor;private,key,group,range,this,start,key,group,0,this,end,key,group,1
KeyGroupRange -> public boolean contains(int keyGroup);1470847490;Checks whether or not a single key-group is contained in the range.__@param keyGroup Key-group to check for inclusion._@return True, only if the key-group is in the range.;public boolean contains(int keyGroup) {_		return keyGroup >= startKeyGroup && keyGroup <= endKeyGroup__	};checks,whether,or,not,a,single,key,group,is,contained,in,the,range,param,key,group,key,group,to,check,for,inclusion,return,true,only,if,the,key,group,is,in,the,range;public,boolean,contains,int,key,group,return,key,group,start,key,group,key,group,end,key,group
KeyGroupRange -> public boolean contains(int keyGroup);1470909547;Checks whether or not a single key-group is contained in the range.__@param keyGroup Key-group to check for inclusion._@return True, only if the key-group is in the range.;public boolean contains(int keyGroup) {_		return keyGroup >= startKeyGroup && keyGroup <= endKeyGroup__	};checks,whether,or,not,a,single,key,group,is,contained,in,the,range,param,key,group,key,group,to,check,for,inclusion,return,true,only,if,the,key,group,is,in,the,range;public,boolean,contains,int,key,group,return,key,group,start,key,group,key,group,end,key,group
KeyGroupRange -> public boolean contains(int keyGroup);1472464402;Checks whether or not a single key-group is contained in the range.__@param keyGroup Key-group to check for inclusion._@return True, only if the key-group is in the range.;public boolean contains(int keyGroup) {_		return keyGroup >= startKeyGroup && keyGroup <= endKeyGroup__	};checks,whether,or,not,a,single,key,group,is,contained,in,the,range,param,key,group,key,group,to,check,for,inclusion,return,true,only,if,the,key,group,is,in,the,range;public,boolean,contains,int,key,group,return,key,group,start,key,group,key,group,end,key,group
KeyGroupRange -> public KeyGroupRange getIntersection(KeyGroupRange other);1470847490;Create a range that represent the intersection between this range and the given range.__@param other A KeyGroupRange to intersect._@return Key-group range that is the intersection between this and the given key-group range.;public KeyGroupRange getIntersection(KeyGroupRange other) {_		int start = Math.max(startKeyGroup, other.startKeyGroup)__		int end = Math.min(endKeyGroup, other.endKeyGroup)__		return start <= end ? new KeyGroupRange(start, end) : EMPTY_KEY_GROUP__	};create,a,range,that,represent,the,intersection,between,this,range,and,the,given,range,param,other,a,key,group,range,to,intersect,return,key,group,range,that,is,the,intersection,between,this,and,the,given,key,group,range;public,key,group,range,get,intersection,key,group,range,other,int,start,math,max,start,key,group,other,start,key,group,int,end,math,min,end,key,group,other,end,key,group,return,start,end,new,key,group,range,start,end
KeyGroupRange -> public KeyGroupRange getIntersection(KeyGroupRange other);1470909547;Create a range that represent the intersection between this range and the given range.__@param other A KeyGroupRange to intersect._@return Key-group range that is the intersection between this and the given key-group range.;public KeyGroupRange getIntersection(KeyGroupRange other) {_		int start = Math.max(startKeyGroup, other.startKeyGroup)__		int end = Math.min(endKeyGroup, other.endKeyGroup)__		return start <= end ? new KeyGroupRange(start, end) : EMPTY_KEY_GROUP__	};create,a,range,that,represent,the,intersection,between,this,range,and,the,given,range,param,other,a,key,group,range,to,intersect,return,key,group,range,that,is,the,intersection,between,this,and,the,given,key,group,range;public,key,group,range,get,intersection,key,group,range,other,int,start,math,max,start,key,group,other,start,key,group,int,end,math,min,end,key,group,other,end,key,group,return,start,end,new,key,group,range,start,end
KeyGroupRange -> public KeyGroupRange getIntersection(KeyGroupRange other);1472464402;Create a range that represent the intersection between this range and the given range.__@param other A KeyGroupRange to intersect._@return Key-group range that is the intersection between this and the given key-group range.;public KeyGroupRange getIntersection(KeyGroupRange other) {_		int start = Math.max(startKeyGroup, other.startKeyGroup)__		int end = Math.min(endKeyGroup, other.endKeyGroup)__		return start <= end ? new KeyGroupRange(start, end) : EMPTY_KEY_GROUP__	};create,a,range,that,represent,the,intersection,between,this,range,and,the,given,range,param,other,a,key,group,range,to,intersect,return,key,group,range,that,is,the,intersection,between,this,and,the,given,key,group,range;public,key,group,range,get,intersection,key,group,range,other,int,start,math,max,start,key,group,other,start,key,group,int,end,math,min,end,key,group,other,end,key,group,return,start,end,new,key,group,range,start,end
KeyGroupRange -> public KeyGroupRange getIntersection(KeyGroupRange other);1475571578;Create a range that represent the intersection between this range and the given range.__@param other A KeyGroupRange to intersect._@return Key-group range that is the intersection between this and the given key-group range.;public KeyGroupRange getIntersection(KeyGroupRange other) {_		int start = Math.max(startKeyGroup, other.startKeyGroup)__		int end = Math.min(endKeyGroup, other.endKeyGroup)__		return start <= end ? new KeyGroupRange(start, end) : EMPTY_KEY_GROUP_RANGE__	};create,a,range,that,represent,the,intersection,between,this,range,and,the,given,range,param,other,a,key,group,range,to,intersect,return,key,group,range,that,is,the,intersection,between,this,and,the,given,key,group,range;public,key,group,range,get,intersection,key,group,range,other,int,start,math,max,start,key,group,other,start,key,group,int,end,math,min,end,key,group,other,end,key,group,return,start,end,new,key,group,range,start,end
KeyGroupRange -> public int getNumberOfKeyGroups();1470847490;@return The number of key-groups in the range;public int getNumberOfKeyGroups() {_		return 1 + endKeyGroup - startKeyGroup__	};return,the,number,of,key,groups,in,the,range;public,int,get,number,of,key,groups,return,1,end,key,group,start,key,group
KeyGroupRange -> public int getNumberOfKeyGroups();1470909547;@return The number of key-groups in the range;public int getNumberOfKeyGroups() {_		return 1 + endKeyGroup - startKeyGroup__	};return,the,number,of,key,groups,in,the,range;public,int,get,number,of,key,groups,return,1,end,key,group,start,key,group
KeyGroupRange -> public int getNumberOfKeyGroups();1472464402;@return The number of key-groups in the range;public int getNumberOfKeyGroups() {_		return 1 + endKeyGroup - startKeyGroup__	};return,the,number,of,key,groups,in,the,range;public,int,get,number,of,key,groups,return,1,end,key,group,start,key,group
KeyGroupRange -> public int getStartKeyGroup();1470847490;@return The first key-group in the range.;public int getStartKeyGroup() {_		return startKeyGroup__	};return,the,first,key,group,in,the,range;public,int,get,start,key,group,return,start,key,group
KeyGroupRange -> public int getStartKeyGroup();1470909547;@return The first key-group in the range.;public int getStartKeyGroup() {_		return startKeyGroup__	};return,the,first,key,group,in,the,range;public,int,get,start,key,group,return,start,key,group
KeyGroupRange -> public int getStartKeyGroup();1472464402;@return The first key-group in the range.;public int getStartKeyGroup() {_		return startKeyGroup__	};return,the,first,key,group,in,the,range;public,int,get,start,key,group,return,start,key,group
KeyGroupRange -> public int getStartKeyGroup();1475571578;@return The first key-group in the range.;public int getStartKeyGroup() {_		return startKeyGroup__	};return,the,first,key,group,in,the,range;public,int,get,start,key,group,return,start,key,group
KeyGroupRange -> public static final int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1470847490;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static final int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,final,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRange -> public static final int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1470909547;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static final int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,final,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRange -> public static KeyGroupRange of(int startKeyGroup, int endKeyGroup);1470847490;Factory method that also handles creation of empty key-groups.__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive)_@return the key-group from start to end or an empty key-group range.;public static KeyGroupRange of(int startKeyGroup, int endKeyGroup) {_		return startKeyGroup <= endKeyGroup ? new KeyGroupRange(startKeyGroup, endKeyGroup) : EMPTY_KEY_GROUP__	};factory,method,that,also,handles,creation,of,empty,key,groups,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive,return,the,key,group,from,start,to,end,or,an,empty,key,group,range;public,static,key,group,range,of,int,start,key,group,int,end,key,group,return,start,key,group,end,key,group,new,key,group,range,start,key,group,end,key,group
KeyGroupRange -> public static KeyGroupRange of(int startKeyGroup, int endKeyGroup);1470909547;Factory method that also handles creation of empty key-groups.__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive)_@return the key-group from start to end or an empty key-group range.;public static KeyGroupRange of(int startKeyGroup, int endKeyGroup) {_		return startKeyGroup <= endKeyGroup ? new KeyGroupRange(startKeyGroup, endKeyGroup) : EMPTY_KEY_GROUP__	};factory,method,that,also,handles,creation,of,empty,key,groups,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive,return,the,key,group,from,start,to,end,or,an,empty,key,group,range;public,static,key,group,range,of,int,start,key,group,int,end,key,group,return,start,key,group,end,key,group,new,key,group,range,start,key,group,end,key,group
KeyGroupRange -> public static KeyGroupRange of(int startKeyGroup, int endKeyGroup);1472464402;Factory method that also handles creation of empty key-groups.__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive)_@return the key-group from start to end or an empty key-group range.;public static KeyGroupRange of(int startKeyGroup, int endKeyGroup) {_		return startKeyGroup <= endKeyGroup ? new KeyGroupRange(startKeyGroup, endKeyGroup) : EMPTY_KEY_GROUP__	};factory,method,that,also,handles,creation,of,empty,key,groups,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive,return,the,key,group,from,start,to,end,or,an,empty,key,group,range;public,static,key,group,range,of,int,start,key,group,int,end,key,group,return,start,key,group,end,key,group,new,key,group,range,start,key,group,end,key,group
KeyGroupRange -> public static KeyGroupRange of(int startKeyGroup, int endKeyGroup);1475571578;Factory method that also handles creation of empty key-groups.__@param startKeyGroup start of the range (inclusive)_@param endKeyGroup end of the range (inclusive)_@return the key-group from start to end or an empty key-group range.;public static KeyGroupRange of(int startKeyGroup, int endKeyGroup) {_		return startKeyGroup <= endKeyGroup ? new KeyGroupRange(startKeyGroup, endKeyGroup) : EMPTY_KEY_GROUP_RANGE__	};factory,method,that,also,handles,creation,of,empty,key,groups,param,start,key,group,start,of,the,range,inclusive,param,end,key,group,end,of,the,range,inclusive,return,the,key,group,from,start,to,end,or,an,empty,key,group,range;public,static,key,group,range,of,int,start,key,group,int,end,key,group,return,start,key,group,end,key,group,new,key,group,range,start,key,group,end,key,group
KeyGroupRange -> public int getEndKeyGroup();1470847490;@return The last key-group in the range.;public int getEndKeyGroup() {_		return endKeyGroup__	};return,the,last,key,group,in,the,range;public,int,get,end,key,group,return,end,key,group
KeyGroupRange -> public int getEndKeyGroup();1470909547;@return The last key-group in the range.;public int getEndKeyGroup() {_		return endKeyGroup__	};return,the,last,key,group,in,the,range;public,int,get,end,key,group,return,end,key,group
KeyGroupRange -> public int getEndKeyGroup();1472464402;@return The last key-group in the range.;public int getEndKeyGroup() {_		return endKeyGroup__	};return,the,last,key,group,in,the,range;public,int,get,end,key,group,return,end,key,group
KeyGroupRange -> public int getEndKeyGroup();1475571578;@return The last key-group in the range.;public int getEndKeyGroup() {_		return endKeyGroup__	};return,the,last,key,group,in,the,range;public,int,get,end,key,group,return,end,key,group
