# id;timestamp;commentText;codeText;commentWords;codeWords
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1472663401;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1472663401;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1475842467;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1476972861;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1480698613;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1494187243;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1515177486;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1517489695;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> public MemCheckpointStreamFactory(int maxStateSize);1519568061;Creates a new in-memory stream factory that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemCheckpointStreamFactory(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,in,memory,stream,factory,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,mem,checkpoint,stream,factory,int,max,state,size,this,max,state,size,max,state,size
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1472663401;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1472663401;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1475842467;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1476972861;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1480698613;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IOException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,ioexception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1494187243;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (closed.compareAndSet(false, true)) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				closeInternal()__				return bytes__			} else {_				throw new IOException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,compare,and,set,false,true,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,internal,return,bytes,else,throw,new,ioexception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1515177486;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (closed.compareAndSet(false, true)) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				closeInternal()__				return bytes__			} else {_				throw new IOException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,compare,and,set,false,true,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,internal,return,bytes,else,throw,new,ioexception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1517489695;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (closed.compareAndSet(false, true)) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				closeInternal()__				return bytes__			} else {_				throw new IOException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,compare,and,set,false,true,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,internal,return,bytes,else,throw,new,ioexception,stream,has,already,been,closed
MemCheckpointStreamFactory -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1519568061;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (closed.compareAndSet(false, true)) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				closeInternal()__				return bytes__			} else {_				throw new IOException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,compare,and,set,false,true,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,internal,return,bytes,else,throw,new,ioexception,stream,has,already,been,closed
