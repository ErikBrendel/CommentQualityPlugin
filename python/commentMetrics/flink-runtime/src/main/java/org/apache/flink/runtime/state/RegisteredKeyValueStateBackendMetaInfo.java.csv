# id;timestamp;commentText;codeText;commentWords;codeWords
RegisteredKeyValueStateBackendMetaInfo -> @Nonnull 	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility( 		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot, 		TypeSerializer<N> newNamespaceSerializer, 		StateDescriptor<?, S> newStateDescriptor, 		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException;1533313087;Checks compatibility of a restored k/v state, with the new {@link StateDescriptor} provided to it._This checks that the descriptor specifies identical names and state types, as well as_serializers that are compatible for the restored k/v state bytes.;@Nonnull_	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility(_		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot,_		TypeSerializer<N> newNamespaceSerializer,_		StateDescriptor<?, S> newStateDescriptor,_		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException {__		Preconditions.checkState(restoredStateMetaInfoSnapshot.getBackendStateType()_				== StateMetaInfoSnapshot.BackendStateType.KEY_VALUE,_			"Incompatible state types. " +_				"Was [" + restoredStateMetaInfoSnapshot.getBackendStateType() + "], " +_				"registered as [" + StateMetaInfoSnapshot.BackendStateType.KEY_VALUE + "].")___		Preconditions.checkState(_			Objects.equals(newStateDescriptor.getName(), restoredStateMetaInfoSnapshot.getName()),_			"Incompatible state names. " +_				"Was [" + restoredStateMetaInfoSnapshot.getName() + "], " +_				"registered with [" + newStateDescriptor.getName() + "].")___		final StateDescriptor.Type restoredType =_			StateDescriptor.Type.valueOf(_				restoredStateMetaInfoSnapshot.getOption(_					StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE))___		if (!Objects.equals(newStateDescriptor.getType(), StateDescriptor.Type.UNKNOWN)_			&& !Objects.equals(restoredType, StateDescriptor.Type.UNKNOWN)) {__			Preconditions.checkState(_				newStateDescriptor.getType() == restoredType,_				"Incompatible key/value state types. " +_					"Was [" + restoredType + "], " +_					"registered with [" + newStateDescriptor.getType() + "].")__		}__		_		CompatibilityResult<N> namespaceCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.getTypeSerializer(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			null,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			newNamespaceSerializer)___		TypeSerializer<S> newStateSerializer = newStateDescriptor.getSerializer()__		CompatibilityResult<S> stateCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.getTypeSerializer(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			UnloadableDummyTypeSerializer.class,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			newStateSerializer)___		if (namespaceCompatibility.isRequiresMigration() || stateCompatibility.isRequiresMigration()) {_			_			throw StateMigrationException.notSupported()__		} else {_			return new RegisteredKeyValueStateBackendMetaInfo<>(_				newStateDescriptor.getType(),_				newStateDescriptor.getName(),_				newNamespaceSerializer,_				newStateSerializer,_				snapshotTransformer)__		}_	};checks,compatibility,of,a,restored,k,v,state,with,the,new,link,state,descriptor,provided,to,it,this,checks,that,the,descriptor,specifies,identical,names,and,state,types,as,well,as,serializers,that,are,compatible,for,the,restored,k,v,state,bytes;nonnull,public,static,n,s,registered,key,value,state,backend,meta,info,n,s,resolve,kv,state,compatibility,state,meta,info,snapshot,restored,state,meta,info,snapshot,type,serializer,n,new,namespace,serializer,state,descriptor,s,new,state,descriptor,nullable,state,snapshot,transformer,s,snapshot,transformer,throws,state,migration,exception,preconditions,check,state,restored,state,meta,info,snapshot,get,backend,state,type,state,meta,info,snapshot,backend,state,type,incompatible,state,types,was,restored,state,meta,info,snapshot,get,backend,state,type,registered,as,state,meta,info,snapshot,backend,state,type,preconditions,check,state,objects,equals,new,state,descriptor,get,name,restored,state,meta,info,snapshot,get,name,incompatible,state,names,was,restored,state,meta,info,snapshot,get,name,registered,with,new,state,descriptor,get,name,final,state,descriptor,type,restored,type,state,descriptor,type,value,of,restored,state,meta,info,snapshot,get,option,state,meta,info,snapshot,common,options,keys,if,objects,equals,new,state,descriptor,get,type,state,descriptor,type,unknown,objects,equals,restored,type,state,descriptor,type,unknown,preconditions,check,state,new,state,descriptor,get,type,restored,type,incompatible,key,value,state,types,was,restored,type,registered,with,new,state,descriptor,get,type,compatibility,result,n,namespace,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,get,type,serializer,state,meta,info,snapshot,common,serializer,keys,null,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,namespace,serializer,type,serializer,s,new,state,serializer,new,state,descriptor,get,serializer,compatibility,result,s,state,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,get,type,serializer,state,meta,info,snapshot,common,serializer,keys,unloadable,dummy,type,serializer,class,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,state,serializer,if,namespace,compatibility,is,requires,migration,state,compatibility,is,requires,migration,throw,state,migration,exception,not,supported,else,return,new,registered,key,value,state,backend,meta,info,new,state,descriptor,get,type,new,state,descriptor,get,name,new,namespace,serializer,new,state,serializer,snapshot,transformer
RegisteredKeyValueStateBackendMetaInfo -> @Nonnull 	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility( 		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot, 		TypeSerializer<N> newNamespaceSerializer, 		StateDescriptor<?, S> newStateDescriptor, 		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException;1536657741;Checks compatibility of a restored k/v state, with the new {@link StateDescriptor} provided to it._This checks that the descriptor specifies identical names and state types, as well as_serializers that are compatible for the restored k/v state bytes.;@Nonnull_	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility(_		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot,_		TypeSerializer<N> newNamespaceSerializer,_		StateDescriptor<?, S> newStateDescriptor,_		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException {__		Preconditions.checkState(restoredStateMetaInfoSnapshot.getBackendStateType()_				== StateMetaInfoSnapshot.BackendStateType.KEY_VALUE,_			"Incompatible state types. " +_				"Was [" + restoredStateMetaInfoSnapshot.getBackendStateType() + "], " +_				"registered as [" + StateMetaInfoSnapshot.BackendStateType.KEY_VALUE + "].")___		Preconditions.checkState(_			Objects.equals(newStateDescriptor.getName(), restoredStateMetaInfoSnapshot.getName()),_			"Incompatible state names. " +_				"Was [" + restoredStateMetaInfoSnapshot.getName() + "], " +_				"registered with [" + newStateDescriptor.getName() + "].")___		final StateDescriptor.Type restoredType =_			StateDescriptor.Type.valueOf(_				restoredStateMetaInfoSnapshot.getOption(_					StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE))___		if (!Objects.equals(newStateDescriptor.getType(), StateDescriptor.Type.UNKNOWN)_			&& !Objects.equals(restoredType, StateDescriptor.Type.UNKNOWN)) {__			Preconditions.checkState(_				newStateDescriptor.getType() == restoredType,_				"Incompatible key/value state types. " +_					"Was [" + restoredType + "], " +_					"registered with [" + newStateDescriptor.getType() + "].")__		}__		_		CompatibilityResult<N> namespaceCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.restoreTypeSerializer(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			null,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			newNamespaceSerializer)___		TypeSerializer<S> newStateSerializer = newStateDescriptor.getSerializer()__		CompatibilityResult<S> stateCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.restoreTypeSerializer(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			UnloadableDummyTypeSerializer.class,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			newStateSerializer)___		if (namespaceCompatibility.isRequiresMigration() || stateCompatibility.isRequiresMigration()) {_			_			throw StateMigrationException.notSupported()__		} else {_			return new RegisteredKeyValueStateBackendMetaInfo<>(_				newStateDescriptor.getType(),_				newStateDescriptor.getName(),_				newNamespaceSerializer,_				newStateSerializer,_				snapshotTransformer)__		}_	};checks,compatibility,of,a,restored,k,v,state,with,the,new,link,state,descriptor,provided,to,it,this,checks,that,the,descriptor,specifies,identical,names,and,state,types,as,well,as,serializers,that,are,compatible,for,the,restored,k,v,state,bytes;nonnull,public,static,n,s,registered,key,value,state,backend,meta,info,n,s,resolve,kv,state,compatibility,state,meta,info,snapshot,restored,state,meta,info,snapshot,type,serializer,n,new,namespace,serializer,state,descriptor,s,new,state,descriptor,nullable,state,snapshot,transformer,s,snapshot,transformer,throws,state,migration,exception,preconditions,check,state,restored,state,meta,info,snapshot,get,backend,state,type,state,meta,info,snapshot,backend,state,type,incompatible,state,types,was,restored,state,meta,info,snapshot,get,backend,state,type,registered,as,state,meta,info,snapshot,backend,state,type,preconditions,check,state,objects,equals,new,state,descriptor,get,name,restored,state,meta,info,snapshot,get,name,incompatible,state,names,was,restored,state,meta,info,snapshot,get,name,registered,with,new,state,descriptor,get,name,final,state,descriptor,type,restored,type,state,descriptor,type,value,of,restored,state,meta,info,snapshot,get,option,state,meta,info,snapshot,common,options,keys,if,objects,equals,new,state,descriptor,get,type,state,descriptor,type,unknown,objects,equals,restored,type,state,descriptor,type,unknown,preconditions,check,state,new,state,descriptor,get,type,restored,type,incompatible,key,value,state,types,was,restored,type,registered,with,new,state,descriptor,get,type,compatibility,result,n,namespace,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,restore,type,serializer,state,meta,info,snapshot,common,serializer,keys,null,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,namespace,serializer,type,serializer,s,new,state,serializer,new,state,descriptor,get,serializer,compatibility,result,s,state,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,restore,type,serializer,state,meta,info,snapshot,common,serializer,keys,unloadable,dummy,type,serializer,class,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,state,serializer,if,namespace,compatibility,is,requires,migration,state,compatibility,is,requires,migration,throw,state,migration,exception,not,supported,else,return,new,registered,key,value,state,backend,meta,info,new,state,descriptor,get,type,new,state,descriptor,get,name,new,namespace,serializer,new,state,serializer,snapshot,transformer
RegisteredKeyValueStateBackendMetaInfo -> @Nonnull 	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility( 		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot, 		TypeSerializer<N> newNamespaceSerializer, 		StateDescriptor<?, S> newStateDescriptor, 		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException;1538721028;Checks compatibility of a restored k/v state, with the new {@link StateDescriptor} provided to it._This checks that the descriptor specifies identical names and state types, as well as_serializers that are compatible for the restored k/v state bytes.;@Nonnull_	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility(_		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot,_		TypeSerializer<N> newNamespaceSerializer,_		StateDescriptor<?, S> newStateDescriptor,_		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException {__		Preconditions.checkState(restoredStateMetaInfoSnapshot.getBackendStateType()_				== StateMetaInfoSnapshot.BackendStateType.KEY_VALUE,_			"Incompatible state types. " +_				"Was [" + restoredStateMetaInfoSnapshot.getBackendStateType() + "], " +_				"registered as [" + StateMetaInfoSnapshot.BackendStateType.KEY_VALUE + "].")___		Preconditions.checkState(_			Objects.equals(newStateDescriptor.getName(), restoredStateMetaInfoSnapshot.getName()),_			"Incompatible state names. " +_				"Was [" + restoredStateMetaInfoSnapshot.getName() + "], " +_				"registered with [" + newStateDescriptor.getName() + "].")___		final StateDescriptor.Type restoredType =_			StateDescriptor.Type.valueOf(_				restoredStateMetaInfoSnapshot.getOption(_					StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE))___		if (!Objects.equals(newStateDescriptor.getType(), StateDescriptor.Type.UNKNOWN)_			&& !Objects.equals(restoredType, StateDescriptor.Type.UNKNOWN)) {__			Preconditions.checkState(_				newStateDescriptor.getType() == restoredType,_				"Incompatible key/value state types. " +_					"Was [" + restoredType + "], " +_					"registered with [" + newStateDescriptor.getType() + "].")__		}__		_		CompatibilityResult<N> namespaceCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.restoreTypeSerializer(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			null,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			newNamespaceSerializer)___		TypeSerializer<S> newStateSerializer = newStateDescriptor.getSerializer()__		CompatibilityResult<S> stateCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.restoreTypeSerializer(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			UnloadableDummyTypeSerializer.class,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			newStateSerializer)___		if (namespaceCompatibility.isRequiresMigration() || stateCompatibility.isRequiresMigration()) {_			_			throw StateMigrationException.notSupported()__		} else {_			return new RegisteredKeyValueStateBackendMetaInfo<>(_				newStateDescriptor.getType(),_				newStateDescriptor.getName(),_				newNamespaceSerializer,_				newStateSerializer,_				snapshotTransformer)__		}_	};checks,compatibility,of,a,restored,k,v,state,with,the,new,link,state,descriptor,provided,to,it,this,checks,that,the,descriptor,specifies,identical,names,and,state,types,as,well,as,serializers,that,are,compatible,for,the,restored,k,v,state,bytes;nonnull,public,static,n,s,registered,key,value,state,backend,meta,info,n,s,resolve,kv,state,compatibility,state,meta,info,snapshot,restored,state,meta,info,snapshot,type,serializer,n,new,namespace,serializer,state,descriptor,s,new,state,descriptor,nullable,state,snapshot,transformer,s,snapshot,transformer,throws,state,migration,exception,preconditions,check,state,restored,state,meta,info,snapshot,get,backend,state,type,state,meta,info,snapshot,backend,state,type,incompatible,state,types,was,restored,state,meta,info,snapshot,get,backend,state,type,registered,as,state,meta,info,snapshot,backend,state,type,preconditions,check,state,objects,equals,new,state,descriptor,get,name,restored,state,meta,info,snapshot,get,name,incompatible,state,names,was,restored,state,meta,info,snapshot,get,name,registered,with,new,state,descriptor,get,name,final,state,descriptor,type,restored,type,state,descriptor,type,value,of,restored,state,meta,info,snapshot,get,option,state,meta,info,snapshot,common,options,keys,if,objects,equals,new,state,descriptor,get,type,state,descriptor,type,unknown,objects,equals,restored,type,state,descriptor,type,unknown,preconditions,check,state,new,state,descriptor,get,type,restored,type,incompatible,key,value,state,types,was,restored,type,registered,with,new,state,descriptor,get,type,compatibility,result,n,namespace,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,restore,type,serializer,state,meta,info,snapshot,common,serializer,keys,null,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,namespace,serializer,type,serializer,s,new,state,serializer,new,state,descriptor,get,serializer,compatibility,result,s,state,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,restore,type,serializer,state,meta,info,snapshot,common,serializer,keys,unloadable,dummy,type,serializer,class,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,state,serializer,if,namespace,compatibility,is,requires,migration,state,compatibility,is,requires,migration,throw,state,migration,exception,not,supported,else,return,new,registered,key,value,state,backend,meta,info,new,state,descriptor,get,type,new,state,descriptor,get,name,new,namespace,serializer,new,state,serializer,snapshot,transformer
RegisteredKeyValueStateBackendMetaInfo -> @Nonnull 	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility( 		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot, 		TypeSerializer<N> newNamespaceSerializer, 		StateDescriptor<?, S> newStateDescriptor, 		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException;1540380319;Checks compatibility of a restored k/v state, with the new {@link StateDescriptor} provided to it._This checks that the descriptor specifies identical names and state types, as well as_serializers that are compatible for the restored k/v state bytes.;@Nonnull_	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility(_		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot,_		TypeSerializer<N> newNamespaceSerializer,_		StateDescriptor<?, S> newStateDescriptor,_		@Nullable StateSnapshotTransformer<S> snapshotTransformer) throws StateMigrationException {__		Preconditions.checkState(restoredStateMetaInfoSnapshot.getBackendStateType()_				== StateMetaInfoSnapshot.BackendStateType.KEY_VALUE,_			"Incompatible state types. " +_				"Was [" + restoredStateMetaInfoSnapshot.getBackendStateType() + "], " +_				"registered as [" + StateMetaInfoSnapshot.BackendStateType.KEY_VALUE + "].")___		Preconditions.checkState(_			Objects.equals(newStateDescriptor.getName(), restoredStateMetaInfoSnapshot.getName()),_			"Incompatible state names. " +_				"Was [" + restoredStateMetaInfoSnapshot.getName() + "], " +_				"registered with [" + newStateDescriptor.getName() + "].")___		final StateDescriptor.Type restoredType =_			StateDescriptor.Type.valueOf(_				restoredStateMetaInfoSnapshot.getOption(_					StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE))___		if (!Objects.equals(newStateDescriptor.getType(), StateDescriptor.Type.UNKNOWN)_			&& !Objects.equals(restoredType, StateDescriptor.Type.UNKNOWN)) {__			Preconditions.checkState(_				newStateDescriptor.getType() == restoredType,_				"Incompatible key/value state types. " +_					"Was [" + restoredType + "], " +_					"registered with [" + newStateDescriptor.getType() + "].")__		}__		_		@SuppressWarnings("unchecked")_		TypeSerializerSnapshot<N> namespaceSerializerSnapshot = Preconditions.checkNotNull(_			(TypeSerializerSnapshot<N>) restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER))___		TypeSerializerSchemaCompatibility<N, ?> namespaceCompatibility =_			namespaceSerializerSnapshot.resolveSchemaCompatibility(newNamespaceSerializer)___		TypeSerializer<S> newStateSerializer = newStateDescriptor.getSerializer()___		@SuppressWarnings("unchecked")_		TypeSerializerSnapshot<S> stateSerializerSnapshot = Preconditions.checkNotNull(_			(TypeSerializerSnapshot<S>) restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER))___		TypeSerializerSchemaCompatibility<S, ?> stateCompatibility =_			stateSerializerSnapshot.resolveSchemaCompatibility(newStateSerializer)___		if (!namespaceCompatibility.isCompatibleAsIs() || !stateCompatibility.isCompatibleAsIs()) {_			_			throw StateMigrationException.notSupported()__		} else {_			return new RegisteredKeyValueStateBackendMetaInfo<>(_				newStateDescriptor.getType(),_				newStateDescriptor.getName(),_				newNamespaceSerializer,_				newStateSerializer,_				snapshotTransformer)__		}_	};checks,compatibility,of,a,restored,k,v,state,with,the,new,link,state,descriptor,provided,to,it,this,checks,that,the,descriptor,specifies,identical,names,and,state,types,as,well,as,serializers,that,are,compatible,for,the,restored,k,v,state,bytes;nonnull,public,static,n,s,registered,key,value,state,backend,meta,info,n,s,resolve,kv,state,compatibility,state,meta,info,snapshot,restored,state,meta,info,snapshot,type,serializer,n,new,namespace,serializer,state,descriptor,s,new,state,descriptor,nullable,state,snapshot,transformer,s,snapshot,transformer,throws,state,migration,exception,preconditions,check,state,restored,state,meta,info,snapshot,get,backend,state,type,state,meta,info,snapshot,backend,state,type,incompatible,state,types,was,restored,state,meta,info,snapshot,get,backend,state,type,registered,as,state,meta,info,snapshot,backend,state,type,preconditions,check,state,objects,equals,new,state,descriptor,get,name,restored,state,meta,info,snapshot,get,name,incompatible,state,names,was,restored,state,meta,info,snapshot,get,name,registered,with,new,state,descriptor,get,name,final,state,descriptor,type,restored,type,state,descriptor,type,value,of,restored,state,meta,info,snapshot,get,option,state,meta,info,snapshot,common,options,keys,if,objects,equals,new,state,descriptor,get,type,state,descriptor,type,unknown,objects,equals,restored,type,state,descriptor,type,unknown,preconditions,check,state,new,state,descriptor,get,type,restored,type,incompatible,key,value,state,types,was,restored,type,registered,with,new,state,descriptor,get,type,suppress,warnings,unchecked,type,serializer,snapshot,n,namespace,serializer,snapshot,preconditions,check,not,null,type,serializer,snapshot,n,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,type,serializer,schema,compatibility,n,namespace,compatibility,namespace,serializer,snapshot,resolve,schema,compatibility,new,namespace,serializer,type,serializer,s,new,state,serializer,new,state,descriptor,get,serializer,suppress,warnings,unchecked,type,serializer,snapshot,s,state,serializer,snapshot,preconditions,check,not,null,type,serializer,snapshot,s,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,type,serializer,schema,compatibility,s,state,compatibility,state,serializer,snapshot,resolve,schema,compatibility,new,state,serializer,if,namespace,compatibility,is,compatible,as,is,state,compatibility,is,compatible,as,is,throw,state,migration,exception,not,supported,else,return,new,registered,key,value,state,backend,meta,info,new,state,descriptor,get,type,new,state,descriptor,get,name,new,namespace,serializer,new,state,serializer,snapshot,transformer
RegisteredKeyValueStateBackendMetaInfo -> @Nonnull 	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility( 		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot, 		TypeSerializer<N> newNamespaceSerializer, 		StateDescriptor<?, S> newStateDescriptor) throws StateMigrationException;1528883776;Checks compatibility of a restored k/v state, with the new {@link StateDescriptor} provided to it._This checks that the descriptor specifies identical names and state types, as well as_serializers that are compatible for the restored k/v state bytes.;@Nonnull_	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility(_		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot,_		TypeSerializer<N> newNamespaceSerializer,_		StateDescriptor<?, S> newStateDescriptor) throws StateMigrationException {__		Preconditions.checkState(_			Objects.equals(newStateDescriptor.getName(), restoredStateMetaInfoSnapshot.getName()),_			"Incompatible state names. " +_				"Was [" + restoredStateMetaInfoSnapshot.getName() + "], " +_				"registered with [" + newStateDescriptor.getName() + "].")___		final StateDescriptor.Type restoredType =_			StateDescriptor.Type.valueOf(_				restoredStateMetaInfoSnapshot.getOption(_					StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE))___		if (!Objects.equals(newStateDescriptor.getType(), StateDescriptor.Type.UNKNOWN)_			&& !Objects.equals(restoredType, StateDescriptor.Type.UNKNOWN)) {__			Preconditions.checkState(_				newStateDescriptor.getType() == restoredType,_				"Incompatible state types. " +_					"Was [" + restoredType + "], " +_					"registered with [" + newStateDescriptor.getType() + "].")__		}__		_		CompatibilityResult<N> namespaceCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.getTypeSerializer(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			null,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			newNamespaceSerializer)___		TypeSerializer<S> newStateSerializer = newStateDescriptor.getSerializer()__		CompatibilityResult<S> stateCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.getTypeSerializer(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			UnloadableDummyTypeSerializer.class,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			newStateSerializer)___		if (namespaceCompatibility.isRequiresMigration() || stateCompatibility.isRequiresMigration()) {_			_			throw new StateMigrationException("State migration isn't supported, yet.")__		} else {_			return new RegisteredKeyValueStateBackendMetaInfo<>(_				newStateDescriptor.getType(),_				newStateDescriptor.getName(),_				newNamespaceSerializer,_				newStateSerializer)__		}_	};checks,compatibility,of,a,restored,k,v,state,with,the,new,link,state,descriptor,provided,to,it,this,checks,that,the,descriptor,specifies,identical,names,and,state,types,as,well,as,serializers,that,are,compatible,for,the,restored,k,v,state,bytes;nonnull,public,static,n,s,registered,key,value,state,backend,meta,info,n,s,resolve,kv,state,compatibility,state,meta,info,snapshot,restored,state,meta,info,snapshot,type,serializer,n,new,namespace,serializer,state,descriptor,s,new,state,descriptor,throws,state,migration,exception,preconditions,check,state,objects,equals,new,state,descriptor,get,name,restored,state,meta,info,snapshot,get,name,incompatible,state,names,was,restored,state,meta,info,snapshot,get,name,registered,with,new,state,descriptor,get,name,final,state,descriptor,type,restored,type,state,descriptor,type,value,of,restored,state,meta,info,snapshot,get,option,state,meta,info,snapshot,common,options,keys,if,objects,equals,new,state,descriptor,get,type,state,descriptor,type,unknown,objects,equals,restored,type,state,descriptor,type,unknown,preconditions,check,state,new,state,descriptor,get,type,restored,type,incompatible,state,types,was,restored,type,registered,with,new,state,descriptor,get,type,compatibility,result,n,namespace,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,get,type,serializer,state,meta,info,snapshot,common,serializer,keys,null,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,namespace,serializer,type,serializer,s,new,state,serializer,new,state,descriptor,get,serializer,compatibility,result,s,state,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,get,type,serializer,state,meta,info,snapshot,common,serializer,keys,unloadable,dummy,type,serializer,class,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,state,serializer,if,namespace,compatibility,is,requires,migration,state,compatibility,is,requires,migration,throw,new,state,migration,exception,state,migration,isn,t,supported,yet,else,return,new,registered,key,value,state,backend,meta,info,new,state,descriptor,get,type,new,state,descriptor,get,name,new,namespace,serializer,new,state,serializer
RegisteredKeyValueStateBackendMetaInfo -> @Nonnull 	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility( 		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot, 		TypeSerializer<N> newNamespaceSerializer, 		StateDescriptor<?, S> newStateDescriptor) throws StateMigrationException;1532695767;Checks compatibility of a restored k/v state, with the new {@link StateDescriptor} provided to it._This checks that the descriptor specifies identical names and state types, as well as_serializers that are compatible for the restored k/v state bytes.;@Nonnull_	public static <N, S> RegisteredKeyValueStateBackendMetaInfo<N, S> resolveKvStateCompatibility(_		StateMetaInfoSnapshot restoredStateMetaInfoSnapshot,_		TypeSerializer<N> newNamespaceSerializer,_		StateDescriptor<?, S> newStateDescriptor) throws StateMigrationException {__		Preconditions.checkState(restoredStateMetaInfoSnapshot.getBackendStateType()_				== StateMetaInfoSnapshot.BackendStateType.KEY_VALUE,_			"Incompatible state types. " +_				"Was [" + restoredStateMetaInfoSnapshot.getBackendStateType() + "], " +_				"registered as [" + StateMetaInfoSnapshot.BackendStateType.KEY_VALUE + "].")___		Preconditions.checkState(_			Objects.equals(newStateDescriptor.getName(), restoredStateMetaInfoSnapshot.getName()),_			"Incompatible state names. " +_				"Was [" + restoredStateMetaInfoSnapshot.getName() + "], " +_				"registered with [" + newStateDescriptor.getName() + "].")___		final StateDescriptor.Type restoredType =_			StateDescriptor.Type.valueOf(_				restoredStateMetaInfoSnapshot.getOption(_					StateMetaInfoSnapshot.CommonOptionsKeys.KEYED_STATE_TYPE))___		if (!Objects.equals(newStateDescriptor.getType(), StateDescriptor.Type.UNKNOWN)_			&& !Objects.equals(restoredType, StateDescriptor.Type.UNKNOWN)) {__			Preconditions.checkState(_				newStateDescriptor.getType() == restoredType,_				"Incompatible key/value state types. " +_					"Was [" + restoredType + "], " +_					"registered with [" + newStateDescriptor.getType() + "].")__		}__		_		CompatibilityResult<N> namespaceCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.getTypeSerializer(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			null,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER),_			newNamespaceSerializer)___		TypeSerializer<S> newStateSerializer = newStateDescriptor.getSerializer()__		CompatibilityResult<S> stateCompatibility = CompatibilityUtil.resolveCompatibilityResult(_			restoredStateMetaInfoSnapshot.getTypeSerializer(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			UnloadableDummyTypeSerializer.class,_			restoredStateMetaInfoSnapshot.getTypeSerializerConfigSnapshot(_				StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER),_			newStateSerializer)___		if (namespaceCompatibility.isRequiresMigration() || stateCompatibility.isRequiresMigration()) {_			_			throw StateMigrationException.notSupported()__		} else {_			return new RegisteredKeyValueStateBackendMetaInfo<>(_				newStateDescriptor.getType(),_				newStateDescriptor.getName(),_				newNamespaceSerializer,_				newStateSerializer)__		}_	};checks,compatibility,of,a,restored,k,v,state,with,the,new,link,state,descriptor,provided,to,it,this,checks,that,the,descriptor,specifies,identical,names,and,state,types,as,well,as,serializers,that,are,compatible,for,the,restored,k,v,state,bytes;nonnull,public,static,n,s,registered,key,value,state,backend,meta,info,n,s,resolve,kv,state,compatibility,state,meta,info,snapshot,restored,state,meta,info,snapshot,type,serializer,n,new,namespace,serializer,state,descriptor,s,new,state,descriptor,throws,state,migration,exception,preconditions,check,state,restored,state,meta,info,snapshot,get,backend,state,type,state,meta,info,snapshot,backend,state,type,incompatible,state,types,was,restored,state,meta,info,snapshot,get,backend,state,type,registered,as,state,meta,info,snapshot,backend,state,type,preconditions,check,state,objects,equals,new,state,descriptor,get,name,restored,state,meta,info,snapshot,get,name,incompatible,state,names,was,restored,state,meta,info,snapshot,get,name,registered,with,new,state,descriptor,get,name,final,state,descriptor,type,restored,type,state,descriptor,type,value,of,restored,state,meta,info,snapshot,get,option,state,meta,info,snapshot,common,options,keys,if,objects,equals,new,state,descriptor,get,type,state,descriptor,type,unknown,objects,equals,restored,type,state,descriptor,type,unknown,preconditions,check,state,new,state,descriptor,get,type,restored,type,incompatible,key,value,state,types,was,restored,type,registered,with,new,state,descriptor,get,type,compatibility,result,n,namespace,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,get,type,serializer,state,meta,info,snapshot,common,serializer,keys,null,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,namespace,serializer,type,serializer,s,new,state,serializer,new,state,descriptor,get,serializer,compatibility,result,s,state,compatibility,compatibility,util,resolve,compatibility,result,restored,state,meta,info,snapshot,get,type,serializer,state,meta,info,snapshot,common,serializer,keys,unloadable,dummy,type,serializer,class,restored,state,meta,info,snapshot,get,type,serializer,config,snapshot,state,meta,info,snapshot,common,serializer,keys,new,state,serializer,if,namespace,compatibility,is,requires,migration,state,compatibility,is,requires,migration,throw,state,migration,exception,not,supported,else,return,new,registered,key,value,state,backend,meta,info,new,state,descriptor,get,type,new,state,descriptor,get,name,new,namespace,serializer,new,state,serializer
