# id;timestamp;commentText;codeText;commentWords;codeWords
KeyedStateBackend -> void dispose()_;1472680767;Closes the backend and releases all resources.;void dispose()_;closes,the,backend,and,releases,all,resources;void,dispose
KeyedStateBackend -> void dispose()_;1475571578;Closes the backend and releases all resources.;void dispose()_;closes,the,backend,and,releases,all,resources;void,dispose
KeyedStateBackend -> void dispose()_;1484317029;Closes the backend and releases all resources.;void dispose()_;closes,the,backend,and,releases,all,resources;void,dispose
KeyedStateBackend -> void dispose()_;1488534675;Closes the backend and releases all resources.;void dispose()_;closes,the,backend,and,releases,all,resources;void,dispose
KeyedStateBackend -> void dispose()_;1505385570;Closes the backend and releases all resources.;void dispose()_;closes,the,backend,and,releases,all,resources;void,dispose
KeyedStateBackend -> void dispose()_;1517239044;Closes the backend and releases all resources.;void dispose()_;closes,the,backend,and,releases,all,resources;void,dispose
KeyedStateBackend -> void setCurrentKey(K newKey)_;1472680767;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1475571578;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1484317029;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1488534675;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1505385570;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1517239044;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1517924641;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1528738487;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1530704629;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> void setCurrentKey(K newKey)_;1538063092;Sets the current key that is used for partitioned state._@param newKey The new current key.;void setCurrentKey(K newKey)_;sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;void,set,current,key,k,new,key
KeyedStateBackend -> public TypeSerializer<K> getKeySerializer();1470847490;{@link TypeSerializer} for the state backend key type.;public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};link,type,serializer,for,the,state,backend,key,type;public,type,serializer,k,get,key,serializer,return,key,serializer
KeyedStateBackend -> public TypeSerializer<K> getKeySerializer();1472464402;{@link TypeSerializer} for the state backend key type.;public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};link,type,serializer,for,the,state,backend,key,type;public,type,serializer,k,get,key,serializer,return,key,serializer
KeyedStateBackend -> public TypeSerializer<K> getKeySerializer();1474382176;{@link TypeSerializer} for the state backend key type.;public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};link,type,serializer,for,the,state,backend,key,type;public,type,serializer,k,get,key,serializer,return,key,serializer
KeyedStateBackend -> public TypeSerializer<K> getKeySerializer();1474462558;{@link TypeSerializer} for the state backend key type.;public TypeSerializer<K> getKeySerializer() {_		return keySerializer__	};link,type,serializer,for,the,state,backend,key,type;public,type,serializer,k,get,key,serializer,return,key,serializer
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1484317029;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1488534675;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1505385570;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1517239044;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1517924641;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1528738487;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1530704629;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1538063092;Creates or retrieves a partitioned state backed by this state backend.__TODO: NOTE: This method does a lot of work caching / retrieving states just to update the namespace._This method should be removed for the sake of namespaces being lazily fetched from the keyed_state backend, or being set on the state directly.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,todo,note,this,method,does,a,lot,of,work,caching,retrieving,states,just,to,update,the,namespace,this,method,should,be,removed,for,the,sake,of,namespaces,being,lazily,fetched,from,the,keyed,state,backend,or,being,set,on,the,state,directly,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1484317029;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1488534675;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1505385570;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1517239044;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1517924641;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1528738487;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1530704629;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> <N, S extends State, T> S getOrCreateKeyedState( 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, T> stateDescriptor) throws Exception_;1538063092;Creates or retrieves a keyed state backed by this state backend.__@param namespaceSerializer The serializer used for the namespace type of the state_@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;<N, S extends State, T> S getOrCreateKeyedState(_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, T> stateDescriptor) throws Exception_;creates,or,retrieves,a,keyed,state,backed,by,this,state,backend,param,namespace,serializer,the,serializer,used,for,the,namespace,type,of,the,state,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;n,s,extends,state,t,s,get,or,create,keyed,state,type,serializer,n,namespace,serializer,state,descriptor,s,t,state,descriptor,throws,exception
KeyedStateBackend -> int getNumberOfKeyGroups()_;1472680767;Returns the number of key-groups aka max parallelism.;int getNumberOfKeyGroups()_;returns,the,number,of,key,groups,aka,max,parallelism;int,get,number,of,key,groups
KeyedStateBackend -> int getNumberOfKeyGroups()_;1475571578;Returns the number of key-groups aka max parallelism.;int getNumberOfKeyGroups()_;returns,the,number,of,key,groups,aka,max,parallelism;int,get,number,of,key,groups
KeyedStateBackend -> int getNumberOfKeyGroups()_;1484317029;Returns the number of key-groups aka max parallelism.;int getNumberOfKeyGroups()_;returns,the,number,of,key,groups,aka,max,parallelism;int,get,number,of,key,groups
KeyedStateBackend -> public void setCurrentKey(K newKey);1470847490;Sets the current key that is used for partitioned state._@param newKey The new current key.;public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = keyGroupAssigner.getKeyGroupIndex(newKey)__	};sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,assigner,get,key,group,index,new,key
KeyedStateBackend -> public void setCurrentKey(K newKey);1472464402;Sets the current key that is used for partitioned state._@param newKey The new current key.;public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
KeyedStateBackend -> public void setCurrentKey(K newKey);1474382176;Sets the current key that is used for partitioned state._@param newKey The new current key.;public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
KeyedStateBackend -> public void setCurrentKey(K newKey);1474462558;Sets the current key that is used for partitioned state._@param newKey The new current key.;public void setCurrentKey(K newKey) {_		this.currentKey = newKey__		this.currentKeyGroup = KeyGroupRangeAssignment.assignToKeyGroup(newKey, numberOfKeyGroups)__	};sets,the,current,key,that,is,used,for,partitioned,state,param,new,key,the,new,current,key;public,void,set,current,key,k,new,key,this,current,key,new,key,this,current,key,group,key,group,range,assignment,assign,to,key,group,new,key,number,of,key,groups
KeyedStateBackend -> KeyGroupsList getKeyGroupRange()_;1475571578;Returns the key groups for this backend.;KeyGroupsList getKeyGroupRange()_;returns,the,key,groups,for,this,backend;key,groups,list,get,key,group,range
KeyedStateBackend -> KeyGroupsList getKeyGroupRange()_;1484317029;Returns the key groups for this backend.;KeyGroupsList getKeyGroupRange()_;returns,the,key,groups,for,this,backend;key,groups,list,get,key,group,range
KeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1470847490;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1472464402;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1474382176;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1474462558;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1470847490;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1472464402;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1474382176;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1474462558;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> K getCurrentKey()_;1472680767;Used by states to access the current key.;K getCurrentKey()_;used,by,states,to,access,the,current,key;k,get,current,key
KeyedStateBackend -> K getCurrentKey()_;1475571578;Used by states to access the current key.;K getCurrentKey()_;used,by,states,to,access,the,current,key;k,get,current,key
KeyedStateBackend -> K getCurrentKey()_;1484317029;Used by states to access the current key.;K getCurrentKey()_;used,by,states,to,access,the,current,key;k,get,current,key
KeyedStateBackend -> public abstract RunnableFuture<KeyGroupsStateHandle> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory) throws Exception_;1470847490;Snapshots the keyed state by writing it to streams that are provided by a_{@link CheckpointStreamFactory}.__@param checkpointId The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams.__@return A future that will yield a {@link KeyGroupsStateHandle} with the index and_written key group state stream.;public abstract RunnableFuture<KeyGroupsStateHandle> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory) throws Exception_;snapshots,the,keyed,state,by,writing,it,to,streams,that,are,provided,by,a,link,checkpoint,stream,factory,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,return,a,future,that,will,yield,a,link,key,groups,state,handle,with,the,index,and,written,key,group,state,stream;public,abstract,runnable,future,key,groups,state,handle,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,throws,exception
KeyedStateBackend -> public abstract RunnableFuture<KeyGroupsStateHandle> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory) throws Exception_;1472464402;Snapshots the keyed state by writing it to streams that are provided by a_{@link CheckpointStreamFactory}.__@param checkpointId The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams.__@return A future that will yield a {@link KeyGroupsStateHandle} with the index and_written key group state stream.;public abstract RunnableFuture<KeyGroupsStateHandle> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory) throws Exception_;snapshots,the,keyed,state,by,writing,it,to,streams,that,are,provided,by,a,link,checkpoint,stream,factory,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,return,a,future,that,will,yield,a,link,key,groups,state,handle,with,the,index,and,written,key,group,state,stream;public,abstract,runnable,future,key,groups,state,handle,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,throws,exception
KeyedStateBackend -> public abstract RunnableFuture<KeyGroupsStateHandle> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory) throws Exception_;1474382176;Snapshots the keyed state by writing it to streams that are provided by a_{@link CheckpointStreamFactory}.__@param checkpointId The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams.__@return A future that will yield a {@link KeyGroupsStateHandle} with the index and_written key group state stream.;public abstract RunnableFuture<KeyGroupsStateHandle> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory) throws Exception_;snapshots,the,keyed,state,by,writing,it,to,streams,that,are,provided,by,a,link,checkpoint,stream,factory,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,return,a,future,that,will,yield,a,link,key,groups,state,handle,with,the,index,and,written,key,group,state,stream;public,abstract,runnable,future,key,groups,state,handle,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,throws,exception
KeyedStateBackend -> public abstract RunnableFuture<KeyGroupsStateHandle> snapshot( 			long checkpointId, 			long timestamp, 			CheckpointStreamFactory streamFactory) throws Exception_;1474462558;Snapshots the keyed state by writing it to streams that are provided by a_{@link CheckpointStreamFactory}.__@param checkpointId The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param streamFactory The factory that we can use for writing our state to streams.__@return A future that will yield a {@link KeyGroupsStateHandle} with the index and_written key group state stream.;public abstract RunnableFuture<KeyGroupsStateHandle> snapshot(_			long checkpointId,_			long timestamp,_			CheckpointStreamFactory streamFactory) throws Exception_;snapshots,the,keyed,state,by,writing,it,to,streams,that,are,provided,by,a,link,checkpoint,stream,factory,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,stream,factory,the,factory,that,we,can,use,for,writing,our,state,to,streams,return,a,future,that,will,yield,a,link,key,groups,state,handle,with,the,index,and,written,key,group,state,stream;public,abstract,runnable,future,key,groups,state,handle,snapshot,long,checkpoint,id,long,timestamp,checkpoint,stream,factory,stream,factory,throws,exception
KeyedStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1470847490;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return KeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			_			kvStateRegistry.registerKvState(0, name, kvState)__		}__		return state__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,0,name,kv,state,return,state
KeyedStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1472464402;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return KeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			_			kvStateRegistry.registerKvState(0, name, kvState)__		}__		return state__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,0,name,kv,state,return,state
KeyedStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1474382176;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return KeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupRange, name, kvState)__		}__		return state__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,range,name,kv,state,return,state
KeyedStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1474462558;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return KeyedStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return KeyedStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)___		lastName = stateDescriptor.getName()__		lastState = kvState___		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			_			kvStateRegistry.registerKvState(0, name, kvState)__		}__		return state__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,keyed,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,keyed,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,last,name,state,descriptor,get,name,last,state,kv,state,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,0,name,kv,state,return,state
KeyedStateBackend -> <N> Stream<K> getKeys(String state, N namespace)_;1505385570;@return A stream of all keys for the given state and namespace. Modifications to the state during iterating_over it keys are not supported._@param state State variable for which existing keys will be returned._@param namespace Namespace for which existing keys will be returned.;<N> Stream<K> getKeys(String state, N namespace)_;return,a,stream,of,all,keys,for,the,given,state,and,namespace,modifications,to,the,state,during,iterating,over,it,keys,are,not,supported,param,state,state,variable,for,which,existing,keys,will,be,returned,param,namespace,namespace,for,which,existing,keys,will,be,returned;n,stream,k,get,keys,string,state,n,namespace
KeyedStateBackend -> <N> Stream<K> getKeys(String state, N namespace)_;1517239044;@return A stream of all keys for the given state and namespace. Modifications to the state during iterating_over it keys are not supported._@param state State variable for which existing keys will be returned._@param namespace Namespace for which existing keys will be returned.;<N> Stream<K> getKeys(String state, N namespace)_;return,a,stream,of,all,keys,for,the,given,state,and,namespace,modifications,to,the,state,during,iterating,over,it,keys,are,not,supported,param,state,state,variable,for,which,existing,keys,will,be,returned,param,namespace,namespace,for,which,existing,keys,will,be,returned;n,stream,k,get,keys,string,state,n,namespace
KeyedStateBackend -> <N> Stream<K> getKeys(String state, N namespace)_;1517924641;@return A stream of all keys for the given state and namespace. Modifications to the state during iterating_over it keys are not supported._@param state State variable for which existing keys will be returned._@param namespace Namespace for which existing keys will be returned.;<N> Stream<K> getKeys(String state, N namespace)_;return,a,stream,of,all,keys,for,the,given,state,and,namespace,modifications,to,the,state,during,iterating,over,it,keys,are,not,supported,param,state,state,variable,for,which,existing,keys,will,be,returned,param,namespace,namespace,for,which,existing,keys,will,be,returned;n,stream,k,get,keys,string,state,n,namespace
KeyedStateBackend -> <N> Stream<K> getKeys(String state, N namespace)_;1528738487;@return A stream of all keys for the given state and namespace. Modifications to the state during iterating_over it keys are not supported._@param state State variable for which existing keys will be returned._@param namespace Namespace for which existing keys will be returned.;<N> Stream<K> getKeys(String state, N namespace)_;return,a,stream,of,all,keys,for,the,given,state,and,namespace,modifications,to,the,state,during,iterating,over,it,keys,are,not,supported,param,state,state,variable,for,which,existing,keys,will,be,returned,param,namespace,namespace,for,which,existing,keys,will,be,returned;n,stream,k,get,keys,string,state,n,namespace
KeyedStateBackend -> <N> Stream<K> getKeys(String state, N namespace)_;1530704629;@return A stream of all keys for the given state and namespace. Modifications to the state during iterating_over it keys are not supported._@param state State variable for which existing keys will be returned._@param namespace Namespace for which existing keys will be returned.;<N> Stream<K> getKeys(String state, N namespace)_;return,a,stream,of,all,keys,for,the,given,state,and,namespace,modifications,to,the,state,during,iterating,over,it,keys,are,not,supported,param,state,state,variable,for,which,existing,keys,will,be,returned,param,namespace,namespace,for,which,existing,keys,will,be,returned;n,stream,k,get,keys,string,state,n,namespace
KeyedStateBackend -> <N> Stream<K> getKeys(String state, N namespace)_;1538063092;@return A stream of all keys for the given state and namespace. Modifications to the state during iterating_over it keys are not supported._@param state State variable for which existing keys will be returned._@param namespace Namespace for which existing keys will be returned.;<N> Stream<K> getKeys(String state, N namespace)_;return,a,stream,of,all,keys,for,the,given,state,and,namespace,modifications,to,the,state,during,iterating,over,it,keys,are,not,supported,param,state,state,variable,for,which,existing,keys,will,be,returned,param,namespace,namespace,for,which,existing,keys,will,be,returned;n,stream,k,get,keys,string,state,n,namespace
KeyedStateBackend -> TypeSerializer<K> getKeySerializer()_;1472680767;{@link TypeSerializer} for the state backend key type.;TypeSerializer<K> getKeySerializer()_;link,type,serializer,for,the,state,backend,key,type;type,serializer,k,get,key,serializer
KeyedStateBackend -> TypeSerializer<K> getKeySerializer()_;1475571578;{@link TypeSerializer} for the state backend key type.;TypeSerializer<K> getKeySerializer()_;link,type,serializer,for,the,state,backend,key,type;type,serializer,k,get,key,serializer
KeyedStateBackend -> TypeSerializer<K> getKeySerializer()_;1484317029;{@link TypeSerializer} for the state backend key type.;TypeSerializer<K> getKeySerializer()_;link,type,serializer,for,the,state,backend,key,type;type,serializer,k,get,key,serializer
KeyedStateBackend -> public void close() throws Exception;1470847490;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public void close() throws Exception {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,void,close,throws,exception,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
KeyedStateBackend -> public void close() throws Exception;1472464402;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public void close() throws Exception {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,void,close,throws,exception,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
KeyedStateBackend -> public void close() throws Exception;1474382176;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public void close() throws Exception {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,void,close,throws,exception,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
KeyedStateBackend -> public void close() throws Exception;1474462558;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public void close() throws Exception {_		if (kvStateRegistry != null) {_			kvStateRegistry.unregisterAll()__		}__		lastName = null__		lastState = null__		keyValueStatesByName = null__	};closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,void,close,throws,exception,if,kv,state,registry,null,kv,state,registry,unregister,all,last,name,null,last,state,null,key,value,states,by,name,null
KeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1470847490;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1472464402;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1474382176;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1474462558;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
KeyedStateBackend -> <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception_;1517239044;Applies the provided {@link KeyedStateFunction} to the state with the provided_{@link StateDescriptor} of all the currently active keys.__@param namespace the namespace of the state._@param namespaceSerializer the serializer for the namespace._@param stateDescriptor the descriptor of the state to which the function is going to be applied._@param function the function to be applied to the keyed state.__@param <N> The type of the namespace._@param <S> The type of the state.;<N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception_;applies,the,provided,link,keyed,state,function,to,the,state,with,the,provided,link,state,descriptor,of,all,the,currently,active,keys,param,namespace,the,namespace,of,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,state,descriptor,the,descriptor,of,the,state,to,which,the,function,is,going,to,be,applied,param,function,the,function,to,be,applied,to,the,keyed,state,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state;n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception
KeyedStateBackend -> <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception_;1517924641;Applies the provided {@link KeyedStateFunction} to the state with the provided_{@link StateDescriptor} of all the currently active keys.__@param namespace the namespace of the state._@param namespaceSerializer the serializer for the namespace._@param stateDescriptor the descriptor of the state to which the function is going to be applied._@param function the function to be applied to the keyed state.__@param <N> The type of the namespace._@param <S> The type of the state.;<N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception_;applies,the,provided,link,keyed,state,function,to,the,state,with,the,provided,link,state,descriptor,of,all,the,currently,active,keys,param,namespace,the,namespace,of,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,state,descriptor,the,descriptor,of,the,state,to,which,the,function,is,going,to,be,applied,param,function,the,function,to,be,applied,to,the,keyed,state,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state;n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception
KeyedStateBackend -> <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception_;1528738487;Applies the provided {@link KeyedStateFunction} to the state with the provided_{@link StateDescriptor} of all the currently active keys.__@param namespace the namespace of the state._@param namespaceSerializer the serializer for the namespace._@param stateDescriptor the descriptor of the state to which the function is going to be applied._@param function the function to be applied to the keyed state.__@param <N> The type of the namespace._@param <S> The type of the state.;<N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception_;applies,the,provided,link,keyed,state,function,to,the,state,with,the,provided,link,state,descriptor,of,all,the,currently,active,keys,param,namespace,the,namespace,of,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,state,descriptor,the,descriptor,of,the,state,to,which,the,function,is,going,to,be,applied,param,function,the,function,to,be,applied,to,the,keyed,state,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state;n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception
KeyedStateBackend -> <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception_;1530704629;Applies the provided {@link KeyedStateFunction} to the state with the provided_{@link StateDescriptor} of all the currently active keys.__@param namespace the namespace of the state._@param namespaceSerializer the serializer for the namespace._@param stateDescriptor the descriptor of the state to which the function is going to be applied._@param function the function to be applied to the keyed state.__@param <N> The type of the namespace._@param <S> The type of the state.;<N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception_;applies,the,provided,link,keyed,state,function,to,the,state,with,the,provided,link,state,descriptor,of,all,the,currently,active,keys,param,namespace,the,namespace,of,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,state,descriptor,the,descriptor,of,the,state,to,which,the,function,is,going,to,be,applied,param,function,the,function,to,be,applied,to,the,keyed,state,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state;n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception
KeyedStateBackend -> <N, S extends State, T> void applyToAllKeys( 			final N namespace, 			final TypeSerializer<N> namespaceSerializer, 			final StateDescriptor<S, T> stateDescriptor, 			final KeyedStateFunction<K, S> function) throws Exception_;1538063092;Applies the provided {@link KeyedStateFunction} to the state with the provided_{@link StateDescriptor} of all the currently active keys.__@param namespace the namespace of the state._@param namespaceSerializer the serializer for the namespace._@param stateDescriptor the descriptor of the state to which the function is going to be applied._@param function the function to be applied to the keyed state.__@param <N> The type of the namespace._@param <S> The type of the state.;<N, S extends State, T> void applyToAllKeys(_			final N namespace,_			final TypeSerializer<N> namespaceSerializer,_			final StateDescriptor<S, T> stateDescriptor,_			final KeyedStateFunction<K, S> function) throws Exception_;applies,the,provided,link,keyed,state,function,to,the,state,with,the,provided,link,state,descriptor,of,all,the,currently,active,keys,param,namespace,the,namespace,of,the,state,param,namespace,serializer,the,serializer,for,the,namespace,param,state,descriptor,the,descriptor,of,the,state,to,which,the,function,is,going,to,be,applied,param,function,the,function,to,be,applied,to,the,keyed,state,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state;n,s,extends,state,t,void,apply,to,all,keys,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,t,state,descriptor,final,keyed,state,function,k,s,function,throws,exception
KeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1470847490;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1472464402;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1474382176;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
KeyedStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1474462558;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
KeyedStateBackend -> public K getCurrentKey();1470847490;Used by states to access the current key.;public K getCurrentKey() {_		return currentKey__	};used,by,states,to,access,the,current,key;public,k,get,current,key,return,current,key
KeyedStateBackend -> public K getCurrentKey();1472464402;Used by states to access the current key.;public K getCurrentKey() {_		return currentKey__	};used,by,states,to,access,the,current,key;public,k,get,current,key,return,current,key
KeyedStateBackend -> public K getCurrentKey();1474382176;Used by states to access the current key.;public K getCurrentKey() {_		return currentKey__	};used,by,states,to,access,the,current,key;public,k,get,current,key,return,current,key
KeyedStateBackend -> public K getCurrentKey();1474462558;Used by states to access the current key.;public K getCurrentKey() {_		return currentKey__	};used,by,states,to,access,the,current,key;public,k,get,current,key,return,current,key
KeyedStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	<N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1472680767;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	<N, S extends State> S getPartitionedState( 			N namespace, 			TypeSerializer<N> namespaceSerializer, 			StateDescriptor<S, ?> stateDescriptor) throws Exception_;1475571578;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The identifier for the state. This contains name and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	<N, S extends State> S getPartitionedState(_			N namespace,_			TypeSerializer<N> namespaceSerializer,_			StateDescriptor<S, ?> stateDescriptor) throws Exception_;creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,n,s,extends,state,s,get,partitioned,state,n,namespace,type,serializer,n,namespace,serializer,state,descriptor,s,state,descriptor,throws,exception
KeyedStateBackend -> int getCurrentKeyGroupIndex()_;1472680767;Returns the key-group to which the current key belongs.;int getCurrentKeyGroupIndex()_;returns,the,key,group,to,which,the,current,key,belongs;int,get,current,key,group,index
KeyedStateBackend -> int getCurrentKeyGroupIndex()_;1475571578;Returns the key-group to which the current key belongs.;int getCurrentKeyGroupIndex()_;returns,the,key,group,to,which,the,current,key,belongs;int,get,current,key,group,index
KeyedStateBackend -> int getCurrentKeyGroupIndex()_;1484317029;Returns the key-group to which the current key belongs.;int getCurrentKeyGroupIndex()_;returns,the,key,group,to,which,the,current,key,belongs;int,get,current,key,group,index
