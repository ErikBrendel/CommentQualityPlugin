# id;timestamp;commentText;codeText;commentWords;codeWords
BlockChannelWriter -> protected BlockChannelWriter(Channel.ID channelID, RequestQueue<WriteRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments, int numRequestsToBundle) 	throws IOException;1404986750;Creates a new block channel writer for the given channel.__@param channelID The ID of the channel to write to._@param requestQueue The request queue of the asynchronous writer thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the processed Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened exclusively.;protected BlockChannelWriter(Channel.ID channelID, RequestQueue<WriteRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments, int numRequestsToBundle)_	throws IOException_	{_		super(channelID, requestQueue, returnSegments, true)__	};creates,a,new,block,channel,writer,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,write,to,param,request,queue,the,request,queue,of,the,asynchronous,writer,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,processed,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened,exclusively;protected,block,channel,writer,channel,id,channel,id,request,queue,write,request,request,queue,linked,blocking,queue,memory,segment,return,segments,int,num,requests,to,bundle,throws,ioexception,super,channel,id,request,queue,return,segments,true
BlockChannelWriter -> protected BlockChannelWriter(Channel.ID channelID, RequestQueue<WriteRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments, int numRequestsToBundle) 	throws IOException;1405088715;Creates a new block channel writer for the given channel.__@param channelID The ID of the channel to write to._@param requestQueue The request queue of the asynchronous writer thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the processed Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened exclusively.;protected BlockChannelWriter(Channel.ID channelID, RequestQueue<WriteRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments, int numRequestsToBundle)_	throws IOException_	{_		super(channelID, requestQueue, returnSegments, true)__	};creates,a,new,block,channel,writer,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,write,to,param,request,queue,the,request,queue,of,the,asynchronous,writer,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,processed,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened,exclusively;protected,block,channel,writer,channel,id,channel,id,request,queue,write,request,request,queue,linked,blocking,queue,memory,segment,return,segments,int,num,requests,to,bundle,throws,ioexception,super,channel,id,request,queue,return,segments,true
BlockChannelWriter -> protected BlockChannelWriter(Channel.ID channelID, RequestQueue<WriteRequest> requestQueue, 			LinkedBlockingQueue<MemorySegment> returnSegments, int numRequestsToBundle) 	throws IOException;1411473561;Creates a new block channel writer for the given channel.__@param channelID The ID of the channel to write to._@param requestQueue The request queue of the asynchronous writer thread, to which the I/O requests_are added._@param returnSegments The return queue, to which the processed Memory Segments are added._@throws IOException Thrown, if the underlying file channel could not be opened exclusively.;protected BlockChannelWriter(Channel.ID channelID, RequestQueue<WriteRequest> requestQueue,_			LinkedBlockingQueue<MemorySegment> returnSegments, int numRequestsToBundle)_	throws IOException_	{_		super(channelID, requestQueue, returnSegments, true)__	};creates,a,new,block,channel,writer,for,the,given,channel,param,channel,id,the,id,of,the,channel,to,write,to,param,request,queue,the,request,queue,of,the,asynchronous,writer,thread,to,which,the,i,o,requests,are,added,param,return,segments,the,return,queue,to,which,the,processed,memory,segments,are,added,throws,ioexception,thrown,if,the,underlying,file,channel,could,not,be,opened,exclusively;protected,block,channel,writer,channel,id,channel,id,request,queue,write,request,request,queue,linked,blocking,queue,memory,segment,return,segments,int,num,requests,to,bundle,throws,ioexception,super,channel,id,request,queue,return,segments,true
BlockChannelWriter -> T getNextReturnedBlock() throws IOException_;1420560668;Gets the next memory segment that has been written and is available again._This method blocks until such a segment is available, or until an error occurs in the writer, or the_writer is closed._<p>_NOTE: If this method is invoked without any segment ever returning (for example, because the_{@link #writeBlock(T)} method has not been invoked accordingly), the method may block_forever.__@return The next memory segment from the writers's return queue._@throws IOException Thrown, if an I/O error occurs in the writer while waiting for the request to return.;T getNextReturnedBlock() throws IOException_;gets,the,next,memory,segment,that,has,been,written,and,is,available,again,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,writer,or,the,writer,is,closed,p,note,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,write,block,t,method,has,not,been,invoked,accordingly,the,method,may,block,forever,return,the,next,memory,segment,from,the,writers,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,writer,while,waiting,for,the,request,to,return;t,get,next,returned,block,throws,ioexception
BlockChannelWriter -> T getNextReturnedBlock() throws IOException_;1445550685;Gets the next memory segment that has been written and is available again._This method blocks until such a segment is available, or until an error occurs in the writer, or the_writer is closed._<p>_NOTE: If this method is invoked without any segment ever returning (for example, because the_{@link #writeBlock} method has not been invoked accordingly), the method may block_forever.__@return The next memory segment from the writers's return queue._@throws IOException Thrown, if an I/O error occurs in the writer while waiting for the request to return.;T getNextReturnedBlock() throws IOException_;gets,the,next,memory,segment,that,has,been,written,and,is,available,again,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,writer,or,the,writer,is,closed,p,note,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,write,block,method,has,not,been,invoked,accordingly,the,method,may,block,forever,return,the,next,memory,segment,from,the,writers,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,writer,while,waiting,for,the,request,to,return;t,get,next,returned,block,throws,ioexception
BlockChannelWriter -> public MemorySegment getNextReturnedSegment() throws IOException;1404986750;Gets the next memory segment that has been written and is available again._This method blocks until such a segment is available, or until an error occurs in the writer, or the_writer is closed._<p>_WARNING: If this method is invoked without any segment ever returning (for example, because the_{@link #writeBlock(MemorySegment)} method has not been invoked appropriately), the method may block_forever.__@return The next memory segment from the writers's return queue._@throws IOException Thrown, if an I/O error occurs in the writer while waiting for the request to return.;public MemorySegment getNextReturnedSegment() throws IOException_	{_		try {_			while (true) {_				final MemorySegment next = this.returnBuffers.poll(2000, TimeUnit.MILLISECONDS)__				if (next != null) {_					return next__				} else {_					if (this.closed) {_						throw new IOException("The writer has been closed.")__					}_					checkErroneous()__				}_			}_		} catch (InterruptedException iex) {_			throw new IOException("Writer was interrupted while waiting for the next returning segment.")__		}_	};gets,the,next,memory,segment,that,has,been,written,and,is,available,again,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,writer,or,the,writer,is,closed,p,warning,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,write,block,memory,segment,method,has,not,been,invoked,appropriately,the,method,may,block,forever,return,the,next,memory,segment,from,the,writers,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,writer,while,waiting,for,the,request,to,return;public,memory,segment,get,next,returned,segment,throws,ioexception,try,while,true,final,memory,segment,next,this,return,buffers,poll,2000,time,unit,milliseconds,if,next,null,return,next,else,if,this,closed,throw,new,ioexception,the,writer,has,been,closed,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,writer,was,interrupted,while,waiting,for,the,next,returning,segment
BlockChannelWriter -> public MemorySegment getNextReturnedSegment() throws IOException;1405088715;Gets the next memory segment that has been written and is available again._This method blocks until such a segment is available, or until an error occurs in the writer, or the_writer is closed._<p>_WARNING: If this method is invoked without any segment ever returning (for example, because the_{@link #writeBlock(MemorySegment)} method has not been invoked appropriately), the method may block_forever.__@return The next memory segment from the writers's return queue._@throws IOException Thrown, if an I/O error occurs in the writer while waiting for the request to return.;public MemorySegment getNextReturnedSegment() throws IOException_	{_		try {_			while (true) {_				final MemorySegment next = this.returnBuffers.poll(2000, TimeUnit.MILLISECONDS)__				if (next != null) {_					return next__				} else {_					if (this.closed) {_						throw new IOException("The writer has been closed.")__					}_					checkErroneous()__				}_			}_		} catch (InterruptedException iex) {_			throw new IOException("Writer was interrupted while waiting for the next returning segment.")__		}_	};gets,the,next,memory,segment,that,has,been,written,and,is,available,again,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,writer,or,the,writer,is,closed,p,warning,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,write,block,memory,segment,method,has,not,been,invoked,appropriately,the,method,may,block,forever,return,the,next,memory,segment,from,the,writers,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,writer,while,waiting,for,the,request,to,return;public,memory,segment,get,next,returned,segment,throws,ioexception,try,while,true,final,memory,segment,next,this,return,buffers,poll,2000,time,unit,milliseconds,if,next,null,return,next,else,if,this,closed,throw,new,ioexception,the,writer,has,been,closed,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,writer,was,interrupted,while,waiting,for,the,next,returning,segment
BlockChannelWriter -> public MemorySegment getNextReturnedSegment() throws IOException;1411473561;Gets the next memory segment that has been written and is available again._This method blocks until such a segment is available, or until an error occurs in the writer, or the_writer is closed._<p>_WARNING: If this method is invoked without any segment ever returning (for example, because the_{@link #writeBlock(MemorySegment)} method has not been invoked appropriately), the method may block_forever.__@return The next memory segment from the writers's return queue._@throws IOException Thrown, if an I/O error occurs in the writer while waiting for the request to return.;public MemorySegment getNextReturnedSegment() throws IOException_	{_		try {_			while (true) {_				final MemorySegment next = this.returnBuffers.poll(2000, TimeUnit.MILLISECONDS)__				if (next != null) {_					return next__				} else {_					if (this.closed) {_						throw new IOException("The writer has been closed.")__					}_					checkErroneous()__				}_			}_		} catch (InterruptedException iex) {_			throw new IOException("Writer was interrupted while waiting for the next returning segment.")__		}_	};gets,the,next,memory,segment,that,has,been,written,and,is,available,again,this,method,blocks,until,such,a,segment,is,available,or,until,an,error,occurs,in,the,writer,or,the,writer,is,closed,p,warning,if,this,method,is,invoked,without,any,segment,ever,returning,for,example,because,the,link,write,block,memory,segment,method,has,not,been,invoked,appropriately,the,method,may,block,forever,return,the,next,memory,segment,from,the,writers,s,return,queue,throws,ioexception,thrown,if,an,i,o,error,occurs,in,the,writer,while,waiting,for,the,request,to,return;public,memory,segment,get,next,returned,segment,throws,ioexception,try,while,true,final,memory,segment,next,this,return,buffers,poll,2000,time,unit,milliseconds,if,next,null,return,next,else,if,this,closed,throw,new,ioexception,the,writer,has,been,closed,check,erroneous,catch,interrupted,exception,iex,throw,new,ioexception,writer,was,interrupted,while,waiting,for,the,next,returning,segment
BlockChannelWriter -> public void writeBlock(MemorySegment segment) throws IOException;1404986750;Issues a asynchronous write request to the writer.__@param segment The segment to be written._@throws IOException Thrown, when the writer encounters an I/O error. Due to the asynchronous nature of the_writer, the exception thrown here may have been caused by an earlier write request.;public void writeBlock(MemorySegment segment) throws IOException_	{_		_		checkErroneous()__		_		_		this.requestsNotReturned.incrementAndGet()__		if (this.closed || this.requestQueue.isClosed()) {_			_			_			this.requestsNotReturned.decrementAndGet()__			throw new IOException("The writer has been closed.")__		}_		this.requestQueue.add(new SegmentWriteRequest(this, segment))__	};issues,a,asynchronous,write,request,to,the,writer,param,segment,the,segment,to,be,written,throws,ioexception,thrown,when,the,writer,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,writer,the,exception,thrown,here,may,have,been,caused,by,an,earlier,write,request;public,void,write,block,memory,segment,segment,throws,ioexception,check,erroneous,this,requests,not,returned,increment,and,get,if,this,closed,this,request,queue,is,closed,this,requests,not,returned,decrement,and,get,throw,new,ioexception,the,writer,has,been,closed,this,request,queue,add,new,segment,write,request,this,segment
BlockChannelWriter -> public void writeBlock(MemorySegment segment) throws IOException;1405088715;Issues a asynchronous write request to the writer.__@param segment The segment to be written._@throws IOException Thrown, when the writer encounters an I/O error. Due to the asynchronous nature of the_writer, the exception thrown here may have been caused by an earlier write request.;public void writeBlock(MemorySegment segment) throws IOException_	{_		_		checkErroneous()__		_		_		this.requestsNotReturned.incrementAndGet()__		if (this.closed || this.requestQueue.isClosed()) {_			_			_			this.requestsNotReturned.decrementAndGet()__			throw new IOException("The writer has been closed.")__		}_		this.requestQueue.add(new SegmentWriteRequest(this, segment))__	};issues,a,asynchronous,write,request,to,the,writer,param,segment,the,segment,to,be,written,throws,ioexception,thrown,when,the,writer,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,writer,the,exception,thrown,here,may,have,been,caused,by,an,earlier,write,request;public,void,write,block,memory,segment,segment,throws,ioexception,check,erroneous,this,requests,not,returned,increment,and,get,if,this,closed,this,request,queue,is,closed,this,requests,not,returned,decrement,and,get,throw,new,ioexception,the,writer,has,been,closed,this,request,queue,add,new,segment,write,request,this,segment
BlockChannelWriter -> public void writeBlock(MemorySegment segment) throws IOException;1411473561;Issues a asynchronous write request to the writer.__@param segment The segment to be written._@throws IOException Thrown, when the writer encounters an I/O error. Due to the asynchronous nature of the_writer, the exception thrown here may have been caused by an earlier write request.;public void writeBlock(MemorySegment segment) throws IOException_	{_		_		checkErroneous()__		_		_		this.requestsNotReturned.incrementAndGet()__		if (this.closed || this.requestQueue.isClosed()) {_			_			_			this.requestsNotReturned.decrementAndGet()__			throw new IOException("The writer has been closed.")__		}_		this.requestQueue.add(new SegmentWriteRequest(this, segment))__	};issues,a,asynchronous,write,request,to,the,writer,param,segment,the,segment,to,be,written,throws,ioexception,thrown,when,the,writer,encounters,an,i,o,error,due,to,the,asynchronous,nature,of,the,writer,the,exception,thrown,here,may,have,been,caused,by,an,earlier,write,request;public,void,write,block,memory,segment,segment,throws,ioexception,check,erroneous,this,requests,not,returned,increment,and,get,if,this,closed,this,request,queue,is,closed,this,requests,not,returned,decrement,and,get,throw,new,ioexception,the,writer,has,been,closed,this,request,queue,add,new,segment,write,request,this,segment
BlockChannelWriter -> LinkedBlockingQueue<T> getReturnQueue()_;1420560668;Gets the queue in which the memory segments are queued after the asynchronous write_is completed__@return The queue with the written memory segments.;LinkedBlockingQueue<T> getReturnQueue()_;gets,the,queue,in,which,the,memory,segments,are,queued,after,the,asynchronous,write,is,completed,return,the,queue,with,the,written,memory,segments;linked,blocking,queue,t,get,return,queue
BlockChannelWriter -> LinkedBlockingQueue<T> getReturnQueue()_;1445550685;Gets the queue in which the memory segments are queued after the asynchronous write_is completed__@return The queue with the written memory segments.;LinkedBlockingQueue<T> getReturnQueue()_;gets,the,queue,in,which,the,memory,segments,are,queued,after,the,asynchronous,write,is,completed,return,the,queue,with,the,written,memory,segments;linked,blocking,queue,t,get,return,queue
