# id;timestamp;commentText;codeText;commentWords;codeWords
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1518945174;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519121818;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519207454;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519406528;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519481095;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519481096;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519481114;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile,_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1513261599;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			LOG.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			LOG.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1515588319;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1518433170;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1518434692;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1518680774;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1518680775;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1518945174;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519121818;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519207454;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519406528;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519481095;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519481096;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519481114;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1519655521;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1520961474;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1521804757;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1521804757;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1521804758;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1522249273;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1525384685;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1525384685;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1525961911;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1525961911;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1525961911;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1525961911;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1527687739;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1529682304;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1530104620;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1530472204;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1532383539;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1532383539;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending slot request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,slot,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1537192317;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending slot request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,slot,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1540920690;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending slot request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,slot,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1548846700;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending slot request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,slot,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1549467949;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending slot request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,slot,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot);1550005039;Tries to fulfill with the given allocated slot a pending slot request or add the_allocated slot to the set of available slots if no matching request is available.__@param allocatedSlot which shall be returned;private void tryFulfillSlotRequestOrMakeAvailable(AllocatedSlot allocatedSlot) {_		Preconditions.checkState(!allocatedSlot.isUsed(), "Provided slot is still in use.")___		final PendingRequest pendingRequest = pollMatchingPendingRequest(allocatedSlot)___		if (pendingRequest != null) {_			log.debug("Fulfilling pending slot request [{}] early with returned slot [{}]",_				pendingRequest.getSlotRequestId(), allocatedSlot.getAllocationId())___			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)__			pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)__		} else {_			log.debug("Adding returned slot [{}] to available slots", allocatedSlot.getAllocationId())__			availableSlots.add(allocatedSlot, clock.relativeTimeMillis())__		}_	};tries,to,fulfill,with,the,given,allocated,slot,a,pending,slot,request,or,add,the,allocated,slot,to,the,set,of,available,slots,if,no,matching,request,is,available,param,allocated,slot,which,shall,be,returned;private,void,try,fulfill,slot,request,or,make,available,allocated,slot,allocated,slot,preconditions,check,state,allocated,slot,is,used,provided,slot,is,still,in,use,final,pending,request,pending,request,poll,matching,pending,request,allocated,slot,if,pending,request,null,log,debug,fulfilling,pending,slot,request,early,with,returned,slot,pending,request,get,slot,request,id,allocated,slot,get,allocation,id,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,pending,request,get,allocated,slot,future,complete,allocated,slot,else,log,debug,adding,returned,slot,to,available,slots,allocated,slot,get,allocation,id,available,slots,add,allocated,slot,clock,relative,time,millis
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1513261599;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1515588319;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1518433170;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1518434692;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1518680774;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1518680775;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1518945174;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519121818;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519207454;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519406528;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519481095;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519481096;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519481114;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1519655521;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1520961474;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1521804757;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1521804757;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1521804758;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1522249273;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1525384685;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1525384685;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1525961911;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1525961911;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1525961911;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1525961911;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1527687739;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1529682304;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1530104620;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1530472204;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1532383539;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1532383539;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1537192317;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1540920690;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1548846700;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1549467949;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final SlotRequestId slotRequestId);1550005039;Removes the allocated slot specified by the provided slot request id.__@param slotRequestId identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final SlotRequestId slotRequestId) {_			final AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyB(slotRequestId)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,request,id,param,slot,request,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,slot,request,id,slot,request,id,final,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,b,slot,request,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1513261599;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with timeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			LOG.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				LOG.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1515588319;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with timeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1518433170;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with timeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1518434692;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with timeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1518680774;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1518680775;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1518945174;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519121818;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519207454;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519406528;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519481095;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519481096;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519481114;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1519655521;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1520961474;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1521804757;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1521804757;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1521804758;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1522249273;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1525384685;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1525384685;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1525961911;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1525961911;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1525961911;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1525961911;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1527687739;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1529682304;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1530104620;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.debug("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,debug,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1530472204;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}] with ", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.trace("Outdated request to fail slot [{}] with ", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,trace,outdated,request,to,fail,slot,with,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1532383539;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot with allocation id {}.", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.trace("Outdated request to fail slot with allocation id {}.", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,with,allocation,id,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,trace,outdated,request,to,fail,slot,with,allocation,id,allocation,id,cause
SlotPool -> @Override 	public void failAllocation(final AllocationID allocationID, final Exception cause);1532383539;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause        The cause of the failure;@Override_	public void failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__		}_		else if (availableSlots.tryRemove(allocationID)) {_			log.debug("Failed available slot [{}].", allocationID, cause)__		}_		else {_			AllocatedSlot allocatedSlot = allocatedSlots.remove(allocationID)__			if (allocatedSlot != null) {_				_				_				allocatedSlot.releasePayload(cause)__			}_			else {_				log.trace("Outdated request to fail slot [{}].", allocationID, cause)__			}_		}_		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure;override,public,void,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,else,if,available,slots,try,remove,allocation,id,log,debug,failed,available,slot,allocation,id,cause,else,allocated,slot,allocated,slot,allocated,slots,remove,allocation,id,if,allocated,slot,null,allocated,slot,release,payload,cause,else,log,trace,outdated,request,to,fail,slot,allocation,id,cause
SlotPool -> private void checkIdleSlot();1518434692;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					timeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1518680774;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1518680775;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1518945174;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519121818;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519207454;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519406528;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519481095;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519481096;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519481114;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1519655521;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1520961474;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1521804757;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							log.info("Releasing idle slot {} failed.", allocationID, throwable)__							tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,log,info,releasing,idle,slot,failed,allocation,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1521804757;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1521804758;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1522249273;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1525384685;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1525384685;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1525961911;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1525961911;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1525961911;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1525961911;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1527687739;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1529682304;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1530104620;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1530472204;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1532383539;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot {}.", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot {} of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot {} failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1532383539;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID)) {__				log.info("Releasing idle slot [{}].", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot [{}] of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot [{}] failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1537192317;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID) != null) {__				log.info("Releasing idle slot [{}].", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot [{}] of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot [{}] failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,null,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1540920690;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID) != null) {__				log.info("Releasing idle slot [{}].", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot [{}] of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot [{}] failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,null,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1548846700;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID) != null) {__				log.info("Releasing idle slot [{}].", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot [{}] of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot [{}] failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,null,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1549467949;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID) != null) {__				log.info("Releasing idle slot [{}].", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot [{}] of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot [{}] failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,null,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> private void checkIdleSlot();1550005039;Check the available slots, release the slot that is idle for a long time.;private void checkIdleSlot() {__		_		final long currentRelativeTimeMillis = clock.relativeTimeMillis()___		final List<AllocatedSlot> expiredSlots = new ArrayList<>(availableSlots.size())___		for (SlotAndTimestamp slotAndTimestamp : availableSlots.availableSlots.values()) {_			if (currentRelativeTimeMillis - slotAndTimestamp.timestamp > idleSlotTimeout.toMilliseconds()) {_				expiredSlots.add(slotAndTimestamp.slot)__			}_		}__		final FlinkException cause = new FlinkException("Releasing idle slot.")___		for (AllocatedSlot expiredSlot : expiredSlots) {_			final AllocationID allocationID = expiredSlot.getAllocationId()__			if (availableSlots.tryRemove(allocationID) != null) {__				log.info("Releasing idle slot [{}].", allocationID)__				final CompletableFuture<Acknowledge> freeSlotFuture = expiredSlot.getTaskManagerGateway().freeSlot(_					allocationID,_					cause,_					rpcTimeout)___				freeSlotFuture.whenCompleteAsync(_					(Acknowledge ignored, Throwable throwable) -> {_						if (throwable != null) {_							if (registeredTaskManagers.contains(expiredSlot.getTaskManagerId())) {_								log.debug("Releasing slot [{}] of registered TaskExecutor {} failed. " +_									"Trying to fulfill a different slot request.", allocationID, expiredSlot.getTaskManagerId(),_									throwable)__								tryFulfillSlotRequestOrMakeAvailable(expiredSlot)__							} else {_								log.debug("Releasing slot [{}] failed and owning TaskExecutor {} is no " +_									"longer registered. Discarding slot.", allocationID, expiredSlot.getTaskManagerId())__							}_						}_					},_					getMainThreadExecutor())__			}_		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};check,the,available,slots,release,the,slot,that,is,idle,for,a,long,time;private,void,check,idle,slot,final,long,current,relative,time,millis,clock,relative,time,millis,final,list,allocated,slot,expired,slots,new,array,list,available,slots,size,for,slot,and,timestamp,slot,and,timestamp,available,slots,available,slots,values,if,current,relative,time,millis,slot,and,timestamp,timestamp,idle,slot,timeout,to,milliseconds,expired,slots,add,slot,and,timestamp,slot,final,flink,exception,cause,new,flink,exception,releasing,idle,slot,for,allocated,slot,expired,slot,expired,slots,final,allocation,id,allocation,id,expired,slot,get,allocation,id,if,available,slots,try,remove,allocation,id,null,log,info,releasing,idle,slot,allocation,id,final,completable,future,acknowledge,free,slot,future,expired,slot,get,task,manager,gateway,free,slot,allocation,id,cause,rpc,timeout,free,slot,future,when,complete,async,acknowledge,ignored,throwable,throwable,if,throwable,null,if,registered,task,managers,contains,expired,slot,get,task,manager,id,log,debug,releasing,slot,of,registered,task,executor,failed,trying,to,fulfill,a,different,slot,request,allocation,id,expired,slot,get,task,manager,id,throwable,try,fulfill,slot,request,or,make,available,expired,slot,else,log,debug,releasing,slot,failed,and,owning,task,executor,is,no,longer,registered,discarding,slot,allocation,id,expired,slot,get,task,manager,id,get,main,thread,executor,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1513261599;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1515588319;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1518433170;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1518434692;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1518680774;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1518680775;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1518945174;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519121818;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519207454;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519406528;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519481095;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519481096;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519481114;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1519655521;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1520961474;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1521804757;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1521804757;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1521804758;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1522249273;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1525384685;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1525384685;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1525961911;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1525961911;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1525961911;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1525961911;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1527687739;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1529682304;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1530104620;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1530472204;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1532383539;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1532383539;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1537192317;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1540920690;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1548846700;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1549467949;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> AllocatedSlots -> Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID);1550005039;Get all allocated slot from same TaskManager.__@param resourceID The id of the TaskManager_@return Set of slots which are allocated from the same TaskManager;Set<AllocatedSlot> removeSlotsForTaskManager(final ResourceID resourceID) {_			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.remove(resourceID)__			if (slotsForTaskManager != null) {_				for (AllocatedSlot allocatedSlot : slotsForTaskManager) {_					allocatedSlotsById.removeKeyA(allocatedSlot.getAllocationId())__				}_				return slotsForTaskManager__			}_			else {_				return Collections.emptySet()__			}_		};get,all,allocated,slot,from,same,task,manager,param,resource,id,the,id,of,the,task,manager,return,set,of,slots,which,are,allocated,from,the,same,task,manager;set,allocated,slot,remove,slots,for,task,manager,final,resource,id,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,remove,resource,id,if,slots,for,task,manager,null,for,allocated,slot,allocated,slot,slots,for,task,manager,allocated,slots,by,id,remove,key,a,allocated,slot,get,allocation,id,return,slots,for,task,manager,else,return,collections,empty,set
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1513261599;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1515588319;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1518433170;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1518434692;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1518680774;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1518680775;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1518945174;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519121818;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519207454;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519406528;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519481095;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519481096;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519481114;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1519655521;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1520961474;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1521804757;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1521804757;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1521804758;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1522249273;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1525384685;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1525384685;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1525961911;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1525961911;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1525961911;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1525961911;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1527687739;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1529682304;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1530104620;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1530472204;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1532383539;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1532383539;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1537192317;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1540920690;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1548846700;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1549467949;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID);1550005039;Register TaskManager to this pool, only those slots come from registered TaskManager will be considered valid._Also it provides a way for us to keep "dead" or "abnormal" TaskManagers out of this pool.__@param resourceID The id of the TaskManager_@return Future acknowledge if th operation was successful;@Override_	public CompletableFuture<Acknowledge> registerTaskManager(final ResourceID resourceID) {_		log.debug("Register new TaskExecutor {}.", resourceID)__		registeredTaskManagers.add(resourceID)___		return CompletableFuture.completedFuture(Acknowledge.get())__	};register,task,manager,to,this,pool,only,those,slots,come,from,registered,task,manager,will,be,considered,valid,also,it,provides,a,way,for,us,to,keep,dead,or,abnormal,task,managers,out,of,this,pool,param,resource,id,the,id,of,the,task,manager,return,future,acknowledge,if,th,operation,was,successful;override,public,completable,future,acknowledge,register,task,manager,final,resource,id,resource,id,log,debug,register,new,task,executor,resource,id,registered,task,managers,add,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public void suspend();1513261599;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,available,slots,clear,allocated,slots,clear,pending,requests,clear
SlotPool -> @Override 	public void suspend();1515588319;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1518433170;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1518434692;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1518680774;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1518680775;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1518945174;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519121818;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519207454;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519406528;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519481095;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519481096;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519481114;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1519655521;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1520961474;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1521804757;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1521804757;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1521804758;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1522249273;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1525384685;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1525384685;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1525961911;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1525961911;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1525961911;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1525961911;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1527687739;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1529682304;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1530104620;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1530472204;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1532383539;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1532383539;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1537192317;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> @Override 	public void suspend();1540920690;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public void suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,void,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear
SlotPool -> public SlotProvider getSlotProvider();1513261599;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1515588319;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1518433170;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1518434692;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1518680774;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1518680775;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1518945174;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519121818;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519207454;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519406528;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519481095;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519481096;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519481114;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1519655521;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1520961474;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1521804757;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1521804757;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1521804758;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1522249273;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1525384685;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1525384685;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1525961911;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1525961911;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1525961911;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1525961911;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1527687739;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1529682304;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1530104620;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1530472204;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1532383539;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1532383539;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1537192317;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1540920690;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1548846700;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1549467949;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> public SlotProvider getSlotProvider();1550005039;Gets the slot provider implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot provider implementation for this pool.;public SlotProvider getSlotProvider() {_		return providerAndOwner__	};gets,the,slot,provider,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,provider,implementation,for,this,pool;public,slot,provider,get,slot,provider,return,provider,and,owner
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling);1513261599;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling);1515588319;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling);1518433170;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling);1518434692;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling);1518680774;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling);1518680775;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotRequestId identifying the slot allocation request_@param resourceProfile which the allocated slot should fulfill_@param locationPreferences for the allocated slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, resourceProfile, locationPreferences)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				resourceProfile)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,request,id,identifying,the,slot,allocation,request,param,resource,profile,which,the,allocated,slot,should,fulfill,param,location,preferences,for,the,allocated,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,resource,profile,location,preferences,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,resource,profile,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1513261599;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			LOG.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			LOG.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1515588319;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1518433170;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1518434692;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1518680774;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1518680775;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1518945174;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519121818;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519207454;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519406528;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519481095;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519481096;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519481114;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1519655521;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1520961474;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			slotOffer.getAllocationId(),_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,slot,offer,get,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1521804757;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1521804757;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1521804758;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1522249273;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		if (allocatedSlots.contains(allocationID) || availableSlots.contains(allocationID)) {_			log.debug("Received repeated offer for slot [{}]. Ignoring.", allocationID)___			_			_			return CompletableFuture.completedFuture(true)__		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,if,allocated,slots,contains,allocation,id,available,slots,contains,allocation,id,log,debug,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1525384685;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {_		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot preSlot = allocatedSlots.get(allocationID)__		if (preSlot == null) {_			preSlot = availableSlots.get(allocationID)__		}_		if (preSlot != null) {_			if (preSlot.getTaskManagerId().equals(taskManagerLocation.getResourceID())_					&& preSlot.getPhysicalSlotNumber() == slotOffer.getSlotIndex()) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,pre,slot,allocated,slots,get,allocation,id,if,pre,slot,null,pre,slot,available,slots,get,allocation,id,if,pre,slot,null,if,pre,slot,get,task,manager,id,equals,task,manager,location,get,resource,id,pre,slot,get,physical,slot,number,slot,offer,get,slot,index,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1525384685;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1525961911;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1525961911;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1525961911;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1525961911;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1527687739;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1529682304;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1530104620;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1530472204;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1532383539;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request {} with allocated slot {}.", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1532383539;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request [{}] with allocated slot [{}].", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1537192317;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request [{}] with allocated slot [{}].", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1540920690;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request [{}] with allocated slot [{}].", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1548846700;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request [{}] with allocated slot [{}].", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1549467949;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request [{}] with allocated slot [{}].", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> @Override 	public CompletableFuture<Boolean> offerSlot( 			final TaskManagerLocation taskManagerLocation, 			final TaskManagerGateway taskManagerGateway, 			final SlotOffer slotOffer);1550005039;Slot offering by TaskExecutor with AllocationID. The AllocationID is originally generated by this pool and_transfer through the ResourceManager to TaskManager. We use it to distinguish the different allocation_we issued. Slot offering may be rejected if we find something mismatching or there is actually no pending_request waiting for this slot (maybe fulfilled by some other returned slot).__@param taskManagerLocation location from where the offer comes from_@param taskManagerGateway TaskManager gateway_@param slotOffer the offered slot_@return True if we accept the offering;@Override_	public CompletableFuture<Boolean> offerSlot(_			final TaskManagerLocation taskManagerLocation,_			final TaskManagerGateway taskManagerGateway,_			final SlotOffer slotOffer) {__		validateRunsInMainThread()___		_		final ResourceID resourceID = taskManagerLocation.getResourceID()__		final AllocationID allocationID = slotOffer.getAllocationId()___		if (!registeredTaskManagers.contains(resourceID)) {_			log.debug("Received outdated slot offering [{}] from unregistered TaskManager: {}",_					slotOffer.getAllocationId(), taskManagerLocation)__			return CompletableFuture.completedFuture(false)__		}__		_		AllocatedSlot existingSlot__		if ((existingSlot = allocatedSlots.get(allocationID)) != null ||_			(existingSlot = availableSlots.get(allocationID)) != null) {__			_			_			__			_			_			_			final SlotID existingSlotId = existingSlot.getSlotId()__			final SlotID newSlotId = new SlotID(taskManagerLocation.getResourceID(), slotOffer.getSlotIndex())___			if (existingSlotId.equals(newSlotId)) {_				log.info("Received repeated offer for slot [{}]. Ignoring.", allocationID)___				_				_				return CompletableFuture.completedFuture(true)__			} else {_				_				_				return CompletableFuture.completedFuture(false)__			}_		}__		final AllocatedSlot allocatedSlot = new AllocatedSlot(_			allocationID,_			taskManagerLocation,_			slotOffer.getSlotIndex(),_			slotOffer.getResourceProfile(),_			taskManagerGateway)___		_		PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			allocatedSlots.add(pendingRequest.getSlotRequestId(), allocatedSlot)___			if (!pendingRequest.getAllocatedSlotFuture().complete(allocatedSlot)) {_				_				allocatedSlots.remove(pendingRequest.getSlotRequestId())__				tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__			} else {_				log.debug("Fulfilled slot request [{}] with allocated slot [{}].", pendingRequest.getSlotRequestId(), allocationID)__			}_		}_		else {_			_			_			_			tryFulfillSlotRequestOrMakeAvailable(allocatedSlot)__		}__		_		_		return CompletableFuture.completedFuture(true)__	};slot,offering,by,task,executor,with,allocation,id,the,allocation,id,is,originally,generated,by,this,pool,and,transfer,through,the,resource,manager,to,task,manager,we,use,it,to,distinguish,the,different,allocation,we,issued,slot,offering,may,be,rejected,if,we,find,something,mismatching,or,there,is,actually,no,pending,request,waiting,for,this,slot,maybe,fulfilled,by,some,other,returned,slot,param,task,manager,location,location,from,where,the,offer,comes,from,param,task,manager,gateway,task,manager,gateway,param,slot,offer,the,offered,slot,return,true,if,we,accept,the,offering;override,public,completable,future,boolean,offer,slot,final,task,manager,location,task,manager,location,final,task,manager,gateway,task,manager,gateway,final,slot,offer,slot,offer,validate,runs,in,main,thread,final,resource,id,resource,id,task,manager,location,get,resource,id,final,allocation,id,allocation,id,slot,offer,get,allocation,id,if,registered,task,managers,contains,resource,id,log,debug,received,outdated,slot,offering,from,unregistered,task,manager,slot,offer,get,allocation,id,task,manager,location,return,completable,future,completed,future,false,allocated,slot,existing,slot,if,existing,slot,allocated,slots,get,allocation,id,null,existing,slot,available,slots,get,allocation,id,null,final,slot,id,existing,slot,id,existing,slot,get,slot,id,final,slot,id,new,slot,id,new,slot,id,task,manager,location,get,resource,id,slot,offer,get,slot,index,if,existing,slot,id,equals,new,slot,id,log,info,received,repeated,offer,for,slot,ignoring,allocation,id,return,completable,future,completed,future,true,else,return,completable,future,completed,future,false,final,allocated,slot,allocated,slot,new,allocated,slot,allocation,id,task,manager,location,slot,offer,get,slot,index,slot,offer,get,resource,profile,task,manager,gateway,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,allocated,slots,add,pending,request,get,slot,request,id,allocated,slot,if,pending,request,get,allocated,slot,future,complete,allocated,slot,allocated,slots,remove,pending,request,get,slot,request,id,try,fulfill,slot,request,or,make,available,allocated,slot,else,log,debug,fulfilled,slot,request,with,allocated,slot,pending,request,get,slot,request,id,allocation,id,else,try,fulfill,slot,request,or,make,available,allocated,slot,return,completable,future,completed,future,true
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1515588319;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1518433170;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1518434692;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1518680774;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1518680775;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1518945174;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519121818;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519207454;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519406528;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519481095;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519481096;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519481114;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1519655521;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1520961474;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1521804757;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1521804757;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1521804758;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1522249273;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1525384685;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1525384685;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1525961911;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1525961911;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1525961911;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1525961911;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1527687739;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1529682304;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1530104620;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1530472204;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1532383539;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1532383539;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1537192317;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1540920690;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1548846700;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1549467949;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> AvailableSlots -> Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager);1550005039;Remove all available slots come from specified TaskManager.__@param taskManager The id of the TaskManager_@return The set of removed slots for the given TaskManager;Set<AllocatedSlot> removeAllForTaskManager(final ResourceID taskManager) {_			_			final Set<AllocatedSlot> slotsForTm = availableSlotsByTaskManager.remove(taskManager)___			if (slotsForTm != null && slotsForTm.size() > 0) {_				final String host = slotsForTm.iterator().next().getTaskManagerLocation().getFQDNHostname()__				final Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)___				_				for (AllocatedSlot slot : slotsForTm) {_					availableSlots.remove(slot.getAllocationId())__					slotsForHost.remove(slot)__				}__				if (slotsForHost.isEmpty()) {_					availableSlotsByHost.remove(host)__				}__				return slotsForTm__			} else {_				return Collections.emptySet()__			}_		};remove,all,available,slots,come,from,specified,task,manager,param,task,manager,the,id,of,the,task,manager,return,the,set,of,removed,slots,for,the,given,task,manager;set,allocated,slot,remove,all,for,task,manager,final,resource,id,task,manager,final,set,allocated,slot,slots,for,tm,available,slots,by,task,manager,remove,task,manager,if,slots,for,tm,null,slots,for,tm,size,0,final,string,host,slots,for,tm,iterator,next,get,task,manager,location,get,fqdnhostname,final,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,for,allocated,slot,slot,slots,for,tm,available,slots,remove,slot,get,allocation,id,slots,for,host,remove,slot,if,slots,for,host,is,empty,available,slots,by,host,remove,host,return,slots,for,tm,else,return,collections,empty,set
SlotPool -> private void clear();1515588319;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1518433170;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1518434692;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1518680774;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1518680775;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1518945174;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519121818;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519207454;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519406528;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519481095;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519481096;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519481114;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1519655521;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1520961474;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1521804757;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1521804757;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1521804758;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1522249273;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1525384685;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1525384685;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1525961911;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1525961911;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1525961911;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1525961911;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1527687739;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1529682304;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1530104620;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1530472204;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1532383539;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1532383539;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1537192317;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1540920690;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1548846700;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1549467949;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> private void clear();1550005039;Clear the internal state of the SlotPool.;private void clear() {_		availableSlots.clear()__		allocatedSlots.clear()__		pendingRequests.clear()__		waitingForResourceManager.clear()__		registeredTaskManagers.clear()__		slotSharingManagers.clear()__	};clear,the,internal,state,of,the,slot,pool;private,void,clear,available,slots,clear,allocated,slots,clear,pending,requests,clear,waiting,for,resource,manager,clear,registered,task,managers,clear,slot,sharing,managers,clear
SlotPool -> @Override 	public CompletableFuture<Acknowledge> suspend();1548846700;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public CompletableFuture<Acknowledge> suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()___		return CompletableFuture.completedFuture(Acknowledge.get())__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,completable,future,acknowledge,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> suspend();1549467949;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public CompletableFuture<Acknowledge> suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()___		return CompletableFuture.completedFuture(Acknowledge.get())__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,completable,future,acknowledge,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> suspend();1550005039;Suspends this pool, meaning it has lost its authority to accept and distribute slots.;@Override_	public CompletableFuture<Acknowledge> suspend() {_		log.info("Suspending SlotPool.")___		validateRunsInMainThread()___		_		_		Set<AllocationID> allocationIds = pendingRequests.keySetB()___		for (AllocationID allocationId : allocationIds) {_			resourceManagerGateway.cancelSlotRequest(allocationId)__		}__		_		stop()___		_		jobMasterId = null__		resourceManagerGateway = null___		_		_		clear()___		return CompletableFuture.completedFuture(Acknowledge.get())__	};suspends,this,pool,meaning,it,has,lost,its,authority,to,accept,and,distribute,slots;override,public,completable,future,acknowledge,suspend,log,info,suspending,slot,pool,validate,runs,in,main,thread,set,allocation,id,allocation,ids,pending,requests,key,set,b,for,allocation,id,allocation,id,allocation,ids,resource,manager,gateway,cancel,slot,request,allocation,id,stop,job,master,id,null,resource,manager,gateway,null,clear,return,completable,future,completed,future,acknowledge,get
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519655521;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1520961474;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1521804757;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1521804757;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1521804758;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1522249273;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525384685;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525384685;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1527687739;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1529682304;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1530104620;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1530472204;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1532383539;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1532383539;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1537192317;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPriorAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,prior,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1540920690;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPreferredAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(),_			multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,preferred,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1548846700;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPreferredAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(),_			multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,preferred,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1549467949;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPreferredAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(),_			multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,preferred,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1550005039;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile specifying the requirements for the requested slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		if (coLocationConstraint.isAssigned()) {_			_			slotProfile = new SlotProfile(_				slotProfile.getResourceProfile(),_				Collections.singleton(coLocationConstraint.getLocation()),_				slotProfile.getPreferredAllocations())__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(),_			multiTaskSlotManager,_			slotProfile,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,specifying,the,requirements,for,the,requested,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,if,co,location,constraint,is,assigned,slot,profile,new,slot,profile,slot,profile,get,resource,profile,collections,singleton,co,location,constraint,get,location,slot,profile,get,preferred,allocations,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,slot,profile,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1513261599;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1515588319;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1518433170;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1518434692;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1518680774;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1518680775;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1518945174;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519121818;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519207454;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519406528;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519481095;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519481096;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519481114;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1519655521;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1520961474;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1521804757;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1521804757;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1521804758;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1522249273;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1525384685;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1525384685;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1525961911;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1525961911;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1525961911;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1525961911;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1527687739;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1529682304;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1530104620;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1530472204;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1532383539;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1532383539;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1537192317;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1540920690;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1548846700;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1549467949;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AllocatedSlots -> AllocatedSlot get(final AllocationID allocationID);1550005039;Get allocated slot with allocation id.__@param allocationID The allocation id_@return The allocated slot, null if we can't find a match;AllocatedSlot get(final AllocationID allocationID) {_			return allocatedSlotsById.getKeyA(allocationID)__		};get,allocated,slot,with,allocation,id,param,allocation,id,the,allocation,id,return,the,allocated,slot,null,if,we,can,t,find,a,match;allocated,slot,get,final,allocation,id,allocation,id,return,allocated,slots,by,id,get,key,a,allocation,id
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1513261599;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1515588319;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1518433170;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1518434692;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1518680774;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1518680775;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1518945174;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519121818;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519207454;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519406528;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519481095;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519481096;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519481114;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1519655521;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1520961474;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1521804757;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1521804757;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1521804758;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1522249273;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1525384685;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1525384685;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1525961911;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1525961911;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1525961911;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1525961911;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1527687739;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1529682304;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1530104620;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1530472204;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1532383539;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1532383539;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1537192317;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager = availableSlotsByTaskManager.get(resourceID)__				if (slotsForTaskManager == null) {_					slotsForTaskManager = new HashSet<>()__					availableSlotsByTaskManager.put(resourceID, slotsForTaskManager)__				}_				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost = availableSlotsByHost.get(host)__				if (slotsForHost == null) {_					slotsForHost = new HashSet<>()__					availableSlotsByHost.put(host, slotsForHost)__				}_				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,get,resource,id,if,slots,for,task,manager,null,slots,for,task,manager,new,hash,set,available,slots,by,task,manager,put,resource,id,slots,for,task,manager,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,get,host,if,slots,for,host,null,slots,for,host,new,hash,set,available,slots,by,host,put,host,slots,for,host,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1540920690;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager =_					availableSlotsByTaskManager.computeIfAbsent(resourceID, k -> new HashSet<>())__				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost =_					availableSlotsByHost.computeIfAbsent(host, k -> new HashSet<>())__				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,compute,if,absent,resource,id,k,new,hash,set,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,compute,if,absent,host,k,new,hash,set,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1548846700;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager =_					availableSlotsByTaskManager.computeIfAbsent(resourceID, k -> new HashSet<>())__				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost =_					availableSlotsByHost.computeIfAbsent(host, k -> new HashSet<>())__				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,compute,if,absent,resource,id,k,new,hash,set,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,compute,if,absent,host,k,new,hash,set,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1549467949;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager =_					availableSlotsByTaskManager.computeIfAbsent(resourceID, k -> new HashSet<>())__				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost =_					availableSlotsByHost.computeIfAbsent(host, k -> new HashSet<>())__				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,compute,if,absent,resource,id,k,new,hash,set,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,compute,if,absent,host,k,new,hash,set,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> AvailableSlots -> void add(final AllocatedSlot slot, final long timestamp);1550005039;Adds an available slot.__@param slot The slot to add;void add(final AllocatedSlot slot, final long timestamp) {_			checkNotNull(slot)___			SlotAndTimestamp previous = availableSlots.put(_					slot.getAllocationId(), new SlotAndTimestamp(slot, timestamp))___			if (previous == null) {_				final ResourceID resourceID = slot.getTaskManagerLocation().getResourceID()__				final String host = slot.getTaskManagerLocation().getFQDNHostname()___				Set<AllocatedSlot> slotsForTaskManager =_					availableSlotsByTaskManager.computeIfAbsent(resourceID, k -> new HashSet<>())__				slotsForTaskManager.add(slot)___				Set<AllocatedSlot> slotsForHost =_					availableSlotsByHost.computeIfAbsent(host, k -> new HashSet<>())__				slotsForHost.add(slot)__			}_			else {_				throw new IllegalStateException("slot already contained")__			}_		};adds,an,available,slot,param,slot,the,slot,to,add;void,add,final,allocated,slot,slot,final,long,timestamp,check,not,null,slot,slot,and,timestamp,previous,available,slots,put,slot,get,allocation,id,new,slot,and,timestamp,slot,timestamp,if,previous,null,final,resource,id,resource,id,slot,get,task,manager,location,get,resource,id,final,string,host,slot,get,task,manager,location,get,fqdnhostname,set,allocated,slot,slots,for,task,manager,available,slots,by,task,manager,compute,if,absent,resource,id,k,new,hash,set,slots,for,task,manager,add,slot,set,allocated,slot,slots,for,host,available,slots,by,host,compute,if,absent,host,k,new,hash,set,slots,for,host,add,slot,else,throw,new,illegal,state,exception,slot,already,contained
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1515588319;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1518433170;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1518434692;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1518680774;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1518680775;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1518945174;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519121818;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519207454;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519406528;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519481095;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519481096;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519481114;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1519655521;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1520961474;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1521804757;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1521804757;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1521804758;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1522249273;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1525384685;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1525384685;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1525961911;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1525961911;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1525961911;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1525961911;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId);1527687739;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,return,completable,future,completed,future,acknowledge,get
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1513261599;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1515588319;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1518433170;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1518434692;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1518680774;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1518680775;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1518945174;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519121818;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519207454;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519406528;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519481095;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519481096;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519481114;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1519655521;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1520961474;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1521804757;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1521804757;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1521804758;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1522249273;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1525384685;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1525384685;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1525961911;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1525961911;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1525961911;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1525961911;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1527687739;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1529682304;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1530104620;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1530472204;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1532383539;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1532383539;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1537192317;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1540920690;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1548846700;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1549467949;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AllocatedSlots -> void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot);1550005039;Adds a new slot to this collection.__@param allocatedSlot The allocated slot;void add(SlotRequestId slotRequestId, AllocatedSlot allocatedSlot) {_			allocatedSlotsById.put(allocatedSlot.getAllocationId(), slotRequestId, allocatedSlot)___			final ResourceID resourceID = allocatedSlot.getTaskManagerLocation().getResourceID()___			Set<AllocatedSlot> slotsForTaskManager = allocatedSlotsByTaskManager.computeIfAbsent(_				resourceID,_				resourceId -> new HashSet<>(4))___			slotsForTaskManager.add(allocatedSlot)__		};adds,a,new,slot,to,this,collection,param,allocated,slot,the,allocated,slot;void,add,slot,request,id,slot,request,id,allocated,slot,allocated,slot,allocated,slots,by,id,put,allocated,slot,get,allocation,id,slot,request,id,allocated,slot,final,resource,id,resource,id,allocated,slot,get,task,manager,location,get,resource,id,set,allocated,slot,slots,for,task,manager,allocated,slots,by,task,manager,compute,if,absent,resource,id,resource,id,new,hash,set,4,slots,for,task,manager,add,allocated,slot
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1519655521;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1520961474;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1521804757;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1521804757;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1521804758;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1522249273;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1525384685;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1525384685;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1525961911;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1525961911;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1525961911;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1525961911;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1527687739;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SlotProfile slotProfile);1529682304;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			SlotProfile.ProfileToSlotContextMatcher matcher = slotProfile.matcher()__			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = matcher.findMatchWithLocality(_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,slot,profile,slot,profile,if,available,slots,is,empty,return,null,slot,profile,profile,to,slot,context,matcher,matcher,slot,profile,matcher,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,matcher,find,match,with,locality,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519655521;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1520961474;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1521804757;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1521804757;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1521804758;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1522249273;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525384685;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525384685;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1525961911;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1527687739;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1529682304;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			slotProfile.matcher())___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,slot,profile,matcher,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1530104620;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1530472204;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1532383539;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1532383539;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1537192317;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1540920690;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSingleSlot(_					allocatedSlotRequestId,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSingleSlot(_								allocatedSlotRequestId,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,single,slot,allocated,slot,request,id,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,single,slot,allocated,slot,request,id,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1548846700;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSingleSlot(_					allocatedSlotRequestId,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSingleSlot(_								allocatedSlotRequestId,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,single,slot,allocated,slot,request,id,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,single,slot,allocated,slot,request,id,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1549467949;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSingleSlot(_					allocatedSlotRequestId,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSingleSlot(_								allocatedSlotRequestId,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,single,slot,allocated,slot,request,id,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,single,slot,allocated,slot,request,id,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1550005039;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			schedulingStrategy,_			slotProfile)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, slotProfile)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSingleSlot(_					allocatedSlotRequestId,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					slotProfile.getResourceProfile(),_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSingleSlot(_								allocatedSlotRequestId,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,scheduling,strategy,slot,profile,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,slot,profile,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,single,slot,allocated,slot,request,id,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,single,slot,allocated,slot,request,id,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1513261599;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1515588319;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1518433170;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1518434692;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1518680774;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1518680775;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1518945174;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1519121818;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1519207454;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1519406528;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1519481095;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1519481096;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> AvailableSlots -> SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences);1519481114;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param resourceProfile      The required resource profile._@param locationPreferences  The location preferences, in order to be checked.__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(ResourceProfile resourceProfile, Collection<TaskManagerLocation> locationPreferences) {_			_			if (availableSlots.isEmpty()) {_				return null__			}__			boolean hadLocationPreference = false___			if (locationPreferences != null && !locationPreferences.isEmpty()) {__				_				for (TaskManagerLocation location : locationPreferences) {_					hadLocationPreference = true___					final Set<AllocatedSlot> onTaskManager = availableSlotsByTaskManager.get(location.getResourceID())__					if (onTaskManager != null) {_						for (AllocatedSlot candidate : onTaskManager) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.LOCAL)__							}_						}_					}_				}__				_				for (TaskManagerLocation location : locationPreferences) {_					final Set<AllocatedSlot> onHost = availableSlotsByHost.get(location.getFQDNHostname())__					if (onHost != null) {_						for (AllocatedSlot candidate : onHost) {_							if (candidate.getResourceProfile().isMatching(resourceProfile)) {_								remove(candidate.getAllocationId())__								return new SlotAndLocality(candidate, Locality.HOST_LOCAL)__							}_						}_					}_				}_			}__			_			for (SlotAndTimestamp candidate : availableSlots.values()) {_				final AllocatedSlot slot = candidate.slot()___				if (slot.getResourceProfile().isMatching(resourceProfile)) {_					remove(slot.getAllocationId())__					return new SlotAndLocality(_							slot, hadLocationPreference ? Locality.NON_LOCAL : Locality.UNCONSTRAINED)__				}_			}__			_			return null__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,resource,profile,the,required,resource,profile,param,location,preferences,the,location,preferences,in,order,to,be,checked,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,resource,profile,resource,profile,collection,task,manager,location,location,preferences,if,available,slots,is,empty,return,null,boolean,had,location,preference,false,if,location,preferences,null,location,preferences,is,empty,for,task,manager,location,location,location,preferences,had,location,preference,true,final,set,allocated,slot,on,task,manager,available,slots,by,task,manager,get,location,get,resource,id,if,on,task,manager,null,for,allocated,slot,candidate,on,task,manager,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,local,for,task,manager,location,location,location,preferences,final,set,allocated,slot,on,host,available,slots,by,host,get,location,get,fqdnhostname,if,on,host,null,for,allocated,slot,candidate,on,host,if,candidate,get,resource,profile,is,matching,resource,profile,remove,candidate,get,allocation,id,return,new,slot,and,locality,candidate,locality,for,slot,and,timestamp,candidate,available,slots,values,final,allocated,slot,slot,candidate,slot,if,slot,get,resource,profile,is,matching,resource,profile,remove,slot,get,allocation,id,return,new,slot,and,locality,slot,had,location,preference,locality,locality,unconstrained,return,null
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1519655521;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1520961474;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1521804757;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1521804757;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1521804758;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1522249273;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1525384685;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1525384685;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1525961911;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1525961911;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1525961911;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1525961911;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1527687739;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1529682304;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1530104620;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1530472204;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1532383539;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1532383539;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1537192317;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1540920690;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1548846700;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1549467949;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> private CompletableFuture<SlotAndLocality> requestAllocatedSlot( 			SlotRequestId slotRequestId, 			SlotProfile slotProfile, 			boolean allowQueuedScheduling, 			Time allocationTimeout);1550005039;Allocates an allocated slot first by polling from the available slots and then requesting a new_slot from the ResourceManager if no fitting slot could be found.__@param slotProfile slot profile that specifies the requirements for the slot_@param allowQueuedScheduling true if the slot allocation can be completed in the future_@param allocationTimeout timeout before the slot allocation times out_@return Future containing the allocated simple slot;private CompletableFuture<SlotAndLocality> requestAllocatedSlot(_			SlotRequestId slotRequestId,_			SlotProfile slotProfile,_			boolean allowQueuedScheduling,_			Time allocationTimeout) {__		final CompletableFuture<SlotAndLocality> allocatedSlotLocalityFuture___		_		SlotAndLocality slotFromPool = pollAndAllocateSlot(slotRequestId, slotProfile)___		if (slotFromPool != null) {_			allocatedSlotLocalityFuture = CompletableFuture.completedFuture(slotFromPool)__		} else if (allowQueuedScheduling) {_			_			CompletableFuture<AllocatedSlot> allocatedSlotFuture = requestNewAllocatedSlot(_				slotRequestId,_				slotProfile.getResourceProfile(),_				allocationTimeout)___			allocatedSlotLocalityFuture = allocatedSlotFuture.thenApply((AllocatedSlot allocatedSlot) -> new SlotAndLocality(allocatedSlot, Locality.UNKNOWN))__		} else {_			allocatedSlotLocalityFuture = FutureUtils.completedExceptionally(new NoResourceAvailableException("Could not allocate a simple slot for " +_				slotRequestId + '.'))__		}__		return allocatedSlotLocalityFuture__	};allocates,an,allocated,slot,first,by,polling,from,the,available,slots,and,then,requesting,a,new,slot,from,the,resource,manager,if,no,fitting,slot,could,be,found,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,param,allow,queued,scheduling,true,if,the,slot,allocation,can,be,completed,in,the,future,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,future,containing,the,allocated,simple,slot;private,completable,future,slot,and,locality,request,allocated,slot,slot,request,id,slot,request,id,slot,profile,slot,profile,boolean,allow,queued,scheduling,time,allocation,timeout,final,completable,future,slot,and,locality,allocated,slot,locality,future,slot,and,locality,slot,from,pool,poll,and,allocate,slot,slot,request,id,slot,profile,if,slot,from,pool,null,allocated,slot,locality,future,completable,future,completed,future,slot,from,pool,else,if,allow,queued,scheduling,completable,future,allocated,slot,allocated,slot,future,request,new,allocated,slot,slot,request,id,slot,profile,get,resource,profile,allocation,timeout,allocated,slot,locality,future,allocated,slot,future,then,apply,allocated,slot,allocated,slot,new,slot,and,locality,allocated,slot,locality,unknown,else,allocated,slot,locality,future,future,utils,completed,exceptionally,new,no,resource,available,exception,could,not,allocate,a,simple,slot,for,slot,request,id,return,allocated,slot,locality,future
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1530104620;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1530472204;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1532383539;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1532383539;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1537192317;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps.stream(),_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1540920690;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps::stream,_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1548846700;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps::stream,_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1549467949;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps::stream,_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> AvailableSlots -> SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile);1550005039;Poll a slot which matches the required resource profile. The polling tries to satisfy the_location preferences, by TaskManager and by host.__@param slotProfile slot profile that specifies the requirements for the slot__@return Slot which matches the resource profile, null if we can't find a match;SlotAndLocality poll(SchedulingStrategy schedulingStrategy, SlotProfile slotProfile) {_			_			if (availableSlots.isEmpty()) {_				return null__			}_			Collection<SlotAndTimestamp> slotAndTimestamps = availableSlots.values()___			SlotAndLocality matchingSlotAndLocality = schedulingStrategy.findMatchWithLocality(_				slotProfile,_				slotAndTimestamps::stream,_				SlotAndTimestamp::slot,_				(SlotAndTimestamp slot) -> slot.slot().getResourceProfile().isMatching(slotProfile.getResourceProfile()),_				(SlotAndTimestamp slotAndTimestamp, Locality locality) -> {_					AllocatedSlot slot = slotAndTimestamp.slot()__					return new SlotAndLocality(slot, locality)__				})___			if (matchingSlotAndLocality != null) {_				AllocatedSlot slot = matchingSlotAndLocality.getSlot()__				remove(slot.getAllocationId())__			}__			return matchingSlotAndLocality__		};poll,a,slot,which,matches,the,required,resource,profile,the,polling,tries,to,satisfy,the,location,preferences,by,task,manager,and,by,host,param,slot,profile,slot,profile,that,specifies,the,requirements,for,the,slot,return,slot,which,matches,the,resource,profile,null,if,we,can,t,find,a,match;slot,and,locality,poll,scheduling,strategy,scheduling,strategy,slot,profile,slot,profile,if,available,slots,is,empty,return,null,collection,slot,and,timestamp,slot,and,timestamps,available,slots,values,slot,and,locality,matching,slot,and,locality,scheduling,strategy,find,match,with,locality,slot,profile,slot,and,timestamps,stream,slot,and,timestamp,slot,slot,and,timestamp,slot,slot,slot,get,resource,profile,is,matching,slot,profile,get,resource,profile,slot,and,timestamp,slot,and,timestamp,locality,locality,allocated,slot,slot,slot,and,timestamp,slot,return,new,slot,and,locality,slot,locality,if,matching,slot,and,locality,null,allocated,slot,slot,matching,slot,and,locality,get,slot,remove,slot,get,allocation,id,return,matching,slot,and,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1513261599;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(allocatedSlotRequestId, resourceProfile)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1515588319;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(allocatedSlotRequestId, resourceProfile)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518433170;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(allocatedSlotRequestId, resourceProfile)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518434692;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(allocatedSlotRequestId, resourceProfile)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518680774;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(allocatedSlotRequestId, resourceProfile)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518680775;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(allocatedSlotRequestId, resourceProfile)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> public SlotOwner getSlotOwner();1513261599;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1515588319;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1518433170;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1518434692;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1518680774;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1518680775;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1518945174;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519121818;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519207454;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519406528;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519481095;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519481096;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519481114;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1519655521;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1520961474;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1521804757;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1521804757;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1521804758;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1522249273;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1525384685;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1525384685;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1525961911;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1525961911;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1525961911;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1525961911;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1527687739;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1529682304;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1530104620;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1530472204;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1532383539;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1532383539;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1537192317;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1540920690;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1548846700;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1549467949;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> public SlotOwner getSlotOwner();1550005039;Gets the slot owner implementation for this pool.__<p>This method does not mutate state and can be called directly (no RPC indirection)__@return The slot owner implementation for this pool.;public SlotOwner getSlotOwner() {_		return providerAndOwner__	};gets,the,slot,owner,implementation,for,this,pool,p,this,method,does,not,mutate,state,and,can,be,called,directly,no,rpc,indirection,return,the,slot,owner,implementation,for,this,pool;public,slot,owner,get,slot,owner,return,provider,and,owner
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 		SlotRequestId slotRequestId, 		ResourceProfile resourceProfile);1513261599;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_		SlotRequestId slotRequestId,_		ResourceProfile resourceProfile) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 		SlotRequestId slotRequestId, 		ResourceProfile resourceProfile);1515588319;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_		SlotRequestId slotRequestId,_		ResourceProfile resourceProfile) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 		SlotRequestId slotRequestId, 		ResourceProfile resourceProfile);1518433170;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_		SlotRequestId slotRequestId,_		ResourceProfile resourceProfile) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 		SlotRequestId slotRequestId, 		ResourceProfile resourceProfile);1518434692;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_		SlotRequestId slotRequestId,_		ResourceProfile resourceProfile) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 		SlotRequestId slotRequestId, 		ResourceProfile resourceProfile);1518680774;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_		SlotRequestId slotRequestId,_		ResourceProfile resourceProfile) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 		SlotRequestId slotRequestId, 		ResourceProfile resourceProfile);1518680775;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_		SlotRequestId slotRequestId,_		ResourceProfile resourceProfile) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1518945174;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519121818;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519207454;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519406528;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519481095;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519481096;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot( 			AbstractID groupId, 			SlotSharingManager slotSharingManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519481114;Allocates a {@link SlotSharingManager.MultiTaskSlot} for the given groupId which is in the_slot sharing group for which the given {@link SlotSharingManager} is responsible.__<p>If allowQueuedScheduling is true, then the method can return an uncompleted {@link SlotSharingManager.MultiTaskSlot}.__@param groupId for which to allocate a new {@link SlotSharingManager.MultiTaskSlot}_@param slotSharingManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated {@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateMultiTaskSlot(_			AbstractID groupId,_			SlotSharingManager slotSharingManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {__		_		SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = slotSharingManager.getResolvedRootSlot(_			groupId,_			locationPreferences)___		if (multiTaskSlotLocality != null && multiTaskSlotLocality.getLocality() == Locality.LOCAL) {_			return multiTaskSlotLocality__		}__		final SlotRequestId allocatedSlotRequestId = new SlotRequestId()__		final SlotRequestId multiTaskSlotRequestId = new SlotRequestId()___		_		final SlotAndLocality polledSlotAndLocality = pollAndAllocateSlot(allocatedSlotRequestId, resourceProfile, locationPreferences)___		if (polledSlotAndLocality != null && (polledSlotAndLocality.getLocality() == Locality.LOCAL || multiTaskSlotLocality == null)) {__			final AllocatedSlot allocatedSlot = polledSlotAndLocality.getSlot()__			final SlotSharingManager.MultiTaskSlot multiTaskSlot = slotSharingManager.createRootSlot(_				multiTaskSlotRequestId,_				CompletableFuture.completedFuture(polledSlotAndLocality.getSlot()),_				allocatedSlotRequestId)___			if (allocatedSlot.tryAssignPayload(multiTaskSlot)) {_				return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlot, polledSlotAndLocality.getLocality())__			} else {_				multiTaskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_					allocatedSlot.getAllocationId() + '.'))__			}_		}__		if (multiTaskSlotLocality != null) {_			_			if (polledSlotAndLocality != null) {_				releaseSlot(_					allocatedSlotRequestId,_					null,_					new FlinkException("Locality constraint is not better fulfilled by allocated slot."))__			}_			return multiTaskSlotLocality__		}__		if (allowQueuedScheduling) {_			_			SlotSharingManager.MultiTaskSlot multiTaskSlotFuture = slotSharingManager.getUnresolvedRootSlot(groupId)___			if (multiTaskSlotFuture == null) {_				_				final CompletableFuture<AllocatedSlot> futureSlot = requestNewAllocatedSlot(_					allocatedSlotRequestId,_					resourceProfile,_					allocationTimeout)___				multiTaskSlotFuture = slotSharingManager.createRootSlot(_					multiTaskSlotRequestId,_					futureSlot,_					allocatedSlotRequestId)___				futureSlot.whenComplete(_					(AllocatedSlot allocatedSlot, Throwable throwable) -> {_						final SlotSharingManager.TaskSlot taskSlot = slotSharingManager.getTaskSlot(multiTaskSlotRequestId)___						if (taskSlot != null) {_							_							if (!(taskSlot instanceof SlotSharingManager.MultiTaskSlot) || throwable != null) {_								taskSlot.release(throwable)__							} else {_								if (!allocatedSlot.tryAssignPayload(((SlotSharingManager.MultiTaskSlot) taskSlot))) {_									taskSlot.release(new FlinkException("Could not assign payload to allocated slot " +_										allocatedSlot.getAllocationId() + '.'))__								}_							}_						} else {_							releaseSlot(_								allocatedSlotRequestId,_								null,_								new FlinkException("Could not find task slot with " + multiTaskSlotRequestId + '.'))__						}_					})__			}__			return SlotSharingManager.MultiTaskSlotLocality.of(multiTaskSlotFuture, Locality.UNKNOWN)___		} else {_			throw new NoResourceAvailableException("Could not allocate a shared slot for " + groupId + '.')__		}_	};allocates,a,link,slot,sharing,manager,multi,task,slot,for,the,given,group,id,which,is,in,the,slot,sharing,group,for,which,the,given,link,slot,sharing,manager,is,responsible,p,if,allow,queued,scheduling,is,true,then,the,method,can,return,an,uncompleted,link,slot,sharing,manager,multi,task,slot,param,group,id,for,which,to,allocate,a,new,link,slot,sharing,manager,multi,task,slot,param,slot,sharing,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,multi,task,slot,abstract,id,group,id,slot,sharing,manager,slot,sharing,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,slot,sharing,manager,get,resolved,root,slot,group,id,location,preferences,if,multi,task,slot,locality,null,multi,task,slot,locality,get,locality,locality,local,return,multi,task,slot,locality,final,slot,request,id,allocated,slot,request,id,new,slot,request,id,final,slot,request,id,multi,task,slot,request,id,new,slot,request,id,final,slot,and,locality,polled,slot,and,locality,poll,and,allocate,slot,allocated,slot,request,id,resource,profile,location,preferences,if,polled,slot,and,locality,null,polled,slot,and,locality,get,locality,locality,local,multi,task,slot,locality,null,final,allocated,slot,allocated,slot,polled,slot,and,locality,get,slot,final,slot,sharing,manager,multi,task,slot,multi,task,slot,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,completable,future,completed,future,polled,slot,and,locality,get,slot,allocated,slot,request,id,if,allocated,slot,try,assign,payload,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,polled,slot,and,locality,get,locality,else,multi,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,if,multi,task,slot,locality,null,if,polled,slot,and,locality,null,release,slot,allocated,slot,request,id,null,new,flink,exception,locality,constraint,is,not,better,fulfilled,by,allocated,slot,return,multi,task,slot,locality,if,allow,queued,scheduling,slot,sharing,manager,multi,task,slot,multi,task,slot,future,slot,sharing,manager,get,unresolved,root,slot,group,id,if,multi,task,slot,future,null,final,completable,future,allocated,slot,future,slot,request,new,allocated,slot,allocated,slot,request,id,resource,profile,allocation,timeout,multi,task,slot,future,slot,sharing,manager,create,root,slot,multi,task,slot,request,id,future,slot,allocated,slot,request,id,future,slot,when,complete,allocated,slot,allocated,slot,throwable,throwable,final,slot,sharing,manager,task,slot,task,slot,slot,sharing,manager,get,task,slot,multi,task,slot,request,id,if,task,slot,null,if,task,slot,instanceof,slot,sharing,manager,multi,task,slot,throwable,null,task,slot,release,throwable,else,if,allocated,slot,try,assign,payload,slot,sharing,manager,multi,task,slot,task,slot,task,slot,release,new,flink,exception,could,not,assign,payload,to,allocated,slot,allocated,slot,get,allocation,id,else,release,slot,allocated,slot,request,id,null,new,flink,exception,could,not,find,task,slot,with,multi,task,slot,request,id,return,slot,sharing,manager,multi,task,slot,locality,of,multi,task,slot,future,locality,unknown,else,throw,new,no,resource,available,exception,could,not,allocate,a,shared,slot,for,group,id
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1518945174;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519121818;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519207454;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519406528;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519481095;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519481096;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling, 			Time allocationTimeout) throws NoResourceAvailableException;1519481114;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@param allocationTimeout timeout before the slot allocation times out_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling,_			Time allocationTimeout) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling,_			allocationTimeout)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,time,allocation,timeout,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,allocation,timeout,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1513261599;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1515588319;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1518433170;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(() -> checkIdleSlot(), idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1518434692;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1518680774;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1518680775;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1518945174;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519121818;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519207454;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519406528;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519481095;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519481096;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519481114;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1519655521;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1520961474;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1521804757;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1521804757;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1521804758;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1522249273;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1525384685;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1525384685;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1525961911;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1525961911;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1525961911;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)__	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1525961911;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1527687739;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1529682304;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1530104620;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1530472204;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1532383539;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1532383539;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1537192317;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1540920690;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1548846700;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1549467949;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception;1550005039;Start the slot pool to accept RPC calls.__@param jobMasterId The necessary leader id for running the job._@param newJobManagerAddress for the slot requests which are sent to the resource manager;public void start(JobMasterId jobMasterId, String newJobManagerAddress) throws Exception {_		this.jobMasterId = checkNotNull(jobMasterId)__		this.jobManagerAddress = checkNotNull(newJobManagerAddress)___		_		try {_			super.start()__		} catch (Exception e) {_			throw new RuntimeException("This should never happen", e)__		}__		scheduleRunAsync(this::checkIdleSlot, idleSlotTimeout)___		if (log.isDebugEnabled()) {_			scheduleRunAsync(this::scheduledLogStatus, STATUS_LOG_INTERVAL_MS, TimeUnit.MILLISECONDS)__		}_	};start,the,slot,pool,to,accept,rpc,calls,param,job,master,id,the,necessary,leader,id,for,running,the,job,param,new,job,manager,address,for,the,slot,requests,which,are,sent,to,the,resource,manager;public,void,start,job,master,id,job,master,id,string,new,job,manager,address,throws,exception,this,job,master,id,check,not,null,job,master,id,this,job,manager,address,check,not,null,new,job,manager,address,try,super,start,catch,exception,e,throw,new,runtime,exception,this,should,never,happen,e,schedule,run,async,this,check,idle,slot,idle,slot,timeout,if,log,is,debug,enabled,schedule,run,async,this,scheduled,log,status,time,unit,milliseconds
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1518945174;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						removePendingRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,remove,pending,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519121818;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		_		return FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.handleAsync(_				(AllocatedSlot allocatedSlot, Throwable throwable) -> {_					if (throwable != null) {_						removePendingRequest(slotRequestId)__						throw new CompletionException(ExceptionUtils.stripCompletionException(throwable))__					} else {_						return allocatedSlot__					}_				},_				getMainThreadExecutor())__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,handle,async,allocated,slot,allocated,slot,throwable,throwable,if,throwable,null,remove,pending,request,slot,request,id,throw,new,completion,exception,exception,utils,strip,completion,exception,throwable,else,return,allocated,slot,get,main,thread,executor
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519207454;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519406528;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519481095;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519481096;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519481114;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1519655521;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1520961474;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1521804757;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1521804757;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1521804758;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable != null) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,null,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1522249273;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1525384685;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1525384685;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1525961911;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1525961911;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1525961911;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1525961911;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1527687739;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1529682304;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1530104620;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1530472204;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1532383539;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1532383539;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1537192317;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1540920690;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1548846700;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1549467949;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot( 			SlotRequestId slotRequestId, 			ResourceProfile resourceProfile, 			Time allocationTimeout);1550005039;Requests a new slot with the given {@link ResourceProfile} from the ResourceManager. If there is_currently not ResourceManager connected, then the request is stashed and send once a new_ResourceManager is connected.__@param slotRequestId identifying the requested slot_@param resourceProfile which the requested slot should fulfill_@param allocationTimeout timeout before the slot allocation times out_@return An {@link AllocatedSlot} future which is completed once the slot is offered to the {@link SlotPool};private CompletableFuture<AllocatedSlot> requestNewAllocatedSlot(_			SlotRequestId slotRequestId,_			ResourceProfile resourceProfile,_			Time allocationTimeout) {__		final PendingRequest pendingRequest = new PendingRequest(_			slotRequestId,_			resourceProfile)___		_		FutureUtils_			.orTimeout(pendingRequest.getAllocatedSlotFuture(), allocationTimeout.toMilliseconds(), TimeUnit.MILLISECONDS)_			.whenCompleteAsync(_				(AllocatedSlot ignored, Throwable throwable) -> {_					if (throwable instanceof TimeoutException) {_						timeoutPendingSlotRequest(slotRequestId)__					}_				},_				getMainThreadExecutor())___		if (resourceManagerGateway == null) {_			stashRequestWaitingForResourceManager(pendingRequest)__		} else {_			requestSlotFromResourceManager(resourceManagerGateway, pendingRequest)__		}__		return pendingRequest.getAllocatedSlotFuture()__	};requests,a,new,slot,with,the,given,link,resource,profile,from,the,resource,manager,if,there,is,currently,not,resource,manager,connected,then,the,request,is,stashed,and,send,once,a,new,resource,manager,is,connected,param,slot,request,id,identifying,the,requested,slot,param,resource,profile,which,the,requested,slot,should,fulfill,param,allocation,timeout,timeout,before,the,slot,allocation,times,out,return,an,link,allocated,slot,future,which,is,completed,once,the,slot,is,offered,to,the,link,slot,pool;private,completable,future,allocated,slot,request,new,allocated,slot,slot,request,id,slot,request,id,resource,profile,resource,profile,time,allocation,timeout,final,pending,request,pending,request,new,pending,request,slot,request,id,resource,profile,future,utils,or,timeout,pending,request,get,allocated,slot,future,allocation,timeout,to,milliseconds,time,unit,milliseconds,when,complete,async,allocated,slot,ignored,throwable,throwable,if,throwable,instanceof,timeout,exception,timeout,pending,slot,request,slot,request,id,get,main,thread,executor,if,resource,manager,gateway,null,stash,request,waiting,for,resource,manager,pending,request,else,request,slot,from,resource,manager,resource,manager,gateway,pending,request,return,pending,request,get,allocated,slot,future
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1529682304;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1530104620;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1530472204;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1532383539;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1532383539;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1537192317;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1540920690;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1548846700;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1549467949;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Override 	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause);1550005039;Unregister TaskManager from this pool, all the related slots will be released and tasks be canceled. Called_when we find some TaskManager becomes "dead" or "abnormal", and we decide to not using slots from it anymore.__@param resourceId The id of the TaskManager_@param cause for the releasing of the TaskManager;@Override_	public CompletableFuture<Acknowledge> releaseTaskManager(final ResourceID resourceId, final Exception cause) {_		if (registeredTaskManagers.remove(resourceId)) {_			releaseTaskManagerInternal(resourceId, cause)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};unregister,task,manager,from,this,pool,all,the,related,slots,will,be,released,and,tasks,be,canceled,called,when,we,find,some,task,manager,becomes,dead,or,abnormal,and,we,decide,to,not,using,slots,from,it,anymore,param,resource,id,the,id,of,the,task,manager,param,cause,for,the,releasing,of,the,task,manager;override,public,completable,future,acknowledge,release,task,manager,final,resource,id,resource,id,final,exception,cause,if,registered,task,managers,remove,resource,id,release,task,manager,internal,resource,id,cause,return,completable,future,completed,future,acknowledge,get
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1513261599;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1515588319;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1518433170;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1518434692;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1518680774;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1518680775;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1518945174;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519121818;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519207454;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519406528;Checks whether there exists a pending request with the given allocation id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,allocation,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519481095;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519481096;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519481114;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1519655521;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1520961474;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1521804757;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1521804757;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1521804758;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1522249273;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1525384685;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1525384685;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1525961911;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1525961911;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1525961911;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1525961911;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1527687739;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1529682304;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1530104620;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1530472204;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1532383539;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1532383539;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1537192317;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1540920690;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1548846700;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1549467949;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> @Nullable 	private PendingRequest removePendingRequest(SlotRequestId requestId);1550005039;Checks whether there exists a pending request with the given slot request id and removes it_from the internal data structures.__@param requestId identifying the pending request_@return pending request if there is one, otherwise null;@Nullable_	private PendingRequest removePendingRequest(SlotRequestId requestId) {_		PendingRequest result = waitingForResourceManager.remove(requestId)___		if (result != null) {_			_			assert !pendingRequests.containsKeyA(requestId) : "A pending requests should only be part of either " +_				"the pendingRequests or waitingForResourceManager but not both."___			return result__		} else {_			return pendingRequests.removeKeyA(requestId)__		}_	};checks,whether,there,exists,a,pending,request,with,the,given,slot,request,id,and,removes,it,from,the,internal,data,structures,param,request,id,identifying,the,pending,request,return,pending,request,if,there,is,one,otherwise,null;nullable,private,pending,request,remove,pending,request,slot,request,id,request,id,pending,request,result,waiting,for,resource,manager,remove,request,id,if,result,null,assert,pending,requests,contains,key,a,request,id,a,pending,requests,should,only,be,part,of,either,the,pending,requests,or,waiting,for,resource,manager,but,not,both,return,result,else,return,pending,requests,remove,key,a,request,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1513261599;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1515588319;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1518433170;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1518434692;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1518680774;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1518680775;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1518945174;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519121818;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519207454;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519406528;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519481095;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519481096;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519481114;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1519655521;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1520961474;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1521804757;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1521804757;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1521804758;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1522249273;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1525384685;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1525384685;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1525961911;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1525961911;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1525961911;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1525961911;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1527687739;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1529682304;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1530104620;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1530472204;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1532383539;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1532383539;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1537192317;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1540920690;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1548846700;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1549467949;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> boolean contains(AllocationID slotAllocationId);1550005039;Check whether we have allocated this slot.__@param slotAllocationId The allocation id of the slot to check_@return True if we contains this slot;boolean contains(AllocationID slotAllocationId) {_			return allocatedSlotsById.containsKeyA(slotAllocationId)__		};check,whether,we,have,allocated,this,slot,param,slot,allocation,id,the,allocation,id,of,the,slot,to,check,return,true,if,we,contains,this,slot;boolean,contains,allocation,id,slot,allocation,id,return,allocated,slots,by,id,contains,key,a,slot,allocation,id
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1513261599;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1515588319;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1518433170;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1518434692;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1518680774;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1518680775;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1518945174;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519121818;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519207454;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519406528;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519481095;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519481096;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519481114;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1519655521;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1520961474;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1521804757;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1521804757;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1521804758;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1522249273;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1525384685;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1525384685;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1525961911;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1525961911;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1525961911;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1525961911;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1527687739;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1529682304;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1530104620;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1530472204;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1532383539;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1532383539;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1537192317;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1540920690;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1548846700;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1549467949;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> AllocatedSlots -> @Nullable 		AllocatedSlot remove(final AllocationID allocationID);1550005039;Removes the allocated slot specified by the provided slot allocation id.__@param allocationID identifying the allocated slot to remove_@return The removed allocated slot or null.;@Nullable_		AllocatedSlot remove(final AllocationID allocationID) {_			AllocatedSlot allocatedSlot = allocatedSlotsById.removeKeyA(allocationID)___			if (allocatedSlot != null) {_				removeAllocatedSlot(allocatedSlot)__			}__			return allocatedSlot__		};removes,the,allocated,slot,specified,by,the,provided,slot,allocation,id,param,allocation,id,identifying,the,allocated,slot,to,remove,return,the,removed,allocated,slot,or,null;nullable,allocated,slot,remove,final,allocation,id,allocation,id,allocated,slot,allocated,slot,allocated,slots,by,id,remove,key,a,allocation,id,if,allocated,slot,null,remove,allocated,slot,allocated,slot,return,allocated,slot
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1513261599;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1515588319;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518433170;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518434692;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518680774;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot( 			CoLocationConstraint coLocationConstraint, 			SlotSharingManager multiTaskSlotManager, 			ResourceProfile resourceProfile, 			Collection<TaskManagerLocation> locationPreferences, 			boolean allowQueuedScheduling) throws NoResourceAvailableException;1518680775;Allocates a co-located {@link SlotSharingManager.MultiTaskSlot} for the given {@link CoLocationConstraint}.__<p>If allowQueuedScheduling is true, then the returned {@link SlotSharingManager.MultiTaskSlot} can be_uncompleted.__@param coLocationConstraint for which to allocate a {@link SlotSharingManager.MultiTaskSlot}_@param multiTaskSlotManager responsible for the slot sharing group for which to allocate the slot_@param resourceProfile specifying the requirements for the requested slot_@param locationPreferences containing preferred TaskExecutors on which to allocate the slot_@param allowQueuedScheduling true if queued scheduling (the returned task slot must not be completed yet) is allowed, otherwise false_@return A {@link SlotSharingManager.MultiTaskSlotLocality} which contains the allocated{@link SlotSharingManager.MultiTaskSlot}_and its locality wrt the given location preferences_@throws NoResourceAvailableException if no task slot could be allocated;private SlotSharingManager.MultiTaskSlotLocality allocateCoLocatedMultiTaskSlot(_			CoLocationConstraint coLocationConstraint,_			SlotSharingManager multiTaskSlotManager,_			ResourceProfile resourceProfile,_			Collection<TaskManagerLocation> locationPreferences,_			boolean allowQueuedScheduling) throws NoResourceAvailableException {_		final SlotRequestId coLocationSlotRequestId = coLocationConstraint.getSlotRequestId()___		if (coLocationSlotRequestId != null) {_			_			final SlotSharingManager.TaskSlot taskSlot = multiTaskSlotManager.getTaskSlot(coLocationSlotRequestId)___			if (taskSlot != null) {_				Preconditions.checkState(taskSlot instanceof SlotSharingManager.MultiTaskSlot)__				return SlotSharingManager.MultiTaskSlotLocality.of(((SlotSharingManager.MultiTaskSlot) taskSlot), Locality.LOCAL)__			} else {_				_				coLocationConstraint.setSlotRequestId(null)__			}_		}__		final Collection<TaskManagerLocation> actualLocationPreferences___		if (coLocationConstraint.isAssigned()) {_			actualLocationPreferences = Collections.singleton(coLocationConstraint.getLocation())__		} else {_			actualLocationPreferences = locationPreferences__		}__		_		final SlotSharingManager.MultiTaskSlotLocality multiTaskSlotLocality = allocateMultiTaskSlot(_			coLocationConstraint.getGroupId(), multiTaskSlotManager,_			resourceProfile,_			actualLocationPreferences,_			allowQueuedScheduling)___		_		if (coLocationConstraint.isAssigned() && multiTaskSlotLocality.getLocality() != Locality.LOCAL) {_			multiTaskSlotLocality.getMultiTaskSlot().release(_				new FlinkException("Multi task slot is not local and, thus, does not fulfill the co-location constraint."))___			throw new NoResourceAvailableException("Could not allocate a local multi task slot for the " +_				"co location constraint " + coLocationConstraint + '.')__		}__		final SlotRequestId slotRequestId = new SlotRequestId()__		final SlotSharingManager.MultiTaskSlot coLocationSlot = multiTaskSlotLocality.getMultiTaskSlot().allocateMultiTaskSlot(_			slotRequestId,_			coLocationConstraint.getGroupId())___		_		coLocationConstraint.setSlotRequestId(slotRequestId)___		_		coLocationSlot.getSlotContextFuture().whenComplete(_			(SlotContext slotContext, Throwable throwable) -> {_				if (throwable == null) {_					_					if (Objects.equals(coLocationConstraint.getSlotRequestId(), slotRequestId)) {_						coLocationConstraint.lockLocation(slotContext.getTaskManagerLocation())__					} else {_						log.debug("Failed to lock colocation constraint {} because assigned slot " +_							"request {} differs from fulfilled slot request {}.",_							coLocationConstraint.getGroupId(),_							coLocationConstraint.getSlotRequestId(),_							slotRequestId)__					}_				} else {_					log.debug("Failed to lock colocation constraint {} because the slot " +_						"allocation for slot request {} failed.",_						coLocationConstraint.getGroupId(),_						coLocationConstraint.getSlotRequestId(),_						throwable)__				}_			})___		return SlotSharingManager.MultiTaskSlotLocality.of(coLocationSlot, multiTaskSlotLocality.getLocality())__	};allocates,a,co,located,link,slot,sharing,manager,multi,task,slot,for,the,given,link,co,location,constraint,p,if,allow,queued,scheduling,is,true,then,the,returned,link,slot,sharing,manager,multi,task,slot,can,be,uncompleted,param,co,location,constraint,for,which,to,allocate,a,link,slot,sharing,manager,multi,task,slot,param,multi,task,slot,manager,responsible,for,the,slot,sharing,group,for,which,to,allocate,the,slot,param,resource,profile,specifying,the,requirements,for,the,requested,slot,param,location,preferences,containing,preferred,task,executors,on,which,to,allocate,the,slot,param,allow,queued,scheduling,true,if,queued,scheduling,the,returned,task,slot,must,not,be,completed,yet,is,allowed,otherwise,false,return,a,link,slot,sharing,manager,multi,task,slot,locality,which,contains,the,allocated,link,slot,sharing,manager,multi,task,slot,and,its,locality,wrt,the,given,location,preferences,throws,no,resource,available,exception,if,no,task,slot,could,be,allocated;private,slot,sharing,manager,multi,task,slot,locality,allocate,co,located,multi,task,slot,co,location,constraint,co,location,constraint,slot,sharing,manager,multi,task,slot,manager,resource,profile,resource,profile,collection,task,manager,location,location,preferences,boolean,allow,queued,scheduling,throws,no,resource,available,exception,final,slot,request,id,co,location,slot,request,id,co,location,constraint,get,slot,request,id,if,co,location,slot,request,id,null,final,slot,sharing,manager,task,slot,task,slot,multi,task,slot,manager,get,task,slot,co,location,slot,request,id,if,task,slot,null,preconditions,check,state,task,slot,instanceof,slot,sharing,manager,multi,task,slot,return,slot,sharing,manager,multi,task,slot,locality,of,slot,sharing,manager,multi,task,slot,task,slot,locality,local,else,co,location,constraint,set,slot,request,id,null,final,collection,task,manager,location,actual,location,preferences,if,co,location,constraint,is,assigned,actual,location,preferences,collections,singleton,co,location,constraint,get,location,else,actual,location,preferences,location,preferences,final,slot,sharing,manager,multi,task,slot,locality,multi,task,slot,locality,allocate,multi,task,slot,co,location,constraint,get,group,id,multi,task,slot,manager,resource,profile,actual,location,preferences,allow,queued,scheduling,if,co,location,constraint,is,assigned,multi,task,slot,locality,get,locality,locality,local,multi,task,slot,locality,get,multi,task,slot,release,new,flink,exception,multi,task,slot,is,not,local,and,thus,does,not,fulfill,the,co,location,constraint,throw,new,no,resource,available,exception,could,not,allocate,a,local,multi,task,slot,for,the,co,location,constraint,co,location,constraint,final,slot,request,id,slot,request,id,new,slot,request,id,final,slot,sharing,manager,multi,task,slot,co,location,slot,multi,task,slot,locality,get,multi,task,slot,allocate,multi,task,slot,slot,request,id,co,location,constraint,get,group,id,co,location,constraint,set,slot,request,id,slot,request,id,co,location,slot,get,slot,context,future,when,complete,slot,context,slot,context,throwable,throwable,if,throwable,null,if,objects,equals,co,location,constraint,get,slot,request,id,slot,request,id,co,location,constraint,lock,location,slot,context,get,task,manager,location,else,log,debug,failed,to,lock,colocation,constraint,because,assigned,slot,request,differs,from,fulfilled,slot,request,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,slot,request,id,else,log,debug,failed,to,lock,colocation,constraint,because,the,slot,allocation,for,slot,request,failed,co,location,constraint,get,group,id,co,location,constraint,get,slot,request,id,throwable,return,slot,sharing,manager,multi,task,slot,locality,of,co,location,slot,multi,task,slot,locality,get,locality
SlotPool -> @Override 	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause);1537192317;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause The cause of the failure_@return Optional task executor if it has no more slots registered;@Override_	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__			return CompletableFuture.completedFuture(SerializableOptional.empty())__		}_		else {_			return tryFailingAllocatedSlot(allocationID, cause)__		}__		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure,return,optional,task,executor,if,it,has,no,more,slots,registered;override,public,completable,future,serializable,optional,resource,id,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,return,completable,future,completed,future,serializable,optional,empty,else,return,try,failing,allocated,slot,allocation,id,cause
SlotPool -> @Override 	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause);1540920690;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause The cause of the failure_@return Optional task executor if it has no more slots registered;@Override_	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__			return CompletableFuture.completedFuture(SerializableOptional.empty())__		}_		else {_			return tryFailingAllocatedSlot(allocationID, cause)__		}__		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure,return,optional,task,executor,if,it,has,no,more,slots,registered;override,public,completable,future,serializable,optional,resource,id,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,return,completable,future,completed,future,serializable,optional,empty,else,return,try,failing,allocated,slot,allocation,id,cause
SlotPool -> @Override 	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause);1548846700;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause The cause of the failure_@return Optional task executor if it has no more slots registered;@Override_	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__			return CompletableFuture.completedFuture(SerializableOptional.empty())__		}_		else {_			return tryFailingAllocatedSlot(allocationID, cause)__		}__		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure,return,optional,task,executor,if,it,has,no,more,slots,registered;override,public,completable,future,serializable,optional,resource,id,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,return,completable,future,completed,future,serializable,optional,empty,else,return,try,failing,allocated,slot,allocation,id,cause
SlotPool -> @Override 	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause);1549467949;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause The cause of the failure_@return Optional task executor if it has no more slots registered;@Override_	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__			return CompletableFuture.completedFuture(SerializableOptional.empty())__		}_		else {_			return tryFailingAllocatedSlot(allocationID, cause)__		}__		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure,return,optional,task,executor,if,it,has,no,more,slots,registered;override,public,completable,future,serializable,optional,resource,id,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,return,completable,future,completed,future,serializable,optional,empty,else,return,try,failing,allocated,slot,allocation,id,cause
SlotPool -> @Override 	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause);1550005039;Fail the specified allocation and release the corresponding slot if we have one._This may triggered by JobManager when some slot allocation failed with rpcTimeout._Or this could be triggered by TaskManager, when it finds out something went wrong with the slot,_and decided to take it back.__@param allocationID Represents the allocation which should be failed_@param cause The cause of the failure_@return Optional task executor if it has no more slots registered;@Override_	public CompletableFuture<SerializableOptional<ResourceID>> failAllocation(final AllocationID allocationID, final Exception cause) {_		final PendingRequest pendingRequest = pendingRequests.removeKeyB(allocationID)__		if (pendingRequest != null) {_			_			failPendingRequest(pendingRequest, cause)__			return CompletableFuture.completedFuture(SerializableOptional.empty())__		}_		else {_			return tryFailingAllocatedSlot(allocationID, cause)__		}__		_	};fail,the,specified,allocation,and,release,the,corresponding,slot,if,we,have,one,this,may,triggered,by,job,manager,when,some,slot,allocation,failed,with,rpc,timeout,or,this,could,be,triggered,by,task,manager,when,it,finds,out,something,went,wrong,with,the,slot,and,decided,to,take,it,back,param,allocation,id,represents,the,allocation,which,should,be,failed,param,cause,the,cause,of,the,failure,return,optional,task,executor,if,it,has,no,more,slots,registered;override,public,completable,future,serializable,optional,resource,id,fail,allocation,final,allocation,id,allocation,id,final,exception,cause,final,pending,request,pending,request,pending,requests,remove,key,b,allocation,id,if,pending,request,null,fail,pending,request,pending,request,cause,return,completable,future,completed,future,serializable,optional,empty,else,return,try,failing,allocated,slot,allocation,id,cause
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1513261599;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1515588319;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1518433170;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1518434692;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1518680774;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1518680775;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1518945174;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519121818;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519207454;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519406528;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519481095;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519481096;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519481114;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1519655521;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1520961474;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1521804757;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1521804757;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1521804758;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1522249273;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1525384685;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1525384685;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1525961911;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1525961911;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1525961911;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1525961911;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1527687739;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1529682304;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1530104620;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1530472204;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1532383539;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1532383539;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1537192317;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1540920690;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1548846700;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1549467949;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
SlotPool -> AvailableSlots -> boolean contains(AllocationID slotId);1550005039;Check whether we have this slot.;boolean contains(AllocationID slotId) {_			return availableSlots.containsKey(slotId)__		};check,whether,we,have,this,slot;boolean,contains,allocation,id,slot,id,return,available,slots,contains,key,slot,id
