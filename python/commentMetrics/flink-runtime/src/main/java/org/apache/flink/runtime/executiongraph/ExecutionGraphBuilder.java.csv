# id;timestamp;commentText;codeText;commentWords;codeWords
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobWriter blobWriter, 			Logger log) 		throws JobExecutionException, JobException;1508861311;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobWriter blobWriter,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_                new ExecutionGraph(_                    jobInformation,_                    futureExecutor,_                    ioExecutor,_                    timeout,_                    restartStrategy,_                    failoverStrategy,_                    slotProvider,_                    classLoader,_                    blobWriter)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				metadataBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,writer,blob,writer,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,writer,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobWriter blobWriter, 			Logger log) 		throws JobExecutionException, JobException;1513261599;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobWriter blobWriter,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_                new ExecutionGraph(_                    jobInformation,_                    futureExecutor,_                    ioExecutor,_                    timeout,_                    restartStrategy,_                    failoverStrategy,_                    slotProvider,_                    classLoader,_                    blobWriter)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				metadataBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,writer,blob,writer,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,writer,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobWriter blobWriter, 			Logger log) 		throws JobExecutionException, JobException;1516295283;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobWriter blobWriter,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_                new ExecutionGraph(_                    jobInformation,_                    futureExecutor,_                    ioExecutor,_                    timeout,_                    restartStrategy,_                    failoverStrategy,_                    slotProvider,_                    classLoader,_                    blobWriter)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_						CheckpointingOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CheckpointingOptions.CHECKPOINTS_DIRECTORY)___			_			final StateBackend applicationConfiguredBackend__			final SerializedValue<StateBackend> serializedAppConfigured = snapshotSettings.getDefaultStateBackend()___			if (serializedAppConfigured == null) {_				applicationConfiguredBackend = null__			}_			else {_				try {_					applicationConfiguredBackend = serializedAppConfigured.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, _							"Could not deserialize application-defined state backend.", e)__				}_			}__			final StateBackend rootBackend__			try {_				rootBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(_						applicationConfiguredBackend, jobManagerConfig, classLoader, log)__			}_			catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_				throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				rootBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,writer,blob,writer,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,writer,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,checkpointing,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,checkpointing,options,key,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,checkpointing,options,final,state,backend,application,configured,backend,final,serialized,value,state,backend,serialized,app,configured,snapshot,settings,get,default,state,backend,if,serialized,app,configured,null,application,configured,backend,null,else,try,application,configured,backend,serialized,app,configured,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,deserialize,application,defined,state,backend,e,final,state,backend,root,backend,try,root,backend,state,backend,loader,from,application,or,config,or,default,application,configured,backend,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,root,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobWriter blobWriter, 			Logger log) 		throws JobExecutionException, JobException;1516295283;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobWriter blobWriter,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_					jobInformation,_					futureExecutor,_					ioExecutor,_					timeout,_					restartStrategy,_					failoverStrategy,_					slotProvider,_					classLoader,_					blobWriter)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_						CheckpointingOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CheckpointingOptions.CHECKPOINTS_DIRECTORY)___			_			final StateBackend applicationConfiguredBackend__			final SerializedValue<StateBackend> serializedAppConfigured = snapshotSettings.getDefaultStateBackend()___			if (serializedAppConfigured == null) {_				applicationConfiguredBackend = null__			}_			else {_				try {_					applicationConfiguredBackend = serializedAppConfigured.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, _							"Could not deserialize application-defined state backend.", e)__				}_			}__			final StateBackend rootBackend__			try {_				rootBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(_						applicationConfiguredBackend, jobManagerConfig, classLoader, log)__			}_			catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_				throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				rootBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,writer,blob,writer,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,writer,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,checkpointing,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,checkpointing,options,key,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,checkpointing,options,final,state,backend,application,configured,backend,final,serialized,value,state,backend,serialized,app,configured,snapshot,settings,get,default,state,backend,if,serialized,app,configured,null,application,configured,backend,null,else,try,application,configured,backend,serialized,app,configured,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,deserialize,application,defined,state,backend,e,final,state,backend,root,backend,try,root,backend,state,backend,loader,from,application,or,config,or,default,application,configured,backend,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,root,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobWriter blobWriter, 			Logger log) 		throws JobExecutionException, JobException;1516295283;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobWriter blobWriter,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_					jobInformation,_					futureExecutor,_					ioExecutor,_					timeout,_					restartStrategy,_					failoverStrategy,_					slotProvider,_					classLoader,_					blobWriter)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices =_					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_						CheckpointingOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CheckpointingOptions.CHECKPOINTS_DIRECTORY)___			_			final StateBackend applicationConfiguredBackend__			final SerializedValue<StateBackend> serializedAppConfigured = snapshotSettings.getDefaultStateBackend()___			if (serializedAppConfigured == null) {_				applicationConfiguredBackend = null__			}_			else {_				try {_					applicationConfiguredBackend = serializedAppConfigured.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId,_							"Could not deserialize application-defined state backend.", e)__				}_			}__			final StateBackend rootBackend__			try {_				rootBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(_						applicationConfiguredBackend, jobManagerConfig, classLoader, log)__			}_			catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_				throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getCheckpointRetentionPolicy(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				rootBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,writer,blob,writer,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,writer,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,checkpointing,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,checkpointing,options,key,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,checkpointing,options,final,state,backend,application,configured,backend,final,serialized,value,state,backend,serialized,app,configured,snapshot,settings,get,default,state,backend,if,serialized,app,configured,null,application,configured,backend,null,else,try,application,configured,backend,serialized,app,configured,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,deserialize,application,defined,state,backend,e,final,state,backend,root,backend,try,root,backend,state,backend,loader,from,application,or,config,or,default,application,configured,backend,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,checkpoint,retention,policy,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,root,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobWriter blobWriter, 			Logger log) 		throws JobExecutionException, JobException;1518302632;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobWriter blobWriter,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_					jobInformation,_					futureExecutor,_					ioExecutor,_					timeout,_					restartStrategy,_					failoverStrategy,_					slotProvider,_					classLoader,_					blobWriter)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices =_					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_						CheckpointingOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CheckpointingOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CheckpointingOptions.CHECKPOINTS_DIRECTORY)___			_			final StateBackend applicationConfiguredBackend__			final SerializedValue<StateBackend> serializedAppConfigured = snapshotSettings.getDefaultStateBackend()___			if (serializedAppConfigured == null) {_				applicationConfiguredBackend = null__			}_			else {_				try {_					applicationConfiguredBackend = serializedAppConfigured.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId,_							"Could not deserialize application-defined state backend.", e)__				}_			}__			final StateBackend rootBackend__			try {_				rootBackend = StateBackendLoader.fromApplicationOrConfigOrDefault(_						applicationConfiguredBackend, jobManagerConfig, classLoader, log)__			}_			catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_				throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getCheckpointRetentionPolicy(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				rootBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,writer,blob,writer,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,writer,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,checkpointing,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,checkpointing,options,key,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,max,number,of,checkpoints,to,retain,checkpointing,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,checkpointing,options,final,state,backend,application,configured,backend,final,serialized,value,state,backend,serialized,app,configured,snapshot,settings,get,default,state,backend,if,serialized,app,configured,null,application,configured,backend,null,else,try,application,configured,backend,serialized,app,configured,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,deserialize,application,defined,state,backend,e,final,state,backend,root,backend,try,root,backend,state,backend,loader,from,application,or,config,or,default,application,configured,backend,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,checkpoint,retention,policy,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,root,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			Executor futureExecutor, 			Executor ioExecutor, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1479852017;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new emoty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			Executor futureExecutor,_			Executor ioExecutor,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException_	{_		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			boolean isStatsDisabled = jobManagerConfig.getBoolean(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_DISABLE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_DISABLE)___			CheckpointStatsTracker checkpointStatsTracker__			if (isStatsDisabled) {_				checkpointStatsTracker = new DisabledCheckpointStatsTracker()__			}_			else {_				int historySize = jobManagerConfig.getInteger(_						ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_						ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___				checkpointStatsTracker = new SimpleCheckpointStatsTracker(historySize, ackVertices, metrics)__			}__			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			executionGraph.enableSnapshotCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,emoty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,executor,future,executor,executor,io,executor,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,boolean,is,stats,disabled,job,manager,config,get,boolean,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,if,is,stats,disabled,checkpoint,stats,tracker,new,disabled,checkpoint,stats,tracker,else,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,new,simple,checkpoint,stats,tracker,history,size,ack,vertices,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,execution,graph,enable,snapshot,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			Executor futureExecutor, 			Executor ioExecutor, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1484038132;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new emoty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			Executor futureExecutor,_			Executor ioExecutor,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException_	{_		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			executionGraph.enableSnapshotCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,emoty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,executor,future,executor,executor,io,executor,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,execution,graph,enable,snapshot,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			Executor executor, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1477989375;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new emoty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			Executor executor,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException_	{_		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						executor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						classLoader,_						metrics)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			boolean isStatsDisabled = jobManagerConfig.getBoolean(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_DISABLE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_DISABLE)___			CheckpointStatsTracker checkpointStatsTracker__			if (isStatsDisabled) {_				checkpointStatsTracker = new DisabledCheckpointStatsTracker()__			}_			else {_				int historySize = jobManagerConfig.getInteger(_						ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_						ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___				checkpointStatsTracker = new SimpleCheckpointStatsTracker(historySize, ackVertices, metrics)__			}__			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			executionGraph.enableSnapshotCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,emoty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,executor,executor,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,class,loader,metrics,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,boolean,is,stats,disabled,job,manager,config,get,boolean,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,if,is,stats,disabled,checkpoint,stats,tracker,new,disabled,checkpoint,stats,tracker,else,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,new,simple,checkpoint,stats,tracker,history,size,ack,vertices,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,execution,graph,enable,snapshot,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			Executor executor, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1478800024;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new emoty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			Executor executor,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException_	{_		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_							executor,_							jobId,_							jobName,_							jobGraph.getJobConfiguration(),_							jobGraph.getSerializedExecutionConfig(),_							timeout,_							restartStrategy,_							jobGraph.getUserJarBlobKeys(),_							jobGraph.getClasspaths(),_							classLoader,_							metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			boolean isStatsDisabled = jobManagerConfig.getBoolean(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_DISABLE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_DISABLE)___			CheckpointStatsTracker checkpointStatsTracker__			if (isStatsDisabled) {_				checkpointStatsTracker = new DisabledCheckpointStatsTracker()__			}_			else {_				int historySize = jobManagerConfig.getInteger(_						ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_						ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___				checkpointStatsTracker = new SimpleCheckpointStatsTracker(historySize, ackVertices, metrics)__			}__			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			executionGraph.enableSnapshotCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,emoty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,executor,executor,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,boolean,is,stats,disabled,job,manager,config,get,boolean,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,if,is,stats,disabled,checkpoint,stats,tracker,new,disabled,checkpoint,stats,tracker,else,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,new,simple,checkpoint,stats,tracker,history,size,ack,vertices,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,execution,graph,enable,snapshot,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1486647395;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException_	{_		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			executionGraph.enableSnapshotCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,execution,graph,enable,snapshot,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1488304933;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1488453790;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1489671807;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.STATE_BACKEND_MAX_RETAINED_CHECKPOINTS_OPTIONS)__				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for max-retained-checkpoints is not a positive number.")__					maxNumberOfCheckpointsToRetain = CoreOptions.STATE_BACKEND_MAX_RETAINED_CHECKPOINTS_OPTIONS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,max,retained,checkpoints,is,not,a,positive,number,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1489671807;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader,_						metrics)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,metrics,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1490800309;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph___		try {_			executionGraph = (prior != null) ? prior :_					new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)__		} catch (IOException e) {_			throw new JobException("Could not create the execution graph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1490800309;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1490817167;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobSnapshottingSettings snapshotSettings = jobGraph.getSnapshotSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,snapshotting,settings,snapshot,settings,job,graph,get,snapshot,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1492678790;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1493236605;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final MasterTriggerRestoreHook.Factory[] hookFactories = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (hookFactories == null || hookFactories.length == 0) {_				hooks = Collections.emptyList()__			}_			else {_				hooks = new ArrayList<>(hookFactories.length)__				for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_					hooks.add(factory.create())__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,master,trigger,restore,hook,factory,hook,factories,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,hook,factories,null,hook,factories,length,0,hooks,collections,empty,list,else,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,factory,create,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1493831843;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(_					ConfigConstants.JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE,_					ConfigConstants.DEFAULT_JOB_MANAGER_WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final MasterTriggerRestoreHook.Factory[] hookFactories = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (hookFactories == null || hookFactories.length == 0) {_				hooks = Collections.emptyList()__			}_			else {_				hooks = new ArrayList<>(hookFactories.length)__				for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_					hooks.add(factory.create())__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,config,constants,config,constants,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,master,trigger,restore,hook,factory,hook,factories,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,hook,factories,null,hook,factories,length,0,hooks,collections,empty,list,else,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,factory,create,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1494363408;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final MasterTriggerRestoreHook.Factory[] hookFactories = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (hookFactories == null || hookFactories.length == 0) {_				hooks = Collections.emptyList()__			}_			else {_				hooks = new ArrayList<>(hookFactories.length)__				for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_					hooks.add(factory.create())__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,master,trigger,restore,hook,factory,hook,factories,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,hook,factories,null,hook,factories,length,0,hooks,collections,empty,list,else,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,factory,create,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1494504667;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				hooks = new ArrayList<>(hookFactories.length)__				for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_					hooks.add(factory.create())__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,factory,create,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1495200169;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				Thread thread = Thread.currentThread()__				ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)__				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,thread,thread,thread,current,thread,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1495200169;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final StateBackend applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				metadataBackend = applicationConfiguredBackend___				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_						applicationConfiguredBackend)__			}_			else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				}_				catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,metadata,backend,application,configured,backend,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,application,configured,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1499314317;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(_					ConfigConstants.CHECKPOINTS_DIRECTORY_KEY, null)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,config,constants,null,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1499314317;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1499939555;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(JobManagerOptions.WEB_CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,job,manager,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1502438562;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings,_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			executionGraph.enableCheckpointing(_					snapshotSettings.getCheckpointInterval(),_					snapshotSettings.getCheckpointTimeout(),_					snapshotSettings.getMinPauseBetweenCheckpoints(),_					snapshotSettings.getMaxConcurrentCheckpoints(),_					snapshotSettings.getExternalizedCheckpointSettings(),_					triggerVertices,_					ackVertices,_					confirmVertices,_					hooks,_					checkpointIdCounter,_					completedCheckpoints,_					externalizedCheckpointsDir,_					metadataBackend,_					checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,execution,graph,enable,checkpointing,snapshot,settings,get,checkpoint,interval,snapshot,settings,get,checkpoint,timeout,snapshot,settings,get,min,pause,between,checkpoints,snapshot,settings,get,max,concurrent,checkpoints,snapshot,settings,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			Logger log) 		throws JobExecutionException, JobException;1506618381;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy = _				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				metadataBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1476094623;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1476432306;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1477989375;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1478800024;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1479852017;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1484038132;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1486647395;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1488304933;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1488453790;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1489671807;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1489671807;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1490800309;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1490800309;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1490817167;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1492678790;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1493236605;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1493831843;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1494363408;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1494504667;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1495200169;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1495200169;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1499314317;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1499314317;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1499939555;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1502438562;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1506618381;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1508861310;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1508861311;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1508861311;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1508861311;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1513261599;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1516295283;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1516295283;This class is not supposed to be instantiated;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1516295283;This class is not supposed to be instantiated.;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1518302632;This class is not supposed to be instantiated.;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1518680774;This class is not supposed to be instantiated.;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> private ExecutionGraphBuilder();1522324836;This class is not supposed to be instantiated.;private ExecutionGraphBuilder() {};this,class,is,not,supposed,to,be,instantiated;private,execution,graph,builder
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobServer blobServer, 			Logger log) 		throws JobExecutionException, JobException;1508861310;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobServer blobServer,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_						futureExecutor,_						ioExecutor,_						jobId,_						jobName,_						jobGraph.getJobConfiguration(),_						jobGraph.getSerializedExecutionConfig(),_						timeout,_						restartStrategy,_						failoverStrategy,_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths(),_						slotProvider,_						classLoader,_						blobServer)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				metadataBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,server,blob,server,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,future,executor,io,executor,job,id,job,name,job,graph,get,job,configuration,job,graph,get,serialized,execution,config,timeout,restart,strategy,failover,strategy,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,slot,provider,class,loader,blob,server,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobServer blobServer, 			Logger log) 		throws JobExecutionException, JobException;1508861311;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobServer blobServer,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		_		final ExecutionGraph executionGraph = (prior != null) ? prior :_				new ExecutionGraph(_					new JobInformation(_						jobId,_						jobName,_						jobGraph.getSerializedExecutionConfig(),_						jobGraph.getJobConfiguration(),_						jobGraph.getUserJarBlobKeys(),_						jobGraph.getClasspaths()),_					futureExecutor,_					ioExecutor,_					timeout,_					restartStrategy,_					failoverStrategy,_					slotProvider,_					classLoader,_					blobServer)___		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				metadataBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,server,blob,server,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,execution,graph,execution,graph,prior,null,prior,new,execution,graph,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,server,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
ExecutionGraphBuilder -> public static ExecutionGraph buildGraph( 			@Nullable ExecutionGraph prior, 			JobGraph jobGraph, 			Configuration jobManagerConfig, 			ScheduledExecutorService futureExecutor, 			Executor ioExecutor, 			SlotProvider slotProvider, 			ClassLoader classLoader, 			CheckpointRecoveryFactory recoveryFactory, 			Time timeout, 			RestartStrategy restartStrategy, 			MetricGroup metrics, 			int parallelismForAutoMax, 			BlobServer blobServer, 			Logger log) 		throws JobExecutionException, JobException;1508861311;Builds the ExecutionGraph from the JobGraph._If a prior execution graph exists, the JobGraph will be attached. If no prior execution_graph exists, then the JobGraph will become attach to a new empty execution graph.;public static ExecutionGraph buildGraph(_			@Nullable ExecutionGraph prior,_			JobGraph jobGraph,_			Configuration jobManagerConfig,_			ScheduledExecutorService futureExecutor,_			Executor ioExecutor,_			SlotProvider slotProvider,_			ClassLoader classLoader,_			CheckpointRecoveryFactory recoveryFactory,_			Time timeout,_			RestartStrategy restartStrategy,_			MetricGroup metrics,_			int parallelismForAutoMax,_			BlobServer blobServer,_			Logger log)_		throws JobExecutionException, JobException {__		checkNotNull(jobGraph, "job graph cannot be null")___		final String jobName = jobGraph.getName()__		final JobID jobId = jobGraph.getJobID()___		final FailoverStrategy.Factory failoverStrategy =_				FailoverStrategyLoader.loadFailoverStrategy(jobManagerConfig, log)___		final JobInformation jobInformation = new JobInformation(_			jobId,_			jobName,_			jobGraph.getSerializedExecutionConfig(),_			jobGraph.getJobConfiguration(),_			jobGraph.getUserJarBlobKeys(),_			jobGraph.getClasspaths())___		_		final ExecutionGraph executionGraph__		try {_			executionGraph = (prior != null) ? prior :_                new ExecutionGraph(_                    jobInformation,_                    futureExecutor,_                    ioExecutor,_                    timeout,_                    restartStrategy,_                    failoverStrategy,_                    slotProvider,_                    classLoader,_                    blobServer)__		} catch (IOException e) {_			throw new JobException("Could not create the ExecutionGraph.", e)__		}__		__		executionGraph.setScheduleMode(jobGraph.getScheduleMode())__		executionGraph.setQueuedSchedulingAllowed(jobGraph.getAllowQueuedScheduling())___		try {_			executionGraph.setJsonPlan(JsonPlanGenerator.generatePlan(jobGraph))__		}_		catch (Throwable t) {_			log.warn("Cannot create JSON plan for job", t)__			_			executionGraph.setJsonPlan("{}")__		}__		_		__		final long initMasterStart = System.nanoTime()__		log.info("Running initialization on master for job {} ({}).", jobName, jobId)___		for (JobVertex vertex : jobGraph.getVertices()) {_			String executableClass = vertex.getInvokableClassName()__			if (executableClass == null || executableClass.isEmpty()) {_				throw new JobSubmissionException(jobId,_						"The vertex " + vertex.getID() + " (" + vertex.getName() + ") has no invokable class.")__			}__			if (vertex.getParallelism() == ExecutionConfig.PARALLELISM_AUTO_MAX) {_				vertex.setParallelism(parallelismForAutoMax)__			}__			try {_				vertex.initializeOnMaster(classLoader)__			}_			catch (Throwable t) {_					throw new JobExecutionException(jobId,_							"Cannot initialize task '" + vertex.getName() + "': " + t.getMessage(), t)__			}_		}__		log.info("Successfully ran initialization on master in {} ms.",_				(System.nanoTime() - initMasterStart) / 1_000_000)___		_		List<JobVertex> sortedTopology = jobGraph.getVerticesSortedTopologicallyFromSources()__		if (log.isDebugEnabled()) {_			log.debug("Adding {} vertices from job graph {} ({}).", sortedTopology.size(), jobName, jobId)__		}_		executionGraph.attachJobGraph(sortedTopology)___		if (log.isDebugEnabled()) {_			log.debug("Successfully created execution graph from job graph {} ({}).", jobName, jobId)__		}__		_		JobCheckpointingSettings snapshotSettings = jobGraph.getCheckpointingSettings()__		if (snapshotSettings != null) {_			List<ExecutionJobVertex> triggerVertices = _					idToVertex(snapshotSettings.getVerticesToTrigger(), executionGraph)___			List<ExecutionJobVertex> ackVertices =_					idToVertex(snapshotSettings.getVerticesToAcknowledge(), executionGraph)___			List<ExecutionJobVertex> confirmVertices =_					idToVertex(snapshotSettings.getVerticesToConfirm(), executionGraph)___			CompletedCheckpointStore completedCheckpoints__			CheckpointIDCounter checkpointIdCounter__			try {_				int maxNumberOfCheckpointsToRetain = jobManagerConfig.getInteger(_					CoreOptions.MAX_RETAINED_CHECKPOINTS)___				if (maxNumberOfCheckpointsToRetain <= 0) {_					_					_					log.warn("The setting for '{} : {}' is invalid. Using default value of {}",_							CoreOptions.MAX_RETAINED_CHECKPOINTS.key(),_							maxNumberOfCheckpointsToRetain,_							CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue())___					maxNumberOfCheckpointsToRetain = CoreOptions.MAX_RETAINED_CHECKPOINTS.defaultValue()__				}__				completedCheckpoints = recoveryFactory.createCheckpointStore(jobId, maxNumberOfCheckpointsToRetain, classLoader)__				checkpointIdCounter = recoveryFactory.createCheckpointIDCounter(jobId)__			}_			catch (Exception e) {_				throw new JobExecutionException(jobId, "Failed to initialize high-availability checkpoint handler", e)__			}__			_			int historySize = jobManagerConfig.getInteger(WebOptions.CHECKPOINTS_HISTORY_SIZE)___			CheckpointStatsTracker checkpointStatsTracker = new CheckpointStatsTracker(_					historySize,_					ackVertices,_					snapshotSettings.getCheckpointCoordinatorConfiguration(),_					metrics)___			_			String externalizedCheckpointsDir = jobManagerConfig.getString(CoreOptions.CHECKPOINTS_DIRECTORY)___			_			_			final StateBackend metadataBackend___			final SerializedValue<StateBackend> applicationConfiguredBackend = snapshotSettings.getDefaultStateBackend()__			if (applicationConfiguredBackend != null) {_				try {_					metadataBackend = applicationConfiguredBackend.deserializeValue(classLoader)__				} catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend.", e)__				}__				log.info("Using application-defined state backend for checkpoint/savepoint metadata: {}.",_					metadataBackend)__			} else {_				try {_					metadataBackend = AbstractStateBackend_							.loadStateBackendFromConfigOrCreateDefault(jobManagerConfig, classLoader, log)__				} catch (IllegalConfigurationException | IOException | DynamicCodeLoadingException e) {_					throw new JobExecutionException(jobId, "Could not instantiate configured state backend", e)__				}_			}__			__			final SerializedValue<MasterTriggerRestoreHook.Factory[]> serializedHooks = snapshotSettings.getMasterHooks()__			final List<MasterTriggerRestoreHook<?>> hooks___			if (serializedHooks == null) {_				hooks = Collections.emptyList()__			}_			else {_				final MasterTriggerRestoreHook.Factory[] hookFactories__				try {_					hookFactories = serializedHooks.deserializeValue(classLoader)__				}_				catch (IOException | ClassNotFoundException e) {_					throw new JobExecutionException(jobId, "Could not instantiate user-defined checkpoint hooks", e)__				}__				final Thread thread = Thread.currentThread()__				final ClassLoader originalClassLoader = thread.getContextClassLoader()__				thread.setContextClassLoader(classLoader)___				try {_					hooks = new ArrayList<>(hookFactories.length)__					for (MasterTriggerRestoreHook.Factory factory : hookFactories) {_						hooks.add(MasterHooks.wrapHook(factory.create(), classLoader))__					}_				}_				finally {_					thread.setContextClassLoader(originalClassLoader)__				}_			}__			final CheckpointCoordinatorConfiguration chkConfig = snapshotSettings.getCheckpointCoordinatorConfiguration()___			executionGraph.enableCheckpointing(_				chkConfig.getCheckpointInterval(),_				chkConfig.getCheckpointTimeout(),_				chkConfig.getMinPauseBetweenCheckpoints(),_				chkConfig.getMaxConcurrentCheckpoints(),_				chkConfig.getExternalizedCheckpointSettings(),_				triggerVertices,_				ackVertices,_				confirmVertices,_				hooks,_				checkpointIdCounter,_				completedCheckpoints,_				externalizedCheckpointsDir,_				metadataBackend,_				checkpointStatsTracker)__		}__		__		metrics.gauge(RestartTimeGauge.METRIC_NAME, new RestartTimeGauge(executionGraph))__		metrics.gauge(DownTimeGauge.METRIC_NAME, new DownTimeGauge(executionGraph))__		metrics.gauge(UpTimeGauge.METRIC_NAME, new UpTimeGauge(executionGraph))__		metrics.gauge(NumberOfFullRestartsGauge.METRIC_NAME, new NumberOfFullRestartsGauge(executionGraph))___		executionGraph.getFailoverStrategy().registerMetrics(metrics)___		return executionGraph__	};builds,the,execution,graph,from,the,job,graph,if,a,prior,execution,graph,exists,the,job,graph,will,be,attached,if,no,prior,execution,graph,exists,then,the,job,graph,will,become,attach,to,a,new,empty,execution,graph;public,static,execution,graph,build,graph,nullable,execution,graph,prior,job,graph,job,graph,configuration,job,manager,config,scheduled,executor,service,future,executor,executor,io,executor,slot,provider,slot,provider,class,loader,class,loader,checkpoint,recovery,factory,recovery,factory,time,timeout,restart,strategy,restart,strategy,metric,group,metrics,int,parallelism,for,auto,max,blob,server,blob,server,logger,log,throws,job,execution,exception,job,exception,check,not,null,job,graph,job,graph,cannot,be,null,final,string,job,name,job,graph,get,name,final,job,id,job,id,job,graph,get,job,id,final,failover,strategy,factory,failover,strategy,failover,strategy,loader,load,failover,strategy,job,manager,config,log,final,job,information,job,information,new,job,information,job,id,job,name,job,graph,get,serialized,execution,config,job,graph,get,job,configuration,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,final,execution,graph,execution,graph,try,execution,graph,prior,null,prior,new,execution,graph,job,information,future,executor,io,executor,timeout,restart,strategy,failover,strategy,slot,provider,class,loader,blob,server,catch,ioexception,e,throw,new,job,exception,could,not,create,the,execution,graph,e,execution,graph,set,schedule,mode,job,graph,get,schedule,mode,execution,graph,set,queued,scheduling,allowed,job,graph,get,allow,queued,scheduling,try,execution,graph,set,json,plan,json,plan,generator,generate,plan,job,graph,catch,throwable,t,log,warn,cannot,create,json,plan,for,job,t,execution,graph,set,json,plan,final,long,init,master,start,system,nano,time,log,info,running,initialization,on,master,for,job,job,name,job,id,for,job,vertex,vertex,job,graph,get,vertices,string,executable,class,vertex,get,invokable,class,name,if,executable,class,null,executable,class,is,empty,throw,new,job,submission,exception,job,id,the,vertex,vertex,get,id,vertex,get,name,has,no,invokable,class,if,vertex,get,parallelism,execution,config,vertex,set,parallelism,parallelism,for,auto,max,try,vertex,initialize,on,master,class,loader,catch,throwable,t,throw,new,job,execution,exception,job,id,cannot,initialize,task,vertex,get,name,t,get,message,t,log,info,successfully,ran,initialization,on,master,in,ms,system,nano,time,init,master,start,list,job,vertex,sorted,topology,job,graph,get,vertices,sorted,topologically,from,sources,if,log,is,debug,enabled,log,debug,adding,vertices,from,job,graph,sorted,topology,size,job,name,job,id,execution,graph,attach,job,graph,sorted,topology,if,log,is,debug,enabled,log,debug,successfully,created,execution,graph,from,job,graph,job,name,job,id,job,checkpointing,settings,snapshot,settings,job,graph,get,checkpointing,settings,if,snapshot,settings,null,list,execution,job,vertex,trigger,vertices,id,to,vertex,snapshot,settings,get,vertices,to,trigger,execution,graph,list,execution,job,vertex,ack,vertices,id,to,vertex,snapshot,settings,get,vertices,to,acknowledge,execution,graph,list,execution,job,vertex,confirm,vertices,id,to,vertex,snapshot,settings,get,vertices,to,confirm,execution,graph,completed,checkpoint,store,completed,checkpoints,checkpoint,idcounter,checkpoint,id,counter,try,int,max,number,of,checkpoints,to,retain,job,manager,config,get,integer,core,options,if,max,number,of,checkpoints,to,retain,0,log,warn,the,setting,for,is,invalid,using,default,value,of,core,options,key,max,number,of,checkpoints,to,retain,core,options,default,value,max,number,of,checkpoints,to,retain,core,options,default,value,completed,checkpoints,recovery,factory,create,checkpoint,store,job,id,max,number,of,checkpoints,to,retain,class,loader,checkpoint,id,counter,recovery,factory,create,checkpoint,idcounter,job,id,catch,exception,e,throw,new,job,execution,exception,job,id,failed,to,initialize,high,availability,checkpoint,handler,e,int,history,size,job,manager,config,get,integer,web,options,checkpoint,stats,tracker,checkpoint,stats,tracker,new,checkpoint,stats,tracker,history,size,ack,vertices,snapshot,settings,get,checkpoint,coordinator,configuration,metrics,string,externalized,checkpoints,dir,job,manager,config,get,string,core,options,final,state,backend,metadata,backend,final,serialized,value,state,backend,application,configured,backend,snapshot,settings,get,default,state,backend,if,application,configured,backend,null,try,metadata,backend,application,configured,backend,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,log,info,using,application,defined,state,backend,for,checkpoint,savepoint,metadata,metadata,backend,else,try,metadata,backend,abstract,state,backend,load,state,backend,from,config,or,create,default,job,manager,config,class,loader,log,catch,illegal,configuration,exception,ioexception,dynamic,code,loading,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,configured,state,backend,e,final,serialized,value,master,trigger,restore,hook,factory,serialized,hooks,snapshot,settings,get,master,hooks,final,list,master,trigger,restore,hook,hooks,if,serialized,hooks,null,hooks,collections,empty,list,else,final,master,trigger,restore,hook,factory,hook,factories,try,hook,factories,serialized,hooks,deserialize,value,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,job,execution,exception,job,id,could,not,instantiate,user,defined,checkpoint,hooks,e,final,thread,thread,thread,current,thread,final,class,loader,original,class,loader,thread,get,context,class,loader,thread,set,context,class,loader,class,loader,try,hooks,new,array,list,hook,factories,length,for,master,trigger,restore,hook,factory,factory,hook,factories,hooks,add,master,hooks,wrap,hook,factory,create,class,loader,finally,thread,set,context,class,loader,original,class,loader,final,checkpoint,coordinator,configuration,chk,config,snapshot,settings,get,checkpoint,coordinator,configuration,execution,graph,enable,checkpointing,chk,config,get,checkpoint,interval,chk,config,get,checkpoint,timeout,chk,config,get,min,pause,between,checkpoints,chk,config,get,max,concurrent,checkpoints,chk,config,get,externalized,checkpoint,settings,trigger,vertices,ack,vertices,confirm,vertices,hooks,checkpoint,id,counter,completed,checkpoints,externalized,checkpoints,dir,metadata,backend,checkpoint,stats,tracker,metrics,gauge,restart,time,gauge,new,restart,time,gauge,execution,graph,metrics,gauge,down,time,gauge,new,down,time,gauge,execution,graph,metrics,gauge,up,time,gauge,new,up,time,gauge,execution,graph,metrics,gauge,number,of,full,restarts,gauge,new,number,of,full,restarts,gauge,execution,graph,execution,graph,get,failover,strategy,register,metrics,metrics,return,execution,graph
