# id;timestamp;commentText;codeText;commentWords;codeWords
PartialOrderPriorityQueue -> private final boolean lessThan(T a, T b);1405024514;Determines the ordering of objects in this priority queue.__@param a_The first element._@param b_The second element._@return True, if a &lt_ b, false otherwise.;private final boolean lessThan(T a, T b) {_		return comparator.compare(a, b) < 0__	};determines,the,ordering,of,objects,in,this,priority,queue,param,a,the,first,element,param,b,the,second,element,return,true,if,a,lt,b,false,otherwise;private,final,boolean,less,than,t,a,t,b,return,comparator,compare,a,b,0
PartialOrderPriorityQueue -> private final boolean lessThan(T a, T b);1405090423;Determines the ordering of objects in this priority queue.__@param a_The first element._@param b_The second element._@return True, if a &lt_ b, false otherwise.;private final boolean lessThan(T a, T b) {_		return comparator.compare(a, b) < 0__	};determines,the,ordering,of,objects,in,this,priority,queue,param,a,the,first,element,param,b,the,second,element,return,true,if,a,lt,b,false,otherwise;private,final,boolean,less,than,t,a,t,b,return,comparator,compare,a,b,0
PartialOrderPriorityQueue -> private final boolean lessThan(T a, T b);1411473593;Determines the ordering of objects in this priority queue.__@param a_The first element._@param b_The second element._@return True, if a &lt_ b, false otherwise.;private final boolean lessThan(T a, T b) {_		return comparator.compare(a, b) < 0__	};determines,the,ordering,of,objects,in,this,priority,queue,param,a,the,first,element,param,b,the,second,element,return,true,if,a,lt,b,false,otherwise;private,final,boolean,less,than,t,a,t,b,return,comparator,compare,a,b,0
PartialOrderPriorityQueue -> private final boolean lessThan(T a, T b);1414786554;Determines the ordering of objects in this priority queue.__@param a_The first element._@param b_The second element._@return True, if a &lt_ b, false otherwise.;private final boolean lessThan(T a, T b) {_		return comparator.compare(a, b) < 0__	};determines,the,ordering,of,objects,in,this,priority,queue,param,a,the,first,element,param,b,the,second,element,return,true,if,a,lt,b,false,otherwise;private,final,boolean,less,than,t,a,t,b,return,comparator,compare,a,b,0
PartialOrderPriorityQueue -> private final boolean lessThan(T a, T b);1445427423;Determines the ordering of objects in this priority queue.__@param a_The first element._@param b_The second element._@return True, if a &lt_ b, false otherwise.;private final boolean lessThan(T a, T b) {_		return comparator.compare(a, b) < 0__	};determines,the,ordering,of,objects,in,this,priority,queue,param,a,the,first,element,param,b,the,second,element,return,true,if,a,lt,b,false,otherwise;private,final,boolean,less,than,t,a,t,b,return,comparator,compare,a,b,0
PartialOrderPriorityQueue -> public final T poll();1405024514;Removes and returns the least element of the PriorityQueue in_log(size) time.__@return The least element.;public final T poll() {_		if (size > 0) {_			T result = heap[1]_ _			heap[1] = heap[size]_ _			heap[size] = null_ _			size--__			downHeap()_ _			return result__		} else {_			return null__		}_	};removes,and,returns,the,least,element,of,the,priority,queue,in,log,size,time,return,the,least,element;public,final,t,poll,if,size,0,t,result,heap,1,heap,1,heap,size,heap,size,null,size,down,heap,return,result,else,return,null
PartialOrderPriorityQueue -> public final T poll();1405090423;Removes and returns the least element of the PriorityQueue in_log(size) time.__@return The least element.;public final T poll() {_		if (size > 0) {_			T result = heap[1]_ _			heap[1] = heap[size]_ _			heap[size] = null_ _			size--__			downHeap()_ _			return result__		} else {_			return null__		}_	};removes,and,returns,the,least,element,of,the,priority,queue,in,log,size,time,return,the,least,element;public,final,t,poll,if,size,0,t,result,heap,1,heap,1,heap,size,heap,size,null,size,down,heap,return,result,else,return,null
PartialOrderPriorityQueue -> public final T poll();1411473593;Removes and returns the least element of the PriorityQueue in_log(size) time.__@return The least element.;public final T poll() {_		if (size > 0) {_			T result = heap[1]_ _			heap[1] = heap[size]_ _			heap[size] = null_ _			size--__			downHeap()_ _			return result__		} else {_			return null__		}_	};removes,and,returns,the,least,element,of,the,priority,queue,in,log,size,time,return,the,least,element;public,final,t,poll,if,size,0,t,result,heap,1,heap,1,heap,size,heap,size,null,size,down,heap,return,result,else,return,null
PartialOrderPriorityQueue -> public final T poll();1414786554;Removes and returns the least element of the PriorityQueue in_log(size) time.__@return The least element.;public final T poll() {_		if (size > 0) {_			T result = heap[1]_ _			heap[1] = heap[size]_ _			heap[size] = null_ _			size--__			downHeap()_ _			return result__		} else {_			return null__		}_	};removes,and,returns,the,least,element,of,the,priority,queue,in,log,size,time,return,the,least,element;public,final,t,poll,if,size,0,t,result,heap,1,heap,1,heap,size,heap,size,null,size,down,heap,return,result,else,return,null
PartialOrderPriorityQueue -> public final T poll();1445427423;Removes and returns the least element of the PriorityQueue in_log(size) time.__@return The least element.;public final T poll() {_		if (size > 0) {_			T result = heap[1]_ _			heap[1] = heap[size]_ _			heap[size] = null_ _			size--__			downHeap()_ _			return result__		} else {_			return null__		}_	};removes,and,returns,the,least,element,of,the,priority,queue,in,log,size,time,return,the,least,element;public,final,t,poll,if,size,0,t,result,heap,1,heap,1,heap,size,heap,size,null,size,down,heap,return,result,else,return,null
PartialOrderPriorityQueue -> public boolean offer(T element);1405024514;Adds element to the PriorityQueue in log(size) time if either the_PriorityQueue is not full, or not lessThan(element, top()).__@param element_The element to insert,_@return True, if element is added, false otherwise.;public boolean offer(T element) {_		if (size < capacity) {_			put(element)__			return true__		} else if (size > 0 && !lessThan(element, peek())) {_			heap[1] = element__			adjustTop()__			return true__		} else {_			return false__		}_	};adds,element,to,the,priority,queue,in,log,size,time,if,either,the,priority,queue,is,not,full,or,not,less,than,element,top,param,element,the,element,to,insert,return,true,if,element,is,added,false,otherwise;public,boolean,offer,t,element,if,size,capacity,put,element,return,true,else,if,size,0,less,than,element,peek,heap,1,element,adjust,top,return,true,else,return,false
PartialOrderPriorityQueue -> public boolean offer(T element);1405090423;Adds element to the PriorityQueue in log(size) time if either the_PriorityQueue is not full, or not lessThan(element, top()).__@param element_The element to insert,_@return True, if element is added, false otherwise.;public boolean offer(T element) {_		if (size < capacity) {_			put(element)__			return true__		} else if (size > 0 && !lessThan(element, peek())) {_			heap[1] = element__			adjustTop()__			return true__		} else {_			return false__		}_	};adds,element,to,the,priority,queue,in,log,size,time,if,either,the,priority,queue,is,not,full,or,not,less,than,element,top,param,element,the,element,to,insert,return,true,if,element,is,added,false,otherwise;public,boolean,offer,t,element,if,size,capacity,put,element,return,true,else,if,size,0,less,than,element,peek,heap,1,element,adjust,top,return,true,else,return,false
PartialOrderPriorityQueue -> public boolean offer(T element);1411473593;Adds element to the PriorityQueue in log(size) time if either the_PriorityQueue is not full, or not lessThan(element, top()).__@param element_The element to insert,_@return True, if element is added, false otherwise.;public boolean offer(T element) {_		if (size < capacity) {_			put(element)__			return true__		} else if (size > 0 && !lessThan(element, peek())) {_			heap[1] = element__			adjustTop()__			return true__		} else {_			return false__		}_	};adds,element,to,the,priority,queue,in,log,size,time,if,either,the,priority,queue,is,not,full,or,not,less,than,element,top,param,element,the,element,to,insert,return,true,if,element,is,added,false,otherwise;public,boolean,offer,t,element,if,size,capacity,put,element,return,true,else,if,size,0,less,than,element,peek,heap,1,element,adjust,top,return,true,else,return,false
PartialOrderPriorityQueue -> public boolean offer(T element);1414786554;Adds element to the PriorityQueue in log(size) time if either the_PriorityQueue is not full, or not lessThan(element, top()).__@param element_The element to insert,_@return True, if element is added, false otherwise.;public boolean offer(T element) {_		if (size < capacity) {_			put(element)__			return true__		} else if (size > 0 && !lessThan(element, peek())) {_			heap[1] = element__			adjustTop()__			return true__		} else {_			return false__		}_	};adds,element,to,the,priority,queue,in,log,size,time,if,either,the,priority,queue,is,not,full,or,not,less,than,element,top,param,element,the,element,to,insert,return,true,if,element,is,added,false,otherwise;public,boolean,offer,t,element,if,size,capacity,put,element,return,true,else,if,size,0,less,than,element,peek,heap,1,element,adjust,top,return,true,else,return,false
PartialOrderPriorityQueue -> public boolean offer(T element);1445427423;Adds element to the PriorityQueue in log(size) time if either the_PriorityQueue is not full, or not lessThan(element, top()).__@param element_The element to insert,_@return True, if element is added, false otherwise.;public boolean offer(T element) {_		if (size < capacity) {_			put(element)__			return true__		} else if (size > 0 && !lessThan(element, peek())) {_			heap[1] = element__			adjustTop()__			return true__		} else {_			return false__		}_	};adds,element,to,the,priority,queue,in,log,size,time,if,either,the,priority,queue,is,not,full,or,not,less,than,element,top,param,element,the,element,to,insert,return,true,if,element,is,added,false,otherwise;public,boolean,offer,t,element,if,size,capacity,put,element,return,true,else,if,size,0,less,than,element,peek,heap,1,element,adjust,top,return,true,else,return,false
PartialOrderPriorityQueue -> public final int size();1405024514;Returns the number of elements currently stored in the PriorityQueue.__@return The number of elements in the queue.;public final int size() {_		return size__	};returns,the,number,of,elements,currently,stored,in,the,priority,queue,return,the,number,of,elements,in,the,queue;public,final,int,size,return,size
PartialOrderPriorityQueue -> public final int size();1405090423;Returns the number of elements currently stored in the PriorityQueue.__@return The number of elements in the queue.;public final int size() {_		return size__	};returns,the,number,of,elements,currently,stored,in,the,priority,queue,return,the,number,of,elements,in,the,queue;public,final,int,size,return,size
PartialOrderPriorityQueue -> public final int size();1411473593;Returns the number of elements currently stored in the PriorityQueue.__@return The number of elements in the queue.;public final int size() {_		return size__	};returns,the,number,of,elements,currently,stored,in,the,priority,queue,return,the,number,of,elements,in,the,queue;public,final,int,size,return,size
PartialOrderPriorityQueue -> public final int size();1414786554;Returns the number of elements currently stored in the PriorityQueue.__@return The number of elements in the queue.;public final int size() {_		return size__	};returns,the,number,of,elements,currently,stored,in,the,priority,queue,return,the,number,of,elements,in,the,queue;public,final,int,size,return,size
PartialOrderPriorityQueue -> public final int size();1445427423;Returns the number of elements currently stored in the PriorityQueue.__@return The number of elements in the queue.;public final int size() {_		return size__	};returns,the,number,of,elements,currently,stored,in,the,priority,queue,return,the,number,of,elements,in,the,queue;public,final,int,size,return,size
PartialOrderPriorityQueue -> public final T peek();1405024514;Returns the least element of the PriorityQueue in constant time, but_does not remove it from the priority queue.__@return The least element.;public final T peek() {_		if (size > 0) {_			return heap[1]__		} else {_			return null__		}_	};returns,the,least,element,of,the,priority,queue,in,constant,time,but,does,not,remove,it,from,the,priority,queue,return,the,least,element;public,final,t,peek,if,size,0,return,heap,1,else,return,null
PartialOrderPriorityQueue -> public final T peek();1405090423;Returns the least element of the PriorityQueue in constant time, but_does not remove it from the priority queue.__@return The least element.;public final T peek() {_		if (size > 0) {_			return heap[1]__		} else {_			return null__		}_	};returns,the,least,element,of,the,priority,queue,in,constant,time,but,does,not,remove,it,from,the,priority,queue,return,the,least,element;public,final,t,peek,if,size,0,return,heap,1,else,return,null
PartialOrderPriorityQueue -> public final T peek();1411473593;Returns the least element of the PriorityQueue in constant time, but_does not remove it from the priority queue.__@return The least element.;public final T peek() {_		if (size > 0) {_			return heap[1]__		} else {_			return null__		}_	};returns,the,least,element,of,the,priority,queue,in,constant,time,but,does,not,remove,it,from,the,priority,queue,return,the,least,element;public,final,t,peek,if,size,0,return,heap,1,else,return,null
PartialOrderPriorityQueue -> public final T peek();1414786554;Returns the least element of the PriorityQueue in constant time, but_does not remove it from the priority queue.__@return The least element.;public final T peek() {_		if (size > 0) {_			return heap[1]__		} else {_			return null__		}_	};returns,the,least,element,of,the,priority,queue,in,constant,time,but,does,not,remove,it,from,the,priority,queue,return,the,least,element;public,final,t,peek,if,size,0,return,heap,1,else,return,null
PartialOrderPriorityQueue -> public final T peek();1445427423;Returns the least element of the PriorityQueue in constant time, but_does not remove it from the priority queue.__@return The least element.;public final T peek() {_		if (size > 0) {_			return heap[1]__		} else {_			return null__		}_	};returns,the,least,element,of,the,priority,queue,in,constant,time,but,does,not,remove,it,from,the,priority,queue,return,the,least,element;public,final,t,peek,if,size,0,return,heap,1,else,return,null
PartialOrderPriorityQueue -> public int remainingCapacity();1405024514;Returns the remaining capacity of the backing array.__@return The remaining capacity of the backing array.;public int remainingCapacity() {_		return capacity - size__	};returns,the,remaining,capacity,of,the,backing,array,return,the,remaining,capacity,of,the,backing,array;public,int,remaining,capacity,return,capacity,size
PartialOrderPriorityQueue -> public int remainingCapacity();1405090423;Returns the remaining capacity of the backing array.__@return The remaining capacity of the backing array.;public int remainingCapacity() {_		return capacity - size__	};returns,the,remaining,capacity,of,the,backing,array,return,the,remaining,capacity,of,the,backing,array;public,int,remaining,capacity,return,capacity,size
PartialOrderPriorityQueue -> public int remainingCapacity();1411473593;Returns the remaining capacity of the backing array.__@return The remaining capacity of the backing array.;public int remainingCapacity() {_		return capacity - size__	};returns,the,remaining,capacity,of,the,backing,array,return,the,remaining,capacity,of,the,backing,array;public,int,remaining,capacity,return,capacity,size
PartialOrderPriorityQueue -> public int remainingCapacity();1414786554;Returns the remaining capacity of the backing array.__@return The remaining capacity of the backing array.;public int remainingCapacity() {_		return capacity - size__	};returns,the,remaining,capacity,of,the,backing,array,return,the,remaining,capacity,of,the,backing,array;public,int,remaining,capacity,return,capacity,size
PartialOrderPriorityQueue -> public int remainingCapacity();1445427423;Returns the remaining capacity of the backing array.__@return The remaining capacity of the backing array.;public int remainingCapacity() {_		return capacity - size__	};returns,the,remaining,capacity,of,the,backing,array,return,the,remaining,capacity,of,the,backing,array;public,int,remaining,capacity,return,capacity,size
PartialOrderPriorityQueue -> public final void clear();1405024514;Removes all entries from the PriorityQueue.;public final void clear() {_		for (int i = 0_ i <= size_ i++) {_			heap[i] = null__		}_		size = 0__	};removes,all,entries,from,the,priority,queue;public,final,void,clear,for,int,i,0,i,size,i,heap,i,null,size,0
PartialOrderPriorityQueue -> public final void clear();1405090423;Removes all entries from the PriorityQueue.;public final void clear() {_		for (int i = 0_ i <= size_ i++) {_			heap[i] = null__		}_		size = 0__	};removes,all,entries,from,the,priority,queue;public,final,void,clear,for,int,i,0,i,size,i,heap,i,null,size,0
PartialOrderPriorityQueue -> public final void clear();1411473593;Removes all entries from the PriorityQueue.;public final void clear() {_		for (int i = 0_ i <= size_ i++) {_			heap[i] = null__		}_		size = 0__	};removes,all,entries,from,the,priority,queue;public,final,void,clear,for,int,i,0,i,size,i,heap,i,null,size,0
PartialOrderPriorityQueue -> public final void clear();1414786554;Removes all entries from the PriorityQueue.;public final void clear() {_		for (int i = 0_ i <= size_ i++) {_			heap[i] = null__		}_		size = 0__	};removes,all,entries,from,the,priority,queue;public,final,void,clear,for,int,i,0,i,size,i,heap,i,null,size,0
PartialOrderPriorityQueue -> public final void clear();1445427423;Removes all entries from the PriorityQueue.;public final void clear() {_		for (int i = 0_ i <= size_ i++) {_			heap[i] = null__		}_		size = 0__	};removes,all,entries,from,the,priority,queue;public,final,void,clear,for,int,i,0,i,size,i,heap,i,null,size,0
PartialOrderPriorityQueue -> public final void put(T element);1405024514;Adds a buffer to a PriorityQueue in log(size) time. If one tries to_add more objects than maxSize from initialize a RuntimeException_(ArrayIndexOutOfBound) is thrown.;public final void put(T element) {_		size++__		heap[size] = element__		upHeap()__	};adds,a,buffer,to,a,priority,queue,in,log,size,time,if,one,tries,to,add,more,objects,than,max,size,from,initialize,a,runtime,exception,array,index,out,of,bound,is,thrown;public,final,void,put,t,element,size,heap,size,element,up,heap
PartialOrderPriorityQueue -> public final void put(T element);1405090423;Adds a buffer to a PriorityQueue in log(size) time. If one tries to_add more objects than maxSize from initialize a RuntimeException_(ArrayIndexOutOfBound) is thrown.;public final void put(T element) {_		size++__		heap[size] = element__		upHeap()__	};adds,a,buffer,to,a,priority,queue,in,log,size,time,if,one,tries,to,add,more,objects,than,max,size,from,initialize,a,runtime,exception,array,index,out,of,bound,is,thrown;public,final,void,put,t,element,size,heap,size,element,up,heap
PartialOrderPriorityQueue -> public final void put(T element);1411473593;Adds a buffer to a PriorityQueue in log(size) time. If one tries to_add more objects than maxSize from initialize a RuntimeException_(ArrayIndexOutOfBound) is thrown.;public final void put(T element) {_		size++__		heap[size] = element__		upHeap()__	};adds,a,buffer,to,a,priority,queue,in,log,size,time,if,one,tries,to,add,more,objects,than,max,size,from,initialize,a,runtime,exception,array,index,out,of,bound,is,thrown;public,final,void,put,t,element,size,heap,size,element,up,heap
PartialOrderPriorityQueue -> public final void put(T element);1414786554;Adds a buffer to a PriorityQueue in log(size) time. If one tries to_add more objects than maxSize from initialize a RuntimeException_(ArrayIndexOutOfBound) is thrown.;public final void put(T element) {_		size++__		heap[size] = element__		upHeap()__	};adds,a,buffer,to,a,priority,queue,in,log,size,time,if,one,tries,to,add,more,objects,than,max,size,from,initialize,a,runtime,exception,array,index,out,of,bound,is,thrown;public,final,void,put,t,element,size,heap,size,element,up,heap
PartialOrderPriorityQueue -> public final void put(T element);1445427423;Adds a buffer to a PriorityQueue in log(size) time. If one tries to_add more objects than maxSize from initialize a RuntimeException_(ArrayIndexOutOfBound) is thrown.;public final void put(T element) {_		size++__		heap[size] = element__		upHeap()__	};adds,a,buffer,to,a,priority,queue,in,log,size,time,if,one,tries,to,add,more,objects,than,max,size,from,initialize,a,runtime,exception,array,index,out,of,bound,is,thrown;public,final,void,put,t,element,size,heap,size,element,up,heap
PartialOrderPriorityQueue -> public final void adjustTop();1405024514;Should be called when the Object at top changes values. Still log(n)_worst case, but it's at least twice as fast to__<pre>__pq.top().change()__pq.adjustTop()___</pre>__instead of__<pre>__o = pq.pop()__o.change()__pq.push(o)___</pre>;public final void adjustTop() {_		downHeap()__	};should,be,called,when,the,object,at,top,changes,values,still,log,n,worst,case,but,it,s,at,least,twice,as,fast,to,pre,pq,top,change,pq,adjust,top,pre,instead,of,pre,o,pq,pop,o,change,pq,push,o,pre;public,final,void,adjust,top,down,heap
PartialOrderPriorityQueue -> public final void adjustTop();1405090423;Should be called when the Object at top changes values. Still log(n)_worst case, but it's at least twice as fast to__<pre>__pq.top().change()__pq.adjustTop()___</pre>__instead of__<pre>__o = pq.pop()__o.change()__pq.push(o)___</pre>;public final void adjustTop() {_		downHeap()__	};should,be,called,when,the,object,at,top,changes,values,still,log,n,worst,case,but,it,s,at,least,twice,as,fast,to,pre,pq,top,change,pq,adjust,top,pre,instead,of,pre,o,pq,pop,o,change,pq,push,o,pre;public,final,void,adjust,top,down,heap
PartialOrderPriorityQueue -> public final void adjustTop();1411473593;Should be called when the Object at top changes values. Still log(n)_worst case, but it's at least twice as fast to__<pre>__pq.top().change()__pq.adjustTop()___</pre>__instead of__<pre>__o = pq.pop()__o.change()__pq.push(o)___</pre>;public final void adjustTop() {_		downHeap()__	};should,be,called,when,the,object,at,top,changes,values,still,log,n,worst,case,but,it,s,at,least,twice,as,fast,to,pre,pq,top,change,pq,adjust,top,pre,instead,of,pre,o,pq,pop,o,change,pq,push,o,pre;public,final,void,adjust,top,down,heap
PartialOrderPriorityQueue -> public final void adjustTop();1414786554;Should be called when the Object at top changes values. Still log(n)_worst case, but it's at least twice as fast to__<pre>__pq.top().change()__pq.adjustTop()___</pre>__instead of__<pre>__o = pq.pop()__o.change()__pq.push(o)___</pre>;public final void adjustTop() {_		downHeap()__	};should,be,called,when,the,object,at,top,changes,values,still,log,n,worst,case,but,it,s,at,least,twice,as,fast,to,pre,pq,top,change,pq,adjust,top,pre,instead,of,pre,o,pq,pop,o,change,pq,push,o,pre;public,final,void,adjust,top,down,heap
PartialOrderPriorityQueue -> public final void adjustTop();1445427423;Should be called when the Object at top changes values. Still log(n)_worst case, but it's at least twice as fast to__<pre>__pq.top().change()__pq.adjustTop()___</pre>__instead of__<pre>__o = pq.pop()__o.change()__pq.push(o)___</pre>;public final void adjustTop() {_		downHeap()__	};should,be,called,when,the,object,at,top,changes,values,still,log,n,worst,case,but,it,s,at,least,twice,as,fast,to,pre,pq,top,change,pq,adjust,top,pre,instead,of,pre,o,pq,pop,o,change,pq,push,o,pre;public,final,void,adjust,top,down,heap
