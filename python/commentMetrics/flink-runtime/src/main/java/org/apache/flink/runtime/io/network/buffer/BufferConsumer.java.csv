# id;timestamp;commentText;codeText;commentWords;codeWords
BufferConsumer -> public BufferConsumer( 			MemorySegment memorySegment, 			BufferRecycler recycler, 			PositionMarker currentWriterPosition);1516267728;Constructs {@link BufferConsumer} instance with content that can be changed by {@link BufferBuilder}.;public BufferConsumer(_			MemorySegment memorySegment,_			BufferRecycler recycler,_			PositionMarker currentWriterPosition) {_		this(_			new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), true),_			currentWriterPosition,_			0)__	};constructs,link,buffer,consumer,instance,with,content,that,can,be,changed,by,link,buffer,builder;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,position,marker,current,writer,position,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,true,current,writer,position,0
BufferConsumer -> public BufferConsumer( 			MemorySegment memorySegment, 			BufferRecycler recycler, 			PositionMarker currentWriterPosition);1536157896;Constructs {@link BufferConsumer} instance with content that can be changed by {@link BufferBuilder}.;public BufferConsumer(_			MemorySegment memorySegment,_			BufferRecycler recycler,_			PositionMarker currentWriterPosition) {_		this(_			new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), true),_			currentWriterPosition,_			0)__	};constructs,link,buffer,consumer,instance,with,content,that,can,be,changed,by,link,buffer,builder;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,position,marker,current,writer,position,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,true,current,writer,position,0
BufferConsumer -> public BufferConsumer( 			MemorySegment memorySegment, 			BufferRecycler recycler, 			PositionMarker currentWriterPosition);1536834277;Constructs {@link BufferConsumer} instance with content that can be changed by {@link BufferBuilder}.;public BufferConsumer(_			MemorySegment memorySegment,_			BufferRecycler recycler,_			PositionMarker currentWriterPosition) {_		this(_			new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), true),_			currentWriterPosition,_			0)__	};constructs,link,buffer,consumer,instance,with,content,that,can,be,changed,by,link,buffer,builder;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,position,marker,current,writer,position,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,true,current,writer,position,0
BufferConsumer -> public BufferConsumer( 			MemorySegment memorySegment, 			BufferRecycler recycler, 			PositionMarker currentWriterPosition);1549467949;Constructs {@link BufferConsumer} instance with content that can be changed by {@link BufferBuilder}.;public BufferConsumer(_			MemorySegment memorySegment,_			BufferRecycler recycler,_			PositionMarker currentWriterPosition) {_		this(_			new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), true),_			currentWriterPosition,_			0)__	};constructs,link,buffer,consumer,instance,with,content,that,can,be,changed,by,link,buffer,builder;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,position,marker,current,writer,position,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,true,current,writer,position,0
BufferConsumer -> public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer);1516267728;Constructs {@link BufferConsumer} instance with static content.;public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer) {_		this(new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), isBuffer),_			() -> -memorySegment.size(),_			0)__		checkState(memorySegment.size() > 0)__		checkState(isFinished(), "BufferConsumer with static size must be finished after construction!")__	};constructs,link,buffer,consumer,instance,with,static,content;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,boolean,is,buffer,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,is,buffer,memory,segment,size,0,check,state,memory,segment,size,0,check,state,is,finished,buffer,consumer,with,static,size,must,be,finished,after,construction
BufferConsumer -> public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer);1536157896;Constructs {@link BufferConsumer} instance with static content.;public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer) {_		this(new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), isBuffer),_			() -> -memorySegment.size(),_			0)__		checkState(memorySegment.size() > 0)__		checkState(isFinished(), "BufferConsumer with static size must be finished after construction!")__	};constructs,link,buffer,consumer,instance,with,static,content;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,boolean,is,buffer,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,is,buffer,memory,segment,size,0,check,state,memory,segment,size,0,check,state,is,finished,buffer,consumer,with,static,size,must,be,finished,after,construction
BufferConsumer -> public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer);1536834277;Constructs {@link BufferConsumer} instance with static content.;public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer) {_		this(new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), isBuffer),_			() -> -memorySegment.size(),_			0)__		checkState(memorySegment.size() > 0)__		checkState(isFinished(), "BufferConsumer with static size must be finished after construction!")__	};constructs,link,buffer,consumer,instance,with,static,content;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,boolean,is,buffer,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,is,buffer,memory,segment,size,0,check,state,memory,segment,size,0,check,state,is,finished,buffer,consumer,with,static,size,must,be,finished,after,construction
BufferConsumer -> public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer);1549467949;Constructs {@link BufferConsumer} instance with static content.;public BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer) {_		this(new NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), isBuffer),_			() -> -memorySegment.size(),_			0)__		checkState(memorySegment.size() > 0)__		checkState(isFinished(), "BufferConsumer with static size must be finished after construction!")__	};constructs,link,buffer,consumer,instance,with,static,content;public,buffer,consumer,memory,segment,memory,segment,buffer,recycler,recycler,boolean,is,buffer,this,new,network,buffer,check,not,null,memory,segment,check,not,null,recycler,is,buffer,memory,segment,size,0,check,state,memory,segment,size,0,check,state,is,finished,buffer,consumer,with,static,size,must,be,finished,after,construction
BufferConsumer -> public BufferConsumer copy();1516267728;@return a retained copy of self with separate indexes - it allows two read from the same {@link MemorySegment}_twice.__<p>WARNING: newly returned {@link BufferConsumer} will have reader index copied from the original buffer. In_other words, data already consumed before copying will not be visible to the returned copies.;public BufferConsumer copy() {_		return new BufferConsumer(buffer.retainBuffer(), writerPosition.positionMarker, currentReaderPosition)__	};return,a,retained,copy,of,self,with,separate,indexes,it,allows,two,read,from,the,same,link,memory,segment,twice,p,warning,newly,returned,link,buffer,consumer,will,have,reader,index,copied,from,the,original,buffer,in,other,words,data,already,consumed,before,copying,will,not,be,visible,to,the,returned,copies;public,buffer,consumer,copy,return,new,buffer,consumer,buffer,retain,buffer,writer,position,position,marker,current,reader,position
BufferConsumer -> public BufferConsumer copy();1536157896;Returns a retained copy with separate indexes. This allows to read from the same {@link MemorySegment} twice.__<p>WARNING: newly returned {@link BufferConsumer} will have reader index copied from the original buffer. In_other words, data already consumed before copying will not be visible to the returned copies.__@return a retained copy of self with separate indexes;public BufferConsumer copy() {_		return new BufferConsumer(buffer.retainBuffer(), writerPosition.positionMarker, currentReaderPosition)__	};returns,a,retained,copy,with,separate,indexes,this,allows,to,read,from,the,same,link,memory,segment,twice,p,warning,newly,returned,link,buffer,consumer,will,have,reader,index,copied,from,the,original,buffer,in,other,words,data,already,consumed,before,copying,will,not,be,visible,to,the,returned,copies,return,a,retained,copy,of,self,with,separate,indexes;public,buffer,consumer,copy,return,new,buffer,consumer,buffer,retain,buffer,writer,position,position,marker,current,reader,position
BufferConsumer -> public BufferConsumer copy();1536834277;Returns a retained copy with separate indexes. This allows to read from the same {@link MemorySegment} twice.__<p>WARNING: the newly returned {@link BufferConsumer} will have its reader index copied from the original buffer._In other words, data already consumed before copying will not be visible to the returned copies.__@return a retained copy of self with separate indexes;public BufferConsumer copy() {_		return new BufferConsumer(buffer.retainBuffer(), writerPosition.positionMarker, currentReaderPosition)__	};returns,a,retained,copy,with,separate,indexes,this,allows,to,read,from,the,same,link,memory,segment,twice,p,warning,the,newly,returned,link,buffer,consumer,will,have,its,reader,index,copied,from,the,original,buffer,in,other,words,data,already,consumed,before,copying,will,not,be,visible,to,the,returned,copies,return,a,retained,copy,of,self,with,separate,indexes;public,buffer,consumer,copy,return,new,buffer,consumer,buffer,retain,buffer,writer,position,position,marker,current,reader,position
BufferConsumer -> public BufferConsumer copy();1549467949;Returns a retained copy with separate indexes. This allows to read from the same {@link MemorySegment} twice.__<p>WARNING: the newly returned {@link BufferConsumer} will have its reader index copied from the original buffer._In other words, data already consumed before copying will not be visible to the returned copies.__@return a retained copy of self with separate indexes;public BufferConsumer copy() {_		return new BufferConsumer(buffer.retainBuffer(), writerPosition.positionMarker, currentReaderPosition)__	};returns,a,retained,copy,with,separate,indexes,this,allows,to,read,from,the,same,link,memory,segment,twice,p,warning,the,newly,returned,link,buffer,consumer,will,have,its,reader,index,copied,from,the,original,buffer,in,other,words,data,already,consumed,before,copying,will,not,be,visible,to,the,returned,copies,return,a,retained,copy,of,self,with,separate,indexes;public,buffer,consumer,copy,return,new,buffer,consumer,buffer,retain,buffer,writer,position,position,marker,current,reader,position
BufferConsumer -> public boolean isFinished();1536834277;Checks whether the {@link BufferBuilder} has already been finished.__<p>BEWARE: this method accesses the cached value of the position marker which is only updated_after calls to {@link #build()}!__@return <tt>true</tt> if the buffer was finished, <tt>false</tt> otherwise;public boolean isFinished() {_		return writerPosition.isFinished()__	};checks,whether,the,link,buffer,builder,has,already,been,finished,p,beware,this,method,accesses,the,cached,value,of,the,position,marker,which,is,only,updated,after,calls,to,link,build,return,tt,true,tt,if,the,buffer,was,finished,tt,false,tt,otherwise;public,boolean,is,finished,return,writer,position,is,finished
BufferConsumer -> public boolean isFinished();1549467949;Checks whether the {@link BufferBuilder} has already been finished.__<p>BEWARE: this method accesses the cached value of the position marker which is only updated_after calls to {@link #build()}!__@return <tt>true</tt> if the buffer was finished, <tt>false</tt> otherwise;public boolean isFinished() {_		return writerPosition.isFinished()__	};checks,whether,the,link,buffer,builder,has,already,been,finished,p,beware,this,method,accesses,the,cached,value,of,the,position,marker,which,is,only,updated,after,calls,to,link,build,return,tt,true,tt,if,the,buffer,was,finished,tt,false,tt,otherwise;public,boolean,is,finished,return,writer,position,is,finished
BufferConsumer -> public Buffer build();1515080566;@return sliced {@link Buffer} containing the not yet consumed data. Returned {@link Buffer} shares the reference_counter with the parent {@link BufferConsumer} - in order to recycle memory both of them must be recycled/closed.;public Buffer build() {_		writerPosition.update()__		Buffer slice = buffer.readOnlySlice(currentReaderPosition, writerPosition.getCached() - currentReaderPosition)__		currentReaderPosition = writerPosition.getCached()__		return slice.retainBuffer()__	};return,sliced,link,buffer,containing,the,not,yet,consumed,data,returned,link,buffer,shares,the,reference,counter,with,the,parent,link,buffer,consumer,in,order,to,recycle,memory,both,of,them,must,be,recycled,closed;public,buffer,build,writer,position,update,buffer,slice,buffer,read,only,slice,current,reader,position,writer,position,get,cached,current,reader,position,current,reader,position,writer,position,get,cached,return,slice,retain,buffer
BufferConsumer -> public Buffer build();1516267728;@return sliced {@link Buffer} containing the not yet consumed data. Returned {@link Buffer} shares the reference_counter with the parent {@link BufferConsumer} - in order to recycle memory both of them must be recycled/closed.;public Buffer build() {_		writerPosition.update()__		Buffer slice = buffer.readOnlySlice(currentReaderPosition, writerPosition.getCached() - currentReaderPosition)__		currentReaderPosition = writerPosition.getCached()__		return slice.retainBuffer()__	};return,sliced,link,buffer,containing,the,not,yet,consumed,data,returned,link,buffer,shares,the,reference,counter,with,the,parent,link,buffer,consumer,in,order,to,recycle,memory,both,of,them,must,be,recycled,closed;public,buffer,build,writer,position,update,buffer,slice,buffer,read,only,slice,current,reader,position,writer,position,get,cached,current,reader,position,current,reader,position,writer,position,get,cached,return,slice,retain,buffer
BufferConsumer -> public Buffer build();1536157896;@return sliced {@link Buffer} containing the not yet consumed data. Returned {@link Buffer} shares the reference_counter with the parent {@link BufferConsumer} - in order to recycle memory both of them must be recycled/closed.;public Buffer build() {_		writerPosition.update()__		Buffer slice = buffer.readOnlySlice(currentReaderPosition, writerPosition.getCached() - currentReaderPosition)__		currentReaderPosition = writerPosition.getCached()__		return slice.retainBuffer()__	};return,sliced,link,buffer,containing,the,not,yet,consumed,data,returned,link,buffer,shares,the,reference,counter,with,the,parent,link,buffer,consumer,in,order,to,recycle,memory,both,of,them,must,be,recycled,closed;public,buffer,build,writer,position,update,buffer,slice,buffer,read,only,slice,current,reader,position,writer,position,get,cached,current,reader,position,current,reader,position,writer,position,get,cached,return,slice,retain,buffer
BufferConsumer -> public Buffer build();1536834277;@return sliced {@link Buffer} containing the not yet consumed data. Returned {@link Buffer} shares the reference_counter with the parent {@link BufferConsumer} - in order to recycle memory both of them must be recycled/closed.;public Buffer build() {_		writerPosition.update()__		int cachedWriterPosition = writerPosition.getCached()__		Buffer slice = buffer.readOnlySlice(currentReaderPosition, cachedWriterPosition - currentReaderPosition)__		currentReaderPosition = cachedWriterPosition__		return slice.retainBuffer()__	};return,sliced,link,buffer,containing,the,not,yet,consumed,data,returned,link,buffer,shares,the,reference,counter,with,the,parent,link,buffer,consumer,in,order,to,recycle,memory,both,of,them,must,be,recycled,closed;public,buffer,build,writer,position,update,int,cached,writer,position,writer,position,get,cached,buffer,slice,buffer,read,only,slice,current,reader,position,cached,writer,position,current,reader,position,current,reader,position,cached,writer,position,return,slice,retain,buffer
BufferConsumer -> public Buffer build();1549467949;@return sliced {@link Buffer} containing the not yet consumed data. Returned {@link Buffer} shares the reference_counter with the parent {@link BufferConsumer} - in order to recycle memory both of them must be recycled/closed.;public Buffer build() {_		writerPosition.update()__		int cachedWriterPosition = writerPosition.getCached()__		Buffer slice = buffer.readOnlySlice(currentReaderPosition, cachedWriterPosition - currentReaderPosition)__		currentReaderPosition = cachedWriterPosition__		return slice.retainBuffer()__	};return,sliced,link,buffer,containing,the,not,yet,consumed,data,returned,link,buffer,shares,the,reference,counter,with,the,parent,link,buffer,consumer,in,order,to,recycle,memory,both,of,them,must,be,recycled,closed;public,buffer,build,writer,position,update,int,cached,writer,position,writer,position,get,cached,buffer,slice,buffer,read,only,slice,current,reader,position,cached,writer,position,current,reader,position,current,reader,position,cached,writer,position,return,slice,retain,buffer
