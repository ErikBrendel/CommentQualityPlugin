# id;timestamp;commentText;codeText;commentWords;codeWords
StaticFileServerHandler -> public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status);1505860824;Writes a simple  error response message.__@param ctx    The channel context to write the response to._@param status The response status.;public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {_		FullHttpResponse response = new DefaultFullHttpResponse(_				HTTP_1_1, status, Unpooled.copiedBuffer("Failure: " + status + "\r\n", CharsetUtil.UTF_8))__		response.headers().set(CONTENT_TYPE, "text/plain_ charset=UTF-8")___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};writes,a,simple,error,response,message,param,ctx,the,channel,context,to,write,the,response,to,param,status,the,response,status;public,static,void,send,error,channel,handler,context,ctx,http,response,status,status,full,http,response,response,new,default,full,http,response,status,unpooled,copied,buffer,failure,status,r,n,charset,util,response,headers,set,text,plain,charset,utf,8,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status);1510063661;Writes a simple  error response message.__@param ctx    The channel context to write the response to._@param status The response status.;public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {_		FullHttpResponse response = new DefaultFullHttpResponse(_				HTTP_1_1, status, Unpooled.copiedBuffer("Failure: " + status + "\r\n", CharsetUtil.UTF_8))__		response.headers().set(CONTENT_TYPE, "text/plain_ charset=UTF-8")___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};writes,a,simple,error,response,message,param,ctx,the,channel,context,to,write,the,response,to,param,status,the,response,status;public,static,void,send,error,channel,handler,context,ctx,http,response,status,status,full,http,response,response,new,default,full,http,response,status,unpooled,copied,buffer,failure,status,r,n,charset,util,response,headers,set,text,plain,charset,utf,8,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status);1518680659;Writes a simple  error response message.__@param ctx    The channel context to write the response to._@param status The response status.;public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {_		FullHttpResponse response = new DefaultFullHttpResponse(_				HTTP_1_1, status, Unpooled.copiedBuffer("Failure: " + status + "\r\n", CharsetUtil.UTF_8))__		response.headers().set(CONTENT_TYPE, "text/plain_ charset=UTF-8")___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};writes,a,simple,error,response,message,param,ctx,the,channel,context,to,write,the,response,to,param,status,the,response,status;public,static,void,send,error,channel,handler,context,ctx,http,response,status,status,full,http,response,response,new,default,full,http,response,status,unpooled,copied,buffer,failure,status,r,n,charset,util,response,headers,set,text,plain,charset,utf,8,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status);1527499265;Writes a simple  error response message.__@param ctx    The channel context to write the response to._@param status The response status.;public static void sendError(ChannelHandlerContext ctx, HttpResponseStatus status) {_		FullHttpResponse response = new DefaultFullHttpResponse(_				HTTP_1_1, status, Unpooled.copiedBuffer("Failure: " + status + "\r\n", CharsetUtil.UTF_8))__		response.headers().set(CONTENT_TYPE, "text/plain_ charset=UTF-8")___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};writes,a,simple,error,response,message,param,ctx,the,channel,context,to,write,the,response,to,param,status,the,response,status;public,static,void,send,error,channel,handler,context,ctx,http,response,status,status,full,http,response,response,new,default,full,http,response,status,unpooled,copied,buffer,failure,status,r,n,charset,util,response,headers,set,text,plain,charset,utf,8,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache);1505860824;Sets the "date" and "cache" headers for the HTTP Response.__@param response    The HTTP response object._@param fileToCache File to extract the modification timestamp from.;public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		_		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))___		_		time.add(Calendar.SECOND, HTTP_CACHE_SECONDS)__		response.headers().set(EXPIRES, dateFormatter.format(time.getTime()))__		response.headers().set(CACHE_CONTROL, "private, max-age=" + HTTP_CACHE_SECONDS)__		response.headers().set(LAST_MODIFIED, dateFormatter.format(new Date(fileToCache.lastModified())))__	};sets,the,date,and,cache,headers,for,the,http,response,param,response,the,http,response,object,param,file,to,cache,file,to,extract,the,modification,timestamp,from;public,static,void,set,date,and,cache,headers,http,response,response,file,file,to,cache,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time,time,add,calendar,second,response,headers,set,expires,date,formatter,format,time,get,time,response,headers,set,private,max,age,response,headers,set,date,formatter,format,new,date,file,to,cache,last,modified
StaticFileServerHandler -> public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache);1510063661;Sets the "date" and "cache" headers for the HTTP Response.__@param response    The HTTP response object._@param fileToCache File to extract the modification timestamp from.;public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		_		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))___		_		time.add(Calendar.SECOND, HTTP_CACHE_SECONDS)__		response.headers().set(EXPIRES, dateFormatter.format(time.getTime()))__		response.headers().set(CACHE_CONTROL, "private, max-age=" + HTTP_CACHE_SECONDS)__		response.headers().set(LAST_MODIFIED, dateFormatter.format(new Date(fileToCache.lastModified())))__	};sets,the,date,and,cache,headers,for,the,http,response,param,response,the,http,response,object,param,file,to,cache,file,to,extract,the,modification,timestamp,from;public,static,void,set,date,and,cache,headers,http,response,response,file,file,to,cache,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time,time,add,calendar,second,response,headers,set,expires,date,formatter,format,time,get,time,response,headers,set,private,max,age,response,headers,set,date,formatter,format,new,date,file,to,cache,last,modified
StaticFileServerHandler -> public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache);1518680659;Sets the "date" and "cache" headers for the HTTP Response.__@param response    The HTTP response object._@param fileToCache File to extract the modification timestamp from.;public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		_		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))___		_		time.add(Calendar.SECOND, HTTP_CACHE_SECONDS)__		response.headers().set(EXPIRES, dateFormatter.format(time.getTime()))__		response.headers().set(CACHE_CONTROL, "private, max-age=" + HTTP_CACHE_SECONDS)__		response.headers().set(LAST_MODIFIED, dateFormatter.format(new Date(fileToCache.lastModified())))__	};sets,the,date,and,cache,headers,for,the,http,response,param,response,the,http,response,object,param,file,to,cache,file,to,extract,the,modification,timestamp,from;public,static,void,set,date,and,cache,headers,http,response,response,file,file,to,cache,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time,time,add,calendar,second,response,headers,set,expires,date,formatter,format,time,get,time,response,headers,set,private,max,age,response,headers,set,date,formatter,format,new,date,file,to,cache,last,modified
StaticFileServerHandler -> public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache);1527499265;Sets the "date" and "cache" headers for the HTTP Response.__@param response    The HTTP response object._@param fileToCache File to extract the modification timestamp from.;public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		_		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))___		_		time.add(Calendar.SECOND, HTTP_CACHE_SECONDS)__		response.headers().set(EXPIRES, dateFormatter.format(time.getTime()))__		response.headers().set(CACHE_CONTROL, "private, max-age=" + HTTP_CACHE_SECONDS)__		response.headers().set(LAST_MODIFIED, dateFormatter.format(new Date(fileToCache.lastModified())))__	};sets,the,date,and,cache,headers,for,the,http,response,param,response,the,http,response,object,param,file,to,cache,file,to,extract,the,modification,timestamp,from;public,static,void,set,date,and,cache,headers,http,response,response,file,file,to,cache,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time,time,add,calendar,second,response,headers,set,expires,date,formatter,format,time,get,time,response,headers,set,private,max,age,response,headers,set,date,formatter,format,new,date,file,to,cache,last,modified
StaticFileServerHandler -> public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache);1535963626;Sets the "date" and "cache" headers for the HTTP Response.__@param response    The HTTP response object._@param fileToCache File to extract the modification timestamp from.;public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		_		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))___		_		time.add(Calendar.SECOND, HTTP_CACHE_SECONDS)__		response.headers().set(EXPIRES, dateFormatter.format(time.getTime()))__		response.headers().set(CACHE_CONTROL, "private, max-age=" + HTTP_CACHE_SECONDS)__		response.headers().set(LAST_MODIFIED, dateFormatter.format(new Date(fileToCache.lastModified())))__	};sets,the,date,and,cache,headers,for,the,http,response,param,response,the,http,response,object,param,file,to,cache,file,to,extract,the,modification,timestamp,from;public,static,void,set,date,and,cache,headers,http,response,response,file,file,to,cache,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time,time,add,calendar,second,response,headers,set,expires,date,formatter,format,time,get,time,response,headers,set,private,max,age,response,headers,set,date,formatter,format,new,date,file,to,cache,last,modified
StaticFileServerHandler -> public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache);1545326469;Sets the "date" and "cache" headers for the HTTP Response.__@param response    The HTTP response object._@param fileToCache File to extract the modification timestamp from.;public static void setDateAndCacheHeaders(HttpResponse response, File fileToCache) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		_		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))___		_		time.add(Calendar.SECOND, HTTP_CACHE_SECONDS)__		response.headers().set(EXPIRES, dateFormatter.format(time.getTime()))__		response.headers().set(CACHE_CONTROL, "private, max-age=" + HTTP_CACHE_SECONDS)__		response.headers().set(LAST_MODIFIED, dateFormatter.format(new Date(fileToCache.lastModified())))__	};sets,the,date,and,cache,headers,for,the,http,response,param,response,the,http,response,object,param,file,to,cache,file,to,extract,the,modification,timestamp,from;public,static,void,set,date,and,cache,headers,http,response,response,file,file,to,cache,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time,time,add,calendar,second,response,headers,set,expires,date,formatter,format,time,get,time,response,headers,set,private,max,age,response,headers,set,date,formatter,format,new,date,file,to,cache,last,modified
StaticFileServerHandler -> public static void sendNotModified(ChannelHandlerContext ctx);1505860824;Send the "304 Not Modified" response. This response can be used when the_file timestamp is the same as what the browser is sending up.__@param ctx The channel context to write the response to.;public static void sendNotModified(ChannelHandlerContext ctx) {_		FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, NOT_MODIFIED)__		setDateHeader(response)___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};send,the,304,not,modified,response,this,response,can,be,used,when,the,file,timestamp,is,the,same,as,what,the,browser,is,sending,up,param,ctx,the,channel,context,to,write,the,response,to;public,static,void,send,not,modified,channel,handler,context,ctx,full,http,response,response,new,default,full,http,response,set,date,header,response,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendNotModified(ChannelHandlerContext ctx);1510063661;Send the "304 Not Modified" response. This response can be used when the_file timestamp is the same as what the browser is sending up.__@param ctx The channel context to write the response to.;public static void sendNotModified(ChannelHandlerContext ctx) {_		FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, NOT_MODIFIED)__		setDateHeader(response)___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};send,the,304,not,modified,response,this,response,can,be,used,when,the,file,timestamp,is,the,same,as,what,the,browser,is,sending,up,param,ctx,the,channel,context,to,write,the,response,to;public,static,void,send,not,modified,channel,handler,context,ctx,full,http,response,response,new,default,full,http,response,set,date,header,response,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendNotModified(ChannelHandlerContext ctx);1518680659;Send the "304 Not Modified" response. This response can be used when the_file timestamp is the same as what the browser is sending up.__@param ctx The channel context to write the response to.;public static void sendNotModified(ChannelHandlerContext ctx) {_		FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, NOT_MODIFIED)__		setDateHeader(response)___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};send,the,304,not,modified,response,this,response,can,be,used,when,the,file,timestamp,is,the,same,as,what,the,browser,is,sending,up,param,ctx,the,channel,context,to,write,the,response,to;public,static,void,send,not,modified,channel,handler,context,ctx,full,http,response,response,new,default,full,http,response,set,date,header,response,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendNotModified(ChannelHandlerContext ctx);1527499265;Send the "304 Not Modified" response. This response can be used when the_file timestamp is the same as what the browser is sending up.__@param ctx The channel context to write the response to.;public static void sendNotModified(ChannelHandlerContext ctx) {_		FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, NOT_MODIFIED)__		setDateHeader(response)___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};send,the,304,not,modified,response,this,response,can,be,used,when,the,file,timestamp,is,the,same,as,what,the,browser,is,sending,up,param,ctx,the,channel,context,to,write,the,response,to;public,static,void,send,not,modified,channel,handler,context,ctx,full,http,response,response,new,default,full,http,response,set,date,header,response,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendNotModified(ChannelHandlerContext ctx);1535963626;Send the "304 Not Modified" response. This response can be used when the_file timestamp is the same as what the browser is sending up.__@param ctx The channel context to write the response to.;public static void sendNotModified(ChannelHandlerContext ctx) {_		FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, NOT_MODIFIED)__		setDateHeader(response)___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};send,the,304,not,modified,response,this,response,can,be,used,when,the,file,timestamp,is,the,same,as,what,the,browser,is,sending,up,param,ctx,the,channel,context,to,write,the,response,to;public,static,void,send,not,modified,channel,handler,context,ctx,full,http,response,response,new,default,full,http,response,set,date,header,response,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void sendNotModified(ChannelHandlerContext ctx);1545326469;Send the "304 Not Modified" response. This response can be used when the_file timestamp is the same as what the browser is sending up.__@param ctx The channel context to write the response to.;public static void sendNotModified(ChannelHandlerContext ctx) {_		FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, NOT_MODIFIED)__		setDateHeader(response)___		_		ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE)__	};send,the,304,not,modified,response,this,response,can,be,used,when,the,file,timestamp,is,the,same,as,what,the,browser,is,sending,up,param,ctx,the,channel,context,to,write,the,response,to;public,static,void,send,not,modified,channel,handler,context,ctx,full,http,response,response,new,default,full,http,response,set,date,header,response,ctx,write,and,flush,response,add,listener,channel,future,listener,close
StaticFileServerHandler -> public static void setDateHeader(FullHttpResponse response);1505860824;Sets the "date" header for the HTTP response.__@param response HTTP response;public static void setDateHeader(FullHttpResponse response) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))__	};sets,the,date,header,for,the,http,response,param,response,http,response;public,static,void,set,date,header,full,http,response,response,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time
StaticFileServerHandler -> public static void setDateHeader(FullHttpResponse response);1510063661;Sets the "date" header for the HTTP response.__@param response HTTP response;public static void setDateHeader(FullHttpResponse response) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))__	};sets,the,date,header,for,the,http,response,param,response,http,response;public,static,void,set,date,header,full,http,response,response,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time
StaticFileServerHandler -> public static void setDateHeader(FullHttpResponse response);1518680659;Sets the "date" header for the HTTP response.__@param response HTTP response;public static void setDateHeader(FullHttpResponse response) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))__	};sets,the,date,header,for,the,http,response,param,response,http,response;public,static,void,set,date,header,full,http,response,response,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time
StaticFileServerHandler -> public static void setDateHeader(FullHttpResponse response);1527499265;Sets the "date" header for the HTTP response.__@param response HTTP response;public static void setDateHeader(FullHttpResponse response) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))__	};sets,the,date,header,for,the,http,response,param,response,http,response;public,static,void,set,date,header,full,http,response,response,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time
StaticFileServerHandler -> public static void setDateHeader(FullHttpResponse response);1535963626;Sets the "date" header for the HTTP response.__@param response HTTP response;public static void setDateHeader(FullHttpResponse response) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))__	};sets,the,date,header,for,the,http,response,param,response,http,response;public,static,void,set,date,header,full,http,response,response,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time
StaticFileServerHandler -> public static void setDateHeader(FullHttpResponse response);1545326469;Sets the "date" header for the HTTP response.__@param response HTTP response;public static void setDateHeader(FullHttpResponse response) {_		SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__		dateFormatter.setTimeZone(GMT_TIMEZONE)___		Calendar time = new GregorianCalendar()__		response.headers().set(DATE, dateFormatter.format(time.getTime()))__	};sets,the,date,header,for,the,http,response,param,response,http,response;public,static,void,set,date,header,full,http,response,response,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,formatter,set,time,zone,calendar,time,new,gregorian,calendar,response,headers,set,date,date,formatter,format,time,get,time
StaticFileServerHandler -> public static void setContentTypeHeader(HttpResponse response, File file);1505860824;Sets the content type header for the HTTP Response.__@param response HTTP response_@param file     file to extract content type;public static void setContentTypeHeader(HttpResponse response, File file) {_		String mimeType = MimeTypes.getMimeTypeForFileName(file.getName())__		String mimeFinal = mimeType != null ? mimeType : MimeTypes.getDefaultMimeType()__		response.headers().set(CONTENT_TYPE, mimeFinal)__	};sets,the,content,type,header,for,the,http,response,param,response,http,response,param,file,file,to,extract,content,type;public,static,void,set,content,type,header,http,response,response,file,file,string,mime,type,mime,types,get,mime,type,for,file,name,file,get,name,string,mime,final,mime,type,null,mime,type,mime,types,get,default,mime,type,response,headers,set,mime,final
StaticFileServerHandler -> public static void setContentTypeHeader(HttpResponse response, File file);1510063661;Sets the content type header for the HTTP Response.__@param response HTTP response_@param file     file to extract content type;public static void setContentTypeHeader(HttpResponse response, File file) {_		String mimeType = MimeTypes.getMimeTypeForFileName(file.getName())__		String mimeFinal = mimeType != null ? mimeType : MimeTypes.getDefaultMimeType()__		response.headers().set(CONTENT_TYPE, mimeFinal)__	};sets,the,content,type,header,for,the,http,response,param,response,http,response,param,file,file,to,extract,content,type;public,static,void,set,content,type,header,http,response,response,file,file,string,mime,type,mime,types,get,mime,type,for,file,name,file,get,name,string,mime,final,mime,type,null,mime,type,mime,types,get,default,mime,type,response,headers,set,mime,final
StaticFileServerHandler -> public static void setContentTypeHeader(HttpResponse response, File file);1518680659;Sets the content type header for the HTTP Response.__@param response HTTP response_@param file     file to extract content type;public static void setContentTypeHeader(HttpResponse response, File file) {_		String mimeType = MimeTypes.getMimeTypeForFileName(file.getName())__		String mimeFinal = mimeType != null ? mimeType : MimeTypes.getDefaultMimeType()__		response.headers().set(CONTENT_TYPE, mimeFinal)__	};sets,the,content,type,header,for,the,http,response,param,response,http,response,param,file,file,to,extract,content,type;public,static,void,set,content,type,header,http,response,response,file,file,string,mime,type,mime,types,get,mime,type,for,file,name,file,get,name,string,mime,final,mime,type,null,mime,type,mime,types,get,default,mime,type,response,headers,set,mime,final
StaticFileServerHandler -> public static void setContentTypeHeader(HttpResponse response, File file);1527499265;Sets the content type header for the HTTP Response.__@param response HTTP response_@param file     file to extract content type;public static void setContentTypeHeader(HttpResponse response, File file) {_		String mimeType = MimeTypes.getMimeTypeForFileName(file.getName())__		String mimeFinal = mimeType != null ? mimeType : MimeTypes.getDefaultMimeType()__		response.headers().set(CONTENT_TYPE, mimeFinal)__	};sets,the,content,type,header,for,the,http,response,param,response,http,response,param,file,file,to,extract,content,type;public,static,void,set,content,type,header,http,response,response,file,file,string,mime,type,mime,types,get,mime,type,for,file,name,file,get,name,string,mime,final,mime,type,null,mime,type,mime,types,get,default,mime,type,response,headers,set,mime,final
StaticFileServerHandler -> public static void setContentTypeHeader(HttpResponse response, File file);1535963626;Sets the content type header for the HTTP Response.__@param response HTTP response_@param file     file to extract content type;public static void setContentTypeHeader(HttpResponse response, File file) {_		String mimeType = MimeTypes.getMimeTypeForFileName(file.getName())__		String mimeFinal = mimeType != null ? mimeType : MimeTypes.getDefaultMimeType()__		response.headers().set(CONTENT_TYPE, mimeFinal)__	};sets,the,content,type,header,for,the,http,response,param,response,http,response,param,file,file,to,extract,content,type;public,static,void,set,content,type,header,http,response,response,file,file,string,mime,type,mime,types,get,mime,type,for,file,name,file,get,name,string,mime,final,mime,type,null,mime,type,mime,types,get,default,mime,type,response,headers,set,mime,final
StaticFileServerHandler -> public static void setContentTypeHeader(HttpResponse response, File file);1545326469;Sets the content type header for the HTTP Response.__@param response HTTP response_@param file     file to extract content type;public static void setContentTypeHeader(HttpResponse response, File file) {_		String mimeType = MimeTypes.getMimeTypeForFileName(file.getName())__		String mimeFinal = mimeType != null ? mimeType : MimeTypes.getDefaultMimeType()__		response.headers().set(CONTENT_TYPE, mimeFinal)__	};sets,the,content,type,header,for,the,http,response,param,response,http,response,param,file,file,to,extract,content,type;public,static,void,set,content,type,header,http,response,response,file,file,string,mime,type,mime,types,get,mime,type,for,file,name,file,get,name,string,mime,final,mime,type,null,mime,type,mime,types,get,default,mime,type,response,headers,set,mime,final
StaticFileServerHandler -> private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 			throws IOException, ParseException, URISyntaxException;1505860824;Response when running with leading JobManager.;private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_			throws IOException, ParseException, URISyntaxException {__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = StaticFileServerHandler.class.getClassLoader()___			try (InputStream resourceStream = cl.getResourceAsStream("web" + requestPath)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + requestPath)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								logger.debug("Loading missing file from classloader: {}", requestPath)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					logger.error("error while responding", t)__				} finally {_					if (!success) {_						logger.debug("Unable to load requested file {} from classloader", requestPath)__						sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (logger.isDebugEnabled()) {_					logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				sendNotModified(ctx)__				return__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException e) {_			sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			setContentTypeHeader(response, file)___			_			if (!(requestPath.contains("log") || requestPath.contains("out"))) {_				setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			logger.error("Failed to serve file.", e)__			sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,to,request,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,urisyntax,exception,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,static,file,server,handler,class,get,class,loader,try,input,stream,resource,stream,cl,get,resource,as,stream,web,request,path,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,request,path,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,logger,debug,loading,missing,file,from,classloader,request,path,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,logger,error,error,while,responding,t,finally,if,success,logger,debug,unable,to,load,requested,file,from,classloader,request,path,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,logger,is,debug,enabled,logger,debug,responding,not,modified,for,file,file,get,absolute,path,send,not,modified,ctx,return,if,logger,is,debug,enabled,logger,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,set,content,type,header,response,file,if,request,path,contains,log,request,path,contains,out,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,logger,error,failed,to,serve,file,e,send,error,ctx
StaticFileServerHandler -> private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 			throws IOException, ParseException, URISyntaxException;1510063661;Response when running with leading JobManager.;private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_			throws IOException, ParseException, URISyntaxException {__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = StaticFileServerHandler.class.getClassLoader()___			try (InputStream resourceStream = cl.getResourceAsStream("web" + requestPath)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + requestPath)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								logger.debug("Loading missing file from classloader: {}", requestPath)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					logger.error("error while responding", t)__				} finally {_					if (!success) {_						logger.debug("Unable to load requested file {} from classloader", requestPath)__						sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (logger.isDebugEnabled()) {_					logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				sendNotModified(ctx)__				return__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException e) {_			sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			setContentTypeHeader(response, file)___			_			if (!(requestPath.contains("log") || requestPath.contains("out"))) {_				setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			logger.error("Failed to serve file.", e)__			sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,to,request,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,urisyntax,exception,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,static,file,server,handler,class,get,class,loader,try,input,stream,resource,stream,cl,get,resource,as,stream,web,request,path,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,request,path,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,logger,debug,loading,missing,file,from,classloader,request,path,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,logger,error,error,while,responding,t,finally,if,success,logger,debug,unable,to,load,requested,file,from,classloader,request,path,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,logger,is,debug,enabled,logger,debug,responding,not,modified,for,file,file,get,absolute,path,send,not,modified,ctx,return,if,logger,is,debug,enabled,logger,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,set,content,type,header,response,file,if,request,path,contains,log,request,path,contains,out,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,logger,error,failed,to,serve,file,e,send,error,ctx
StaticFileServerHandler -> private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 			throws IOException, ParseException, URISyntaxException;1518680659;Response when running with leading JobManager.;private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_			throws IOException, ParseException, URISyntaxException {__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = StaticFileServerHandler.class.getClassLoader()___			try (InputStream resourceStream = cl.getResourceAsStream("web" + requestPath)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + requestPath)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								logger.debug("Loading missing file from classloader: {}", requestPath)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					logger.error("error while responding", t)__				} finally {_					if (!success) {_						logger.debug("Unable to load requested file {} from classloader", requestPath)__						sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (logger.isDebugEnabled()) {_					logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				sendNotModified(ctx)__				return__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException e) {_			sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			setContentTypeHeader(response, file)___			_			if (!(requestPath.contains("log") || requestPath.contains("out"))) {_				setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			logger.error("Failed to serve file.", e)__			sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,to,request,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,urisyntax,exception,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,static,file,server,handler,class,get,class,loader,try,input,stream,resource,stream,cl,get,resource,as,stream,web,request,path,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,request,path,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,logger,debug,loading,missing,file,from,classloader,request,path,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,logger,error,error,while,responding,t,finally,if,success,logger,debug,unable,to,load,requested,file,from,classloader,request,path,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,logger,is,debug,enabled,logger,debug,responding,not,modified,for,file,file,get,absolute,path,send,not,modified,ctx,return,if,logger,is,debug,enabled,logger,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,set,content,type,header,response,file,if,request,path,contains,log,request,path,contains,out,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,logger,error,failed,to,serve,file,e,send,error,ctx
StaticFileServerHandler -> private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 			throws IOException, ParseException, URISyntaxException;1527499265;Response when running with leading JobManager.;private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_			throws IOException, ParseException, URISyntaxException {__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = StaticFileServerHandler.class.getClassLoader()___			try (InputStream resourceStream = cl.getResourceAsStream("web" + requestPath)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + requestPath)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								logger.debug("Loading missing file from classloader: {}", requestPath)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					logger.error("error while responding", t)__				} finally {_					if (!success) {_						logger.debug("Unable to load requested file {} from classloader", requestPath)__						sendError(ctx, NOT_FOUND)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			sendError(ctx, NOT_FOUND)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			sendError(ctx, NOT_FOUND)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (logger.isDebugEnabled()) {_					logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				sendNotModified(ctx)__				return__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException e) {_			sendError(ctx, NOT_FOUND)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			setContentTypeHeader(response, file)___			_			if (!(requestPath.contains("log") || requestPath.contains("out"))) {_				setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			logger.error("Failed to serve file.", e)__			sendError(ctx, INTERNAL_SERVER_ERROR)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,to,request,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,urisyntax,exception,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,static,file,server,handler,class,get,class,loader,try,input,stream,resource,stream,cl,get,resource,as,stream,web,request,path,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,request,path,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,logger,debug,loading,missing,file,from,classloader,request,path,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,logger,error,error,while,responding,t,finally,if,success,logger,debug,unable,to,load,requested,file,from,classloader,request,path,send,error,ctx,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,send,error,ctx,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,send,error,ctx,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,logger,is,debug,enabled,logger,debug,responding,not,modified,for,file,file,get,absolute,path,send,not,modified,ctx,return,if,logger,is,debug,enabled,logger,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,send,error,ctx,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,set,content,type,header,response,file,if,request,path,contains,log,request,path,contains,out,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,logger,error,failed,to,serve,file,e,send,error,ctx
StaticFileServerHandler -> private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 			throws IOException, ParseException, URISyntaxException;1535963626;Response when running with leading JobManager.;private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_			throws IOException, ParseException, URISyntaxException {__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = StaticFileServerHandler.class.getClassLoader()___			try (InputStream resourceStream = cl.getResourceAsStream("web" + requestPath)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + requestPath)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								logger.debug("Loading missing file from classloader: {}", requestPath)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					logger.error("error while responding", t)__				} finally {_					if (!success) {_						logger.debug("Unable to load requested file {} from classloader", requestPath)__						HandlerUtils.sendErrorResponse(_							ctx,_							request,_							new ErrorResponseBody(String.format("Unable to load requested file %s.", requestPath)),_							NOT_FOUND,_							responseHeaders)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				responseHeaders)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				responseHeaders)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (logger.isDebugEnabled()) {_					logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				sendNotModified(ctx)__				return__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException e) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				HttpResponseStatus.NOT_FOUND,_				responseHeaders)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			setContentTypeHeader(response, file)___			_			if (!(requestPath.contains("log") || requestPath.contains("out"))) {_				setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			logger.error("Failed to serve file.", e)__			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("Internal server error."),_				INTERNAL_SERVER_ERROR,_				responseHeaders)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,to,request,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,urisyntax,exception,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,static,file,server,handler,class,get,class,loader,try,input,stream,resource,stream,cl,get,resource,as,stream,web,request,path,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,request,path,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,logger,debug,loading,missing,file,from,classloader,request,path,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,logger,error,error,while,responding,t,finally,if,success,logger,debug,unable,to,load,requested,file,from,classloader,request,path,handler,utils,send,error,response,ctx,request,new,error,response,body,string,format,unable,to,load,requested,file,s,request,path,response,headers,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,response,headers,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,response,headers,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,logger,is,debug,enabled,logger,debug,responding,not,modified,for,file,file,get,absolute,path,send,not,modified,ctx,return,if,logger,is,debug,enabled,logger,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,http,response,status,response,headers,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,set,content,type,header,response,file,if,request,path,contains,log,request,path,contains,out,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,logger,error,failed,to,serve,file,e,handler,utils,send,error,response,ctx,request,new,error,response,body,internal,server,error,response,headers
StaticFileServerHandler -> private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath) 			throws IOException, ParseException, URISyntaxException;1545326469;Response when running with leading JobManager.;private void respondToRequest(ChannelHandlerContext ctx, HttpRequest request, String requestPath)_			throws IOException, ParseException, URISyntaxException {__		_		final File file = new File(rootPath, requestPath)___		if (!file.exists()) {_			_			ClassLoader cl = StaticFileServerHandler.class.getClassLoader()___			try (InputStream resourceStream = cl.getResourceAsStream("web" + requestPath)) {_				boolean success = false__				try {_					if (resourceStream != null) {_						URL root = cl.getResource("web")__						URL requested = cl.getResource("web" + requestPath)___						if (root != null && requested != null) {_							URI rootURI = new URI(root.getPath()).normalize()__							URI requestedURI = new URI(requested.getPath()).normalize()___							_							_							if (!rootURI.relativize(requestedURI).equals(requestedURI)) {_								logger.debug("Loading missing file from classloader: {}", requestPath)__								_								file.getParentFile().mkdirs()__								Files.copy(resourceStream, file.toPath())___								success = true__							}_						}_					}_				} catch (Throwable t) {_					logger.error("error while responding", t)__				} finally {_					if (!success) {_						logger.debug("Unable to load requested file {} from classloader", requestPath)__						HandlerUtils.sendErrorResponse(_							ctx,_							request,_							new ErrorResponseBody(String.format("Unable to load requested file %s.", requestPath)),_							NOT_FOUND,_							responseHeaders)__						return__					}_				}_			}_		}__		if (!file.exists() || file.isHidden() || file.isDirectory() || !file.isFile()) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				responseHeaders)__			return__		}__		if (!file.getCanonicalFile().toPath().startsWith(rootPath.toPath())) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				NOT_FOUND,_				responseHeaders)__			return__		}__		_		final String ifModifiedSince = request.headers().get(IF_MODIFIED_SINCE)__		if (ifModifiedSince != null && !ifModifiedSince.isEmpty()) {_			SimpleDateFormat dateFormatter = new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US)__			Date ifModifiedSinceDate = dateFormatter.parse(ifModifiedSince)___			_			_			long ifModifiedSinceDateSeconds = ifModifiedSinceDate.getTime() / 1000__			long fileLastModifiedSeconds = file.lastModified() / 1000__			if (ifModifiedSinceDateSeconds == fileLastModifiedSeconds) {_				if (logger.isDebugEnabled()) {_					logger.debug("Responding 'NOT MODIFIED' for file '" + file.getAbsolutePath() + '\'')__				}__				sendNotModified(ctx)__				return__			}_		}__		if (logger.isDebugEnabled()) {_			logger.debug("Responding with file '" + file.getAbsolutePath() + '\'')__		}__		_		final RandomAccessFile raf__		try {_			raf = new RandomAccessFile(file, "r")__		}_		catch (FileNotFoundException e) {_			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("File not found."),_				HttpResponseStatus.NOT_FOUND,_				responseHeaders)__			return__		}__		try {_			long fileLength = raf.length()___			HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK)__			setContentTypeHeader(response, file)___			_			if (!(requestPath.contains("log") || requestPath.contains("out"))) {_				setDateAndCacheHeaders(response, file)__			}_			if (HttpHeaders.isKeepAlive(request)) {_				response.headers().set(CONNECTION, HttpHeaders.Values.KEEP_ALIVE)__			}_			HttpHeaders.setContentLength(response, fileLength)___			_			ctx.write(response)___			_			ChannelFuture lastContentFuture__			if (ctx.pipeline().get(SslHandler.class) == null) {_				ctx.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength), ctx.newProgressivePromise())__				lastContentFuture = ctx.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)__			} else {_				lastContentFuture = ctx.writeAndFlush(new HttpChunkedInput(new ChunkedFile(raf, 0, fileLength, 8192)),_					ctx.newProgressivePromise())__				_			}__			_			if (!HttpHeaders.isKeepAlive(request)) {_				lastContentFuture.addListener(ChannelFutureListener.CLOSE)__			}_		} catch (Exception e) {_			raf.close()__			logger.error("Failed to serve file.", e)__			HandlerUtils.sendErrorResponse(_				ctx,_				request,_				new ErrorResponseBody("Internal server error."),_				INTERNAL_SERVER_ERROR,_				responseHeaders)__		}_	};response,when,running,with,leading,job,manager;private,void,respond,to,request,channel,handler,context,ctx,http,request,request,string,request,path,throws,ioexception,parse,exception,urisyntax,exception,final,file,file,new,file,root,path,request,path,if,file,exists,class,loader,cl,static,file,server,handler,class,get,class,loader,try,input,stream,resource,stream,cl,get,resource,as,stream,web,request,path,boolean,success,false,try,if,resource,stream,null,url,root,cl,get,resource,web,url,requested,cl,get,resource,web,request,path,if,root,null,requested,null,uri,root,uri,new,uri,root,get,path,normalize,uri,requested,uri,new,uri,requested,get,path,normalize,if,root,uri,relativize,requested,uri,equals,requested,uri,logger,debug,loading,missing,file,from,classloader,request,path,file,get,parent,file,mkdirs,files,copy,resource,stream,file,to,path,success,true,catch,throwable,t,logger,error,error,while,responding,t,finally,if,success,logger,debug,unable,to,load,requested,file,from,classloader,request,path,handler,utils,send,error,response,ctx,request,new,error,response,body,string,format,unable,to,load,requested,file,s,request,path,response,headers,return,if,file,exists,file,is,hidden,file,is,directory,file,is,file,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,response,headers,return,if,file,get,canonical,file,to,path,starts,with,root,path,to,path,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,response,headers,return,final,string,if,modified,since,request,headers,get,if,if,modified,since,null,if,modified,since,is,empty,simple,date,format,date,formatter,new,simple,date,format,locale,us,date,if,modified,since,date,date,formatter,parse,if,modified,since,long,if,modified,since,date,seconds,if,modified,since,date,get,time,1000,long,file,last,modified,seconds,file,last,modified,1000,if,if,modified,since,date,seconds,file,last,modified,seconds,if,logger,is,debug,enabled,logger,debug,responding,not,modified,for,file,file,get,absolute,path,send,not,modified,ctx,return,if,logger,is,debug,enabled,logger,debug,responding,with,file,file,get,absolute,path,final,random,access,file,raf,try,raf,new,random,access,file,file,r,catch,file,not,found,exception,e,handler,utils,send,error,response,ctx,request,new,error,response,body,file,not,found,http,response,status,response,headers,return,try,long,file,length,raf,length,http,response,response,new,default,http,response,ok,set,content,type,header,response,file,if,request,path,contains,log,request,path,contains,out,set,date,and,cache,headers,response,file,if,http,headers,is,keep,alive,request,response,headers,set,connection,http,headers,values,http,headers,set,content,length,response,file,length,ctx,write,response,channel,future,last,content,future,if,ctx,pipeline,get,ssl,handler,class,null,ctx,write,new,default,file,region,raf,get,channel,0,file,length,ctx,new,progressive,promise,last,content,future,ctx,write,and,flush,last,http,content,else,last,content,future,ctx,write,and,flush,new,http,chunked,input,new,chunked,file,raf,0,file,length,8192,ctx,new,progressive,promise,if,http,headers,is,keep,alive,request,last,content,future,add,listener,channel,future,listener,close,catch,exception,e,raf,close,logger,error,failed,to,serve,file,e,handler,utils,send,error,response,ctx,request,new,error,response,body,internal,server,error,response,headers
