# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperUtilityFactory -> public void close(boolean cleanup) throws Exception;1485163254;Closes the ZooKeeperUtilityFactory. This entails closing the cached {@link CuratorFramework}_instance. If cleanup is true, then the initial path and all its children are deleted.__@param cleanup deletes the initial path and all of its children to clean up_@throws Exception when deleting the znodes;public void close(boolean cleanup) throws Exception {_		if (cleanup) {_			facade.delete().deletingChildrenIfNeeded().forPath("/")__		}__		root.close()__	};closes,the,zoo,keeper,utility,factory,this,entails,closing,the,cached,link,curator,framework,instance,if,cleanup,is,true,then,the,initial,path,and,all,its,children,are,deleted,param,cleanup,deletes,the,initial,path,and,all,of,its,children,to,clean,up,throws,exception,when,deleting,the,znodes;public,void,close,boolean,cleanup,throws,exception,if,cleanup,facade,delete,deleting,children,if,needed,for,path,root,close
ZooKeeperUtilityFactory -> public void close(boolean cleanup) throws Exception;1536763178;Closes the ZooKeeperUtilityFactory. This entails closing the cached {@link CuratorFramework}_instance. If cleanup is true, then the initial path and all its children are deleted.__@param cleanup deletes the initial path and all of its children to clean up_@throws Exception when deleting the znodes;public void close(boolean cleanup) throws Exception {_		if (cleanup) {_			facade.delete().deletingChildrenIfNeeded().forPath("/")__		}__		root.close()__	};closes,the,zoo,keeper,utility,factory,this,entails,closing,the,cached,link,curator,framework,instance,if,cleanup,is,true,then,the,initial,path,and,all,its,children,are,deleted,param,cleanup,deletes,the,initial,path,and,all,of,its,children,to,clean,up,throws,exception,when,deleting,the,znodes;public,void,close,boolean,cleanup,throws,exception,if,cleanup,facade,delete,deleting,children,if,needed,for,path,root,close
ZooKeeperUtilityFactory -> public void close(boolean cleanup) throws Exception;1547547304;Closes the ZooKeeperUtilityFactory. This entails closing the cached {@link CuratorFramework}_instance. If cleanup is true, then the initial path and all its children are deleted.__@param cleanup deletes the initial path and all of its children to clean up_@throws Exception when deleting the znodes;public void close(boolean cleanup) throws Exception {_		if (cleanup) {_			facade.delete().deletingChildrenIfNeeded().forPath("/")__		}__		root.close()__	};closes,the,zoo,keeper,utility,factory,this,entails,closing,the,cached,link,curator,framework,instance,if,cleanup,is,true,then,the,initial,path,and,all,its,children,are,deleted,param,cleanup,deletes,the,initial,path,and,all,of,its,children,to,clean,up,throws,exception,when,deleting,the,znodes;public,void,close,boolean,cleanup,throws,exception,if,cleanup,facade,delete,deleting,children,if,needed,for,path,root,close
ZooKeeperUtilityFactory -> public <T extends Serializable> ZooKeeperStateHandleStore<T> createZooKeeperStateHandleStore( 			String zkStateHandleStorePath, 			RetrievableStateStorageHelper<T> stateStorageHelper) throws Exception;1536763178;Creates a {@link ZooKeeperStateHandleStore} instance with the provided arguments.__@param zkStateHandleStorePath specifying the path in ZooKeeper to store the state handles to_@param stateStorageHelper storing the actual state data_@param <T> Type of the state to be stored_@return a ZooKeeperStateHandleStore instance_@throws Exception if ZooKeeper could not create the provided state handle store path in_ZooKeeper;public <T extends Serializable> ZooKeeperStateHandleStore<T> createZooKeeperStateHandleStore(_			String zkStateHandleStorePath,_			RetrievableStateStorageHelper<T> stateStorageHelper) throws Exception {__		facade.newNamespaceAwareEnsurePath(zkStateHandleStorePath).ensure(facade.getZookeeperClient())__		CuratorFramework stateHandleStoreFacade = facade.usingNamespace(_			ZooKeeperUtils.generateZookeeperPath(_				facade.getNamespace(),_				zkStateHandleStorePath))___		return new ZooKeeperStateHandleStore<>(stateHandleStoreFacade, stateStorageHelper)__	};creates,a,link,zoo,keeper,state,handle,store,instance,with,the,provided,arguments,param,zk,state,handle,store,path,specifying,the,path,in,zoo,keeper,to,store,the,state,handles,to,param,state,storage,helper,storing,the,actual,state,data,param,t,type,of,the,state,to,be,stored,return,a,zoo,keeper,state,handle,store,instance,throws,exception,if,zoo,keeper,could,not,create,the,provided,state,handle,store,path,in,zoo,keeper;public,t,extends,serializable,zoo,keeper,state,handle,store,t,create,zoo,keeper,state,handle,store,string,zk,state,handle,store,path,retrievable,state,storage,helper,t,state,storage,helper,throws,exception,facade,new,namespace,aware,ensure,path,zk,state,handle,store,path,ensure,facade,get,zookeeper,client,curator,framework,state,handle,store,facade,facade,using,namespace,zoo,keeper,utils,generate,zookeeper,path,facade,get,namespace,zk,state,handle,store,path,return,new,zoo,keeper,state,handle,store,state,handle,store,facade,state,storage,helper
ZooKeeperUtilityFactory -> public <T extends Serializable> ZooKeeperStateHandleStore<T> createZooKeeperStateHandleStore( 			String zkStateHandleStorePath, 			RetrievableStateStorageHelper<T> stateStorageHelper) throws Exception;1547547304;Creates a {@link ZooKeeperStateHandleStore} instance with the provided arguments.__@param zkStateHandleStorePath specifying the path in ZooKeeper to store the state handles to_@param stateStorageHelper storing the actual state data_@param <T> Type of the state to be stored_@return a ZooKeeperStateHandleStore instance_@throws Exception if ZooKeeper could not create the provided state handle store path in_ZooKeeper;public <T extends Serializable> ZooKeeperStateHandleStore<T> createZooKeeperStateHandleStore(_			String zkStateHandleStorePath,_			RetrievableStateStorageHelper<T> stateStorageHelper) throws Exception {__		return ZooKeeperUtils.createZooKeeperStateHandleStore(_			facade,_			zkStateHandleStorePath,_			stateStorageHelper)__	};creates,a,link,zoo,keeper,state,handle,store,instance,with,the,provided,arguments,param,zk,state,handle,store,path,specifying,the,path,in,zoo,keeper,to,store,the,state,handles,to,param,state,storage,helper,storing,the,actual,state,data,param,t,type,of,the,state,to,be,stored,return,a,zoo,keeper,state,handle,store,instance,throws,exception,if,zoo,keeper,could,not,create,the,provided,state,handle,store,path,in,zoo,keeper;public,t,extends,serializable,zoo,keeper,state,handle,store,t,create,zoo,keeper,state,handle,store,string,zk,state,handle,store,path,retrievable,state,storage,helper,t,state,storage,helper,throws,exception,return,zoo,keeper,utils,create,zoo,keeper,state,handle,store,facade,zk,state,handle,store,path,state,storage,helper
ZooKeeperUtilityFactory -> public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue);1485163254;Creates a {@link ZooKeeperSharedValue} to store a shared value between multiple instances.__@param path to the shared value in ZooKeeper_@param seedValue for the shared value_@return a shared value;public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue) {_		return new ZooKeeperSharedValue(_			new SharedValue(_				facade,_				path,_				seedValue))__	};creates,a,link,zoo,keeper,shared,value,to,store,a,shared,value,between,multiple,instances,param,path,to,the,shared,value,in,zoo,keeper,param,seed,value,for,the,shared,value,return,a,shared,value;public,zoo,keeper,shared,value,create,shared,value,string,path,byte,seed,value,return,new,zoo,keeper,shared,value,new,shared,value,facade,path,seed,value
ZooKeeperUtilityFactory -> public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue);1536763178;Creates a {@link ZooKeeperSharedValue} to store a shared value between multiple instances.__@param path to the shared value in ZooKeeper_@param seedValue for the shared value_@return a shared value;public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue) {_		return new ZooKeeperSharedValue(_			new SharedValue(_				facade,_				path,_				seedValue))__	};creates,a,link,zoo,keeper,shared,value,to,store,a,shared,value,between,multiple,instances,param,path,to,the,shared,value,in,zoo,keeper,param,seed,value,for,the,shared,value,return,a,shared,value;public,zoo,keeper,shared,value,create,shared,value,string,path,byte,seed,value,return,new,zoo,keeper,shared,value,new,shared,value,facade,path,seed,value
ZooKeeperUtilityFactory -> public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue);1547547304;Creates a {@link ZooKeeperSharedValue} to store a shared value between multiple instances.__@param path to the shared value in ZooKeeper_@param seedValue for the shared value_@return a shared value;public ZooKeeperSharedValue createSharedValue(String path, byte[] seedValue) {_		return new ZooKeeperSharedValue(_			new SharedValue(_				facade,_				path,_				seedValue))__	};creates,a,link,zoo,keeper,shared,value,to,store,a,shared,value,between,multiple,instances,param,path,to,the,shared,value,in,zoo,keeper,param,seed,value,for,the,shared,value,return,a,shared,value;public,zoo,keeper,shared,value,create,shared,value,string,path,byte,seed,value,return,new,zoo,keeper,shared,value,new,shared,value,facade,path,seed,value
ZooKeeperUtilityFactory -> public ZooKeeperSharedCount createSharedCount(String path, int seedCount);1485163254;Creates a {@link ZooKeeperSharedCount} to store a shared count between multiple instances.__@param path to the shared count in ZooKeeper_@param seedCount for the shared count_@return a shared count;public ZooKeeperSharedCount createSharedCount(String path, int seedCount) {_		return new ZooKeeperSharedCount(_			new SharedCount(_				facade,_				path,_				seedCount))__	};creates,a,link,zoo,keeper,shared,count,to,store,a,shared,count,between,multiple,instances,param,path,to,the,shared,count,in,zoo,keeper,param,seed,count,for,the,shared,count,return,a,shared,count;public,zoo,keeper,shared,count,create,shared,count,string,path,int,seed,count,return,new,zoo,keeper,shared,count,new,shared,count,facade,path,seed,count
ZooKeeperUtilityFactory -> public ZooKeeperSharedCount createSharedCount(String path, int seedCount);1536763178;Creates a {@link ZooKeeperSharedCount} to store a shared count between multiple instances.__@param path to the shared count in ZooKeeper_@param seedCount for the shared count_@return a shared count;public ZooKeeperSharedCount createSharedCount(String path, int seedCount) {_		return new ZooKeeperSharedCount(_			new SharedCount(_				facade,_				path,_				seedCount))__	};creates,a,link,zoo,keeper,shared,count,to,store,a,shared,count,between,multiple,instances,param,path,to,the,shared,count,in,zoo,keeper,param,seed,count,for,the,shared,count,return,a,shared,count;public,zoo,keeper,shared,count,create,shared,count,string,path,int,seed,count,return,new,zoo,keeper,shared,count,new,shared,count,facade,path,seed,count
ZooKeeperUtilityFactory -> public ZooKeeperSharedCount createSharedCount(String path, int seedCount);1547547304;Creates a {@link ZooKeeperSharedCount} to store a shared count between multiple instances.__@param path to the shared count in ZooKeeper_@param seedCount for the shared count_@return a shared count;public ZooKeeperSharedCount createSharedCount(String path, int seedCount) {_		return new ZooKeeperSharedCount(_			new SharedCount(_				facade,_				path,_				seedCount))__	};creates,a,link,zoo,keeper,shared,count,to,store,a,shared,count,between,multiple,instances,param,path,to,the,shared,count,in,zoo,keeper,param,seed,count,for,the,shared,count,return,a,shared,count;public,zoo,keeper,shared,count,create,shared,count,string,path,int,seed,count,return,new,zoo,keeper,shared,count,new,shared,count,facade,path,seed,count
