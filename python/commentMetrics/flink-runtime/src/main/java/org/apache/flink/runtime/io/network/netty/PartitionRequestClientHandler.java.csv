# id;timestamp;commentText;codeText;commentWords;codeWords
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1412761231;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {__				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1425486319;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {__				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1426865283;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {__				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1426876316;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {__				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1431354895;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {__				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1432127765;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(inputChannel.getInputChannelId())__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,input,channel,get,input,channel,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1432632298;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1432647501;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1432806352;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1432889656;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1433740447;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1438275734;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1440967006;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1455130280;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1455534790;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1465394479;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1466500417;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1486999859;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1498566436;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1501592283;Continues the decoding of a staged buffer after a buffer has become available again._<p>_This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1502342953;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1503656034;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer.asByteBuf(), nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,as,byte,buf,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1506507855;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1506613166;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				buffer.setSize(stagedBufferResponse.getSize())___				stagedBufferResponse.getNettyBuffer().readBytes(buffer.getNioBuffer())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,buffer,set,size,staged,buffer,response,get,size,staged,buffer,response,get,netty,buffer,read,bytes,buffer,get,nio,buffer,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1515514130;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			NetworkBuffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				stagedBufferResponse.getNettyBuffer().readBytes(buffer, stagedBufferResponse.getSize())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,network,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,staged,buffer,response,get,netty,buffer,read,bytes,buffer,staged,buffer,response,get,size,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1515534998;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			NetworkBuffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer, nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,network,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1515668625;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			NetworkBuffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer, nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,network,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1516169704;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer.asByteBuf(), nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,as,byte,buf,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1531147755;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer.asByteBuf(), nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,as,byte,buf,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1533422462;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer.asByteBuf(), nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,as,byte,buf,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1536834213;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer.asByteBuf(), nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,as,byte,buf,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void run();1543328832;Continues the decoding of a staged buffer after a buffer has become available again.__<p>This task is executed by the network I/O thread.;@Override_		public void run() {_			boolean success = false___			Buffer buffer = null___			try {_				if ((buffer = availableBuffer.getAndSet(null)) == null) {_					throw new IllegalStateException("Running buffer availability task w/o a buffer.")__				}__				ByteBuf nettyBuffer = stagedBufferResponse.getNettyBuffer()__				nettyBuffer.readBytes(buffer.asByteBuf(), nettyBuffer.readableBytes())__				stagedBufferResponse.releaseBuffer()___				RemoteInputChannel inputChannel = inputChannels.get(stagedBufferResponse.receiverId)___				if (inputChannel != null) {_					inputChannel.onBuffer(buffer, stagedBufferResponse.sequenceNumber, -1)___					success = true__				}_				else {_					cancelRequestFor(stagedBufferResponse.receiverId)__				}__				stagedBufferResponse = null___				if (stagedMessages.isEmpty()) {_					ctx.channel().config().setAutoRead(true)__					ctx.channel().read()__				}_				else {_					ctx.channel().eventLoop().execute(stagedMessagesHandler)__				}_			}_			catch (Throwable t) {_				notifyAllChannelsOfErrorAndClose(t)__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}_		};continues,the,decoding,of,a,staged,buffer,after,a,buffer,has,become,available,again,p,this,task,is,executed,by,the,network,i,o,thread;override,public,void,run,boolean,success,false,buffer,buffer,null,try,if,buffer,available,buffer,get,and,set,null,null,throw,new,illegal,state,exception,running,buffer,availability,task,w,o,a,buffer,byte,buf,netty,buffer,staged,buffer,response,get,netty,buffer,netty,buffer,read,bytes,buffer,as,byte,buf,netty,buffer,readable,bytes,staged,buffer,response,release,buffer,remote,input,channel,input,channel,input,channels,get,staged,buffer,response,receiver,id,if,input,channel,null,input,channel,on,buffer,buffer,staged,buffer,response,sequence,number,1,success,true,else,cancel,request,for,staged,buffer,response,receiver,id,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,notify,all,channels,of,error,and,close,t,finally,if,success,if,buffer,null,buffer,recycle,buffer
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1502342953;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1503656034;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,buffer,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1506507855;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1506613166;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1515514130;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, (NetworkBuffer) buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,network,buffer,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1515534998;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, (NetworkBuffer) buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,network,buffer,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,buffer,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1515668625;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, (NetworkBuffer) buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,network,buffer,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1516169704;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,buffer,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1531147755;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,buffer,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1533422462;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,buffer,return,false
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public boolean notifyBufferAvailable(Buffer buffer);1536834213;Called by the recycling thread (not network I/O thread);@Override_		public boolean notifyBufferAvailable(Buffer buffer) {_			boolean success = false___			try {_				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, " +_							" but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycleBuffer()__					}_				}_			}__			return false__		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,boolean,notify,buffer,available,buffer,buffer,boolean,success,false,try,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle,buffer,return,false
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1432127765;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1432632298;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1432647501;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1432806352;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1432889656;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1433740447;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1438275734;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1440967006;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1455130280;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof LocalTransportException || cause instanceof RemoteTransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				notifyAllChannelsOfErrorAndClose(new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", cause, remoteAddr))__			}_			else {_				notifyAllChannelsOfErrorAndClose(new LocalTransportException(cause.getMessage(), cause))__			}_		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,local,transport,exception,cause,instanceof,remote,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,notify,all,channels,of,error,and,close,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,cause,remote,addr,else,notify,all,channels,of,error,and,close,new,local,transport,exception,cause,get,message,cause
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1455534790;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1465394479;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1466500417;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1486999859;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1498566436;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1501592283;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1502342953;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1503656034;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1506507855;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1506613166;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1506753379;Called on exceptions in the client handler pipeline.__<p>Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {_		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		} else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException && cause.getMessage().equals("Connection reset by peer")) {_				tex = new RemoteTransportException("Lost connection to task manager '" + remoteAddr + "'. " +_					"This indicates that the remote task manager was lost.", remoteAddr, cause)__			} else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1515514130;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1515534998;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1515668625;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1516169704;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				tex = new LocalTransportException(cause.getMessage(), ctx.channel().localAddress(), cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,tex,new,local,transport,exception,cause,get,message,ctx,channel,local,address,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1531147755;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr),_					localAddr,_					cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1533422462;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr),_					localAddr,_					cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1536834213;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr),_					localAddr,_					cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> @Override 	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception;1543328832;Called on exceptions in the client handler pipeline.__<p> Remote exceptions are received as regular payload.;@Override_	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {__		if (cause instanceof TransportException) {_			notifyAllChannelsOfErrorAndClose(cause)__		}_		else {_			final SocketAddress remoteAddr = ctx.channel().remoteAddress()___			final TransportException tex___			_			if (cause instanceof IOException_					&& cause.getMessage().equals("Connection reset by peer")) {__				tex = new RemoteTransportException(_						"Lost connection to task manager '" + remoteAddr + "'. This indicates "_								+ "that the remote task manager was lost.", remoteAddr, cause)__			}_			else {_				SocketAddress localAddr = ctx.channel().localAddress()__				tex = new LocalTransportException(_					String.format("%s (connection to '%s')", cause.getMessage(), remoteAddr),_					localAddr,_					cause)__			}__			notifyAllChannelsOfErrorAndClose(tex)__		}_	};called,on,exceptions,in,the,client,handler,pipeline,p,remote,exceptions,are,received,as,regular,payload;override,public,void,exception,caught,channel,handler,context,ctx,throwable,cause,throws,exception,if,cause,instanceof,transport,exception,notify,all,channels,of,error,and,close,cause,else,final,socket,address,remote,addr,ctx,channel,remote,address,final,transport,exception,tex,if,cause,instanceof,ioexception,cause,get,message,equals,connection,reset,by,peer,tex,new,remote,transport,exception,lost,connection,to,task,manager,remote,addr,this,indicates,that,the,remote,task,manager,was,lost,remote,addr,cause,else,socket,address,local,addr,ctx,channel,local,address,tex,new,local,transport,exception,string,format,s,connection,to,s,cause,get,message,remote,addr,local,addr,cause,notify,all,channels,of,error,and,close,tex
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1412761231;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1425486319;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1426865283;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1426876316;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1431354895;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1432127765;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1432632298;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				checkNotNull(buffer, "Buffer request could not be satisfied.")___				if (availableBuffer.compareAndSet(null, buffer)) {_					ctx.channel().eventLoop().execute(this)___					success = true__				}_				else {_					throw new IllegalStateException("Received a buffer notification, but the previous one has not been handled yet.")__				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,check,not,null,buffer,buffer,request,could,not,be,satisfied,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1432647501;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1432806352;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1432889656;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1433740447;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1438275734;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1440967006;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1455130280;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1455534790;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1465394479;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1466500417;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1486999859;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1498566436;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> BufferListenerTask -> @Override 		public void onEvent(Buffer buffer);1501592283;Called by the recycling thread (not network I/O thread);@Override_		public void onEvent(Buffer buffer) {_			boolean success = false___			try {_				if (buffer != null) {_					if (availableBuffer.compareAndSet(null, buffer)) {_						ctx.channel().eventLoop().execute(this)___						success = true__					}_					else {_						throw new IllegalStateException("Received a buffer notification, " +_								" but the previous one has not been handled yet.")__					}_				}_				else {_					_					stagedBufferResponse = null___					if (stagedMessages.isEmpty()) {_						ctx.channel().config().setAutoRead(true)__						ctx.channel().read()__					}_					else {_						ctx.channel().eventLoop().execute(stagedMessagesHandler)__					}_				}_			}_			catch (Throwable t) {_				ctx.channel().eventLoop().execute(new AsyncErrorNotificationTask(t))__			}_			finally {_				if (!success) {_					if (buffer != null) {_						buffer.recycle()__					}_				}_			}_		};called,by,the,recycling,thread,not,network,i,o,thread;override,public,void,on,event,buffer,buffer,boolean,success,false,try,if,buffer,null,if,available,buffer,compare,and,set,null,buffer,ctx,channel,event,loop,execute,this,success,true,else,throw,new,illegal,state,exception,received,a,buffer,notification,but,the,previous,one,has,not,been,handled,yet,else,staged,buffer,response,null,if,staged,messages,is,empty,ctx,channel,config,set,auto,read,true,ctx,channel,read,else,ctx,channel,event,loop,execute,staged,messages,handler,catch,throwable,t,ctx,channel,event,loop,execute,new,async,error,notification,task,t,finally,if,success,if,buffer,null,buffer,recycle
PartitionRequestClientHandler -> void notifyCreditAvailable(RemoteInputChannel inputChannel);1503656034;This class would be replaced by CreditBasedClientHandler in the final,_so we only implement this method in CreditBasedClientHandler.;void notifyCreditAvailable(RemoteInputChannel inputChannel) {_	};this,class,would,be,replaced,by,credit,based,client,handler,in,the,final,so,we,only,implement,this,method,in,credit,based,client,handler;void,notify,credit,available,remote,input,channel,input,channel
PartitionRequestClientHandler -> void notifyCreditAvailable(RemoteInputChannel inputChannel);1506613166;This class would be replaced by CreditBasedClientHandler in the final,_so we only implement this method in CreditBasedClientHandler.;void notifyCreditAvailable(RemoteInputChannel inputChannel) {_	};this,class,would,be,replaced,by,credit,based,client,handler,in,the,final,so,we,only,implement,this,method,in,credit,based,client,handler;void,notify,credit,available,remote,input,channel,input,channel
PartitionRequestClientHandler -> void notifyCreditAvailable(RemoteInputChannel inputChannel);1515514130;This class would be replaced by CreditBasedClientHandler in the final,_so we only implement this method in CreditBasedClientHandler.;void notifyCreditAvailable(RemoteInputChannel inputChannel) {_	};this,class,would,be,replaced,by,credit,based,client,handler,in,the,final,so,we,only,implement,this,method,in,credit,based,client,handler;void,notify,credit,available,remote,input,channel,input,channel
PartitionRequestClientHandler -> void notifyCreditAvailable(RemoteInputChannel inputChannel);1515534998;This class would be replaced by CreditBasedClientHandler in the final,_so we only implement this method in CreditBasedClientHandler.;void notifyCreditAvailable(RemoteInputChannel inputChannel) {_	};this,class,would,be,replaced,by,credit,based,client,handler,in,the,final,so,we,only,implement,this,method,in,credit,based,client,handler;void,notify,credit,available,remote,input,channel,input,channel
PartitionRequestClientHandler -> void notifyCreditAvailable(RemoteInputChannel inputChannel);1515668625;This class would be replaced by CreditBasedClientHandler in the final,_so we only implement this method in CreditBasedClientHandler.;void notifyCreditAvailable(RemoteInputChannel inputChannel) {_	};this,class,would,be,replaced,by,credit,based,client,handler,in,the,final,so,we,only,implement,this,method,in,credit,based,client,handler;void,notify,credit,available,remote,input,channel,input,channel
PartitionRequestClientHandler -> private void checkError() throws IOException;1486999859;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1498566436;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1501592283;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1502342953;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1503656034;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1506507855;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1506613166;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1506753379;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			} else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1515514130;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1515534998;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1515668625;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1516169704;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1531147755;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1533422462;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1536834213;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
PartitionRequestClientHandler -> private void checkError() throws IOException;1543328832;Checks for an error and rethrows it if one was reported.;private void checkError() throws IOException {_		final Throwable t = channelError.get()___		if (t != null) {_			if (t instanceof IOException) {_				throw (IOException) t__			}_			else {_				throw new IOException("There has been an error in the channel.", t)__			}_		}_	};checks,for,an,error,and,rethrows,it,if,one,was,reported;private,void,check,error,throws,ioexception,final,throwable,t,channel,error,get,if,t,null,if,t,instanceof,ioexception,throw,ioexception,t,else,throw,new,ioexception,there,has,been,an,error,in,the,channel,t
