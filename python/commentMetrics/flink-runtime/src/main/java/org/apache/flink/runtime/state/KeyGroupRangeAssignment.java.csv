# id;timestamp;commentText;codeText;commentWords;codeWords
KeyGroupRangeAssignment -> public static int assignToKeyGroup(Object key, int maxParallelism);1474382176;Assigns the given key to a key-group index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int assignToKeyGroup(Object key, int maxParallelism) {_		return computeKeyGroupForKeyHash(key.hashCode(), maxParallelism)__	};assigns,the,given,key,to,a,key,group,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,assign,to,key,group,object,key,int,max,parallelism,return,compute,key,group,for,key,hash,key,hash,code,max,parallelism
KeyGroupRangeAssignment -> public static int assignToKeyGroup(Object key, int maxParallelism);1484573482;Assigns the given key to a key-group index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int assignToKeyGroup(Object key, int maxParallelism) {_		return computeKeyGroupForKeyHash(key.hashCode(), maxParallelism)__	};assigns,the,given,key,to,a,key,group,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,assign,to,key,group,object,key,int,max,parallelism,return,compute,key,group,for,key,hash,key,hash,code,max,parallelism
KeyGroupRangeAssignment -> public static int assignToKeyGroup(Object key, int maxParallelism);1489153046;Assigns the given key to a key-group index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int assignToKeyGroup(Object key, int maxParallelism) {_		return computeKeyGroupForKeyHash(key.hashCode(), maxParallelism)__	};assigns,the,given,key,to,a,key,group,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,assign,to,key,group,object,key,int,max,parallelism,return,compute,key,group,for,key,hash,key,hash,code,max,parallelism
KeyGroupRangeAssignment -> public static int assignToKeyGroup(Object key, int maxParallelism);1491307406;Assigns the given key to a key-group index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int assignToKeyGroup(Object key, int maxParallelism) {_		return computeKeyGroupForKeyHash(key.hashCode(), maxParallelism)__	};assigns,the,given,key,to,a,key,group,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,assign,to,key,group,object,key,int,max,parallelism,return,compute,key,group,for,key,hash,key,hash,code,max,parallelism
KeyGroupRangeAssignment -> public static int assignToKeyGroup(Object key, int maxParallelism);1517576275;Assigns the given key to a key-group index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int assignToKeyGroup(Object key, int maxParallelism) {_		return computeKeyGroupForKeyHash(key.hashCode(), maxParallelism)__	};assigns,the,given,key,to,a,key,group,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,assign,to,key,group,object,key,int,max,parallelism,return,compute,key,group,for,key,hash,key,hash,code,max,parallelism
KeyGroupRangeAssignment -> public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism);1474382176;Assigns the given key to a key-group index.__@param keyHash the hash of the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism) {_		return MathUtils.murmurHash(keyHash) % maxParallelism__	};assigns,the,given,key,to,a,key,group,index,param,key,hash,the,hash,of,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,compute,key,group,for,key,hash,int,key,hash,int,max,parallelism,return,math,utils,murmur,hash,key,hash,max,parallelism
KeyGroupRangeAssignment -> public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism);1484573482;Assigns the given key to a key-group index.__@param keyHash the hash of the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism) {_		return MathUtils.murmurHash(keyHash) % maxParallelism__	};assigns,the,given,key,to,a,key,group,index,param,key,hash,the,hash,of,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,compute,key,group,for,key,hash,int,key,hash,int,max,parallelism,return,math,utils,murmur,hash,key,hash,max,parallelism
KeyGroupRangeAssignment -> public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism);1489153046;Assigns the given key to a key-group index.__@param keyHash the hash of the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism) {_		return MathUtils.murmurHash(keyHash) % maxParallelism__	};assigns,the,given,key,to,a,key,group,index,param,key,hash,the,hash,of,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,compute,key,group,for,key,hash,int,key,hash,int,max,parallelism,return,math,utils,murmur,hash,key,hash,max,parallelism
KeyGroupRangeAssignment -> public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism);1491307406;Assigns the given key to a key-group index.__@param keyHash the hash of the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism) {_		return MathUtils.murmurHash(keyHash) % maxParallelism__	};assigns,the,given,key,to,a,key,group,index,param,key,hash,the,hash,of,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,compute,key,group,for,key,hash,int,key,hash,int,max,parallelism,return,math,utils,murmur,hash,key,hash,max,parallelism
KeyGroupRangeAssignment -> public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism);1517576275;Assigns the given key to a key-group index.__@param keyHash the hash of the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@return the key-group to which the given key is assigned;public static int computeKeyGroupForKeyHash(int keyHash, int maxParallelism) {_		return MathUtils.murmurHash(keyHash) % maxParallelism__	};assigns,the,given,key,to,a,key,group,index,param,key,hash,the,hash,of,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,return,the,key,group,to,which,the,given,key,is,assigned;public,static,int,compute,key,group,for,key,hash,int,key,hash,int,max,parallelism,return,math,utils,murmur,hash,key,hash,max,parallelism
KeyGroupRangeAssignment -> public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1472464402;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRangeAssignment -> public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1474382176;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRangeAssignment -> public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1484573482;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRangeAssignment -> public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1489153046;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRangeAssignment -> public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1491307406;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRangeAssignment -> public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId);1517576275;Computes the index of the operator to which a key-group belongs under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._0 < parallelism <= maxParallelism <= Short.MAX_VALUE must hold._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param keyGroupId     Id of a key-group. 0 <= keyGroupID < maxParallelism._@return The index of the operator to which elements from the given key-group should be routed under the given_parallelism and maxParallelism.;public static int computeOperatorIndexForKeyGroup(int maxParallelism, int parallelism, int keyGroupId) {_		return keyGroupId * parallelism / maxParallelism__	};computes,the,index,of,the,operator,to,which,a,key,group,belongs,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,0,parallelism,max,parallelism,short,must,hold,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,key,group,id,id,of,a,key,group,0,key,group,id,max,parallelism,return,the,index,of,the,operator,to,which,elements,from,the,given,key,group,should,be,routed,under,the,given,parallelism,and,max,parallelism;public,static,int,compute,operator,index,for,key,group,int,max,parallelism,int,parallelism,int,key,group,id,return,key,group,id,parallelism,max,parallelism
KeyGroupRangeAssignment -> public static int computeDefaultMaxParallelism(int operatorParallelism);1484573482;Computes a default maximum parallelism from the operator parallelism. This is used in case the user has not_explicitly configured a maximum parallelism to still allow a certain degree of scale-up.__@param operatorParallelism the operator parallelism as basis for computation._@return the computed default maximum parallelism.;public static int computeDefaultMaxParallelism(int operatorParallelism) {__		checkParallelismPreconditions(operatorParallelism)___		return Math.min(_				Math.max(_						MathUtils.roundUpToPowerOfTwo(operatorParallelism + (operatorParallelism / 2)),_						DEFAULT_LOWER_BOUND_MAX_PARALLELISM),_				UPPER_BOUND_MAX_PARALLELISM)__	};computes,a,default,maximum,parallelism,from,the,operator,parallelism,this,is,used,in,case,the,user,has,not,explicitly,configured,a,maximum,parallelism,to,still,allow,a,certain,degree,of,scale,up,param,operator,parallelism,the,operator,parallelism,as,basis,for,computation,return,the,computed,default,maximum,parallelism;public,static,int,compute,default,max,parallelism,int,operator,parallelism,check,parallelism,preconditions,operator,parallelism,return,math,min,math,max,math,utils,round,up,to,power,of,two,operator,parallelism,operator,parallelism,2
KeyGroupRangeAssignment -> public static int computeDefaultMaxParallelism(int operatorParallelism);1489153046;Computes a default maximum parallelism from the operator parallelism. This is used in case the user has not_explicitly configured a maximum parallelism to still allow a certain degree of scale-up.__@param operatorParallelism the operator parallelism as basis for computation._@return the computed default maximum parallelism.;public static int computeDefaultMaxParallelism(int operatorParallelism) {__		checkParallelismPreconditions(operatorParallelism)___		return Math.min(_				Math.max(_						MathUtils.roundUpToPowerOfTwo(operatorParallelism + (operatorParallelism / 2)),_						ExecutionConfig.DEFAULT_LOWER_BOUND_MAX_PARALLELISM),_				ExecutionConfig.UPPER_BOUND_MAX_PARALLELISM)__	};computes,a,default,maximum,parallelism,from,the,operator,parallelism,this,is,used,in,case,the,user,has,not,explicitly,configured,a,maximum,parallelism,to,still,allow,a,certain,degree,of,scale,up,param,operator,parallelism,the,operator,parallelism,as,basis,for,computation,return,the,computed,default,maximum,parallelism;public,static,int,compute,default,max,parallelism,int,operator,parallelism,check,parallelism,preconditions,operator,parallelism,return,math,min,math,max,math,utils,round,up,to,power,of,two,operator,parallelism,operator,parallelism,2,execution,config,execution,config
KeyGroupRangeAssignment -> public static int computeDefaultMaxParallelism(int operatorParallelism);1491307406;Computes a default maximum parallelism from the operator parallelism. This is used in case the user has not_explicitly configured a maximum parallelism to still allow a certain degree of scale-up.__@param operatorParallelism the operator parallelism as basis for computation._@return the computed default maximum parallelism.;public static int computeDefaultMaxParallelism(int operatorParallelism) {__		checkParallelismPreconditions(operatorParallelism)___		return Math.min(_				Math.max(_						MathUtils.roundUpToPowerOfTwo(operatorParallelism + (operatorParallelism / 2)),_						DEFAULT_LOWER_BOUND_MAX_PARALLELISM),_				UPPER_BOUND_MAX_PARALLELISM)__	};computes,a,default,maximum,parallelism,from,the,operator,parallelism,this,is,used,in,case,the,user,has,not,explicitly,configured,a,maximum,parallelism,to,still,allow,a,certain,degree,of,scale,up,param,operator,parallelism,the,operator,parallelism,as,basis,for,computation,return,the,computed,default,maximum,parallelism;public,static,int,compute,default,max,parallelism,int,operator,parallelism,check,parallelism,preconditions,operator,parallelism,return,math,min,math,max,math,utils,round,up,to,power,of,two,operator,parallelism,operator,parallelism,2
KeyGroupRangeAssignment -> public static int computeDefaultMaxParallelism(int operatorParallelism);1517576275;Computes a default maximum parallelism from the operator parallelism. This is used in case the user has not_explicitly configured a maximum parallelism to still allow a certain degree of scale-up.__@param operatorParallelism the operator parallelism as basis for computation._@return the computed default maximum parallelism.;public static int computeDefaultMaxParallelism(int operatorParallelism) {__		checkParallelismPreconditions(operatorParallelism)___		return Math.min(_				Math.max(_						MathUtils.roundUpToPowerOfTwo(operatorParallelism + (operatorParallelism / 2)),_						DEFAULT_LOWER_BOUND_MAX_PARALLELISM),_				UPPER_BOUND_MAX_PARALLELISM)__	};computes,a,default,maximum,parallelism,from,the,operator,parallelism,this,is,used,in,case,the,user,has,not,explicitly,configured,a,maximum,parallelism,to,still,allow,a,certain,degree,of,scale,up,param,operator,parallelism,the,operator,parallelism,as,basis,for,computation,return,the,computed,default,maximum,parallelism;public,static,int,compute,default,max,parallelism,int,operator,parallelism,check,parallelism,preconditions,operator,parallelism,return,math,min,math,max,math,utils,round,up,to,power,of,two,operator,parallelism,operator,parallelism,2
KeyGroupRangeAssignment -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1472464402;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must not be smaller than zero.")__		Preconditions.checkArgument(maxParallelism >= parallelism, "Maximum parallelism must not be smaller than parallelism.")__		Preconditions.checkArgument(maxParallelism <= (1 << 15), "Maximum parallelism must be smaller than 2^15.")___		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,preconditions,check,argument,parallelism,0,parallelism,must,not,be,smaller,than,zero,preconditions,check,argument,max,parallelism,parallelism,maximum,parallelism,must,not,be,smaller,than,parallelism,preconditions,check,argument,max,parallelism,1,15,maximum,parallelism,must,be,smaller,than,2,15,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRangeAssignment -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1474382176;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {_		Preconditions.checkArgument(parallelism > 0, "Parallelism must not be smaller than zero.")__		Preconditions.checkArgument(maxParallelism >= parallelism, "Maximum parallelism must not be smaller than parallelism.")__		Preconditions.checkArgument(maxParallelism <= (1 << 15), "Maximum parallelism must be smaller than 2^15.")___		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,preconditions,check,argument,parallelism,0,parallelism,must,not,be,smaller,than,zero,preconditions,check,argument,max,parallelism,parallelism,maximum,parallelism,must,not,be,smaller,than,parallelism,preconditions,check,argument,max,parallelism,1,15,maximum,parallelism,must,be,smaller,than,2,15,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRangeAssignment -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1484573482;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {__		checkParallelismPreconditions(parallelism)__		checkParallelismPreconditions(maxParallelism)___		Preconditions.checkArgument(maxParallelism >= parallelism,_				"Maximum parallelism must not be smaller than parallelism.")___		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,check,parallelism,preconditions,parallelism,check,parallelism,preconditions,max,parallelism,preconditions,check,argument,max,parallelism,parallelism,maximum,parallelism,must,not,be,smaller,than,parallelism,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRangeAssignment -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1489153046;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {__		checkParallelismPreconditions(parallelism)__		checkParallelismPreconditions(maxParallelism)___		Preconditions.checkArgument(maxParallelism >= parallelism,_				"Maximum parallelism must not be smaller than parallelism.")___		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,check,parallelism,preconditions,parallelism,check,parallelism,preconditions,max,parallelism,preconditions,check,argument,max,parallelism,parallelism,maximum,parallelism,must,not,be,smaller,than,parallelism,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRangeAssignment -> public static KeyGroupRange computeKeyGroupRangeForOperatorIndex( 			int maxParallelism, 			int parallelism, 			int operatorIndex);1491307406;Computes the range of key-groups that are assigned to a given operator under the given parallelism and maximum_parallelism.__IMPORTANT: maxParallelism must be <= Short.MAX_VALUE to avoid rounding problems in this method. If we ever want_to go beyond this boundary, this method must perform arithmetic on long values.__@param maxParallelism Maximal parallelism that the job was initially created with._@param parallelism    The current parallelism under which the job runs. Must be <= maxParallelism._@param operatorIndex  Id of a key-group. 0 <= keyGroupID < maxParallelism._@return;public static KeyGroupRange computeKeyGroupRangeForOperatorIndex(_			int maxParallelism,_			int parallelism,_			int operatorIndex) {__		checkParallelismPreconditions(parallelism)__		checkParallelismPreconditions(maxParallelism)___		Preconditions.checkArgument(maxParallelism >= parallelism,_				"Maximum parallelism must not be smaller than parallelism.")___		int start = operatorIndex == 0 ? 0 : ((operatorIndex * maxParallelism - 1) / parallelism) + 1__		int end = ((operatorIndex + 1) * maxParallelism - 1) / parallelism__		return new KeyGroupRange(start, end)__	};computes,the,range,of,key,groups,that,are,assigned,to,a,given,operator,under,the,given,parallelism,and,maximum,parallelism,important,max,parallelism,must,be,short,to,avoid,rounding,problems,in,this,method,if,we,ever,want,to,go,beyond,this,boundary,this,method,must,perform,arithmetic,on,long,values,param,max,parallelism,maximal,parallelism,that,the,job,was,initially,created,with,param,parallelism,the,current,parallelism,under,which,the,job,runs,must,be,max,parallelism,param,operator,index,id,of,a,key,group,0,key,group,id,max,parallelism,return;public,static,key,group,range,compute,key,group,range,for,operator,index,int,max,parallelism,int,parallelism,int,operator,index,check,parallelism,preconditions,parallelism,check,parallelism,preconditions,max,parallelism,preconditions,check,argument,max,parallelism,parallelism,maximum,parallelism,must,not,be,smaller,than,parallelism,int,start,operator,index,0,0,operator,index,max,parallelism,1,parallelism,1,int,end,operator,index,1,max,parallelism,1,parallelism,return,new,key,group,range,start,end
KeyGroupRangeAssignment -> public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism);1472464402;Assigns the given key to a parallel operator index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@param parallelism the current parallelism of the operator_@return the index of the parallel operator to which the given key should be routed.;public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism) {_		return computeOperatorIndexForKeyGroup(maxParallelism, parallelism, assignToKeyGroup(key, maxParallelism))__	};assigns,the,given,key,to,a,parallel,operator,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,param,parallelism,the,current,parallelism,of,the,operator,return,the,index,of,the,parallel,operator,to,which,the,given,key,should,be,routed;public,static,int,assign,key,to,parallel,operator,object,key,int,max,parallelism,int,parallelism,return,compute,operator,index,for,key,group,max,parallelism,parallelism,assign,to,key,group,key,max,parallelism
KeyGroupRangeAssignment -> public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism);1474382176;Assigns the given key to a parallel operator index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@param parallelism the current parallelism of the operator_@return the index of the parallel operator to which the given key should be routed.;public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism) {_		return computeOperatorIndexForKeyGroup(maxParallelism, parallelism, assignToKeyGroup(key, maxParallelism))__	};assigns,the,given,key,to,a,parallel,operator,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,param,parallelism,the,current,parallelism,of,the,operator,return,the,index,of,the,parallel,operator,to,which,the,given,key,should,be,routed;public,static,int,assign,key,to,parallel,operator,object,key,int,max,parallelism,int,parallelism,return,compute,operator,index,for,key,group,max,parallelism,parallelism,assign,to,key,group,key,max,parallelism
KeyGroupRangeAssignment -> public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism);1484573482;Assigns the given key to a parallel operator index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@param parallelism the current parallelism of the operator_@return the index of the parallel operator to which the given key should be routed.;public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism) {_		return computeOperatorIndexForKeyGroup(maxParallelism, parallelism, assignToKeyGroup(key, maxParallelism))__	};assigns,the,given,key,to,a,parallel,operator,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,param,parallelism,the,current,parallelism,of,the,operator,return,the,index,of,the,parallel,operator,to,which,the,given,key,should,be,routed;public,static,int,assign,key,to,parallel,operator,object,key,int,max,parallelism,int,parallelism,return,compute,operator,index,for,key,group,max,parallelism,parallelism,assign,to,key,group,key,max,parallelism
KeyGroupRangeAssignment -> public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism);1489153046;Assigns the given key to a parallel operator index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@param parallelism the current parallelism of the operator_@return the index of the parallel operator to which the given key should be routed.;public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism) {_		return computeOperatorIndexForKeyGroup(maxParallelism, parallelism, assignToKeyGroup(key, maxParallelism))__	};assigns,the,given,key,to,a,parallel,operator,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,param,parallelism,the,current,parallelism,of,the,operator,return,the,index,of,the,parallel,operator,to,which,the,given,key,should,be,routed;public,static,int,assign,key,to,parallel,operator,object,key,int,max,parallelism,int,parallelism,return,compute,operator,index,for,key,group,max,parallelism,parallelism,assign,to,key,group,key,max,parallelism
KeyGroupRangeAssignment -> public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism);1491307406;Assigns the given key to a parallel operator index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@param parallelism the current parallelism of the operator_@return the index of the parallel operator to which the given key should be routed.;public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism) {_		return computeOperatorIndexForKeyGroup(maxParallelism, parallelism, assignToKeyGroup(key, maxParallelism))__	};assigns,the,given,key,to,a,parallel,operator,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,param,parallelism,the,current,parallelism,of,the,operator,return,the,index,of,the,parallel,operator,to,which,the,given,key,should,be,routed;public,static,int,assign,key,to,parallel,operator,object,key,int,max,parallelism,int,parallelism,return,compute,operator,index,for,key,group,max,parallelism,parallelism,assign,to,key,group,key,max,parallelism
KeyGroupRangeAssignment -> public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism);1517576275;Assigns the given key to a parallel operator index.__@param key the key to assign_@param maxParallelism the maximum supported parallelism, aka the number of key-groups._@param parallelism the current parallelism of the operator_@return the index of the parallel operator to which the given key should be routed.;public static int assignKeyToParallelOperator(Object key, int maxParallelism, int parallelism) {_		return computeOperatorIndexForKeyGroup(maxParallelism, parallelism, assignToKeyGroup(key, maxParallelism))__	};assigns,the,given,key,to,a,parallel,operator,index,param,key,the,key,to,assign,param,max,parallelism,the,maximum,supported,parallelism,aka,the,number,of,key,groups,param,parallelism,the,current,parallelism,of,the,operator,return,the,index,of,the,parallel,operator,to,which,the,given,key,should,be,routed;public,static,int,assign,key,to,parallel,operator,object,key,int,max,parallelism,int,parallelism,return,compute,operator,index,for,key,group,max,parallelism,parallelism,assign,to,key,group,key,max,parallelism
