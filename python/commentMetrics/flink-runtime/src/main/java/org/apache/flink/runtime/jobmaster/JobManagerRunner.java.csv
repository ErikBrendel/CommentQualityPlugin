# id;timestamp;commentText;codeText;commentWords;codeWords
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1547809385;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, or the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			final SlotPoolFactory slotPoolFactory = DefaultSlotPoolFactory.fromConfiguration(_				configuration,_				rpcService)___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				slotPoolFactory,_				jobManagerSharedServices,_				heartbeatServices,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,or,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,final,slot,pool,factory,slot,pool,factory,default,slot,pool,factory,from,configuration,configuration,rpc,service,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,slot,pool,factory,job,manager,shared,services,heartbeat,services,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1548172161;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, or the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			final SlotPoolFactory slotPoolFactory = DefaultSlotPoolFactory.fromConfiguration(_				configuration,_				rpcService)___			_			this.jobMasterService = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				slotPoolFactory,_				jobManagerSharedServices,_				heartbeatServices,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,or,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,final,slot,pool,factory,slot,pool,factory,default,slot,pool,factory,from,configuration,configuration,rpc,service,this,job,master,service,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,slot,pool,factory,job,manager,shared,services,heartbeat,services,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1548172454;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, or the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.leaderGatewayFuture = new CompletableFuture<>()___			final SlotPoolFactory slotPoolFactory = DefaultSlotPoolFactory.fromConfiguration(_				configuration,_				rpcService)___			_			this.jobMasterService = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				slotPoolFactory,_				jobManagerSharedServices,_				heartbeatServices,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,or,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,leader,gateway,future,new,completable,future,final,slot,pool,factory,slot,pool,factory,default,slot,pool,factory,from,configuration,configuration,rpc,service,this,job,master,service,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,slot,pool,factory,job,manager,shared,services,heartbeat,services,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1473307213;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1474858756;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1475110587;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1476307516;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1476483941;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1476714136;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1484737699;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1487744143;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1488228996;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1488923142;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1490170142;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1498580984;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1499202952;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1502196227;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1503412385;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1503573855;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1503588382;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1503740736;Job completion notification triggered by JobManager;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1505768302;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1506014467;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1508327406;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1508426573;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1508494390;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1509535912;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1510061826;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFailed(Throwable cause);1510072058;Job completion notification triggered by JobManager.;@Override_	public void jobFailed(Throwable cause) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFailed(cause)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,failed,throwable,cause,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,failed,cause
JobManagerRunner -> @Override 	public void jobFinishedByOther();1473307213;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1474858756;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1475110587;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1476307516;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1476483941;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1476714136;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1484737699;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1487744143;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1488228996;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1488923142;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1490170142;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1498580984;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1499202952;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1502196227;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1503412385;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1503573855;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1503588382;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1503740736;Job completion notification triggered by self;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1505768302;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1506014467;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1508327406;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1508426573;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1508494390;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1509535912;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1510061826;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1510072058;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1513706333;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1516797761;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1516896219;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1517300523;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1517920262;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1518181651;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1518393108;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1518532391;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1518689284;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinishedByOther()__			}_		}_	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,try,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,by,other
JobManagerRunner -> @Override 	public void jobFinishedByOther();1518716619;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1518789872;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1519483171;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1519920387;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1521224209;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1521810529;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1521816389;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1522079710;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1522136713;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1526540287;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1528806299;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1529915670;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1547809385;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1548086094;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1548171383;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1548172161;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1548172454;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> @Override 	public void jobFinishedByOther();1548244623;Job completion notification triggered by self.;@Override_	public void jobFinishedByOther() {_		resultFuture.completeExceptionally(new JobNotFinishedException(jobGraph.getJobID()))__	};job,completion,notification,triggered,by,self;override,public,void,job,finished,by,other,result,future,complete,exceptionally,new,job,not,finished,exception,job,graph,get,job,id
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1516797761;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				blobServer,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,blob,server,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1517920262;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				blobServer,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath(),_				jobManagerServices.backPressureStatsTracker)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,blob,server,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,job,manager,services,back,pressure,stats,tracker,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1518181651;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				blobServer,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath(),_				jobManagerServices.backPressureStatsTrackerImpl)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,blob,server,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,job,manager,services,back,pressure,stats,tracker,impl,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1518393108;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerSharedServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			this.timeout = jobManagerSharedServices.getTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,shared,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,timeout,job,manager,shared,services,get,timeout,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1518532391;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerSharedServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,shared,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1518689284;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerSharedServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())___			this.resultFuture = new CompletableFuture<>()__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,shared,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,this,result,future,new,completable,future,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1476307516;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception_	{__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_					jobGraph, configuration,_					rpcService,_					haServices,_					jobManagerServices.executorService,_					jobManagerServices.libraryCacheManager,_					jobManagerServices.restartStrategyFactory,_					jobManagerServices.rpcAskTimeout,_					jobManagerMetrics,_					this,_					this,_					userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,job,graph,configuration,rpc,service,ha,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1476483941;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception_	{__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_					jobGraph, configuration,_					rpcService,_					haServices,_					jobManagerServices.executorService,_					jobManagerServices.libraryCacheManager,_					jobManagerServices.restartStrategyFactory,_					jobManagerServices.rpcAskTimeout,_					jobManagerMetrics,_					this,_					this,_					userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,job,graph,configuration,rpc,service,ha,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1476714136;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception_	{__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_					jobGraph, configuration,_					rpcService,_					haServices,_					jobManagerServices.executorService,_					jobManagerServices.libraryCacheManager,_					jobManagerServices.restartStrategyFactory,_					jobManagerServices.rpcAskTimeout,_					jobManagerMetrics,_					this,_					this,_					userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,job,graph,configuration,rpc,service,ha,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1484737699;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception_	{__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			final ResourceID resourceID = ResourceID.generate()__			final HeartbeatManagerSenderImpl<Void, Void> jobManagerHeartbeatManager = new HeartbeatManagerSenderImpl<>(_					configuration.getLong(HeartbeatManagerOptions.HEARTBEAT_INTERVAL),_					configuration.getLong(HeartbeatManagerOptions.HEARTBEAT_TIMEOUT),_					resourceID,_					rpcService.getExecutor(),_					rpcService.getScheduledExecutor(),_					log)___			_			this.jobManager = new JobMaster(_					jobGraph, configuration,_					rpcService,_					haServices,_					jobManagerServices.executorService,_					jobManagerServices.libraryCacheManager,_					jobManagerServices.restartStrategyFactory,_					jobManagerServices.rpcAskTimeout,_					jobManagerMetrics,_					resourceID,_					jobManagerHeartbeatManager,_					this,_					this,_					userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,resource,id,resource,id,resource,id,generate,final,heartbeat,manager,sender,impl,void,void,job,manager,heartbeat,manager,new,heartbeat,manager,sender,impl,configuration,get,long,heartbeat,manager,options,configuration,get,long,heartbeat,manager,options,resource,id,rpc,service,get,executor,rpc,service,get,scheduled,executor,log,this,job,manager,new,job,master,job,graph,configuration,rpc,service,ha,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,resource,id,job,manager,heartbeat,manager,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1487744143;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception_	{__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_					jobGraph, configuration,_					rpcService,_					haServices,_					jobManagerServices.executorService,_					jobManagerServices.libraryCacheManager,_					jobManagerServices.restartStrategyFactory,_					jobManagerServices.rpcAskTimeout,_					jobManagerMetrics,_					this,_					this,_					userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,job,graph,configuration,rpc,service,ha,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1488228996;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception_	{__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_					jobGraph, configuration,_					rpcService,_					haServices,_					jobManagerServices.executorService,_					jobManagerServices.libraryCacheManager,_					jobManagerServices.restartStrategyFactory,_					jobManagerServices.rpcAskTimeout,_					jobManagerMetrics,_					this,_					this,_					userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,job,graph,configuration,rpc,service,ha,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1473307213;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1474858756;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1475110587;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			shutdownInternally()__		}_		finally {_			if (toNotify != null) {_				toNotify.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,shutdown,internally,finally,if,to,notify,null,to,notify,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1476307516;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1476483941;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1476714136;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1484737699;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1487744143;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1488228996;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1488923142;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1490170142;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1498580984;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1499202952;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1502196227;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1503412385;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1503573855;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1503588382;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1503740736;Job completion notification triggered by JobManager;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1505768302;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1506014467;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1508327406;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1508426573;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1508494390;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1509535912;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1510061826;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> @Override 	public void jobFinished(JobExecutionResult result);1510072058;Job completion notification triggered by JobManager.;@Override_	public void jobFinished(JobExecutionResult result) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobFinished(result)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,finished,job,execution,result,result,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,finished,result
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1510061826;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1510072058;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1513706333;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler, 			@Nullable final String restAddress) throws Exception;1516896219;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1473307213;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		try {_			if (toNotify != null) {_				toNotify.onFatalError(exception)__			}_		}_		finally {_			log.error("JobManager runner encountered a fatal error.", exception)__			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,if,to,notify,null,to,notify,on,fatal,error,exception,finally,log,error,job,manager,runner,encountered,a,fatal,error,exception,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1474858756;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		try {_			if (toNotify != null) {_				toNotify.onFatalError(exception)__			}_		}_		finally {_			log.error("JobManager runner encountered a fatal error.", exception)__			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,if,to,notify,null,to,notify,on,fatal,error,exception,finally,log,error,job,manager,runner,encountered,a,fatal,error,exception,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1475110587;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		try {_			if (toNotify != null) {_				toNotify.onFatalError(exception)__			}_		}_		finally {_			log.error("JobManager runner encountered a fatal error.", exception)__			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,if,to,notify,null,to,notify,on,fatal,error,exception,finally,log,error,job,manager,runner,encountered,a,fatal,error,exception,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1476307516;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1476483941;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1476714136;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1484737699;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1487744143;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1488228996;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1488923142;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1490170142;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1498580984;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1499202952;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1502196227;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1503412385;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1503573855;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1503588382;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1503740736;Job completion notification triggered by JobManager or self;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1505768302;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1506014467;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1508327406;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1508426573;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1508494390;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1509535912;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1510061826;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1510072058;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1513706333;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1516797761;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1516896219;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1517300523;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1517920262;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1518181651;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1518393108;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1518532391;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1518689284;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		_		try {_			if (errorHandler != null) {_				errorHandler.onFatalError(exception)__			}_		}_		finally {_			_			_			shutdownInternally()__		}_	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,try,if,error,handler,null,error,handler,on,fatal,error,exception,finally,shutdown,internally
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1518716619;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1518789872;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1519483171;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1519920387;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1521224209;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1521810529;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1521816389;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> @Override 	public void onFatalError(Throwable exception);1522079710;Job completion notification triggered by JobManager or self.;@Override_	public void onFatalError(Throwable exception) {_		_		_		_		try {_			log.error("JobManager runner encountered a fatal error.", exception)__		} catch (Throwable ignored) {}__		resultFuture.completeExceptionally(exception)__	};job,completion,notification,triggered,by,job,manager,or,self;override,public,void,on,fatal,error,throwable,exception,try,log,error,job,manager,runner,encountered,a,fatal,error,exception,catch,throwable,ignored,result,future,complete,exceptionally,exception
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1488923142;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				resourceId,_				jobGraph,_				configuration,_				rpcService,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,resource,id,job,graph,configuration,rpc,service,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1490170142;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1498580984;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1499202952;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1502196227;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1503412385;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1503573855;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			try {_				jobManagerServices.shutdown()__			} catch (Throwable tt) {_				log.error("Error while shutting down JobManager services", tt)__			}__			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,try,job,manager,services,shutdown,catch,throwable,tt,log,error,error,while,shutting,down,job,manager,services,tt,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1503588382;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1503740736;<p>Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};p,exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1505768302;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1506014467;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1508327406;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1508494390;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = new JobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,new,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final JobManagerServices jobManagerServices, 			final MetricRegistry metricRegistry, 			final OnCompletionActions toNotifyOnComplete, 			final FatalErrorHandler errorHandler) throws Exception;1509535912;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final JobManagerServices jobManagerServices,_			final MetricRegistry metricRegistry,_			final OnCompletionActions toNotifyOnComplete,_			final FatalErrorHandler errorHandler) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.toNotifyOnComplete = checkNotNull(toNotifyOnComplete)__			this.errorHandler = checkNotNull(errorHandler)__			this.jobManagerServices = checkNotNull(jobManagerServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final BlobLibraryCacheManager libraryCacheManager = jobManagerServices.libraryCacheManager__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			_			this.jobManager = new JobMaster(_				rpcService,_				resourceId,_				jobGraph,_				configuration,_				haServices,_				heartbeatServices,_				jobManagerServices.executorService,_				jobManagerServices.blobServer,_				jobManagerServices.libraryCacheManager,_				jobManagerServices.restartStrategyFactory,_				jobManagerServices.rpcAskTimeout,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader)___			this.timeout = jobManagerServices.rpcAskTimeout__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,job,manager,services,job,manager,services,final,metric,registry,metric,registry,final,on,completion,actions,to,notify,on,complete,final,fatal,error,handler,error,handler,throws,exception,job,manager,metric,group,job,manager,metrics,null,try,this,job,graph,check,not,null,job,graph,this,to,notify,on,complete,check,not,null,to,notify,on,complete,this,error,handler,check,not,null,error,handler,this,job,manager,services,check,not,null,job,manager,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,blob,library,cache,manager,library,cache,manager,job,manager,services,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,job,manager,new,job,master,rpc,service,resource,id,job,graph,configuration,ha,services,heartbeat,services,job,manager,services,executor,service,job,manager,services,blob,server,job,manager,services,library,cache,manager,job,manager,services,restart,strategy,factory,job,manager,services,rpc,ask,timeout,job,manager,metrics,this,this,user,code,loader,this,timeout,job,manager,services,rpc,ask,timeout,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1476307516;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1476483941;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1476714136;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1484737699;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1487744143;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1488228996;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1488923142;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1490170142;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1498580984;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1499202952;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1502196227;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1503412385;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1503573855;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1503588382;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1503740736;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1505768302;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1506014467;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1508327406;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1508426573;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1508494390;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1509535912;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1510061826;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1510072058;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1513706333;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1516797761;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1516896219;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1517300523;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1517920262;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1518181651;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1518393108;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1518532391;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1518689284;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1518716619;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1518789872;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1519483171;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1519920387;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1521224209;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1521810529;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1521816389;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1522079710;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1522136713;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1526540287;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1528806299;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1529915670;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1547809385;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1548086094;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1548171383;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1548172161;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1548172454;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> private void unregisterJobFromHighAvailability();1548244623;Marks this runner's job as not running. Other JobManager will not recover the job_after this call.__<p>This method never throws an exception.;private void unregisterJobFromHighAvailability() {_		try {_			runningJobsRegistry.setJobFinished(jobGraph.getJobID())__		}_		catch (Throwable t) {_			log.error("Could not un-register from high-availability services job {} ({})." +_					"Other JobManager's may attempt to recover it and re-execute it.",_					jobGraph.getName(), jobGraph.getJobID(), t)__		}_	};marks,this,runner,s,job,as,not,running,other,job,manager,will,not,recover,the,job,after,this,call,p,this,method,never,throws,an,exception;private,void,unregister,job,from,high,availability,try,running,jobs,registry,set,job,finished,job,graph,get,job,id,catch,throwable,t,log,error,could,not,un,register,from,high,availability,services,job,other,job,manager,s,may,attempt,to,recover,it,and,re,execute,it,job,graph,get,name,job,graph,get,job,id,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1522136713;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1526540287;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1528806299;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1529915670;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			final SlotPoolFactory slotPoolFactory = DefaultSlotPoolFactory.fromConfiguration(_				configuration,_				rpcService)___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				slotPoolFactory,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,final,slot,pool,factory,slot,pool,factory,default,slot,pool,factory,from,configuration,configuration,rpc,service,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,slot,pool,factory,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1548244623;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, or the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			final SlotPoolFactory slotPoolFactory = DefaultSlotPoolFactory.fromConfiguration(_				configuration,_				rpcService)___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				slotPoolFactory,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				fatalErrorHandler,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,or,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,final,slot,pool,factory,slot,pool,factory,default,slot,pool,factory,from,configuration,configuration,rpc,service,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,slot,pool,factory,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,fatal,error,handler,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			@Nullable final String restAddress) throws Exception;1517300523;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerSharedServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,shared,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			@Nullable final String restAddress) throws Exception;1518716619;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerSharedServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,shared,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			@Nullable final String restAddress) throws Exception;1518789872;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__<p>This JobManagerRunner assumes that it owns the given {@code JobManagerSharedServices}._It will shut them down on error and on calls to {@link #shutdown()}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,p,this,job,manager,runner,assumes,that,it,owns,the,given,code,job,manager,shared,services,it,will,shut,them,down,on,error,and,on,calls,to,link,shutdown,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			@Nullable final String restAddress) throws Exception;1519483171;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final MetricRegistry metricRegistry, 			@Nullable final String restAddress) throws Exception;1519920387;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final MetricRegistry metricRegistry,_			@Nullable final String restAddress) throws Exception {__		JobManagerMetricGroup jobManagerMetrics = null___		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			final String hostAddress = rpcService.getAddress().isEmpty() ? "localhost" : rpcService.getAddress()__			jobManagerMetrics = MetricUtils.instantiateJobManagerMetricGroup(metricRegistry, hostAddress)__			this.jobManagerMetricGroup = jobManagerMetrics___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerMetrics,_				this,_				this,_				userCodeLoader,_				restAddress,_				metricRegistry.getMetricQueryServicePath())__		}_		catch (Throwable t) {_			_			if (jobManagerMetrics != null) {_				jobManagerMetrics.close()__			}__			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,metric,registry,metric,registry,nullable,final,string,rest,address,throws,exception,job,manager,metric,group,job,manager,metrics,null,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,string,host,address,rpc,service,get,address,is,empty,localhost,rpc,service,get,address,job,manager,metrics,metric,utils,instantiate,job,manager,metric,group,metric,registry,host,address,this,job,manager,metric,group,job,manager,metrics,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,metrics,this,this,user,code,loader,rest,address,metric,registry,get,metric,query,service,path,catch,throwable,t,if,job,manager,metrics,null,job,manager,metrics,close,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory) throws Exception;1521816389;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			_			this.jobManager = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,job,manager,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,this,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final ResourceID resourceId, 			final JobGraph jobGraph, 			final Configuration configuration, 			final RpcService rpcService, 			final HighAvailabilityServices haServices, 			final HeartbeatServices heartbeatServices, 			final BlobServer blobServer, 			final JobManagerSharedServices jobManagerSharedServices, 			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory) throws Exception;1522079710;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, ot the Job could not be initialized.;public JobManagerRunner(_			final ResourceID resourceId,_			final JobGraph jobGraph,_			final Configuration configuration,_			final RpcService rpcService,_			final HighAvailabilityServices haServices,_			final HeartbeatServices heartbeatServices,_			final BlobServer blobServer,_			final JobManagerSharedServices jobManagerSharedServices,_			final JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.jobManagerSharedServices = checkNotNull(jobManagerSharedServices)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			final LibraryCacheManager libraryCacheManager = jobManagerSharedServices.getLibraryCacheManager()__			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration)___			this.rpcTimeout = jobMasterConfiguration.getRpcTimeout()___			this.leaderGatewayFuture = new CompletableFuture<>()___			_			this.jobMaster = new JobMaster(_				rpcService,_				jobMasterConfiguration,_				resourceId,_				jobGraph,_				haServices,_				jobManagerSharedServices,_				heartbeatServices,_				blobServer,_				jobManagerJobMetricGroupFactory,_				this,_				this,_				userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,ot,the,job,could,not,be,initialized;public,job,manager,runner,final,resource,id,resource,id,final,job,graph,job,graph,final,configuration,configuration,final,rpc,service,rpc,service,final,high,availability,services,ha,services,final,heartbeat,services,heartbeat,services,final,blob,server,blob,server,final,job,manager,shared,services,job,manager,shared,services,final,job,manager,job,metric,group,factory,job,manager,job,metric,group,factory,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,job,manager,shared,services,check,not,null,job,manager,shared,services,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,final,library,cache,manager,library,cache,manager,job,manager,shared,services,get,library,cache,manager,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,final,job,master,configuration,job,master,configuration,job,master,configuration,from,configuration,configuration,this,rpc,timeout,job,master,configuration,get,rpc,timeout,this,leader,gateway,future,new,completable,future,this,job,master,new,job,master,rpc,service,job,master,configuration,resource,id,job,graph,ha,services,job,manager,shared,services,heartbeat,services,blob,server,job,manager,job,metric,group,factory,this,this,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1516797761;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1516896219;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1517300523;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		resultFuture.complete(executionGraph)__		unregisterJobFromHighAvailability()__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,result,future,complete,execution,graph,unregister,job,from,high,availability
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1517920262;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1518181651;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1518393108;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1518532391;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1518689284;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		resultFuture.complete(executionGraph)___		try {_			unregisterJobFromHighAvailability()__			shutdownInternally()__		}_		finally {_			if (toNotifyOnComplete != null) {_				toNotifyOnComplete.jobReachedGloballyTerminalState(executionGraph)__			}_		}_	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,result,future,complete,execution,graph,try,unregister,job,from,high,availability,shutdown,internally,finally,if,to,notify,on,complete,null,to,notify,on,complete,job,reached,globally,terminal,state,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1518716619;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		resultFuture.complete(executionGraph)__		unregisterJobFromHighAvailability()__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,result,future,complete,execution,graph,unregister,job,from,high,availability
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1518789872;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		resultFuture.complete(executionGraph)__		unregisterJobFromHighAvailability()__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,result,future,complete,execution,graph,unregister,job,from,high,availability
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1519483171;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		resultFuture.complete(executionGraph)__		unregisterJobFromHighAvailability()__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,result,future,complete,execution,graph,unregister,job,from,high,availability
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1519920387;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		unregisterJobFromHighAvailability()__		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1521224209;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		unregisterJobFromHighAvailability()__		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1521810529;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		unregisterJobFromHighAvailability()__		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1521816389;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		unregisterJobFromHighAvailability()__		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1522079710;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		unregisterJobFromHighAvailability()__		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1522136713;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		_		unregisterJobFromHighAvailability()__		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1526540287;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1528806299;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1529915670;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1547809385;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1548086094;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1548171383;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1548172161;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1548172454;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> @Override 	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph);1548244623;Job completion notification triggered by JobManager.;@Override_	public void jobReachedGloballyTerminalState(ArchivedExecutionGraph executionGraph) {_		unregisterJobFromHighAvailability()__		_		resultFuture.complete(executionGraph)__	};job,completion,notification,triggered,by,job,manager;override,public,void,job,reached,globally,terminal,state,archived,execution,graph,execution,graph,unregister,job,from,high,availability,result,future,complete,execution,graph
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final JobMasterServiceFactory jobMasterFactory, 			final HighAvailabilityServices haServices, 			final LibraryCacheManager libraryCacheManager, 			final Executor executor, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1548086094;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, or the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final JobMasterServiceFactory jobMasterFactory,_			final HighAvailabilityServices haServices,_			final LibraryCacheManager libraryCacheManager,_			final Executor executor,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()__		this.leadershipOperation = CompletableFuture.completedFuture(null)___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.libraryCacheManager = checkNotNull(libraryCacheManager)__			this.executor = checkNotNull(executor)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			this.leaderGatewayFuture = new CompletableFuture<>()___			_			this.jobMasterService = jobMasterFactory.createJobMasterService(jobGraph, this, userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,or,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,job,master,service,factory,job,master,factory,final,high,availability,services,ha,services,final,library,cache,manager,library,cache,manager,final,executor,executor,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,this,leadership,operation,completable,future,completed,future,null,try,this,job,graph,check,not,null,job,graph,this,library,cache,manager,check,not,null,library,cache,manager,this,executor,check,not,null,executor,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,leader,gateway,future,new,completable,future,this,job,master,service,job,master,factory,create,job,master,service,job,graph,this,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
JobManagerRunner -> public JobManagerRunner( 			final JobGraph jobGraph, 			final JobMasterServiceFactory jobMasterFactory, 			final HighAvailabilityServices haServices, 			final LibraryCacheManager libraryCacheManager, 			final Executor executor, 			final FatalErrorHandler fatalErrorHandler) throws Exception;1548171383;Exceptions that occur while creating the JobManager or JobManagerRunner are directly_thrown and not reported to the given {@code FatalErrorHandler}.__@throws Exception Thrown if the runner cannot be set up, because either one of the_required services could not be started, or the Job could not be initialized.;public JobManagerRunner(_			final JobGraph jobGraph,_			final JobMasterServiceFactory jobMasterFactory,_			final HighAvailabilityServices haServices,_			final LibraryCacheManager libraryCacheManager,_			final Executor executor,_			final FatalErrorHandler fatalErrorHandler) throws Exception {__		this.resultFuture = new CompletableFuture<>()__		this.terminationFuture = new CompletableFuture<>()___		_		try {_			this.jobGraph = checkNotNull(jobGraph)__			this.libraryCacheManager = checkNotNull(libraryCacheManager)__			this.executor = checkNotNull(executor)__			this.fatalErrorHandler = checkNotNull(fatalErrorHandler)___			checkArgument(jobGraph.getNumberOfVertices() > 0, "The given job is empty")___			_			try {_				libraryCacheManager.registerJob(_						jobGraph.getJobID(), jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths())__			} catch (IOException e) {_				throw new Exception("Cannot set up the user code libraries: " + e.getMessage(), e)__			}__			final ClassLoader userCodeLoader = libraryCacheManager.getClassLoader(jobGraph.getJobID())__			if (userCodeLoader == null) {_				throw new Exception("The user code class loader could not be initialized.")__			}__			_			this.runningJobsRegistry = haServices.getRunningJobsRegistry()__			this.leaderElectionService = haServices.getJobManagerLeaderElectionService(jobGraph.getJobID())___			this.leaderGatewayFuture = new CompletableFuture<>()___			_			this.jobMasterService = jobMasterFactory.createJobMasterService(jobGraph, this, userCodeLoader)__		}_		catch (Throwable t) {_			terminationFuture.completeExceptionally(t)__			resultFuture.completeExceptionally(t)___			throw new JobExecutionException(jobGraph.getJobID(), "Could not set up JobManager", t)__		}_	};exceptions,that,occur,while,creating,the,job,manager,or,job,manager,runner,are,directly,thrown,and,not,reported,to,the,given,code,fatal,error,handler,throws,exception,thrown,if,the,runner,cannot,be,set,up,because,either,one,of,the,required,services,could,not,be,started,or,the,job,could,not,be,initialized;public,job,manager,runner,final,job,graph,job,graph,final,job,master,service,factory,job,master,factory,final,high,availability,services,ha,services,final,library,cache,manager,library,cache,manager,final,executor,executor,final,fatal,error,handler,fatal,error,handler,throws,exception,this,result,future,new,completable,future,this,termination,future,new,completable,future,try,this,job,graph,check,not,null,job,graph,this,library,cache,manager,check,not,null,library,cache,manager,this,executor,check,not,null,executor,this,fatal,error,handler,check,not,null,fatal,error,handler,check,argument,job,graph,get,number,of,vertices,0,the,given,job,is,empty,try,library,cache,manager,register,job,job,graph,get,job,id,job,graph,get,user,jar,blob,keys,job,graph,get,classpaths,catch,ioexception,e,throw,new,exception,cannot,set,up,the,user,code,libraries,e,get,message,e,final,class,loader,user,code,loader,library,cache,manager,get,class,loader,job,graph,get,job,id,if,user,code,loader,null,throw,new,exception,the,user,code,class,loader,could,not,be,initialized,this,running,jobs,registry,ha,services,get,running,jobs,registry,this,leader,election,service,ha,services,get,job,manager,leader,election,service,job,graph,get,job,id,this,leader,gateway,future,new,completable,future,this,job,master,service,job,master,factory,create,job,master,service,job,graph,this,user,code,loader,catch,throwable,t,termination,future,complete,exceptionally,t,result,future,complete,exceptionally,t,throw,new,job,execution,exception,job,graph,get,job,id,could,not,set,up,job,manager,t
