# id;timestamp;commentText;codeText;commentWords;codeWords
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1489680183;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1490105415;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1495082080;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1499358401;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1507763843;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1512655132;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1529915670;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1531408830;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1532915642;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1537512807;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1539595873;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String createRandomName(String prefix);1539833178;Creates a random name of the form prefix_X, where X is an increasing number.__@param prefix Prefix string to prepend to the monotonically increasing name offset number_@return A random name of the form prefix_X where X is an increasing number;public static String createRandomName(String prefix) {_		Preconditions.checkNotNull(prefix, "Prefix must not be null.")___		long nameOffset___		_		do {_			nameOffset = nextNameOffset.get()__		} while (!nextNameOffset.compareAndSet(nameOffset, nameOffset + 1L))___		return prefix + '_' + nameOffset__	};creates,a,random,name,of,the,form,where,x,is,an,increasing,number,param,prefix,prefix,string,to,prepend,to,the,monotonically,increasing,name,offset,number,return,a,random,name,of,the,form,where,x,is,an,increasing,number;public,static,string,create,random,name,string,prefix,preconditions,check,not,null,prefix,prefix,must,not,be,null,long,name,offset,do,name,offset,next,name,offset,get,while,next,name,offset,compare,and,set,name,offset,name,offset,1l,return,prefix,name,offset
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1489680183;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(_					ConfigConstants.AKKA_SSL_ENABLED,_					ConfigConstants.DEFAULT_AKKA_SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,config,constants,config,constants,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1490105415;@param hostname     The hostname or address where the target RPC service is listening._@param port         The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param config       The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(_					ConfigConstants.AKKA_SSL_ENABLED,_					ConfigConstants.DEFAULT_AKKA_SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,config,constants,config,constants,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1495082080;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1499358401;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1507763843;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1512655132;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1529915670;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.getSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,get,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1531408830;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.isInternalSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,is,internal,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1532915642;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.isInternalSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,is,internal,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1537512807;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.isInternalSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,is,internal,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1539595873;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.isInternalSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,is,internal,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static String getRpcUrl( 		String hostname, 		int port, 		String endpointName, 		HighAvailabilityServicesUtils.AddressResolution addressResolution, 		Configuration config) throws UnknownHostException;1539833178;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param config The configuration from which to deduce further settings.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_		String hostname,_		int port,_		String endpointName,_		HighAvailabilityServicesUtils.AddressResolution addressResolution,_		Configuration config) throws UnknownHostException {__		checkNotNull(config, "config is null")___		final boolean sslEnabled = config.getBoolean(AkkaOptions.SSL_ENABLED) &&_				SSLUtils.isInternalSSLEnabled(config)___		return getRpcUrl(_			hostname,_			port,_			endpointName,_			addressResolution,_			sslEnabled ? AkkaProtocol.SSL_TCP : AkkaProtocol.TCP)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,config,the,configuration,from,which,to,deduce,further,settings,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,configuration,config,throws,unknown,host,exception,check,not,null,config,config,is,null,final,boolean,ssl,enabled,config,get,boolean,akka,options,sslutils,is,internal,sslenabled,config,return,get,rpc,url,hostname,port,endpoint,name,address,resolution,ssl,enabled,akka,protocol,akka,protocol,tcp
AkkaRpcServiceUtils -> public static RpcService createRpcService( 			String hostname, 			String portRangeDefinition, 			Configuration configuration) throws Exception;1539595873;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param portRangeDefinition   The port range to start TaskManager on._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(_			String hostname,_			String portRangeDefinition,_			Configuration configuration) throws Exception {_		final ActorSystem actorSystem = BootstrapTools.startActorSystem(configuration, hostname, portRangeDefinition, LOG)__		return instantiateAkkaRpcService(configuration, actorSystem)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,range,definition,the,port,range,to,start,task,manager,on,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,string,port,range,definition,configuration,configuration,throws,exception,final,actor,system,actor,system,bootstrap,tools,start,actor,system,configuration,hostname,port,range,definition,log,return,instantiate,akka,rpc,service,configuration,actor,system
AkkaRpcServiceUtils -> public static RpcService createRpcService( 			String hostname, 			String portRangeDefinition, 			Configuration configuration) throws Exception;1539833178;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param portRangeDefinition   The port range to start TaskManager on._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(_			String hostname,_			String portRangeDefinition,_			Configuration configuration) throws Exception {_		final ActorSystem actorSystem = BootstrapTools.startActorSystem(configuration, hostname, portRangeDefinition, LOG)__		return instantiateAkkaRpcService(configuration, actorSystem)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,range,definition,the,port,range,to,start,task,manager,on,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,string,port,range,definition,configuration,configuration,throws,exception,final,actor,system,actor,system,bootstrap,tools,start,actor,system,configuration,hostname,port,range,definition,log,return,instantiate,akka,rpc,service,configuration,actor,system
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1489680183;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.hostAndPortToUrlString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,host,and,port,to,url,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1490105415;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.hostAndPortToUrlString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,host,and,port,to,url,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1495082080;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.hostAndPortToUrlString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,host,and,port,to,url,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1499358401;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.hostAndPortToUrlString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,host,and,port,to,url,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1507763843;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1512655132;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = Time.milliseconds(AkkaUtils.getTimeout(configuration).toMillis())__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,time,milliseconds,akka,utils,get,timeout,configuration,to,millis,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1529915670;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = AkkaUtils.getTimeoutAsTime(configuration)__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,akka,utils,get,timeout,as,time,configuration,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1531408830;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = AkkaUtils.getTimeoutAsTime(configuration)__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,akka,utils,get,timeout,as,time,configuration,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception;1532915642;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(String hostname, int port, Configuration configuration) throws Exception {_		LOG.info("Starting AkkaRpcService at {}.", NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port))___		final ActorSystem actorSystem___		try {_			Config akkaConfig___			if (hostname != null && !hostname.isEmpty()) {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration, hostname, port)__			} else {_				_				akkaConfig = AkkaUtils.getAkkaConfig(configuration)__			}__			LOG.debug("Using akka configuration \n {}.", akkaConfig)___			actorSystem = AkkaUtils.createActorSystem(akkaConfig)__		} catch (Throwable t) {_			if (t instanceof ChannelException) {_				Throwable cause = t.getCause()__				if (cause != null && t.getCause() instanceof java.net.BindException) {_					String address = NetUtils.hostAndPortToUrlString(hostname, port)__					throw new IOException("Unable to bind AkkaRpcService actor system to address " +_						address + " - " + cause.getMessage(), t)__				}_			}_			throw new Exception("Could not create TaskManager actor system", t)__		}__		final Time timeout = AkkaUtils.getTimeoutAsTime(configuration)__		return new AkkaRpcService(actorSystem, timeout)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,log,info,starting,akka,rpc,service,at,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,final,actor,system,actor,system,try,config,akka,config,if,hostname,null,hostname,is,empty,akka,config,akka,utils,get,akka,config,configuration,hostname,port,else,akka,config,akka,utils,get,akka,config,configuration,log,debug,using,akka,configuration,n,akka,config,actor,system,akka,utils,create,actor,system,akka,config,catch,throwable,t,if,t,instanceof,channel,exception,throwable,cause,t,get,cause,if,cause,null,t,get,cause,instanceof,java,net,bind,exception,string,address,net,utils,host,and,port,to,url,string,hostname,port,throw,new,ioexception,unable,to,bind,akka,rpc,service,actor,system,to,address,address,cause,get,message,t,throw,new,exception,could,not,create,task,manager,actor,system,t,final,time,timeout,akka,utils,get,timeout,as,time,configuration,return,new,akka,rpc,service,actor,system,timeout
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1489680183;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1490105415;@param hostname     The hostname or address where the target RPC service is listening._@param port         The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param akkaProtocol       True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1495082080;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1499358401;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1507763843;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1512655132;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1529915670;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1531408830;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AkKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1532915642;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AKKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1537512807;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AKKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1539595873;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AKKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> public static String getRpcUrl( 			String hostname, 			int port, 			String endpointName, 			HighAvailabilityServicesUtils.AddressResolution addressResolution, 			AkkaProtocol akkaProtocol) throws UnknownHostException;1539833178;@param hostname The hostname or address where the target RPC service is listening._@param port The port where the target RPC service is listening._@param endpointName The name of the RPC endpoint._@param addressResolution Whether to try address resolution of the given hostname or not._This allows to fail fast in case that the hostname cannot be resolved._@param akkaProtocol True, if security/encryption is enabled, false otherwise.__@return The RPC URL of the specified RPC endpoint.;public static String getRpcUrl(_			String hostname,_			int port,_			String endpointName,_			HighAvailabilityServicesUtils.AddressResolution addressResolution,_			AkkaProtocol akkaProtocol) throws UnknownHostException {__		checkNotNull(hostname, "hostname is null")__		checkNotNull(endpointName, "endpointName is null")__		checkArgument(port > 0 && port <= 65535, "port must be in [1, 65535]")___		final String protocolPrefix = akkaProtocol == AkkaProtocol.SSL_TCP ? AKKA_SSL_TCP : AKKA_TCP___		if (addressResolution == AddressResolution.TRY_ADDRESS_RESOLUTION) {_			_			_			InetAddress.getByName(hostname)__		}__		final String hostPort = NetUtils.unresolvedHostAndPortToNormalizedString(hostname, port)___		return String.format("%s://flink@%s/user/%s", protocolPrefix, hostPort, endpointName)__	};param,hostname,the,hostname,or,address,where,the,target,rpc,service,is,listening,param,port,the,port,where,the,target,rpc,service,is,listening,param,endpoint,name,the,name,of,the,rpc,endpoint,param,address,resolution,whether,to,try,address,resolution,of,the,given,hostname,or,not,this,allows,to,fail,fast,in,case,that,the,hostname,cannot,be,resolved,param,akka,protocol,true,if,security,encryption,is,enabled,false,otherwise,return,the,rpc,url,of,the,specified,rpc,endpoint;public,static,string,get,rpc,url,string,hostname,int,port,string,endpoint,name,high,availability,services,utils,address,resolution,address,resolution,akka,protocol,akka,protocol,throws,unknown,host,exception,check,not,null,hostname,hostname,is,null,check,not,null,endpoint,name,endpoint,name,is,null,check,argument,port,0,port,65535,port,must,be,in,1,65535,final,string,protocol,prefix,akka,protocol,akka,protocol,if,address,resolution,address,resolution,inet,address,get,by,name,hostname,final,string,host,port,net,utils,unresolved,host,and,port,to,normalized,string,hostname,port,return,string,format,s,flink,s,user,s,protocol,prefix,host,port,endpoint,name
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1489680183;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1490105415;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1495082080;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1499358401;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1507763843;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1512655132;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1529915670;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1531408830;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1532915642;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1537512807;This class is not meant to be instantiated;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1539595873;This class is not meant to be instantiated.;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> private AkkaRpcServiceUtils();1539833178;This class is not meant to be instantiated.;private AkkaRpcServiceUtils() {};this,class,is,not,meant,to,be,instantiated;private,akka,rpc,service,utils
AkkaRpcServiceUtils -> public static RpcService createRpcService( 			String hostname, 			int port, 			Configuration configuration) throws Exception;1539595873;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(_			String hostname,_			int port,_			Configuration configuration) throws Exception {_		final ActorSystem actorSystem = BootstrapTools.startActorSystem(configuration, hostname, port, LOG)__		return instantiateAkkaRpcService(configuration, actorSystem)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,final,actor,system,actor,system,bootstrap,tools,start,actor,system,configuration,hostname,port,log,return,instantiate,akka,rpc,service,configuration,actor,system
AkkaRpcServiceUtils -> public static RpcService createRpcService( 			String hostname, 			int port, 			Configuration configuration) throws Exception;1539833178;Utility method to create RPC service from configuration and hostname, port.__@param hostname   The hostname/address that describes the TaskManager's data location._@param port           If true, the TaskManager will not initiate the TCP network stack._@param configuration                 The configuration for the TaskManager._@return   The rpc service which is used to start and connect to the TaskManager RpcEndpoint ._@throws IOException      Thrown, if the actor system can not bind to the address_@throws Exception      Thrown is some other error occurs while creating akka actor system;public static RpcService createRpcService(_			String hostname,_			int port,_			Configuration configuration) throws Exception {_		final ActorSystem actorSystem = BootstrapTools.startActorSystem(configuration, hostname, port, LOG)__		return instantiateAkkaRpcService(configuration, actorSystem)__	};utility,method,to,create,rpc,service,from,configuration,and,hostname,port,param,hostname,the,hostname,address,that,describes,the,task,manager,s,data,location,param,port,if,true,the,task,manager,will,not,initiate,the,tcp,network,stack,param,configuration,the,configuration,for,the,task,manager,return,the,rpc,service,which,is,used,to,start,and,connect,to,the,task,manager,rpc,endpoint,throws,ioexception,thrown,if,the,actor,system,can,not,bind,to,the,address,throws,exception,thrown,is,some,other,error,occurs,while,creating,akka,actor,system;public,static,rpc,service,create,rpc,service,string,hostname,int,port,configuration,configuration,throws,exception,final,actor,system,actor,system,bootstrap,tools,start,actor,system,configuration,hostname,port,log,return,instantiate,akka,rpc,service,configuration,actor,system
AkkaRpcServiceUtils -> public static InetSocketAddress createInetSocketAddressFromAkkaURL(String akkaURL) throws Exception;1499358401;Extracts the hostname and the port of the remote actor system from the given Akka URL. The_result is an {@link InetSocketAddress} instance containing the extracted hostname and port. If_the Akka URL does not contain the hostname and port information, e.g. a local Akka URL is_provided, then an {@link Exception} is thrown.__@param akkaURL The URL to extract the host and port from._@return The InetSocketAddress with teh extracted host and port._@throws Exception Thrown, if the given string does not represent a proper url;public static InetSocketAddress createInetSocketAddressFromAkkaURL(String akkaURL) throws Exception {_		return AkkaUtils.getInetSockeAddressFromAkkaURL(akkaURL)__	};extracts,the,hostname,and,the,port,of,the,remote,actor,system,from,the,given,akka,url,the,result,is,an,link,inet,socket,address,instance,containing,the,extracted,hostname,and,port,if,the,akka,url,does,not,contain,the,hostname,and,port,information,e,g,a,local,akka,url,is,provided,then,an,link,exception,is,thrown,param,akka,url,the,url,to,extract,the,host,and,port,from,return,the,inet,socket,address,with,teh,extracted,host,and,port,throws,exception,thrown,if,the,given,string,does,not,represent,a,proper,url;public,static,inet,socket,address,create,inet,socket,address,from,akka,url,string,akka,url,throws,exception,return,akka,utils,get,inet,socke,address,from,akka,url,akka,url
AkkaRpcServiceUtils -> public static InetSocketAddress createInetSocketAddressFromAkkaURL(String akkaURL) throws Exception;1507763843;Extracts the hostname and the port of the remote actor system from the given Akka URL. The_result is an {@link InetSocketAddress} instance containing the extracted hostname and port. If_the Akka URL does not contain the hostname and port information, e.g. a local Akka URL is_provided, then an {@link Exception} is thrown.__@param akkaURL The URL to extract the host and port from._@return The InetSocketAddress with teh extracted host and port._@throws Exception Thrown, if the given string does not represent a proper url;public static InetSocketAddress createInetSocketAddressFromAkkaURL(String akkaURL) throws Exception {_		return AkkaUtils.getInetSockeAddressFromAkkaURL(akkaURL)__	};extracts,the,hostname,and,the,port,of,the,remote,actor,system,from,the,given,akka,url,the,result,is,an,link,inet,socket,address,instance,containing,the,extracted,hostname,and,port,if,the,akka,url,does,not,contain,the,hostname,and,port,information,e,g,a,local,akka,url,is,provided,then,an,link,exception,is,thrown,param,akka,url,the,url,to,extract,the,host,and,port,from,return,the,inet,socket,address,with,teh,extracted,host,and,port,throws,exception,thrown,if,the,given,string,does,not,represent,a,proper,url;public,static,inet,socket,address,create,inet,socket,address,from,akka,url,string,akka,url,throws,exception,return,akka,utils,get,inet,socke,address,from,akka,url,akka,url
