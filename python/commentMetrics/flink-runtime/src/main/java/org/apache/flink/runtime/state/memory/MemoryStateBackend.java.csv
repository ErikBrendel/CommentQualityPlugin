# id;timestamp;commentText;codeText;commentWords;codeWords
MemoryStateBackend -> public static MemoryStateBackend defaultInstance();1445247002;Gets the default instance of this state backend, using the default maximal state size._@return The default instance of this state backend.;public static MemoryStateBackend defaultInstance() {_		return DEFAULT_INSTANCE__	};gets,the,default,instance,of,this,state,backend,using,the,default,maximal,state,size,return,the,default,instance,of,this,state,backend;public,static,memory,state,backend,default,instance,return
MemoryStateBackend -> public static MemoryStateBackend defaultInstance();1445849929;Gets the default instance of this state backend, using the default maximal state size._@return The default instance of this state backend.;public static MemoryStateBackend defaultInstance() {_		return DEFAULT_INSTANCE__	};gets,the,default,instance,of,this,state,backend,using,the,default,maximal,state,size,return,the,default,instance,of,this,state,backend;public,static,memory,state,backend,default,instance,return
MemoryStateBackend -> public static MemoryStateBackend defaultInstance();1448126995;Gets the default instance of this state backend, using the default maximal state size._@return The default instance of this state backend.;public static MemoryStateBackend defaultInstance() {_		return DEFAULT_INSTANCE__	};gets,the,default,instance,of,this,state,backend,using,the,default,maximal,state,size,return,the,default,instance,of,this,state,backend;public,static,memory,state,backend,default,instance,return
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1445247002;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1445849929;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1448126995;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1453721631;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1454939779;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1470847490;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1470909547;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1472464402;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1472680767;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1474462558;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1475571578;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1483656313;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1487264183;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1487350260;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1488534675;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(maxStateSize, false)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,false
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1489497957;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(maxStateSize, false)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,false
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1489501613;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this.maxStateSize = maxStateSize__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,max,state,size
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1508951050;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1509045960;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1510579905;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(maxStateSize, true)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,max,state,size,true
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1515600846;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1517924641;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1530638621;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1530704629;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1539939663;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1550681446;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize);1550863001;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state;public MemoryStateBackend(int maxStateSize) {_		this(null, null, maxStateSize, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state;public,memory,state,backend,int,max,state,size,this,null,null,max,state,size,ternary,boolean,undefined
MemoryStateBackend -> @Override 	public <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception;1445247002;Serialized the given state into bytes using Java serialization and creates a state handle that_can re-create that state.__@param state The state to checkpoint._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that contains the given state serialized as bytes._@throws Exception Thrown, if the serialization fails.;@Override_	public <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_	{_		SerializedStateHandle<S> handle = new SerializedStateHandle<>(state)__		checkSize(handle.getSizeOfSerializedState(), maxStateSize)__		return new SerializedStateHandle<S>(state)__	};serialized,the,given,state,into,bytes,using,java,serialization,and,creates,a,state,handle,that,can,re,create,that,state,param,state,the,state,to,checkpoint,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,contains,the,given,state,serialized,as,bytes,throws,exception,thrown,if,the,serialization,fails;override,public,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception,serialized,state,handle,s,handle,new,serialized,state,handle,state,check,size,handle,get,size,of,serialized,state,max,state,size,return,new,serialized,state,handle,s,state
MemoryStateBackend -> @Override 	public <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception;1445849929;Serialized the given state into bytes using Java serialization and creates a state handle that_can re-create that state.__@param state The state to checkpoint._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that contains the given state serialized as bytes._@throws Exception Thrown, if the serialization fails.;@Override_	public <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_	{_		SerializedStateHandle<S> handle = new SerializedStateHandle<>(state)__		checkSize(handle.getSizeOfSerializedState(), maxStateSize)__		return new SerializedStateHandle<S>(state)__	};serialized,the,given,state,into,bytes,using,java,serialization,and,creates,a,state,handle,that,can,re,create,that,state,param,state,the,state,to,checkpoint,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,contains,the,given,state,serialized,as,bytes,throws,exception,thrown,if,the,serialization,fails;override,public,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception,serialized,state,handle,s,handle,new,serialized,state,handle,state,check,size,handle,get,size,of,serialized,state,max,state,size,return,new,serialized,state,handle,s,state
MemoryStateBackend -> @Override 	public <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception;1448126995;Serialized the given state into bytes using Java serialization and creates a state handle that_can re-create that state.__@param state The state to checkpoint._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that contains the given state serialized as bytes._@throws Exception Thrown, if the serialization fails.;@Override_	public <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_	{_		SerializedStateHandle<S> handle = new SerializedStateHandle<>(state)__		checkSize(handle.getSizeOfSerializedState(), maxStateSize)__		return new SerializedStateHandle<S>(state)__	};serialized,the,given,state,into,bytes,using,java,serialization,and,creates,a,state,handle,that,can,re,create,that,state,param,state,the,state,to,checkpoint,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,contains,the,given,state,serialized,as,bytes,throws,exception,thrown,if,the,serialization,fails;override,public,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception,serialized,state,handle,s,handle,new,serialized,state,handle,state,check,size,handle,get,size,of,serialized,state,max,state,size,return,new,serialized,state,handle,s,state
MemoryStateBackend -> @Override 	public <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception;1453721631;Serialized the given state into bytes using Java serialization and creates a state handle that_can re-create that state.__@param state The state to checkpoint._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that contains the given state serialized as bytes._@throws Exception Thrown, if the serialization fails.;@Override_	public <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_	{_		SerializedStateHandle<S> handle = new SerializedStateHandle<>(state)__		checkSize(handle.getSizeOfSerializedState(), maxStateSize)__		return new SerializedStateHandle<S>(state)__	};serialized,the,given,state,into,bytes,using,java,serialization,and,creates,a,state,handle,that,can,re,create,that,state,param,state,the,state,to,checkpoint,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,contains,the,given,state,serialized,as,bytes,throws,exception,thrown,if,the,serialization,fails;override,public,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception,serialized,state,handle,s,handle,new,serialized,state,handle,state,check,size,handle,get,size,of,serialized,state,max,state,size,return,new,serialized,state,handle,s,state
MemoryStateBackend -> @Override 	public <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception;1454939779;Serialized the given state into bytes using Java serialization and creates a state handle that_can re-create that state.__@param state The state to checkpoint._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that contains the given state serialized as bytes._@throws Exception Thrown, if the serialization fails.;@Override_	public <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_	{_		SerializedStateHandle<S> handle = new SerializedStateHandle<>(state)__		checkSize(handle.getSizeOfSerializedState(), maxStateSize)__		return new SerializedStateHandle<S>(state)__	};serialized,the,given,state,into,bytes,using,java,serialization,and,creates,a,state,handle,that,can,re,create,that,state,param,state,the,state,to,checkpoint,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,contains,the,given,state,serialized,as,bytes,throws,exception,thrown,if,the,serialization,fails;override,public,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception,serialized,state,handle,s,handle,new,serialized,state,handle,state,check,size,handle,get,size,of,serialized,state,max,state,size,return,new,serialized,state,handle,s,state
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration, ClassLoader classLoader);1550681446;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration_@param classLoader The class loader;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration, ClassLoader classLoader) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration,param,class,loader,the,class,loader;private,memory,state,backend,memory,state,backend,original,configuration,configuration,class,loader,class,loader,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration, ClassLoader classLoader);1550863001;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration_@param classLoader The class loader;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration, ClassLoader classLoader) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration,param,class,loader,the,class,loader;private,memory,state,backend,memory,state,backend,original,configuration,configuration,class,loader,class,loader,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1488534675;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this.maxStateSize = maxStateSize__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1489497957;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this.maxStateSize = maxStateSize__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1508951050;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1509045960;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1510579905;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this.maxStateSize = maxStateSize__		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1515600846;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1517924641;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1530638621;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1530704629;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1539939663;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1550681446;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots);1550863001;Creates a new memory state backend that accepts states whose serialized forms are_up to the given number of bytes and that uses asynchronous snashots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param maxStateSize The maximal size of the serialized state_@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(int maxStateSize, boolean asynchronousSnapshots) {_		this(null, null, maxStateSize, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,given,number,of,bytes,and,that,uses,asynchronous,snashots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,int,max,state,size,boolean,asynchronous,snapshots,this,null,null,max,state,size,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend();1445247002;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1445849929;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1448126995;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1453721631;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1454939779;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1470847490;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1470909547;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1472464402;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1472680767;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1474462558;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1475571578;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1483656313;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1487264183;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1487350260;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1488534675;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1489497957;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1489501613;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1508951050;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1509045960;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1510579905;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).;public MemoryStateBackend() {_		this(DEFAULT_MAX_STATE_SIZE)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb;public,memory,state,backend,this
MemoryStateBackend -> public MemoryStateBackend();1515600846;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1517924641;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1530638621;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1530704629;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1539939663;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1550681446;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend();1550863001;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.;public MemoryStateBackend() {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration;public,memory,state,backend,this,null,null,ternary,boolean,undefined
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config, ClassLoader classLoader);1550681446;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config The configuration_@param classLoader The class loader_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new MemoryStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,param,class,loader,the,class,loader,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,class,loader,class,loader,return,new,memory,state,backend,this,config,class,loader
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config, ClassLoader classLoader);1550863001;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config The configuration_@param classLoader The class loader_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config, ClassLoader classLoader) {_		return new MemoryStateBackend(this, config, classLoader)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,param,class,loader,the,class,loader,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,class,loader,class,loader,return,new,memory,state,backend,this,config,class,loader
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1488534675;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(DEFAULT_MAX_STATE_SIZE, asynchronousSnapshots)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1489497957;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(DEFAULT_MAX_STATE_SIZE, asynchronousSnapshots)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1508951050;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1509045960;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1510579905;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB).__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(DEFAULT_MAX_STATE_SIZE, asynchronousSnapshots)__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1515600846;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1517924641;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1530638621;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1530704629;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1539939663;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1550681446;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend(boolean asynchronousSnapshots);1550863001;Creates a new memory state backend that accepts states whose serialized forms are_up to the default state size (5 MB). The state backend uses asynchronous snapshots_or synchronous snapshots as configured.__<p>Checkpoint and default savepoint locations are used as specified in the_runtime configuration.__@param asynchronousSnapshots Switch to enable asynchronous snapshots.;public MemoryStateBackend(boolean asynchronousSnapshots) {_		this(null, null, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.fromBoolean(asynchronousSnapshots))__	};creates,a,new,memory,state,backend,that,accepts,states,whose,serialized,forms,are,up,to,the,default,state,size,5,mb,the,state,backend,uses,asynchronous,snapshots,or,synchronous,snapshots,as,configured,p,checkpoint,and,default,savepoint,locations,are,used,as,specified,in,the,runtime,configuration,param,asynchronous,snapshots,switch,to,enable,asynchronous,snapshots;public,memory,state,backend,boolean,asynchronous,snapshots,this,null,null,ternary,boolean,from,boolean,asynchronous,snapshots
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1508951050;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1509045960;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1515600846;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1517924641;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1530638621;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1530704629;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> private MemoryStateBackend(MemoryStateBackend original, Configuration configuration);1539939663;Private constructor that creates a re-configured copy of the state backend.__@param original The state backend to re-configure_@param configuration The configuration;private MemoryStateBackend(MemoryStateBackend original, Configuration configuration) {_		super(original.getCheckpointPath(), original.getSavepointPath(), configuration)___		this.maxStateSize = original.maxStateSize___		_		_		this.asynchronousSnapshots = original.asynchronousSnapshots.resolveUndefined(_				configuration.getBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS))__	};private,constructor,that,creates,a,re,configured,copy,of,the,state,backend,param,original,the,state,backend,to,re,configure,param,configuration,the,configuration;private,memory,state,backend,memory,state,backend,original,configuration,configuration,super,original,get,checkpoint,path,original,get,savepoint,path,configuration,this,max,state,size,original,max,state,size,this,asynchronous,snapshots,original,asynchronous,snapshots,resolve,undefined,configuration,get,boolean,checkpointing,options
MemoryStateBackend -> public int getMaxStateSize();1508951050;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1509045960;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1515600846;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1517924641;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1530638621;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1530704629;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1539939663;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1550681446;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public int getMaxStateSize();1550863001;Gets the maximum size that an individual state can have, as configured in the_constructor (by default {@value #DEFAULT_MAX_STATE_SIZE}).__@return The maximum size that an individual state can have;public int getMaxStateSize() {_		return maxStateSize__	};gets,the,maximum,size,that,an,individual,state,can,have,as,configured,in,the,constructor,by,default,value,return,the,maximum,size,that,an,individual,state,can,have;public,int,get,max,state,size,return,max,state,size
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1508951050;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1509045960;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1515600846;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1517924641;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1530638621;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1530704629;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1539939663;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1550681446;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> public boolean isUsingAsynchronousSnapshots();1550863001;Gets whether the key/value data structures are asynchronously snapshotted.__<p>If not explicitly configured, this is the default value of_{@link CheckpointingOptions#ASYNC_SNAPSHOTS}.;public boolean isUsingAsynchronousSnapshots() {_		return asynchronousSnapshots.getOrDefault(CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue())__	};gets,whether,the,key,value,data,structures,are,asynchronously,snapshotted,p,if,not,explicitly,configured,this,is,the,default,value,of,link,checkpointing,options;public,boolean,is,using,asynchronous,snapshots,return,asynchronous,snapshots,get,or,default,checkpointing,options,default,value
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1508951050;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1509045960;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1515600846;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1517924641;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1530638621;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1530704629;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> @Override 	public MemoryStateBackend configure(Configuration config);1539939663;Creates a copy of this state backend that uses the values defined in the configuration_for fields where that were not specified in this state backend.__@param config the configuration_@return The re-configured variant of the state backend;@Override_	public MemoryStateBackend configure(Configuration config) {_		return new MemoryStateBackend(this, config)__	};creates,a,copy,of,this,state,backend,that,uses,the,values,defined,in,the,configuration,for,fields,where,that,were,not,specified,in,this,state,backend,param,config,the,configuration,return,the,re,configured,variant,of,the,state,backend;override,public,memory,state,backend,configure,configuration,config,return,new,memory,state,backend,this,config
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1508951050;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1509045960;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1515600846;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1517924641;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1530638621;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1530704629;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1539939663;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1550681446;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath);1550863001;Creates a new MemoryStateBackend, setting optionally the path to persist checkpoint metadata_to, and to persist savepoints to.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used.;public MemoryStateBackend(@Nullable String checkpointPath, @Nullable String savepointPath) {_		this(checkpointPath, savepointPath, DEFAULT_MAX_STATE_SIZE, TernaryBoolean.UNDEFINED)__	};creates,a,new,memory,state,backend,setting,optionally,the,path,to,persist,checkpoint,metadata,to,and,to,persist,savepoints,to,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,this,checkpoint,path,savepoint,path,ternary,boolean,undefined
MemoryStateBackend -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1445247002;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemoryStateBackend -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1445849929;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemoryStateBackend -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1448126995;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemoryStateBackend -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1453721631;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemoryStateBackend -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1454939779;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemoryStateBackend -> MemoryCheckpointOutputStream -> public byte[] closeAndGetBytes() throws IOException;1470909547;Closes the stream and returns the byte array containing the stream's data._@return The byte array containing the stream's data._@throws IOException Thrown if the size of the data exceeds the maximal;public byte[] closeAndGetBytes() throws IOException {_			if (!closed) {_				checkSize(os.size(), maxSize)__				byte[] bytes = os.toByteArray()__				close()__				return bytes__			}_			else {_				throw new IllegalStateException("stream has already been closed")__			}_		};closes,the,stream,and,returns,the,byte,array,containing,the,stream,s,data,return,the,byte,array,containing,the,stream,s,data,throws,ioexception,thrown,if,the,size,of,the,data,exceeds,the,maximal;public,byte,close,and,get,bytes,throws,ioexception,if,closed,check,size,os,size,max,size,byte,bytes,os,to,byte,array,close,return,bytes,else,throw,new,illegal,state,exception,stream,has,already,been,closed
MemoryStateBackend -> public static MemoryStateBackend create();1453721631;Gets the default instance of this state backend, using the default maximal state size._@return The default instance of this state backend.;public static MemoryStateBackend create() {_		return new MemoryStateBackend()__	};gets,the,default,instance,of,this,state,backend,using,the,default,maximal,state,size,return,the,default,instance,of,this,state,backend;public,static,memory,state,backend,create,return,new,memory,state,backend
MemoryStateBackend -> public static MemoryStateBackend create();1454939779;Gets the default instance of this state backend, using the default maximal state size._@return The default instance of this state backend.;public static MemoryStateBackend create() {_		return new MemoryStateBackend()__	};gets,the,default,instance,of,this,state,backend,using,the,default,maximal,state,size,return,the,default,instance,of,this,state,backend;public,static,memory,state,backend,create,return,new,memory,state,backend
MemoryStateBackend -> public static MemoryStateBackend create();1470909547;Gets the default instance of this state backend, using the default maximal state size._@return The default instance of this state backend.;public static MemoryStateBackend create() {_		return new MemoryStateBackend()__	};gets,the,default,instance,of,this,state,backend,using,the,default,maximal,state,size,return,the,default,instance,of,this,state,backend;public,static,memory,state,backend,create,return,new,memory,state,backend
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1508951050;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1509045960;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1515600846;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1517924641;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1530638621;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1530704629;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1539939663;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1550681446;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
MemoryStateBackend -> public MemoryStateBackend( 			@Nullable String checkpointPath, 			@Nullable String savepointPath, 			int maxStateSize, 			TernaryBoolean asynchronousSnapshots);1550863001;Creates a new MemoryStateBackend, setting optionally the paths to persist checkpoint metadata_and savepoints to, as well as configuring state thresholds and asynchronous operations.__<p><b>WARNING:</b> Increasing the size of this value beyond the default value_({@value #DEFAULT_MAX_STATE_SIZE}) should be done with care._The checkpointed state needs to be send to the JobManager via limited size RPC messages, and there_and the JobManager needs to be able to hold all aggregated state in its memory.__@param checkpointPath The path to write checkpoint metadata to. If null, the value from_the runtime configuration will be used._@param savepointPath  The path to write savepoints to. If null, the value from_the runtime configuration will be used._@param maxStateSize   The maximal size of the serialized state._@param asynchronousSnapshots Flag to switch between synchronous and asynchronous_snapshot mode. If null, the value configured in the_runtime configuration will be used.;public MemoryStateBackend(_			@Nullable String checkpointPath,_			@Nullable String savepointPath,_			int maxStateSize,_			TernaryBoolean asynchronousSnapshots) {__		super(checkpointPath == null ? null : new Path(checkpointPath),_				savepointPath == null ? null : new Path(savepointPath))___		checkArgument(maxStateSize > 0, "maxStateSize must be > 0")__		this.maxStateSize = maxStateSize___		this.asynchronousSnapshots = asynchronousSnapshots__	};creates,a,new,memory,state,backend,setting,optionally,the,paths,to,persist,checkpoint,metadata,and,savepoints,to,as,well,as,configuring,state,thresholds,and,asynchronous,operations,p,b,warning,b,increasing,the,size,of,this,value,beyond,the,default,value,value,should,be,done,with,care,the,checkpointed,state,needs,to,be,send,to,the,job,manager,via,limited,size,rpc,messages,and,there,and,the,job,manager,needs,to,be,able,to,hold,all,aggregated,state,in,its,memory,param,checkpoint,path,the,path,to,write,checkpoint,metadata,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,savepoint,path,the,path,to,write,savepoints,to,if,null,the,value,from,the,runtime,configuration,will,be,used,param,max,state,size,the,maximal,size,of,the,serialized,state,param,asynchronous,snapshots,flag,to,switch,between,synchronous,and,asynchronous,snapshot,mode,if,null,the,value,configured,in,the,runtime,configuration,will,be,used;public,memory,state,backend,nullable,string,checkpoint,path,nullable,string,savepoint,path,int,max,state,size,ternary,boolean,asynchronous,snapshots,super,checkpoint,path,null,null,new,path,checkpoint,path,savepoint,path,null,null,new,path,savepoint,path,check,argument,max,state,size,0,max,state,size,must,be,0,this,max,state,size,max,state,size,this,asynchronous,snapshots,asynchronous,snapshots
